
Home_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08003cf4  08003cf4  00004cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f30  08003f30  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f30  08003f30  00004f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f38  08003f38  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f38  08003f38  00004f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f3c  08003f3c  00004f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f40  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001028  2000005c  08003f9c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001084  08003f9c  00005084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7ea  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273b  00000000  00000000  0001386f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00015fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a25  00000000  00000000  00016cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018863  00000000  00000000  000176fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ef8  00000000  00000000  0002ff60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087717  00000000  00000000  00041e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c956f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a64  00000000  00000000  000c95b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000cd018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cdc 	.word	0x08003cdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003cdc 	.word	0x08003cdc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000166:	2101      	movs	r1, #1
 8000168:	6878      	ldr	r0, [r7, #4]
 800016a:	f000 f8d4 	bl	8000316 <LoRa_read>
 800016e:	4603      	mov	r3, r0
 8000170:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000172:	7bbb      	ldrb	r3, [r7, #14]
 8000174:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d107      	bne.n	800018c <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800017c:	7bbb      	ldrb	r3, [r7, #14]
 800017e:	f023 0307 	bic.w	r3, r3, #7
 8000182:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2200      	movs	r2, #0
 8000188:	61da      	str	r2, [r3, #28]
 800018a:	e03e      	b.n	800020a <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d10c      	bne.n	80001ac <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000196:	f023 0307 	bic.w	r3, r3, #7
 800019a:	b25b      	sxtb	r3, r3
 800019c:	f043 0301 	orr.w	r3, r3, #1
 80001a0:	b25b      	sxtb	r3, r3
 80001a2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2201      	movs	r2, #1
 80001a8:	61da      	str	r2, [r3, #28]
 80001aa:	e02e      	b.n	800020a <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	2b03      	cmp	r3, #3
 80001b0:	d10c      	bne.n	80001cc <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80001b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80001b6:	f023 0307 	bic.w	r3, r3, #7
 80001ba:	b25b      	sxtb	r3, r3
 80001bc:	f043 0303 	orr.w	r3, r3, #3
 80001c0:	b25b      	sxtb	r3, r3
 80001c2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2203      	movs	r2, #3
 80001c8:	61da      	str	r2, [r3, #28]
 80001ca:	e01e      	b.n	800020a <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	2b05      	cmp	r3, #5
 80001d0:	d10c      	bne.n	80001ec <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80001d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80001d6:	f023 0307 	bic.w	r3, r3, #7
 80001da:	b25b      	sxtb	r3, r3
 80001dc:	f043 0305 	orr.w	r3, r3, #5
 80001e0:	b25b      	sxtb	r3, r3
 80001e2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2205      	movs	r2, #5
 80001e8:	61da      	str	r2, [r3, #28]
 80001ea:	e00e      	b.n	800020a <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	2b06      	cmp	r3, #6
 80001f0:	d10b      	bne.n	800020a <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80001f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80001f6:	f023 0307 	bic.w	r3, r3, #7
 80001fa:	b25b      	sxtb	r3, r3
 80001fc:	f043 0306 	orr.w	r3, r3, #6
 8000200:	b25b      	sxtb	r3, r3
 8000202:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2206      	movs	r2, #6
 8000208:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800020a:	7bfb      	ldrb	r3, [r7, #15]
 800020c:	461a      	mov	r2, r3
 800020e:	2101      	movs	r1, #1
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f000 f89a 	bl	800034a <LoRa_write>
	//HAL_Delay(10);
}
 8000216:	bf00      	nop
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}

0800021e <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800021e:	b580      	push	{r7, lr}
 8000220:	b084      	sub	sp, #16
 8000222:	af00      	add	r7, sp, #0
 8000224:	60f8      	str	r0, [r7, #12]
 8000226:	60b9      	str	r1, [r7, #8]
 8000228:	603b      	str	r3, [r7, #0]
 800022a:	4613      	mov	r3, r2
 800022c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	6818      	ldr	r0, [r3, #0]
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	889b      	ldrh	r3, [r3, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	4619      	mov	r1, r3
 800023a:	f001 fa7f 	bl	800173c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	6998      	ldr	r0, [r3, #24]
 8000242:	88fa      	ldrh	r2, [r7, #6]
 8000244:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000248:	68b9      	ldr	r1, [r7, #8]
 800024a:	f002 f899 	bl	8002380 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800024e:	bf00      	nop
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4618      	mov	r0, r3
 8000256:	f002 fc99 	bl	8002b8c <HAL_SPI_GetState>
 800025a:	4603      	mov	r3, r0
 800025c:	2b01      	cmp	r3, #1
 800025e:	d1f7      	bne.n	8000250 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	6998      	ldr	r0, [r3, #24]
 8000264:	8b3a      	ldrh	r2, [r7, #24]
 8000266:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800026a:	6839      	ldr	r1, [r7, #0]
 800026c:	f002 f9cc 	bl	8002608 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000270:	bf00      	nop
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4618      	mov	r0, r3
 8000278:	f002 fc88 	bl	8002b8c <HAL_SPI_GetState>
 800027c:	4603      	mov	r3, r0
 800027e:	2b01      	cmp	r3, #1
 8000280:	d1f7      	bne.n	8000272 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	6818      	ldr	r0, [r3, #0]
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	889b      	ldrh	r3, [r3, #4]
 800028a:	2201      	movs	r2, #1
 800028c:	4619      	mov	r1, r3
 800028e:	f001 fa55 	bl	800173c <HAL_GPIO_WritePin>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800029a:	b580      	push	{r7, lr}
 800029c:	b084      	sub	sp, #16
 800029e:	af00      	add	r7, sp, #0
 80002a0:	60f8      	str	r0, [r7, #12]
 80002a2:	60b9      	str	r1, [r7, #8]
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	4613      	mov	r3, r2
 80002a8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	6818      	ldr	r0, [r3, #0]
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	889b      	ldrh	r3, [r3, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	f001 fa41 	bl	800173c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	6998      	ldr	r0, [r3, #24]
 80002be:	88fa      	ldrh	r2, [r7, #6]
 80002c0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80002c4:	68b9      	ldr	r1, [r7, #8]
 80002c6:	f002 f85b 	bl	8002380 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80002ca:	bf00      	nop
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 fc5b 	bl	8002b8c <HAL_SPI_GetState>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d1f7      	bne.n	80002cc <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	6998      	ldr	r0, [r3, #24]
 80002e0:	8b3a      	ldrh	r2, [r7, #24]
 80002e2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80002e6:	6839      	ldr	r1, [r7, #0]
 80002e8:	f002 f84a 	bl	8002380 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80002ec:	bf00      	nop
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 fc4a 	bl	8002b8c <HAL_SPI_GetState>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d1f7      	bne.n	80002ee <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	6818      	ldr	r0, [r3, #0]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	889b      	ldrh	r3, [r3, #4]
 8000306:	2201      	movs	r2, #1
 8000308:	4619      	mov	r1, r3
 800030a:	f001 fa17 	bl	800173c <HAL_GPIO_WritePin>
}
 800030e:	bf00      	nop
 8000310:	3710      	adds	r7, #16
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000316:	b580      	push	{r7, lr}
 8000318:	b086      	sub	sp, #24
 800031a:	af02      	add	r7, sp, #8
 800031c:	6078      	str	r0, [r7, #4]
 800031e:	460b      	mov	r3, r1
 8000320:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000322:	78fb      	ldrb	r3, [r7, #3]
 8000324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000328:	b2db      	uxtb	r3, r3
 800032a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800032c:	f107 030f 	add.w	r3, r7, #15
 8000330:	f107 010e 	add.w	r1, r7, #14
 8000334:	2201      	movs	r2, #1
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f7ff ff6f 	bl	800021e <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000340:	7bfb      	ldrb	r3, [r7, #15]
}
 8000342:	4618      	mov	r0, r3
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800034a:	b580      	push	{r7, lr}
 800034c:	b086      	sub	sp, #24
 800034e:	af02      	add	r7, sp, #8
 8000350:	6078      	str	r0, [r7, #4]
 8000352:	460b      	mov	r3, r1
 8000354:	70fb      	strb	r3, [r7, #3]
 8000356:	4613      	mov	r3, r2
 8000358:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000360:	b2db      	uxtb	r3, r3
 8000362:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000364:	78bb      	ldrb	r3, [r7, #2]
 8000366:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000368:	f107 030f 	add.w	r3, r7, #15
 800036c:	f107 010e 	add.w	r1, r7, #14
 8000370:	2201      	movs	r2, #1
 8000372:	9200      	str	r2, [sp, #0]
 8000374:	2201      	movs	r2, #1
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f7ff ff8f 	bl	800029a <LoRa_writeReg>
	//HAL_Delay(5);
}
 800037c:	bf00      	nop
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b089      	sub	sp, #36	@ 0x24
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	4613      	mov	r3, r2
 8000390:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
 800039a:	e007      	b.n	80003ac <LoRa_receive+0x28>
		data[i]=0;
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	68ba      	ldr	r2, [r7, #8]
 80003a0:	4413      	add	r3, r2
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80003a6:	69bb      	ldr	r3, [r7, #24]
 80003a8:	3301      	adds	r3, #1
 80003aa:	61bb      	str	r3, [r7, #24]
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	69ba      	ldr	r2, [r7, #24]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	dbf3      	blt.n	800039c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80003b4:	2101      	movs	r1, #1
 80003b6:	68f8      	ldr	r0, [r7, #12]
 80003b8:	f7ff fed0 	bl	800015c <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80003bc:	2112      	movs	r1, #18
 80003be:	68f8      	ldr	r0, [r7, #12]
 80003c0:	f7ff ffa9 	bl	8000316 <LoRa_read>
 80003c4:	4603      	mov	r3, r0
 80003c6:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80003c8:	7cfb      	ldrb	r3, [r7, #19]
 80003ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d02f      	beq.n	8000432 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80003d2:	22ff      	movs	r2, #255	@ 0xff
 80003d4:	2112      	movs	r1, #18
 80003d6:	68f8      	ldr	r0, [r7, #12]
 80003d8:	f7ff ffb7 	bl	800034a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80003dc:	2113      	movs	r1, #19
 80003de:	68f8      	ldr	r0, [r7, #12]
 80003e0:	f7ff ff99 	bl	8000316 <LoRa_read>
 80003e4:	4603      	mov	r3, r0
 80003e6:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80003e8:	2110      	movs	r1, #16
 80003ea:	68f8      	ldr	r0, [r7, #12]
 80003ec:	f7ff ff93 	bl	8000316 <LoRa_read>
 80003f0:	4603      	mov	r3, r0
 80003f2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80003f4:	7cfb      	ldrb	r3, [r7, #19]
 80003f6:	461a      	mov	r2, r3
 80003f8:	210d      	movs	r1, #13
 80003fa:	68f8      	ldr	r0, [r7, #12]
 80003fc:	f7ff ffa5 	bl	800034a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000400:	7cba      	ldrb	r2, [r7, #18]
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	4293      	cmp	r3, r2
 8000406:	bf28      	it	cs
 8000408:	4613      	movcs	r3, r2
 800040a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
 8000410:	e00b      	b.n	800042a <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	68ba      	ldr	r2, [r7, #8]
 8000416:	18d4      	adds	r4, r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f7ff ff7b 	bl	8000316 <LoRa_read>
 8000420:	4603      	mov	r3, r0
 8000422:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	3301      	adds	r3, #1
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	7ffb      	ldrb	r3, [r7, #31]
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	429a      	cmp	r2, r3
 8000430:	dbef      	blt.n	8000412 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000432:	2105      	movs	r1, #5
 8000434:	68f8      	ldr	r0, [r7, #12]
 8000436:	f7ff fe91 	bl	800015c <LoRa_gotoMode>
    return min;
 800043a:	7ffb      	ldrb	r3, [r7, #31]
}
 800043c:	4618      	mov	r0, r3
 800043e:	3724      	adds	r7, #36	@ 0x24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd90      	pop	{r4, r7, pc}

08000444 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2203      	movs	r2, #3
 8000450:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2200      	movs	r2, #0
 8000456:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2203      	movs	r2, #3
 800045c:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2203      	movs	r2, #3
 8000462:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2203      	movs	r2, #3
 8000468:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2203      	movs	r2, #3
 800046e:	715a      	strb	r2, [r3, #5]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <newEsp01s>:



// restart and connect to defualt wifi

Esp01s newEsp01s(UART_HandleTypeDef* _UART){
 800047a:	b580      	push	{r7, lr}
 800047c:	f6ad 0d58 	subw	sp, sp, #2136	@ 0x858
 8000480:	af00      	add	r7, sp, #0
 8000482:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8000486:	f6a3 0354 	subw	r3, r3, #2132	@ 0x854
 800048a:	6018      	str	r0, [r3, #0]
 800048c:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8000490:	f6a3 0358 	subw	r3, r3, #2136	@ 0x858
 8000494:	6019      	str	r1, [r3, #0]
	Esp01s new_ESP;
	new_ESP.esp_uart = _UART;
 8000496:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800049a:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 800049e:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 80004a2:	f6a2 0258 	subw	r2, r2, #2136	@ 0x858
 80004a6:	6812      	ldr	r2, [r2, #0]
 80004a8:	f8c3 2604 	str.w	r2, [r3, #1540]	@ 0x604
	new_ESP.RxSize = 512;
 80004ac:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80004b0:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 80004b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004b8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
	memset(new_ESP.RxBuffer,0,sizeof(new_ESP.RxBuffer));
 80004bc:	f107 030c 	add.w	r3, r7, #12
 80004c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80004c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 ff52 	bl	8003374 <memset>
//	new_ESP->server_ip = "192.168.1.2";
//	new_ESP->server_port = "8000";


	// return element with default values
	return new_ESP;
 80004d0:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80004d4:	f6a3 0354 	subw	r3, r3, #2132	@ 0x854
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80004de:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 80004e2:	4610      	mov	r0, r2
 80004e4:	4619      	mov	r1, r3
 80004e6:	f640 034c 	movw	r3, #2124	@ 0x84c
 80004ea:	461a      	mov	r2, r3
 80004ec:	f002 ff9a 	bl	8003424 <memcpy>
}
 80004f0:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80004f4:	f6a3 0354 	subw	r3, r3, #2132	@ 0x854
 80004f8:	6818      	ldr	r0, [r3, #0]
 80004fa:	f607 0758 	addw	r7, r7, #2136	@ 0x858
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000518:	4b42      	ldr	r3, [pc, #264]	@ (8000624 <MX_GPIO_Init+0x120>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a41      	ldr	r2, [pc, #260]	@ (8000624 <MX_GPIO_Init+0x120>)
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b3f      	ldr	r3, [pc, #252]	@ (8000624 <MX_GPIO_Init+0x120>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0310 	and.w	r3, r3, #16
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000530:	4b3c      	ldr	r3, [pc, #240]	@ (8000624 <MX_GPIO_Init+0x120>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a3b      	ldr	r2, [pc, #236]	@ (8000624 <MX_GPIO_Init+0x120>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b39      	ldr	r3, [pc, #228]	@ (8000624 <MX_GPIO_Init+0x120>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b36      	ldr	r3, [pc, #216]	@ (8000624 <MX_GPIO_Init+0x120>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a35      	ldr	r2, [pc, #212]	@ (8000624 <MX_GPIO_Init+0x120>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b33      	ldr	r3, [pc, #204]	@ (8000624 <MX_GPIO_Init+0x120>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b30      	ldr	r3, [pc, #192]	@ (8000624 <MX_GPIO_Init+0x120>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a2f      	ldr	r2, [pc, #188]	@ (8000624 <MX_GPIO_Init+0x120>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b2d      	ldr	r3, [pc, #180]	@ (8000624 <MX_GPIO_Init+0x120>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800057e:	482a      	ldr	r0, [pc, #168]	@ (8000628 <MX_GPIO_Init+0x124>)
 8000580:	f001 f8dc 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|ESP_01S_RST_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800058a:	4828      	ldr	r0, [pc, #160]	@ (800062c <MX_GPIO_Init+0x128>)
 800058c:	f001 f8d6 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	4826      	ldr	r0, [pc, #152]	@ (8000630 <MX_GPIO_Init+0x12c>)
 8000596:	f001 f8d1 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800059a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	481d      	ldr	r0, [pc, #116]	@ (8000628 <MX_GPIO_Init+0x124>)
 80005b4:	f000 ff3e 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|ESP_01S_RST_Pin;
 80005b8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	4816      	ldr	r0, [pc, #88]	@ (800062c <MX_GPIO_Init+0x128>)
 80005d2:	f000 ff2f 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 80005d6:	2301      	movs	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4619      	mov	r1, r3
 80005ec:	4810      	ldr	r0, [pc, #64]	@ (8000630 <MX_GPIO_Init+0x12c>)
 80005ee:	f000 ff21 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_GPIO_Init+0x130>)
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	480a      	ldr	r0, [pc, #40]	@ (8000630 <MX_GPIO_Init+0x12c>)
 8000606:	f000 ff15 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2007      	movs	r0, #7
 8000610:	f000 fed9 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000614:	2007      	movs	r0, #7
 8000616:	f000 fef2 	bl	80013fe <HAL_NVIC_EnableIRQ>

}
 800061a:	bf00      	nop
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	40011000 	.word	0x40011000
 800062c:	40010800 	.word	0x40010800
 8000630:	40010c00 	.word	0x40010c00
 8000634:	10110000 	.word	0x10110000

08000638 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <MX_I2C1_Init+0x50>)
 800063e:	4a13      	ldr	r2, [pc, #76]	@ (800068c <MX_I2C1_Init+0x54>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000644:	4a12      	ldr	r2, [pc, #72]	@ (8000690 <MX_I2C1_Init+0x58>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000656:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800065a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000676:	f001 f8ab 	bl	80017d0 <HAL_I2C_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000680:	f000 fb5e 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000078 	.word	0x20000078
 800068c:	40005400 	.word	0x40005400
 8000690:	000186a0 	.word	0x000186a0

08000694 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a15      	ldr	r2, [pc, #84]	@ (8000704 <HAL_I2C_MspInit+0x70>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d123      	bne.n	80006fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <HAL_I2C_MspInit+0x74>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <HAL_I2C_MspInit+0x74>)
 80006ba:	f043 0308 	orr.w	r3, r3, #8
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <HAL_I2C_MspInit+0x74>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0308 	and.w	r3, r3, #8
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 80006cc:	23c0      	movs	r3, #192	@ 0xc0
 80006ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d0:	2312      	movs	r3, #18
 80006d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	480b      	ldr	r0, [pc, #44]	@ (800070c <HAL_I2C_MspInit+0x78>)
 80006e0:	f000 fea8 	bl	8001434 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <HAL_I2C_MspInit+0x74>)
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	4a07      	ldr	r2, [pc, #28]	@ (8000708 <HAL_I2C_MspInit+0x74>)
 80006ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006ee:	61d3      	str	r3, [r2, #28]
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_I2C_MspInit+0x74>)
 80006f2:	69db      	ldr	r3, [r3, #28]
 80006f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40005400 	.word	0x40005400
 8000708:	40021000 	.word	0x40021000
 800070c:	40010c00 	.word	0x40010c00

08000710 <clearBuffers.0>:

//  esp_setup(&Esp);



  void clearBuffers(){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	f8c7 c004 	str.w	ip, [r7, #4]
	  memset(rxBuffer,0,sizeof(rxBuffer));
 800071a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800071e:	2100      	movs	r1, #0
 8000720:	4808      	ldr	r0, [pc, #32]	@ (8000744 <clearBuffers.0+0x34>)
 8000722:	f002 fe27 	bl	8003374 <memset>
	  memset(ATcommand,0,sizeof(ATcommand));
 8000726:	2296      	movs	r2, #150	@ 0x96
 8000728:	2100      	movs	r1, #0
 800072a:	4807      	ldr	r0, [pc, #28]	@ (8000748 <clearBuffers.0+0x38>)
 800072c:	f002 fe22 	bl	8003374 <memset>
	  memset(toPost,0,sizeof(toPost));
 8000730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000734:	2100      	movs	r1, #0
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <clearBuffers.0+0x3c>)
 8000738:	f002 fe1c 	bl	8003374 <memset>
  }
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000c90 	.word	0x20000c90
 8000748:	200009f8 	.word	0x200009f8
 800074c:	20000a90 	.word	0x20000a90

08000750 <main>:
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	f6ad 0d5c 	subw	sp, sp, #2140	@ 0x85c
 8000756:	af00      	add	r7, sp, #0
int main(void)
 8000758:	f607 0368 	addw	r3, r7, #2152	@ 0x868
 800075c:	f8c7 3854 	str.w	r3, [r7, #2132]	@ 0x854
  HAL_Init();
 8000760:	f000 fcd4 	bl	800110c <HAL_Init>
  SystemClock_Config();
 8000764:	f000 fa8c 	bl	8000c80 <SystemClock_Config>
  MX_GPIO_Init();
 8000768:	f7ff fecc 	bl	8000504 <MX_GPIO_Init>
  MX_SPI1_Init();
 800076c:	f000 fb10 	bl	8000d90 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000770:	f000 fc30 	bl	8000fd4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000774:	f7ff ff60 	bl	8000638 <MX_I2C1_Init>
  bmp280_init_default_params(&bmp280.params);
 8000778:	489e      	ldr	r0, [pc, #632]	@ (80009f4 <main+0x2a4>)
 800077a:	f7ff fe63 	bl	8000444 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 800077e:	4b9e      	ldr	r3, [pc, #632]	@ (80009f8 <main+0x2a8>)
 8000780:	2276      	movs	r2, #118	@ 0x76
 8000782:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8000784:	4b9c      	ldr	r3, [pc, #624]	@ (80009f8 <main+0x2a8>)
 8000786:	4a9d      	ldr	r2, [pc, #628]	@ (80009fc <main+0x2ac>)
 8000788:	629a      	str	r2, [r3, #40]	@ 0x28
  Esp = newEsp01s(&huart1);
 800078a:	4c9d      	ldr	r4, [pc, #628]	@ (8000a00 <main+0x2b0>)
 800078c:	463b      	mov	r3, r7
 800078e:	499d      	ldr	r1, [pc, #628]	@ (8000a04 <main+0x2b4>)
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fe72 	bl	800047a <newEsp01s>
 8000796:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 800079a:	f6a3 0358 	subw	r3, r3, #2136	@ 0x858
 800079e:	4620      	mov	r0, r4
 80007a0:	4619      	mov	r1, r3
 80007a2:	f640 034c 	movw	r3, #2124	@ 0x84c
 80007a6:	461a      	mov	r2, r3
 80007a8:	f002 fe3c 	bl	8003424 <memcpy>
  sprintf(Esp.ssid,"Netis Hifi Point");
 80007ac:	4996      	ldr	r1, [pc, #600]	@ (8000a08 <main+0x2b8>)
 80007ae:	4897      	ldr	r0, [pc, #604]	@ (8000a0c <main+0x2bc>)
 80007b0:	f002 fdc0 	bl	8003334 <siprintf>
  sprintf(Esp.password,"kajaK123");
 80007b4:	4996      	ldr	r1, [pc, #600]	@ (8000a10 <main+0x2c0>)
 80007b6:	4897      	ldr	r0, [pc, #604]	@ (8000a14 <main+0x2c4>)
 80007b8:	f002 fdbc 	bl	8003334 <siprintf>
  sprintf(Esp.server_protocol,"TCP");
 80007bc:	4996      	ldr	r1, [pc, #600]	@ (8000a18 <main+0x2c8>)
 80007be:	4897      	ldr	r0, [pc, #604]	@ (8000a1c <main+0x2cc>)
 80007c0:	f002 fdb8 	bl	8003334 <siprintf>
  sprintf(Esp.server_ip,"192.168.1.2");
 80007c4:	4996      	ldr	r1, [pc, #600]	@ (8000a20 <main+0x2d0>)
 80007c6:	4897      	ldr	r0, [pc, #604]	@ (8000a24 <main+0x2d4>)
 80007c8:	f002 fdb4 	bl	8003334 <siprintf>
  sprintf(Esp.server_port,"8000");
 80007cc:	4996      	ldr	r1, [pc, #600]	@ (8000a28 <main+0x2d8>)
 80007ce:	4897      	ldr	r0, [pc, #604]	@ (8000a2c <main+0x2dc>)
 80007d0:	f002 fdb0 	bl	8003334 <siprintf>


  clearBuffers();
 80007d4:	f607 0354 	addw	r3, r7, #2132	@ 0x854
 80007d8:	469c      	mov	ip, r3
 80007da:	f7ff ff99 	bl	8000710 <clearBuffers.0>
  sprintf(ATcommand,"AT+RST\r\n");
 80007de:	4994      	ldr	r1, [pc, #592]	@ (8000a30 <main+0x2e0>)
 80007e0:	4894      	ldr	r0, [pc, #592]	@ (8000a34 <main+0x2e4>)
 80007e2:	f002 fda7 	bl	8003334 <siprintf>
  memset(rxBuffer,0,sizeof(rxBuffer));
 80007e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ea:	2100      	movs	r1, #0
 80007ec:	4892      	ldr	r0, [pc, #584]	@ (8000a38 <main+0x2e8>)
 80007ee:	f002 fdc1 	bl	8003374 <memset>
  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80007f2:	4890      	ldr	r0, [pc, #576]	@ (8000a34 <main+0x2e4>)
 80007f4:	f7ff fcaa 	bl	800014c <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000800:	498c      	ldr	r1, [pc, #560]	@ (8000a34 <main+0x2e4>)
 8000802:	4880      	ldr	r0, [pc, #512]	@ (8000a04 <main+0x2b4>)
 8000804:	f002 fb2b 	bl	8002e5e <HAL_UART_Transmit>
  status = HAL_UART_Receive(&huart1, rxBuffer, 10, 100);
 8000808:	2364      	movs	r3, #100	@ 0x64
 800080a:	220a      	movs	r2, #10
 800080c:	498a      	ldr	r1, [pc, #552]	@ (8000a38 <main+0x2e8>)
 800080e:	487d      	ldr	r0, [pc, #500]	@ (8000a04 <main+0x2b4>)
 8000810:	f002 fbb0 	bl	8002f74 <HAL_UART_Receive>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	4b88      	ldr	r3, [pc, #544]	@ (8000a3c <main+0x2ec>)
 800081a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800081c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000820:	f000 fcd6 	bl	80011d0 <HAL_Delay>

  ATisOK = 0;
 8000824:	4b86      	ldr	r3, [pc, #536]	@ (8000a40 <main+0x2f0>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
  while(!ATisOK){
 800082a:	e029      	b.n	8000880 <main+0x130>
	  sprintf(ATcommand,"AT+CWMODE_CUR=1\r\n");
 800082c:	4985      	ldr	r1, [pc, #532]	@ (8000a44 <main+0x2f4>)
 800082e:	4881      	ldr	r0, [pc, #516]	@ (8000a34 <main+0x2e4>)
 8000830:	f002 fd80 	bl	8003334 <siprintf>
	  memset(rxBuffer,0,sizeof(rxBuffer));
 8000834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000838:	2100      	movs	r1, #0
 800083a:	487f      	ldr	r0, [pc, #508]	@ (8000a38 <main+0x2e8>)
 800083c:	f002 fd9a 	bl	8003374 <memset>
	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000840:	487c      	ldr	r0, [pc, #496]	@ (8000a34 <main+0x2e4>)
 8000842:	f7ff fc83 	bl	800014c <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084e:	4979      	ldr	r1, [pc, #484]	@ (8000a34 <main+0x2e4>)
 8000850:	486c      	ldr	r0, [pc, #432]	@ (8000a04 <main+0x2b4>)
 8000852:	f002 fb04 	bl	8002e5e <HAL_UART_Transmit>
	  status = HAL_UART_Receive(&huart1, rxBuffer, 150, 1000);
 8000856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085a:	2296      	movs	r2, #150	@ 0x96
 800085c:	4976      	ldr	r1, [pc, #472]	@ (8000a38 <main+0x2e8>)
 800085e:	4869      	ldr	r0, [pc, #420]	@ (8000a04 <main+0x2b4>)
 8000860:	f002 fb88 	bl	8002f74 <HAL_UART_Receive>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	4b74      	ldr	r3, [pc, #464]	@ (8000a3c <main+0x2ec>)
 800086a:	701a      	strb	r2, [r3, #0]
	  if(strstr((char *)rxBuffer,"OK")){
 800086c:	4976      	ldr	r1, [pc, #472]	@ (8000a48 <main+0x2f8>)
 800086e:	4872      	ldr	r0, [pc, #456]	@ (8000a38 <main+0x2e8>)
 8000870:	f002 fd95 	bl	800339e <strstr>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <main+0x130>
		ATisOK = 1;
 800087a:	4b71      	ldr	r3, [pc, #452]	@ (8000a40 <main+0x2f0>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
  while(!ATisOK){
 8000880:	4b6f      	ldr	r3, [pc, #444]	@ (8000a40 <main+0x2f0>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0d1      	beq.n	800082c <main+0xdc>





  ATisOK = 0;
 8000888:	4b6d      	ldr	r3, [pc, #436]	@ (8000a40 <main+0x2f0>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
  while(!ATisOK){
 800088e:	e025      	b.n	80008dc <main+0x18c>
	  sprintf(ATcommand,"AT+CWJAP_CUR=\"Netis Hifi Point\",\"kajaK123\"\r\n");
 8000890:	496e      	ldr	r1, [pc, #440]	@ (8000a4c <main+0x2fc>)
 8000892:	4868      	ldr	r0, [pc, #416]	@ (8000a34 <main+0x2e4>)
 8000894:	f002 fd4e 	bl	8003334 <siprintf>
	  memset(rxBuffer,0,sizeof(rxBuffer));
 8000898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800089c:	2100      	movs	r1, #0
 800089e:	4866      	ldr	r0, [pc, #408]	@ (8000a38 <main+0x2e8>)
 80008a0:	f002 fd68 	bl	8003374 <memset>
	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80008a4:	4863      	ldr	r0, [pc, #396]	@ (8000a34 <main+0x2e4>)
 80008a6:	f7ff fc51 	bl	800014c <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b2:	4960      	ldr	r1, [pc, #384]	@ (8000a34 <main+0x2e4>)
 80008b4:	4853      	ldr	r0, [pc, #332]	@ (8000a04 <main+0x2b4>)
 80008b6:	f002 fad2 	bl	8002e5e <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, rxBuffer, 150, 20000);
 80008ba:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80008be:	2296      	movs	r2, #150	@ 0x96
 80008c0:	495d      	ldr	r1, [pc, #372]	@ (8000a38 <main+0x2e8>)
 80008c2:	4850      	ldr	r0, [pc, #320]	@ (8000a04 <main+0x2b4>)
 80008c4:	f002 fb56 	bl	8002f74 <HAL_UART_Receive>
	  if(strstr((char *)rxBuffer,"CONNECTED")){
 80008c8:	4961      	ldr	r1, [pc, #388]	@ (8000a50 <main+0x300>)
 80008ca:	485b      	ldr	r0, [pc, #364]	@ (8000a38 <main+0x2e8>)
 80008cc:	f002 fd67 	bl	800339e <strstr>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d002      	beq.n	80008dc <main+0x18c>
		  ATisOK = 1;
 80008d6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a40 <main+0x2f0>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
  while(!ATisOK){
 80008dc:	4b58      	ldr	r3, [pc, #352]	@ (8000a40 <main+0x2f0>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0d5      	beq.n	8000890 <main+0x140>
	  }

  }
  ATisOK = 0;
 80008e4:	4b56      	ldr	r3, [pc, #344]	@ (8000a40 <main+0x2f0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
  while(!ATisOK){
 80008ea:	e025      	b.n	8000938 <main+0x1e8>
	  sprintf(ATcommand,"AT+CIPMUX=0\r\n");
 80008ec:	4959      	ldr	r1, [pc, #356]	@ (8000a54 <main+0x304>)
 80008ee:	4851      	ldr	r0, [pc, #324]	@ (8000a34 <main+0x2e4>)
 80008f0:	f002 fd20 	bl	8003334 <siprintf>
	  memset(rxBuffer,0,sizeof(rxBuffer));
 80008f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f8:	2100      	movs	r1, #0
 80008fa:	484f      	ldr	r0, [pc, #316]	@ (8000a38 <main+0x2e8>)
 80008fc:	f002 fd3a 	bl	8003374 <memset>
	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000900:	484c      	ldr	r0, [pc, #304]	@ (8000a34 <main+0x2e4>)
 8000902:	f7ff fc23 	bl	800014c <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	b29a      	uxth	r2, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090e:	4949      	ldr	r1, [pc, #292]	@ (8000a34 <main+0x2e4>)
 8000910:	483c      	ldr	r0, [pc, #240]	@ (8000a04 <main+0x2b4>)
 8000912:	f002 faa4 	bl	8002e5e <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, rxBuffer, 50, 1000);
 8000916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091a:	2232      	movs	r2, #50	@ 0x32
 800091c:	4946      	ldr	r1, [pc, #280]	@ (8000a38 <main+0x2e8>)
 800091e:	4839      	ldr	r0, [pc, #228]	@ (8000a04 <main+0x2b4>)
 8000920:	f002 fb28 	bl	8002f74 <HAL_UART_Receive>
	  if(strstr((char *)rxBuffer,"OK")){
 8000924:	4948      	ldr	r1, [pc, #288]	@ (8000a48 <main+0x2f8>)
 8000926:	4844      	ldr	r0, [pc, #272]	@ (8000a38 <main+0x2e8>)
 8000928:	f002 fd39 	bl	800339e <strstr>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d002      	beq.n	8000938 <main+0x1e8>
		ATisOK = 1;
 8000932:	4b43      	ldr	r3, [pc, #268]	@ (8000a40 <main+0x2f0>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
  while(!ATisOK){
 8000938:	4b41      	ldr	r3, [pc, #260]	@ (8000a40 <main+0x2f0>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0d5      	beq.n	80008ec <main+0x19c>
	  }

  }
  ATisOK = 0;
 8000940:	4b3f      	ldr	r3, [pc, #252]	@ (8000a40 <main+0x2f0>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
  while(!ATisOK){
 8000946:	e025      	b.n	8000994 <main+0x244>
  	  sprintf(ATcommand,"AT+CIFSR\r\n");
 8000948:	4943      	ldr	r1, [pc, #268]	@ (8000a58 <main+0x308>)
 800094a:	483a      	ldr	r0, [pc, #232]	@ (8000a34 <main+0x2e4>)
 800094c:	f002 fcf2 	bl	8003334 <siprintf>
  	  memset(rxBuffer,0,sizeof(rxBuffer));
 8000950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000954:	2100      	movs	r1, #0
 8000956:	4838      	ldr	r0, [pc, #224]	@ (8000a38 <main+0x2e8>)
 8000958:	f002 fd0c 	bl	8003374 <memset>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800095c:	4835      	ldr	r0, [pc, #212]	@ (8000a34 <main+0x2e4>)
 800095e:	f7ff fbf5 	bl	800014c <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096a:	4932      	ldr	r1, [pc, #200]	@ (8000a34 <main+0x2e4>)
 800096c:	4825      	ldr	r0, [pc, #148]	@ (8000a04 <main+0x2b4>)
 800096e:	f002 fa76 	bl	8002e5e <HAL_UART_Transmit>
  	  HAL_UART_Receive(&huart1, rxBuffer, 50, 2000);
 8000972:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000976:	2232      	movs	r2, #50	@ 0x32
 8000978:	492f      	ldr	r1, [pc, #188]	@ (8000a38 <main+0x2e8>)
 800097a:	4822      	ldr	r0, [pc, #136]	@ (8000a04 <main+0x2b4>)
 800097c:	f002 fafa 	bl	8002f74 <HAL_UART_Receive>
  	  if(strstr((char *)rxBuffer,"STAIP")){
 8000980:	4936      	ldr	r1, [pc, #216]	@ (8000a5c <main+0x30c>)
 8000982:	482d      	ldr	r0, [pc, #180]	@ (8000a38 <main+0x2e8>)
 8000984:	f002 fd0b 	bl	800339e <strstr>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <main+0x244>
  		ATisOK = 1;
 800098e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <main+0x2f0>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
  while(!ATisOK){
 8000994:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <main+0x2f0>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0d5      	beq.n	8000948 <main+0x1f8>
  	  }

  }

  clearBuffers();
 800099c:	f607 0354 	addw	r3, r7, #2132	@ 0x854
 80009a0:	469c      	mov	ip, r3
 80009a2:	f7ff feb5 	bl	8000710 <clearBuffers.0>
  if (!strstr((char *)rxBuffer, "STATUS:3")) {
 80009a6:	492e      	ldr	r1, [pc, #184]	@ (8000a60 <main+0x310>)
 80009a8:	4823      	ldr	r0, [pc, #140]	@ (8000a38 <main+0x2e8>)
 80009aa:	f002 fcf8 	bl	800339e <strstr>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d116      	bne.n	80009e2 <main+0x292>
	  sprintf(ATcommand,"AT+CIPSTATUS\r\n");
 80009b4:	492b      	ldr	r1, [pc, #172]	@ (8000a64 <main+0x314>)
 80009b6:	481f      	ldr	r0, [pc, #124]	@ (8000a34 <main+0x2e4>)
 80009b8:	f002 fcbc 	bl	8003334 <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80009bc:	481d      	ldr	r0, [pc, #116]	@ (8000a34 <main+0x2e4>)
 80009be:	f7ff fbc5 	bl	800014c <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ca:	491a      	ldr	r1, [pc, #104]	@ (8000a34 <main+0x2e4>)
 80009cc:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <main+0x2b4>)
 80009ce:	f002 fa46 	bl	8002e5e <HAL_UART_Transmit>
	  HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80009d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009da:	4917      	ldr	r1, [pc, #92]	@ (8000a38 <main+0x2e8>)
 80009dc:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <main+0x2b4>)
 80009de:	f002 fac9 	bl	8002f74 <HAL_UART_Receive>


	  // === ESP-01s ===


  clearBuffers();
 80009e2:	f607 0354 	addw	r3, r7, #2132	@ 0x854
 80009e6:	469c      	mov	ip, r3
 80009e8:	f7ff fe92 	bl	8000710 <clearBuffers.0>
	ATisOK = 0;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <main+0x2f0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	while(!ATisOK){
 80009f2:	e05d      	b.n	8000ab0 <main+0x360>
 80009f4:	200000f8 	.word	0x200000f8
 80009f8:	200000cc 	.word	0x200000cc
 80009fc:	20000078 	.word	0x20000078
 8000a00:	200001ac 	.word	0x200001ac
 8000a04:	20000ef0 	.word	0x20000ef0
 8000a08:	08003cf4 	.word	0x08003cf4
 8000a0c:	200007bc 	.word	0x200007bc
 8000a10:	08003d08 	.word	0x08003d08
 8000a14:	20000820 	.word	0x20000820
 8000a18:	08003d14 	.word	0x08003d14
 8000a1c:	20000884 	.word	0x20000884
 8000a20:	08003d18 	.word	0x08003d18
 8000a24:	200008b6 	.word	0x200008b6
 8000a28:	08003d24 	.word	0x08003d24
 8000a2c:	200008e8 	.word	0x200008e8
 8000a30:	08003d2c 	.word	0x08003d2c
 8000a34:	200009f8 	.word	0x200009f8
 8000a38:	20000c90 	.word	0x20000c90
 8000a3c:	20000e91 	.word	0x20000e91
 8000a40:	20000e90 	.word	0x20000e90
 8000a44:	08003d38 	.word	0x08003d38
 8000a48:	08003d4c 	.word	0x08003d4c
 8000a4c:	08003d50 	.word	0x08003d50
 8000a50:	08003d80 	.word	0x08003d80
 8000a54:	08003d8c 	.word	0x08003d8c
 8000a58:	08003d9c 	.word	0x08003d9c
 8000a5c:	08003da8 	.word	0x08003da8
 8000a60:	08003db0 	.word	0x08003db0
 8000a64:	08003dbc 	.word	0x08003dbc
	  sprintf(ATcommand,"AT+CIPSTART=\"TCP\",\"192.168.1.2\",8000\r\n");
 8000a68:	4979      	ldr	r1, [pc, #484]	@ (8000c50 <main+0x500>)
 8000a6a:	487a      	ldr	r0, [pc, #488]	@ (8000c54 <main+0x504>)
 8000a6c:	f002 fc62 	bl	8003334 <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000a70:	4878      	ldr	r0, [pc, #480]	@ (8000c54 <main+0x504>)
 8000a72:	f7ff fb6b 	bl	800014c <strlen>
 8000a76:	4603      	mov	r3, r0
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a7e:	4975      	ldr	r1, [pc, #468]	@ (8000c54 <main+0x504>)
 8000a80:	4875      	ldr	r0, [pc, #468]	@ (8000c58 <main+0x508>)
 8000a82:	f002 f9ec 	bl	8002e5e <HAL_UART_Transmit>
	  HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a8e:	4973      	ldr	r1, [pc, #460]	@ (8000c5c <main+0x50c>)
 8000a90:	4871      	ldr	r0, [pc, #452]	@ (8000c58 <main+0x508>)
 8000a92:	f002 fa6f 	bl	8002f74 <HAL_UART_Receive>
	  if(strstr((char *)rxBuffer,"CONNECT")){
 8000a96:	4972      	ldr	r1, [pc, #456]	@ (8000c60 <main+0x510>)
 8000a98:	4870      	ldr	r0, [pc, #448]	@ (8000c5c <main+0x50c>)
 8000a9a:	f002 fc80 	bl	800339e <strstr>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <main+0x35a>
		  ATisOK = 1;
 8000aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8000c64 <main+0x514>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(200);
 8000aaa:	20c8      	movs	r0, #200	@ 0xc8
 8000aac:	f000 fb90 	bl	80011d0 <HAL_Delay>
	while(!ATisOK){
 8000ab0:	4b6c      	ldr	r3, [pc, #432]	@ (8000c64 <main+0x514>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0d7      	beq.n	8000a68 <main+0x318>
	}

	clearBuffers();
 8000ab8:	f607 0354 	addw	r3, r7, #2132	@ 0x854
 8000abc:	469c      	mov	ip, r3
 8000abe:	f7ff fe27 	bl	8000710 <clearBuffers.0>


	sprintf(toPost, "GET /api/get-response/ HTTP/1.1\r\n"
 8000ac2:	4969      	ldr	r1, [pc, #420]	@ (8000c68 <main+0x518>)
 8000ac4:	4869      	ldr	r0, [pc, #420]	@ (8000c6c <main+0x51c>)
 8000ac6:	f002 fc35 	bl	8003334 <siprintf>
					"Host: 192.168.1.2:8000\r\n\r\n");
	sprintf(ATcommand,"AT+CIPSEND=%d\r\n", strlen(toPost));
 8000aca:	4868      	ldr	r0, [pc, #416]	@ (8000c6c <main+0x51c>)
 8000acc:	f7ff fb3e 	bl	800014c <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4966      	ldr	r1, [pc, #408]	@ (8000c70 <main+0x520>)
 8000ad6:	485f      	ldr	r0, [pc, #380]	@ (8000c54 <main+0x504>)
 8000ad8:	f002 fc2c 	bl	8003334 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),3000);
 8000adc:	485d      	ldr	r0, [pc, #372]	@ (8000c54 <main+0x504>)
 8000ade:	f7ff fb35 	bl	800014c <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000aea:	495a      	ldr	r1, [pc, #360]	@ (8000c54 <main+0x504>)
 8000aec:	485a      	ldr	r0, [pc, #360]	@ (8000c58 <main+0x508>)
 8000aee:	f002 f9b6 	bl	8002e5e <HAL_UART_Transmit>
	status = HAL_UART_Receive(&huart1, rxBuffer, 512, 5000);
 8000af2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000afa:	4958      	ldr	r1, [pc, #352]	@ (8000c5c <main+0x50c>)
 8000afc:	4856      	ldr	r0, [pc, #344]	@ (8000c58 <main+0x508>)
 8000afe:	f002 fa39 	bl	8002f74 <HAL_UART_Receive>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b5b      	ldr	r3, [pc, #364]	@ (8000c74 <main+0x524>)
 8000b08:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8000b0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b0e:	f000 fb5f 	bl	80011d0 <HAL_Delay>
	if(strstr((char *)rxBuffer,">")){
 8000b12:	213e      	movs	r1, #62	@ 0x3e
 8000b14:	4851      	ldr	r0, [pc, #324]	@ (8000c5c <main+0x50c>)
 8000b16:	f002 fc35 	bl	8003384 <strchr>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d020      	beq.n	8000b62 <main+0x412>
		memset(rxBuffer,0,sizeof(rxBuffer));
 8000b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b24:	2100      	movs	r1, #0
 8000b26:	484d      	ldr	r0, [pc, #308]	@ (8000c5c <main+0x50c>)
 8000b28:	f002 fc24 	bl	8003374 <memset>
		HAL_UART_Transmit(&huart1,(uint8_t *)toPost,strlen(toPost),1000);
 8000b2c:	484f      	ldr	r0, [pc, #316]	@ (8000c6c <main+0x51c>)
 8000b2e:	f7ff fb0d 	bl	800014c <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3a:	494c      	ldr	r1, [pc, #304]	@ (8000c6c <main+0x51c>)
 8000b3c:	4846      	ldr	r0, [pc, #280]	@ (8000c58 <main+0x508>)
 8000b3e:	f002 f98e 	bl	8002e5e <HAL_UART_Transmit>
		status = HAL_UART_Receive(&huart1, rxBuffer, 512, 5000);
 8000b42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b4a:	4944      	ldr	r1, [pc, #272]	@ (8000c5c <main+0x50c>)
 8000b4c:	4842      	ldr	r0, [pc, #264]	@ (8000c58 <main+0x508>)
 8000b4e:	f002 fa11 	bl	8002f74 <HAL_UART_Receive>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b47      	ldr	r3, [pc, #284]	@ (8000c74 <main+0x524>)
 8000b58:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8000b5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b5e:	f000 fb37 	bl	80011d0 <HAL_Delay>
		}



	clearBuffers();
 8000b62:	f607 0354 	addw	r3, r7, #2132	@ 0x854
 8000b66:	469c      	mov	ip, r3
 8000b68:	f7ff fdd2 	bl	8000710 <clearBuffers.0>
	// POST request
	sprintf(toPost,    	"POST /api/post-response/ HTTP/1.1\r\n"
 8000b6c:	4942      	ldr	r1, [pc, #264]	@ (8000c78 <main+0x528>)
 8000b6e:	483f      	ldr	r0, [pc, #252]	@ (8000c6c <main+0x51c>)
 8000b70:	f002 fbe0 	bl	8003334 <siprintf>
						"Content-Type: text/plain\r\n"
						"Content-Length: 7\r\n\r\n"
						"1,2,3,4\r\n\r\n");


	sprintf(ATcommand,"AT+CIPSEND=%d\r\n", strlen(toPost));
 8000b74:	483d      	ldr	r0, [pc, #244]	@ (8000c6c <main+0x51c>)
 8000b76:	f7ff fae9 	bl	800014c <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	493c      	ldr	r1, [pc, #240]	@ (8000c70 <main+0x520>)
 8000b80:	4834      	ldr	r0, [pc, #208]	@ (8000c54 <main+0x504>)
 8000b82:	f002 fbd7 	bl	8003334 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),3000);
 8000b86:	4833      	ldr	r0, [pc, #204]	@ (8000c54 <main+0x504>)
 8000b88:	f7ff fae0 	bl	800014c <strlen>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000b94:	492f      	ldr	r1, [pc, #188]	@ (8000c54 <main+0x504>)
 8000b96:	4830      	ldr	r0, [pc, #192]	@ (8000c58 <main+0x508>)
 8000b98:	f002 f961 	bl	8002e5e <HAL_UART_Transmit>
	status = HAL_UART_Receive(&huart1, rxBuffer, 512, 5000);
 8000b9c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ba4:	492d      	ldr	r1, [pc, #180]	@ (8000c5c <main+0x50c>)
 8000ba6:	482c      	ldr	r0, [pc, #176]	@ (8000c58 <main+0x508>)
 8000ba8:	f002 f9e4 	bl	8002f74 <HAL_UART_Receive>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <main+0x524>)
 8000bb2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8000bb4:	20c8      	movs	r0, #200	@ 0xc8
 8000bb6:	f000 fb0b 	bl	80011d0 <HAL_Delay>
	if(strstr((char *)rxBuffer,">")){
 8000bba:	213e      	movs	r1, #62	@ 0x3e
 8000bbc:	4827      	ldr	r0, [pc, #156]	@ (8000c5c <main+0x50c>)
 8000bbe:	f002 fbe1 	bl	8003384 <strchr>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d01f      	beq.n	8000c08 <main+0x4b8>
		memset(rxBuffer,0,sizeof(rxBuffer));
 8000bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4823      	ldr	r0, [pc, #140]	@ (8000c5c <main+0x50c>)
 8000bd0:	f002 fbd0 	bl	8003374 <memset>
		HAL_UART_Transmit(&huart1,(uint8_t *)toPost,strlen(toPost),1000);
 8000bd4:	4825      	ldr	r0, [pc, #148]	@ (8000c6c <main+0x51c>)
 8000bd6:	f7ff fab9 	bl	800014c <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be2:	4922      	ldr	r1, [pc, #136]	@ (8000c6c <main+0x51c>)
 8000be4:	481c      	ldr	r0, [pc, #112]	@ (8000c58 <main+0x508>)
 8000be6:	f002 f93a 	bl	8002e5e <HAL_UART_Transmit>
		status = HAL_UART_Receive(&huart1, rxBuffer, 512, 5000);
 8000bea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bf2:	491a      	ldr	r1, [pc, #104]	@ (8000c5c <main+0x50c>)
 8000bf4:	4818      	ldr	r0, [pc, #96]	@ (8000c58 <main+0x508>)
 8000bf6:	f002 f9bd 	bl	8002f74 <HAL_UART_Receive>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <main+0x524>)
 8000c00:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 8000c02:	20c8      	movs	r0, #200	@ 0xc8
 8000c04:	f000 fae4 	bl	80011d0 <HAL_Delay>
	}

	sprintf(ATcommand,"AT+CIPCLOSE\r\n");
 8000c08:	491c      	ldr	r1, [pc, #112]	@ (8000c7c <main+0x52c>)
 8000c0a:	4812      	ldr	r0, [pc, #72]	@ (8000c54 <main+0x504>)
 8000c0c:	f002 fb92 	bl	8003334 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),3000);
 8000c10:	4810      	ldr	r0, [pc, #64]	@ (8000c54 <main+0x504>)
 8000c12:	f7ff fa9b 	bl	800014c <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000c1e:	490d      	ldr	r1, [pc, #52]	@ (8000c54 <main+0x504>)
 8000c20:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <main+0x508>)
 8000c22:	f002 f91c 	bl	8002e5e <HAL_UART_Transmit>
	status = HAL_UART_Receive(&huart1, rxBuffer, 512, 5000);
 8000c26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c2e:	490b      	ldr	r1, [pc, #44]	@ (8000c5c <main+0x50c>)
 8000c30:	4809      	ldr	r0, [pc, #36]	@ (8000c58 <main+0x508>)
 8000c32:	f002 f99f 	bl	8002f74 <HAL_UART_Receive>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <main+0x524>)
 8000c3c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8000c3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c42:	f000 fac5 	bl	80011d0 <HAL_Delay>

	HAL_Delay(2000);
 8000c46:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c4a:	f000 fac1 	bl	80011d0 <HAL_Delay>
  clearBuffers();
 8000c4e:	e6c8      	b.n	80009e2 <main+0x292>
 8000c50:	08003dcc 	.word	0x08003dcc
 8000c54:	200009f8 	.word	0x200009f8
 8000c58:	20000ef0 	.word	0x20000ef0
 8000c5c:	20000c90 	.word	0x20000c90
 8000c60:	08003df4 	.word	0x08003df4
 8000c64:	20000e90 	.word	0x20000e90
 8000c68:	08003dfc 	.word	0x08003dfc
 8000c6c:	20000a90 	.word	0x20000a90
 8000c70:	08003e38 	.word	0x08003e38
 8000c74:	20000e91 	.word	0x20000e91
 8000c78:	08003e48 	.word	0x08003e48
 8000c7c:	08003ec0 	.word	0x08003ec0

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b090      	sub	sp, #64	@ 0x40
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	2228      	movs	r2, #40	@ 0x28
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 fb70 	bl	8003374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000caa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cbe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fec5 	bl	8001a58 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cd4:	f000 f834 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 f932 	bl	8001f5c <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cfe:	f000 f81f 	bl	8000d40 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3740      	adds	r7, #64	@ 0x40
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI interruption function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin==DIO0_Pin){
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d108      	bne.n	8000d2e <HAL_GPIO_EXTI_Callback+0x22>

	  LoRa_receive(&myLoRa,read_data, 2);
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	4906      	ldr	r1, [pc, #24]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d20:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0x30>)
 8000d22:	f7ff fb2f 	bl	8000384 <LoRa_receive>
	  blink(5, 100);
 8000d26:	2164      	movs	r1, #100	@ 0x64
 8000d28:	2005      	movs	r0, #5
 8000d2a:	f000 f80f 	bl	8000d4c <blink>
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000012c 	.word	0x2000012c
 8000d3c:	20000100 	.word	0x20000100

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <blink>:
#include "spi.h"
#include "gpio.h"

#include "stdio.h"
#include "string.h"
void blink(int times, int interval){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d5c:	480b      	ldr	r0, [pc, #44]	@ (8000d8c <blink+0x40>)
 8000d5e:	f000 fced 	bl	800173c <HAL_GPIO_WritePin>
	while(times>0){
 8000d62:	e00b      	b.n	8000d7c <blink+0x30>
		times--;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d6e:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <blink+0x40>)
 8000d70:	f000 fcfc 	bl	800176c <HAL_GPIO_TogglePin>
		HAL_Delay(interval);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fa2a 	bl	80011d0 <HAL_Delay>
	while(times>0){
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	dcf0      	bgt.n	8000d64 <blink+0x18>
	}
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40011000 	.word	0x40011000

08000d90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d94:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000d96:	4a18      	ldr	r2, [pc, #96]	@ (8000df8 <MX_SPI1_Init+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000d9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000da0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000dc4:	2210      	movs	r2, #16
 8000dc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000ddc:	220a      	movs	r2, #10
 8000dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de0:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000de2:	f001 fa49 	bl	8002278 <HAL_SPI_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dec:	f7ff ffa8 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000e94 	.word	0x20000e94
 8000df8:	40013000 	.word	0x40013000

08000dfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d12f      	bne.n	8000e7c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <HAL_SPI_MspInit+0x8c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <HAL_SPI_MspInit+0x8c>)
 8000e22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <HAL_SPI_MspInit+0x8c>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <HAL_SPI_MspInit+0x8c>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a13      	ldr	r2, [pc, #76]	@ (8000e88 <HAL_SPI_MspInit+0x8c>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <HAL_SPI_MspInit+0x8c>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e4c:	23a0      	movs	r3, #160	@ 0xa0
 8000e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480b      	ldr	r0, [pc, #44]	@ (8000e8c <HAL_SPI_MspInit+0x90>)
 8000e60:	f000 fae8 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e64:	2340      	movs	r3, #64	@ 0x40
 8000e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <HAL_SPI_MspInit+0x90>)
 8000e78:	f000 fadc 	bl	8001434 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40013000 	.word	0x40013000
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010800 	.word	0x40010800

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <HAL_MspInit+0x5c>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <HAL_MspInit+0x5c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_MspInit+0x5c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <HAL_MspInit+0x5c>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000eec <HAL_MspInit+0x5c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <HAL_MspInit+0x5c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_MspInit+0x60>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_MspInit+0x60>)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f928 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f000 fc25 	bl	80017a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f002 fa1e 	bl	80033cc <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20005000 	.word	0x20005000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	20000eec 	.word	0x20000eec
 8000fc4:	20001088 	.word	0x20001088

08000fc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <MX_USART1_UART_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 800100c:	f001 fed7 	bl	8002dbe <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001016:	f7ff fe93 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000ef0 	.word	0x20000ef0
 8001024:	40013800 	.word	0x40013800

08001028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a1c      	ldr	r2, [pc, #112]	@ (80010b4 <HAL_UART_MspInit+0x8c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d131      	bne.n	80010ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <HAL_UART_MspInit+0x90>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a1a      	ldr	r2, [pc, #104]	@ (80010b8 <HAL_UART_MspInit+0x90>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_UART_MspInit+0x90>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_UART_MspInit+0x90>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <HAL_UART_MspInit+0x90>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_UART_MspInit+0x90>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_01S_TX_Pin;
 8001078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800107c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESP_01S_TX_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	480b      	ldr	r0, [pc, #44]	@ (80010bc <HAL_UART_MspInit+0x94>)
 800108e:	f000 f9d1 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_01S_RX_Pin;
 8001092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ESP_01S_RX_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_UART_MspInit+0x94>)
 80010a8:	f000 f9c4 	bl	8001434 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800

080010c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c0:	f7ff ff82 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010c6:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010dc:	4c09      	ldr	r4, [pc, #36]	@ (8001104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f002 f975 	bl	80033d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff fb2f 	bl	8000750 <main>
  bx lr
 80010f2:	4770      	bx	lr
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010fc:	08003f40 	.word	0x08003f40
  ldr r2, =_sbss
 8001100:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001104:	20001084 	.word	0x20001084

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_Init+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_Init+0x28>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f947 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff feb2 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f95f 	bl	800141a <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f927 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_IncTick+0x1c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <HAL_IncTick+0x20>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a03      	ldr	r2, [pc, #12]	@ (80011b8 <HAL_IncTick+0x20>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000f38 	.word	0x20000f38

080011bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b02      	ldr	r3, [pc, #8]	@ (80011cc <HAL_GetTick+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	20000f38 	.word	0x20000f38

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff fff0 	bl	80011bc <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffe0 	bl	80011bc <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	@ (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4906      	ldr	r1, [pc, #24]	@ (80012b0 <__NVIC_EnableIRQ+0x34>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	@ (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	@ (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	@ 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff90 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff2d 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff42 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff90 	bl	8001308 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5f 	bl	80012b4 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff35 	bl	800127c <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffa2 	bl	800136c <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b08b      	sub	sp, #44	@ 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	e169      	b.n	800171c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001448:	2201      	movs	r2, #1
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 8158 	bne.w	8001716 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a9a      	ldr	r2, [pc, #616]	@ (80016d4 <HAL_GPIO_Init+0x2a0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d05e      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001470:	4a98      	ldr	r2, [pc, #608]	@ (80016d4 <HAL_GPIO_Init+0x2a0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d875      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001476:	4a98      	ldr	r2, [pc, #608]	@ (80016d8 <HAL_GPIO_Init+0x2a4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d058      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 800147c:	4a96      	ldr	r2, [pc, #600]	@ (80016d8 <HAL_GPIO_Init+0x2a4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d86f      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001482:	4a96      	ldr	r2, [pc, #600]	@ (80016dc <HAL_GPIO_Init+0x2a8>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d052      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001488:	4a94      	ldr	r2, [pc, #592]	@ (80016dc <HAL_GPIO_Init+0x2a8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d869      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800148e:	4a94      	ldr	r2, [pc, #592]	@ (80016e0 <HAL_GPIO_Init+0x2ac>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d04c      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001494:	4a92      	ldr	r2, [pc, #584]	@ (80016e0 <HAL_GPIO_Init+0x2ac>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d863      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800149a:	4a92      	ldr	r2, [pc, #584]	@ (80016e4 <HAL_GPIO_Init+0x2b0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d046      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 80014a0:	4a90      	ldr	r2, [pc, #576]	@ (80016e4 <HAL_GPIO_Init+0x2b0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d85d      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d82a      	bhi.n	8001500 <HAL_GPIO_Init+0xcc>
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d859      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014ae:	a201      	add	r2, pc, #4	@ (adr r2, 80014b4 <HAL_GPIO_Init+0x80>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	0800152f 	.word	0x0800152f
 80014b8:	08001509 	.word	0x08001509
 80014bc:	0800151b 	.word	0x0800151b
 80014c0:	0800155d 	.word	0x0800155d
 80014c4:	08001563 	.word	0x08001563
 80014c8:	08001563 	.word	0x08001563
 80014cc:	08001563 	.word	0x08001563
 80014d0:	08001563 	.word	0x08001563
 80014d4:	08001563 	.word	0x08001563
 80014d8:	08001563 	.word	0x08001563
 80014dc:	08001563 	.word	0x08001563
 80014e0:	08001563 	.word	0x08001563
 80014e4:	08001563 	.word	0x08001563
 80014e8:	08001563 	.word	0x08001563
 80014ec:	08001563 	.word	0x08001563
 80014f0:	08001563 	.word	0x08001563
 80014f4:	08001563 	.word	0x08001563
 80014f8:	08001511 	.word	0x08001511
 80014fc:	08001525 	.word	0x08001525
 8001500:	4a79      	ldr	r2, [pc, #484]	@ (80016e8 <HAL_GPIO_Init+0x2b4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001506:	e02c      	b.n	8001562 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e029      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	3304      	adds	r3, #4
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e024      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	3308      	adds	r3, #8
 8001520:	623b      	str	r3, [r7, #32]
          break;
 8001522:	e01f      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	330c      	adds	r3, #12
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	e01a      	b.n	8001564 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001536:	2304      	movs	r3, #4
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e013      	b.n	8001564 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	611a      	str	r2, [r3, #16]
          break;
 800154e:	e009      	b.n	8001564 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	615a      	str	r2, [r3, #20]
          break;
 800155a:	e003      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x130>
          break;
 8001562:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2bff      	cmp	r3, #255	@ 0xff
 8001568:	d801      	bhi.n	800156e <HAL_GPIO_Init+0x13a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	e001      	b.n	8001572 <HAL_GPIO_Init+0x13e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2bff      	cmp	r3, #255	@ 0xff
 8001578:	d802      	bhi.n	8001580 <HAL_GPIO_Init+0x14c>
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x152>
 8001580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001582:	3b08      	subs	r3, #8
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	210f      	movs	r1, #15
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	401a      	ands	r2, r3
 8001598:	6a39      	ldr	r1, [r7, #32]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80b1 	beq.w	8001716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b4:	4b4d      	ldr	r3, [pc, #308]	@ (80016ec <HAL_GPIO_Init+0x2b8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a4c      	ldr	r2, [pc, #304]	@ (80016ec <HAL_GPIO_Init+0x2b8>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b4a      	ldr	r3, [pc, #296]	@ (80016ec <HAL_GPIO_Init+0x2b8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015cc:	4a48      	ldr	r2, [pc, #288]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a40      	ldr	r2, [pc, #256]	@ (80016f4 <HAL_GPIO_Init+0x2c0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d013      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3f      	ldr	r2, [pc, #252]	@ (80016f8 <HAL_GPIO_Init+0x2c4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d00d      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3e      	ldr	r2, [pc, #248]	@ (80016fc <HAL_GPIO_Init+0x2c8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3d      	ldr	r2, [pc, #244]	@ (8001700 <HAL_GPIO_Init+0x2cc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_GPIO_Init+0x1e0>
 8001610:	2303      	movs	r3, #3
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001614:	2304      	movs	r3, #4
 8001616:	e004      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001618:	2302      	movs	r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001620:	2300      	movs	r3, #0
 8001622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4093      	lsls	r3, r2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001632:	492f      	ldr	r1, [pc, #188]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164c:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	492c      	ldr	r1, [pc, #176]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165a:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4928      	ldr	r1, [pc, #160]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001674:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	4922      	ldr	r1, [pc, #136]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	491e      	ldr	r1, [pc, #120]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800168c:	4013      	ands	r3, r2
 800168e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4918      	ldr	r1, [pc, #96]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016aa:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4914      	ldr	r1, [pc, #80]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d021      	beq.n	8001708 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	490e      	ldr	r1, [pc, #56]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e021      	b.n	8001716 <HAL_GPIO_Init+0x2e2>
 80016d2:	bf00      	nop
 80016d4:	10320000 	.word	0x10320000
 80016d8:	10310000 	.word	0x10310000
 80016dc:	10220000 	.word	0x10220000
 80016e0:	10210000 	.word	0x10210000
 80016e4:	10120000 	.word	0x10120000
 80016e8:	10110000 	.word	0x10110000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40011000 	.word	0x40011000
 8001700:	40011400 	.word	0x40011400
 8001704:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <HAL_GPIO_Init+0x304>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	43db      	mvns	r3, r3
 8001710:	4909      	ldr	r1, [pc, #36]	@ (8001738 <HAL_GPIO_Init+0x304>)
 8001712:	4013      	ands	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	3301      	adds	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	f47f ae8e 	bne.w	8001448 <HAL_GPIO_Init+0x14>
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	372c      	adds	r7, #44	@ 0x2c
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40010400 	.word	0x40010400

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	041a      	lsls	r2, r3, #16
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43d9      	mvns	r1, r3
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	400b      	ands	r3, r1
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	611a      	str	r2, [r3, #16]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff faa4 	bl	8000d0c <HAL_GPIO_EXTI_Callback>
  }
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e12b      	b.n	8001a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7fe ff4c 	bl	8000694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2224      	movs	r2, #36	@ 0x24
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001834:	f000 fcda 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8001838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4a81      	ldr	r2, [pc, #516]	@ (8001a44 <HAL_I2C_Init+0x274>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d807      	bhi.n	8001854 <HAL_I2C_Init+0x84>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a80      	ldr	r2, [pc, #512]	@ (8001a48 <HAL_I2C_Init+0x278>)
 8001848:	4293      	cmp	r3, r2
 800184a:	bf94      	ite	ls
 800184c:	2301      	movls	r3, #1
 800184e:	2300      	movhi	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	e006      	b.n	8001862 <HAL_I2C_Init+0x92>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a7d      	ldr	r2, [pc, #500]	@ (8001a4c <HAL_I2C_Init+0x27c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	bf94      	ite	ls
 800185c:	2301      	movls	r3, #1
 800185e:	2300      	movhi	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0e7      	b.n	8001a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4a78      	ldr	r2, [pc, #480]	@ (8001a50 <HAL_I2C_Init+0x280>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0c9b      	lsrs	r3, r3, #18
 8001874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	430a      	orrs	r2, r1
 8001888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a6a      	ldr	r2, [pc, #424]	@ (8001a44 <HAL_I2C_Init+0x274>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d802      	bhi.n	80018a4 <HAL_I2C_Init+0xd4>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	e009      	b.n	80018b8 <HAL_I2C_Init+0xe8>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	4a69      	ldr	r2, [pc, #420]	@ (8001a54 <HAL_I2C_Init+0x284>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	099b      	lsrs	r3, r3, #6
 80018b6:	3301      	adds	r3, #1
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	430b      	orrs	r3, r1
 80018be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	495c      	ldr	r1, [pc, #368]	@ (8001a44 <HAL_I2C_Init+0x274>)
 80018d4:	428b      	cmp	r3, r1
 80018d6:	d819      	bhi.n	800190c <HAL_I2C_Init+0x13c>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1e59      	subs	r1, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e6:	1c59      	adds	r1, r3, #1
 80018e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018ec:	400b      	ands	r3, r1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00a      	beq.n	8001908 <HAL_I2C_Init+0x138>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1e59      	subs	r1, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001900:	3301      	adds	r3, #1
 8001902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001906:	e051      	b.n	80019ac <HAL_I2C_Init+0x1dc>
 8001908:	2304      	movs	r3, #4
 800190a:	e04f      	b.n	80019ac <HAL_I2C_Init+0x1dc>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d111      	bne.n	8001938 <HAL_I2C_Init+0x168>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1e58      	subs	r0, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	440b      	add	r3, r1
 8001922:	fbb0 f3f3 	udiv	r3, r0, r3
 8001926:	3301      	adds	r3, #1
 8001928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	e012      	b.n	800195e <HAL_I2C_Init+0x18e>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	1e58      	subs	r0, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	0099      	lsls	r1, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	fbb0 f3f3 	udiv	r3, r0, r3
 800194e:	3301      	adds	r3, #1
 8001950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Init+0x196>
 8001962:	2301      	movs	r3, #1
 8001964:	e022      	b.n	80019ac <HAL_I2C_Init+0x1dc>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10e      	bne.n	800198c <HAL_I2C_Init+0x1bc>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1e58      	subs	r0, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6859      	ldr	r1, [r3, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	440b      	add	r3, r1
 800197c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001980:	3301      	adds	r3, #1
 8001982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800198a:	e00f      	b.n	80019ac <HAL_I2C_Init+0x1dc>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1e58      	subs	r0, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	0099      	lsls	r1, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	6809      	ldr	r1, [r1, #0]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6911      	ldr	r1, [r2, #16]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68d2      	ldr	r2, [r2, #12]
 80019e6:	4311      	orrs	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	000186a0 	.word	0x000186a0
 8001a48:	001e847f 	.word	0x001e847f
 8001a4c:	003d08ff 	.word	0x003d08ff
 8001a50:	431bde83 	.word	0x431bde83
 8001a54:	10624dd3 	.word	0x10624dd3

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e272      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8087 	beq.w	8001b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a78:	4b92      	ldr	r3, [pc, #584]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d00c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a84:	4b8f      	ldr	r3, [pc, #572]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d112      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5e>
 8001a90:	4b8c      	ldr	r3, [pc, #560]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9e:	4b89      	ldr	r3, [pc, #548]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d06c      	beq.n	8001b84 <HAL_RCC_OscConfig+0x12c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d168      	bne.n	8001b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e24c      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x76>
 8001ac0:	4b80      	ldr	r3, [pc, #512]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a7f      	ldr	r2, [pc, #508]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e02e      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x98>
 8001ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a7a      	ldr	r2, [pc, #488]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b78      	ldr	r3, [pc, #480]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a77      	ldr	r2, [pc, #476]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0xbc>
 8001afa:	4b72      	ldr	r3, [pc, #456]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a71      	ldr	r2, [pc, #452]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6e      	ldr	r2, [pc, #440]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001b14:	4b6b      	ldr	r3, [pc, #428]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a6a      	ldr	r2, [pc, #424]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b68      	ldr	r3, [pc, #416]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a67      	ldr	r2, [pc, #412]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fb42 	bl	80011bc <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fb3e 	bl	80011bc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	@ 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e200      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0xe4>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb2e 	bl	80011bc <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fb2a 	bl	80011bc <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	@ 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1ec      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b53      	ldr	r3, [pc, #332]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x10c>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d063      	beq.n	8001c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b92:	4b4c      	ldr	r3, [pc, #304]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b9e:	4b49      	ldr	r3, [pc, #292]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d11c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x18c>
 8001baa:	4b46      	ldr	r3, [pc, #280]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d116      	bne.n	8001be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	4b43      	ldr	r3, [pc, #268]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x176>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e1c0      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4939      	ldr	r1, [pc, #228]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	e03a      	b.n	8001c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bec:	4b36      	ldr	r3, [pc, #216]	@ (8001cc8 <HAL_RCC_OscConfig+0x270>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fae3 	bl	80011bc <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fadf 	bl	80011bc <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1a1      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4927      	ldr	r1, [pc, #156]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	4b26      	ldr	r3, [pc, #152]	@ (8001cc8 <HAL_RCC_OscConfig+0x270>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fac2 	bl	80011bc <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fabe 	bl	80011bc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e180      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d03a      	beq.n	8001cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d019      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7ff faa2 	bl	80011bc <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fa9e 	bl	80011bc <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e160      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f000 face 	bl	800223c <RCC_Delay>
 8001ca0:	e01c      	b.n	8001cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fa88 	bl	80011bc <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cae:	e00f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fa84 	bl	80011bc <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d908      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e146      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	42420000 	.word	0x42420000
 8001ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	4b92      	ldr	r3, [pc, #584]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e9      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80a6 	beq.w	8001e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cee:	4b8b      	ldr	r3, [pc, #556]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10d      	bne.n	8001d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b88      	ldr	r3, [pc, #544]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a87      	ldr	r2, [pc, #540]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d04:	61d3      	str	r3, [r2, #28]
 8001d06:	4b85      	ldr	r3, [pc, #532]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b82      	ldr	r3, [pc, #520]	@ (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d118      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d22:	4b7f      	ldr	r3, [pc, #508]	@ (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7e      	ldr	r2, [pc, #504]	@ (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fa45 	bl	80011bc <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d36:	f7ff fa41 	bl	80011bc <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b64      	cmp	r3, #100	@ 0x64
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e103      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	4b75      	ldr	r3, [pc, #468]	@ (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x312>
 8001d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a6e      	ldr	r2, [pc, #440]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	e02d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x334>
 8001d72:	4b6a      	ldr	r3, [pc, #424]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a69      	ldr	r2, [pc, #420]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	6213      	str	r3, [r2, #32]
 8001d7e:	4b67      	ldr	r3, [pc, #412]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a66      	ldr	r2, [pc, #408]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	e01c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_OscConfig+0x356>
 8001d94:	4b61      	ldr	r3, [pc, #388]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a60      	ldr	r2, [pc, #384]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a5d      	ldr	r2, [pc, #372]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	e00b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001dae:	4b5b      	ldr	r3, [pc, #364]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	4b58      	ldr	r3, [pc, #352]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a57      	ldr	r2, [pc, #348]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d015      	beq.n	8001dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7ff f9f5 	bl	80011bc <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff f9f1 	bl	80011bc <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0b1      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	4b4b      	ldr	r3, [pc, #300]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0ee      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x37e>
 8001df8:	e014      	b.n	8001e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f9df 	bl	80011bc <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7ff f9db 	bl	80011bc <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e09b      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	4b40      	ldr	r3, [pc, #256]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ee      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d105      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8087 	beq.w	8001f4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e40:	4b36      	ldr	r3, [pc, #216]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d061      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d146      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b33      	ldr	r3, [pc, #204]	@ (8001f24 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff f9af 	bl	80011bc <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7ff f9ab 	bl	80011bc <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e06d      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e74:	4b29      	ldr	r3, [pc, #164]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e88:	d108      	bne.n	8001e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e8a:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4921      	ldr	r1, [pc, #132]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a19      	ldr	r1, [r3, #32]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	430b      	orrs	r3, r1
 8001eae:	491b      	ldr	r1, [pc, #108]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff f97f 	bl	80011bc <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f97b 	bl	80011bc <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e03d      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x46a>
 8001ee0:	e035      	b.n	8001f4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_RCC_OscConfig+0x4cc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f968 	bl	80011bc <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff f964 	bl	80011bc <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e026      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x498>
 8001f0e:	e01e      	b.n	8001f4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e019      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40007000 	.word	0x40007000
 8001f24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_RCC_OscConfig+0x500>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0d0      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f70:	4b6a      	ldr	r3, [pc, #424]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d910      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b67      	ldr	r3, [pc, #412]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 0207 	bic.w	r2, r3, #7
 8001f86:	4965      	ldr	r1, [pc, #404]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b63      	ldr	r3, [pc, #396]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0b8      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb8:	4b59      	ldr	r3, [pc, #356]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a58      	ldr	r2, [pc, #352]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd0:	4b53      	ldr	r3, [pc, #332]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b50      	ldr	r3, [pc, #320]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	494d      	ldr	r1, [pc, #308]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d040      	beq.n	800207c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d115      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e07f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	4b41      	ldr	r3, [pc, #260]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e073      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06b      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203a:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f023 0203 	bic.w	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4936      	ldr	r1, [pc, #216]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800204c:	f7ff f8b6 	bl	80011bc <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	e00a      	b.n	800206a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7ff f8b2 	bl	80011bc <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e053      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 020c 	and.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	429a      	cmp	r2, r3
 800207a:	d1eb      	bne.n	8002054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800207c:	4b27      	ldr	r3, [pc, #156]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d210      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b24      	ldr	r3, [pc, #144]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4922      	ldr	r1, [pc, #136]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b20      	ldr	r3, [pc, #128]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e032      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4916      	ldr	r1, [pc, #88]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020d6:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	490e      	ldr	r1, [pc, #56]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ea:	f000 f821 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	490a      	ldr	r1, [pc, #40]	@ (8002124 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	5ccb      	ldrb	r3, [r1, r3]
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <HAL_RCC_ClockConfig+0x1cc>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_ClockConfig+0x1d0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f814 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
 8002124:	08003ed0 	.word	0x08003ed0
 8002128:	20000000 	.word	0x20000000
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800214a:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d002      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x30>
 800215a:	2b08      	cmp	r3, #8
 800215c:	d003      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0x36>
 800215e:	e027      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002162:	613b      	str	r3, [r7, #16]
      break;
 8002164:	e027      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	4a17      	ldr	r2, [pc, #92]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d010      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0c5b      	lsrs	r3, r3, #17
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	4a11      	ldr	r2, [pc, #68]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002192:	fb03 f202 	mul.w	r2, r3, r2
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e004      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	613b      	str	r3, [r7, #16]
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021b2:	613b      	str	r3, [r7, #16]
      break;
 80021b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b6:	693b      	ldr	r3, [r7, #16]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	007a1200 	.word	0x007a1200
 80021cc:	08003ee8 	.word	0x08003ee8
 80021d0:	08003ef8 	.word	0x08003ef8
 80021d4:	003d0900 	.word	0x003d0900

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b02      	ldr	r3, [pc, #8]	@ (80021e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f0:	f7ff fff2 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	@ (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	08003ee0 	.word	0x08003ee0

08002214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002218:	f7ff ffde 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0adb      	lsrs	r3, r3, #11
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	@ (8002238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	08003ee0 	.word	0x08003ee0

0800223c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002244:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <RCC_Delay+0x34>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <RCC_Delay+0x38>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0a5b      	lsrs	r3, r3, #9
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002258:	bf00      	nop
  }
  while (Delay --);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	60fa      	str	r2, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <RCC_Delay+0x1c>
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000000 	.word	0x20000000
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e076      	b.n	8002378 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	2b00      	cmp	r3, #0
 8002290:	d108      	bne.n	80022a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800229a:	d009      	beq.n	80022b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
 80022a2:	e005      	b.n	80022b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fd96 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002334:	ea42 0103 	orr.w	r1, r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	0c1a      	lsrs	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f002 0204 	and.w	r2, r2, #4
 8002356:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002366:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002390:	f7fe ff14 	bl	80011bc <HAL_GetTick>
 8002394:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
 80023a8:	e12a      	b.n	8002600 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_SPI_Transmit+0x36>
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e122      	b.n	8002600 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_SPI_Transmit+0x48>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e11b      	b.n	8002600 <HAL_SPI_Transmit+0x280>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2203      	movs	r2, #3
 80023d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002416:	d10f      	bne.n	8002438 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002426:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002436:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002442:	2b40      	cmp	r3, #64	@ 0x40
 8002444:	d007      	beq.n	8002456 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800245e:	d152      	bne.n	8002506 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_SPI_Transmit+0xee>
 8002468:	8b7b      	ldrh	r3, [r7, #26]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d145      	bne.n	80024fa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	881a      	ldrh	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	1c9a      	adds	r2, r3, #2
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002492:	e032      	b.n	80024fa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d112      	bne.n	80024c8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	881a      	ldrh	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	1c9a      	adds	r2, r3, #2
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024c6:	e018      	b.n	80024fa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024c8:	f7fe fe78 	bl	80011bc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d803      	bhi.n	80024e0 <HAL_SPI_Transmit+0x160>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d102      	bne.n	80024e6 <HAL_SPI_Transmit+0x166>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e082      	b.n	8002600 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1c7      	bne.n	8002494 <HAL_SPI_Transmit+0x114>
 8002504:	e053      	b.n	80025ae <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_SPI_Transmit+0x194>
 800250e:	8b7b      	ldrh	r3, [r7, #26]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d147      	bne.n	80025a4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	7812      	ldrb	r2, [r2, #0]
 8002520:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800253a:	e033      	b.n	80025a4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b02      	cmp	r3, #2
 8002548:	d113      	bne.n	8002572 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002570:	e018      	b.n	80025a4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002572:	f7fe fe23 	bl	80011bc <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d803      	bhi.n	800258a <HAL_SPI_Transmit+0x20a>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d102      	bne.n	8002590 <HAL_SPI_Transmit+0x210>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e02d      	b.n	8002600 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1c6      	bne.n	800253c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fbd2 	bl	8002d5c <SPI_EndRxTxTransaction>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80025fe:	2300      	movs	r3, #0
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d001      	beq.n	8002628 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
 8002626:	e104      	b.n	8002832 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002630:	d112      	bne.n	8002658 <HAL_SPI_Receive+0x50>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10e      	bne.n	8002658 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2204      	movs	r2, #4
 800263e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f8f3 	bl	800283a <HAL_SPI_TransmitReceive>
 8002654:	4603      	mov	r3, r0
 8002656:	e0ec      	b.n	8002832 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002658:	f7fe fdb0 	bl	80011bc <HAL_GetTick>
 800265c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_SPI_Receive+0x62>
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0e1      	b.n	8002832 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_SPI_Receive+0x74>
 8002678:	2302      	movs	r3, #2
 800267a:	e0da      	b.n	8002832 <HAL_SPI_Receive+0x22a>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2204      	movs	r2, #4
 8002688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	88fa      	ldrh	r2, [r7, #6]
 80026a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026ca:	d10f      	bne.n	80026ec <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f6:	2b40      	cmp	r3, #64	@ 0x40
 80026f8:	d007      	beq.n	800270a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d170      	bne.n	80027f4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002712:	e035      	b.n	8002780 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d115      	bne.n	800274e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f103 020c 	add.w	r2, r3, #12
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800274c:	e018      	b.n	8002780 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800274e:	f7fe fd35 	bl	80011bc <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d803      	bhi.n	8002766 <HAL_SPI_Receive+0x15e>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d102      	bne.n	800276c <HAL_SPI_Receive+0x164>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e058      	b.n	8002832 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1c4      	bne.n	8002714 <HAL_SPI_Receive+0x10c>
 800278a:	e038      	b.n	80027fe <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d113      	bne.n	80027c2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a4:	b292      	uxth	r2, r2
 80027a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	1c9a      	adds	r2, r3, #2
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027c0:	e018      	b.n	80027f4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027c2:	f7fe fcfb 	bl	80011bc <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d803      	bhi.n	80027da <HAL_SPI_Receive+0x1d2>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d102      	bne.n	80027e0 <HAL_SPI_Receive+0x1d8>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d109      	bne.n	80027f4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e01e      	b.n	8002832 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1c6      	bne.n	800278c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fa58 	bl	8002cb8 <SPI_EndRxTransaction>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002830:	2300      	movs	r3, #0
  }
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b08a      	sub	sp, #40	@ 0x28
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002848:	2301      	movs	r3, #1
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800284c:	f7fe fcb6 	bl	80011bc <HAL_GetTick>
 8002850:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002858:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002864:	7ffb      	ldrb	r3, [r7, #31]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d00c      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x4a>
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002870:	d106      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x46>
 800287a:	7ffb      	ldrb	r3, [r7, #31]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d001      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
 8002882:	e17f      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_SPI_TransmitReceive+0x5c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_SPI_TransmitReceive+0x5c>
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e174      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_SPI_TransmitReceive+0x6e>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e16d      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34a>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d003      	beq.n	80028c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2205      	movs	r2, #5
 80028c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	887a      	ldrh	r2, [r7, #2]
 80028da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002904:	2b40      	cmp	r3, #64	@ 0x40
 8002906:	d007      	beq.n	8002918 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002920:	d17e      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_SPI_TransmitReceive+0xf6>
 800292a:	8afb      	ldrh	r3, [r7, #22]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d16c      	bne.n	8002a0a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002954:	e059      	b.n	8002a0a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d11b      	bne.n	800299c <HAL_SPI_TransmitReceive+0x162>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_SPI_TransmitReceive+0x162>
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	2b01      	cmp	r3, #1
 8002972:	d113      	bne.n	800299c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	881a      	ldrh	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	1c9a      	adds	r2, r3, #2
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d119      	bne.n	80029de <HAL_SPI_TransmitReceive+0x1a4>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d014      	beq.n	80029de <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	b292      	uxth	r2, r2
 80029c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c6:	1c9a      	adds	r2, r3, #2
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029da:	2301      	movs	r3, #1
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029de:	f7fe fbed 	bl	80011bc <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d80d      	bhi.n	8002a0a <HAL_SPI_TransmitReceive+0x1d0>
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d009      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0bc      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1a0      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x11c>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d19b      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x11c>
 8002a1e:	e082      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_SPI_TransmitReceive+0x1f4>
 8002a28:	8afb      	ldrh	r3, [r7, #22]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d171      	bne.n	8002b12 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a54:	e05d      	b.n	8002b12 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d11c      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x264>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x264>
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d114      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d119      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x2a6>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d014      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002adc:	2301      	movs	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ae0:	f7fe fb6c 	bl	80011bc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d803      	bhi.n	8002af8 <HAL_SPI_TransmitReceive+0x2be>
 8002af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d102      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x2c4>
 8002af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e038      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d19c      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x21c>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d197      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b26:	6a3a      	ldr	r2, [r7, #32]
 8002b28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f916 	bl	8002d5c <SPI_EndRxTxTransaction>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e01d      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3728      	adds	r7, #40	@ 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b9a:	b2db      	uxtb	r3, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
	...

08002ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bb8:	f7fe fb00 	bl	80011bc <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bc8:	f7fe faf8 	bl	80011bc <HAL_GetTick>
 8002bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bce:	4b39      	ldr	r3, [pc, #228]	@ (8002cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	015b      	lsls	r3, r3, #5
 8002bd4:	0d1b      	lsrs	r3, r3, #20
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bde:	e054      	b.n	8002c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d050      	beq.n	8002c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002be8:	f7fe fae8 	bl	80011bc <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d902      	bls.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d13d      	bne.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c16:	d111      	bne.n	8002c3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c20:	d004      	beq.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2a:	d107      	bne.n	8002c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c44:	d10f      	bne.n	8002c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e017      	b.n	8002caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4013      	ands	r3, r2
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d19b      	bne.n	8002be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ccc:	d111      	bne.n	8002cf2 <SPI_EndRxTransaction+0x3a>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cd6:	d004      	beq.n	8002ce2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce0:	d107      	bne.n	8002cf2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cfa:	d117      	bne.n	8002d2c <SPI_EndRxTransaction+0x74>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d04:	d112      	bne.n	8002d2c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2101      	movs	r1, #1
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f7ff ff49 	bl	8002ba8 <SPI_WaitFlagStateUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01a      	beq.n	8002d52 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e013      	b.n	8002d54 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2180      	movs	r1, #128	@ 0x80
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff ff36 	bl	8002ba8 <SPI_WaitFlagStateUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	f043 0220 	orr.w	r2, r3, #32
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e000      	b.n	8002d54 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	2102      	movs	r1, #2
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff ff18 	bl	8002ba8 <SPI_WaitFlagStateUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e013      	b.n	8002db6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2200      	movs	r2, #0
 8002d96:	2180      	movs	r1, #128	@ 0x80
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff ff05 	bl	8002ba8 <SPI_WaitFlagStateUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e000      	b.n	8002db6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e042      	b.n	8002e56 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fe f91f 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2224      	movs	r2, #36	@ 0x24
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fa08 	bl	8003218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b08a      	sub	sp, #40	@ 0x28
 8002e62:	af02      	add	r7, sp, #8
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d175      	bne.n	8002f6a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_UART_Transmit+0x2c>
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e06e      	b.n	8002f6c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2221      	movs	r2, #33	@ 0x21
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe f98e 	bl	80011bc <HAL_GetTick>
 8002ea0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	88fa      	ldrh	r2, [r7, #6]
 8002ea6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eb6:	d108      	bne.n	8002eca <HAL_UART_Transmit+0x6c>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	e003      	b.n	8002ed2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ed2:	e02e      	b.n	8002f32 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2200      	movs	r2, #0
 8002edc:	2180      	movs	r1, #128	@ 0x80
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f8df 	bl	80030a2 <UART_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e03a      	b.n	8002f6c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f0a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	3302      	adds	r3, #2
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	e007      	b.n	8002f24 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	781a      	ldrb	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1cb      	bne.n	8002ed4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2200      	movs	r2, #0
 8002f44:	2140      	movs	r1, #64	@ 0x40
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f8ab 	bl	80030a2 <UART_WaitOnFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e006      	b.n	8002f6c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	@ 0x28
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	f040 8081 	bne.w	8003098 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_UART_Receive+0x2e>
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e079      	b.n	800309a <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2222      	movs	r2, #34	@ 0x22
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fba:	f7fe f8ff 	bl	80011bc <HAL_GetTick>
 8002fbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_UART_Receive+0x74>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e003      	b.n	8002ff0 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ff0:	e047      	b.n	8003082 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f850 	bl	80030a2 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e042      	b.n	800309a <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003026:	b29a      	uxth	r2, r3
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	3302      	adds	r3, #2
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e01f      	b.n	8003074 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303c:	d007      	beq.n	800304e <HAL_UART_Receive+0xda>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <HAL_UART_Receive+0xe8>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e008      	b.n	800306e <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003068:	b2da      	uxtb	r2, r3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3301      	adds	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1b2      	bne.n	8002ff2 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b2:	e03b      	b.n	800312c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ba:	d037      	beq.n	800312c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030bc:	f7fe f87e 	bl	80011bc <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	6a3a      	ldr	r2, [r7, #32]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d302      	bcc.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e03a      	b.n	800314c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d023      	beq.n	800312c <UART_WaitOnFlagUntilTimeout+0x8a>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b80      	cmp	r3, #128	@ 0x80
 80030e8:	d020      	beq.n	800312c <UART_WaitOnFlagUntilTimeout+0x8a>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b40      	cmp	r3, #64	@ 0x40
 80030ee:	d01d      	beq.n	800312c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d116      	bne.n	800312c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f81d 	bl	8003154 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2208      	movs	r2, #8
 800311e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e00f      	b.n	800314c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4013      	ands	r3, r2
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	429a      	cmp	r2, r3
 8003148:	d0b4      	beq.n	80030b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003154:	b480      	push	{r7}
 8003156:	b095      	sub	sp, #84	@ 0x54
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	330c      	adds	r3, #12
 8003162:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003166:	e853 3f00 	ldrex	r3, [r3]
 800316a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800316c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800317c:	643a      	str	r2, [r7, #64]	@ 0x40
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003184:	e841 2300 	strex	r3, r2, [r1]
 8003188:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800318a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e5      	bne.n	800315c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3314      	adds	r3, #20
 8003196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	e853 3f00 	ldrex	r3, [r3]
 800319e:	61fb      	str	r3, [r7, #28]
   return(result);
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f023 0301 	bic.w	r3, r3, #1
 80031a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3314      	adds	r3, #20
 80031ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031b8:	e841 2300 	strex	r3, r2, [r1]
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e5      	bne.n	8003190 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d119      	bne.n	8003200 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	e853 3f00 	ldrex	r3, [r3]
 80031da:	60bb      	str	r3, [r7, #8]
   return(result);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f023 0310 	bic.w	r3, r3, #16
 80031e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	330c      	adds	r3, #12
 80031ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031ec:	61ba      	str	r2, [r7, #24]
 80031ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f0:	6979      	ldr	r1, [r7, #20]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	e841 2300 	strex	r3, r2, [r1]
 80031f8:	613b      	str	r3, [r7, #16]
   return(result);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e5      	bne.n	80031cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800320e:	bf00      	nop
 8003210:	3754      	adds	r7, #84	@ 0x54
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003252:	f023 030c 	bic.w	r3, r3, #12
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	430b      	orrs	r3, r1
 800325e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2c      	ldr	r2, [pc, #176]	@ (800332c <UART_SetConfig+0x114>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7fe ffc8 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	e002      	b.n	800328e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7fe ffb0 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 800328c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	009a      	lsls	r2, r3, #2
 8003298:	441a      	add	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	4a22      	ldr	r2, [pc, #136]	@ (8003330 <UART_SetConfig+0x118>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	0119      	lsls	r1, r3, #4
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	009a      	lsls	r2, r3, #2
 80032b8:	441a      	add	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <UART_SetConfig+0x118>)
 80032c6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2064      	movs	r0, #100	@ 0x64
 80032ce:	fb00 f303 	mul.w	r3, r0, r3
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	3332      	adds	r3, #50	@ 0x32
 80032d8:	4a15      	ldr	r2, [pc, #84]	@ (8003330 <UART_SetConfig+0x118>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032e4:	4419      	add	r1, r3
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009a      	lsls	r2, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003330 <UART_SetConfig+0x118>)
 80032fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2064      	movs	r0, #100	@ 0x64
 8003306:	fb00 f303 	mul.w	r3, r0, r3
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	3332      	adds	r3, #50	@ 0x32
 8003310:	4a07      	ldr	r2, [pc, #28]	@ (8003330 <UART_SetConfig+0x118>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	440a      	add	r2, r1
 8003322:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40013800 	.word	0x40013800
 8003330:	51eb851f 	.word	0x51eb851f

08003334 <siprintf>:
 8003334:	b40e      	push	{r1, r2, r3}
 8003336:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800333a:	b500      	push	{lr}
 800333c:	b09c      	sub	sp, #112	@ 0x70
 800333e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003340:	9002      	str	r0, [sp, #8]
 8003342:	9006      	str	r0, [sp, #24]
 8003344:	9107      	str	r1, [sp, #28]
 8003346:	9104      	str	r1, [sp, #16]
 8003348:	4808      	ldr	r0, [pc, #32]	@ (800336c <siprintf+0x38>)
 800334a:	4909      	ldr	r1, [pc, #36]	@ (8003370 <siprintf+0x3c>)
 800334c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003350:	9105      	str	r1, [sp, #20]
 8003352:	6800      	ldr	r0, [r0, #0]
 8003354:	a902      	add	r1, sp, #8
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	f000 f9c4 	bl	80036e4 <_svfiprintf_r>
 800335c:	2200      	movs	r2, #0
 800335e:	9b02      	ldr	r3, [sp, #8]
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	b01c      	add	sp, #112	@ 0x70
 8003364:	f85d eb04 	ldr.w	lr, [sp], #4
 8003368:	b003      	add	sp, #12
 800336a:	4770      	bx	lr
 800336c:	2000000c 	.word	0x2000000c
 8003370:	ffff0208 	.word	0xffff0208

08003374 <memset>:
 8003374:	4603      	mov	r3, r0
 8003376:	4402      	add	r2, r0
 8003378:	4293      	cmp	r3, r2
 800337a:	d100      	bne.n	800337e <memset+0xa>
 800337c:	4770      	bx	lr
 800337e:	f803 1b01 	strb.w	r1, [r3], #1
 8003382:	e7f9      	b.n	8003378 <memset+0x4>

08003384 <strchr>:
 8003384:	4603      	mov	r3, r0
 8003386:	b2c9      	uxtb	r1, r1
 8003388:	4618      	mov	r0, r3
 800338a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800338e:	b112      	cbz	r2, 8003396 <strchr+0x12>
 8003390:	428a      	cmp	r2, r1
 8003392:	d1f9      	bne.n	8003388 <strchr+0x4>
 8003394:	4770      	bx	lr
 8003396:	2900      	cmp	r1, #0
 8003398:	bf18      	it	ne
 800339a:	2000      	movne	r0, #0
 800339c:	4770      	bx	lr

0800339e <strstr>:
 800339e:	780a      	ldrb	r2, [r1, #0]
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	b96a      	cbnz	r2, 80033c0 <strstr+0x22>
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d109      	bne.n	80033be <strstr+0x20>
 80033aa:	460c      	mov	r4, r1
 80033ac:	4605      	mov	r5, r0
 80033ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f6      	beq.n	80033a4 <strstr+0x6>
 80033b6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80033ba:	429e      	cmp	r6, r3
 80033bc:	d0f7      	beq.n	80033ae <strstr+0x10>
 80033be:	3001      	adds	r0, #1
 80033c0:	7803      	ldrb	r3, [r0, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1ef      	bne.n	80033a6 <strstr+0x8>
 80033c6:	4618      	mov	r0, r3
 80033c8:	e7ec      	b.n	80033a4 <strstr+0x6>
	...

080033cc <__errno>:
 80033cc:	4b01      	ldr	r3, [pc, #4]	@ (80033d4 <__errno+0x8>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	2000000c 	.word	0x2000000c

080033d8 <__libc_init_array>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	2600      	movs	r6, #0
 80033dc:	4d0c      	ldr	r5, [pc, #48]	@ (8003410 <__libc_init_array+0x38>)
 80033de:	4c0d      	ldr	r4, [pc, #52]	@ (8003414 <__libc_init_array+0x3c>)
 80033e0:	1b64      	subs	r4, r4, r5
 80033e2:	10a4      	asrs	r4, r4, #2
 80033e4:	42a6      	cmp	r6, r4
 80033e6:	d109      	bne.n	80033fc <__libc_init_array+0x24>
 80033e8:	f000 fc78 	bl	8003cdc <_init>
 80033ec:	2600      	movs	r6, #0
 80033ee:	4d0a      	ldr	r5, [pc, #40]	@ (8003418 <__libc_init_array+0x40>)
 80033f0:	4c0a      	ldr	r4, [pc, #40]	@ (800341c <__libc_init_array+0x44>)
 80033f2:	1b64      	subs	r4, r4, r5
 80033f4:	10a4      	asrs	r4, r4, #2
 80033f6:	42a6      	cmp	r6, r4
 80033f8:	d105      	bne.n	8003406 <__libc_init_array+0x2e>
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003400:	4798      	blx	r3
 8003402:	3601      	adds	r6, #1
 8003404:	e7ee      	b.n	80033e4 <__libc_init_array+0xc>
 8003406:	f855 3b04 	ldr.w	r3, [r5], #4
 800340a:	4798      	blx	r3
 800340c:	3601      	adds	r6, #1
 800340e:	e7f2      	b.n	80033f6 <__libc_init_array+0x1e>
 8003410:	08003f38 	.word	0x08003f38
 8003414:	08003f38 	.word	0x08003f38
 8003418:	08003f38 	.word	0x08003f38
 800341c:	08003f3c 	.word	0x08003f3c

08003420 <__retarget_lock_acquire_recursive>:
 8003420:	4770      	bx	lr

08003422 <__retarget_lock_release_recursive>:
 8003422:	4770      	bx	lr

08003424 <memcpy>:
 8003424:	440a      	add	r2, r1
 8003426:	4291      	cmp	r1, r2
 8003428:	f100 33ff 	add.w	r3, r0, #4294967295
 800342c:	d100      	bne.n	8003430 <memcpy+0xc>
 800342e:	4770      	bx	lr
 8003430:	b510      	push	{r4, lr}
 8003432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003436:	4291      	cmp	r1, r2
 8003438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800343c:	d1f9      	bne.n	8003432 <memcpy+0xe>
 800343e:	bd10      	pop	{r4, pc}

08003440 <_free_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4605      	mov	r5, r0
 8003444:	2900      	cmp	r1, #0
 8003446:	d040      	beq.n	80034ca <_free_r+0x8a>
 8003448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800344c:	1f0c      	subs	r4, r1, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	bfb8      	it	lt
 8003452:	18e4      	addlt	r4, r4, r3
 8003454:	f000 f8de 	bl	8003614 <__malloc_lock>
 8003458:	4a1c      	ldr	r2, [pc, #112]	@ (80034cc <_free_r+0x8c>)
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	b933      	cbnz	r3, 800346c <_free_r+0x2c>
 800345e:	6063      	str	r3, [r4, #4]
 8003460:	6014      	str	r4, [r2, #0]
 8003462:	4628      	mov	r0, r5
 8003464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003468:	f000 b8da 	b.w	8003620 <__malloc_unlock>
 800346c:	42a3      	cmp	r3, r4
 800346e:	d908      	bls.n	8003482 <_free_r+0x42>
 8003470:	6820      	ldr	r0, [r4, #0]
 8003472:	1821      	adds	r1, r4, r0
 8003474:	428b      	cmp	r3, r1
 8003476:	bf01      	itttt	eq
 8003478:	6819      	ldreq	r1, [r3, #0]
 800347a:	685b      	ldreq	r3, [r3, #4]
 800347c:	1809      	addeq	r1, r1, r0
 800347e:	6021      	streq	r1, [r4, #0]
 8003480:	e7ed      	b.n	800345e <_free_r+0x1e>
 8003482:	461a      	mov	r2, r3
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	b10b      	cbz	r3, 800348c <_free_r+0x4c>
 8003488:	42a3      	cmp	r3, r4
 800348a:	d9fa      	bls.n	8003482 <_free_r+0x42>
 800348c:	6811      	ldr	r1, [r2, #0]
 800348e:	1850      	adds	r0, r2, r1
 8003490:	42a0      	cmp	r0, r4
 8003492:	d10b      	bne.n	80034ac <_free_r+0x6c>
 8003494:	6820      	ldr	r0, [r4, #0]
 8003496:	4401      	add	r1, r0
 8003498:	1850      	adds	r0, r2, r1
 800349a:	4283      	cmp	r3, r0
 800349c:	6011      	str	r1, [r2, #0]
 800349e:	d1e0      	bne.n	8003462 <_free_r+0x22>
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4408      	add	r0, r1
 80034a6:	6010      	str	r0, [r2, #0]
 80034a8:	6053      	str	r3, [r2, #4]
 80034aa:	e7da      	b.n	8003462 <_free_r+0x22>
 80034ac:	d902      	bls.n	80034b4 <_free_r+0x74>
 80034ae:	230c      	movs	r3, #12
 80034b0:	602b      	str	r3, [r5, #0]
 80034b2:	e7d6      	b.n	8003462 <_free_r+0x22>
 80034b4:	6820      	ldr	r0, [r4, #0]
 80034b6:	1821      	adds	r1, r4, r0
 80034b8:	428b      	cmp	r3, r1
 80034ba:	bf01      	itttt	eq
 80034bc:	6819      	ldreq	r1, [r3, #0]
 80034be:	685b      	ldreq	r3, [r3, #4]
 80034c0:	1809      	addeq	r1, r1, r0
 80034c2:	6021      	streq	r1, [r4, #0]
 80034c4:	6063      	str	r3, [r4, #4]
 80034c6:	6054      	str	r4, [r2, #4]
 80034c8:	e7cb      	b.n	8003462 <_free_r+0x22>
 80034ca:	bd38      	pop	{r3, r4, r5, pc}
 80034cc:	20001080 	.word	0x20001080

080034d0 <sbrk_aligned>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003510 <sbrk_aligned+0x40>)
 80034d4:	460c      	mov	r4, r1
 80034d6:	6831      	ldr	r1, [r6, #0]
 80034d8:	4605      	mov	r5, r0
 80034da:	b911      	cbnz	r1, 80034e2 <sbrk_aligned+0x12>
 80034dc:	f000 fbaa 	bl	8003c34 <_sbrk_r>
 80034e0:	6030      	str	r0, [r6, #0]
 80034e2:	4621      	mov	r1, r4
 80034e4:	4628      	mov	r0, r5
 80034e6:	f000 fba5 	bl	8003c34 <_sbrk_r>
 80034ea:	1c43      	adds	r3, r0, #1
 80034ec:	d103      	bne.n	80034f6 <sbrk_aligned+0x26>
 80034ee:	f04f 34ff 	mov.w	r4, #4294967295
 80034f2:	4620      	mov	r0, r4
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
 80034f6:	1cc4      	adds	r4, r0, #3
 80034f8:	f024 0403 	bic.w	r4, r4, #3
 80034fc:	42a0      	cmp	r0, r4
 80034fe:	d0f8      	beq.n	80034f2 <sbrk_aligned+0x22>
 8003500:	1a21      	subs	r1, r4, r0
 8003502:	4628      	mov	r0, r5
 8003504:	f000 fb96 	bl	8003c34 <_sbrk_r>
 8003508:	3001      	adds	r0, #1
 800350a:	d1f2      	bne.n	80034f2 <sbrk_aligned+0x22>
 800350c:	e7ef      	b.n	80034ee <sbrk_aligned+0x1e>
 800350e:	bf00      	nop
 8003510:	2000107c 	.word	0x2000107c

08003514 <_malloc_r>:
 8003514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003518:	1ccd      	adds	r5, r1, #3
 800351a:	f025 0503 	bic.w	r5, r5, #3
 800351e:	3508      	adds	r5, #8
 8003520:	2d0c      	cmp	r5, #12
 8003522:	bf38      	it	cc
 8003524:	250c      	movcc	r5, #12
 8003526:	2d00      	cmp	r5, #0
 8003528:	4606      	mov	r6, r0
 800352a:	db01      	blt.n	8003530 <_malloc_r+0x1c>
 800352c:	42a9      	cmp	r1, r5
 800352e:	d904      	bls.n	800353a <_malloc_r+0x26>
 8003530:	230c      	movs	r3, #12
 8003532:	6033      	str	r3, [r6, #0]
 8003534:	2000      	movs	r0, #0
 8003536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800353a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003610 <_malloc_r+0xfc>
 800353e:	f000 f869 	bl	8003614 <__malloc_lock>
 8003542:	f8d8 3000 	ldr.w	r3, [r8]
 8003546:	461c      	mov	r4, r3
 8003548:	bb44      	cbnz	r4, 800359c <_malloc_r+0x88>
 800354a:	4629      	mov	r1, r5
 800354c:	4630      	mov	r0, r6
 800354e:	f7ff ffbf 	bl	80034d0 <sbrk_aligned>
 8003552:	1c43      	adds	r3, r0, #1
 8003554:	4604      	mov	r4, r0
 8003556:	d158      	bne.n	800360a <_malloc_r+0xf6>
 8003558:	f8d8 4000 	ldr.w	r4, [r8]
 800355c:	4627      	mov	r7, r4
 800355e:	2f00      	cmp	r7, #0
 8003560:	d143      	bne.n	80035ea <_malloc_r+0xd6>
 8003562:	2c00      	cmp	r4, #0
 8003564:	d04b      	beq.n	80035fe <_malloc_r+0xea>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	4639      	mov	r1, r7
 800356a:	4630      	mov	r0, r6
 800356c:	eb04 0903 	add.w	r9, r4, r3
 8003570:	f000 fb60 	bl	8003c34 <_sbrk_r>
 8003574:	4581      	cmp	r9, r0
 8003576:	d142      	bne.n	80035fe <_malloc_r+0xea>
 8003578:	6821      	ldr	r1, [r4, #0]
 800357a:	4630      	mov	r0, r6
 800357c:	1a6d      	subs	r5, r5, r1
 800357e:	4629      	mov	r1, r5
 8003580:	f7ff ffa6 	bl	80034d0 <sbrk_aligned>
 8003584:	3001      	adds	r0, #1
 8003586:	d03a      	beq.n	80035fe <_malloc_r+0xea>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	442b      	add	r3, r5
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	f8d8 3000 	ldr.w	r3, [r8]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	bb62      	cbnz	r2, 80035f0 <_malloc_r+0xdc>
 8003596:	f8c8 7000 	str.w	r7, [r8]
 800359a:	e00f      	b.n	80035bc <_malloc_r+0xa8>
 800359c:	6822      	ldr	r2, [r4, #0]
 800359e:	1b52      	subs	r2, r2, r5
 80035a0:	d420      	bmi.n	80035e4 <_malloc_r+0xd0>
 80035a2:	2a0b      	cmp	r2, #11
 80035a4:	d917      	bls.n	80035d6 <_malloc_r+0xc2>
 80035a6:	1961      	adds	r1, r4, r5
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	6025      	str	r5, [r4, #0]
 80035ac:	bf18      	it	ne
 80035ae:	6059      	strne	r1, [r3, #4]
 80035b0:	6863      	ldr	r3, [r4, #4]
 80035b2:	bf08      	it	eq
 80035b4:	f8c8 1000 	streq.w	r1, [r8]
 80035b8:	5162      	str	r2, [r4, r5]
 80035ba:	604b      	str	r3, [r1, #4]
 80035bc:	4630      	mov	r0, r6
 80035be:	f000 f82f 	bl	8003620 <__malloc_unlock>
 80035c2:	f104 000b 	add.w	r0, r4, #11
 80035c6:	1d23      	adds	r3, r4, #4
 80035c8:	f020 0007 	bic.w	r0, r0, #7
 80035cc:	1ac2      	subs	r2, r0, r3
 80035ce:	bf1c      	itt	ne
 80035d0:	1a1b      	subne	r3, r3, r0
 80035d2:	50a3      	strne	r3, [r4, r2]
 80035d4:	e7af      	b.n	8003536 <_malloc_r+0x22>
 80035d6:	6862      	ldr	r2, [r4, #4]
 80035d8:	42a3      	cmp	r3, r4
 80035da:	bf0c      	ite	eq
 80035dc:	f8c8 2000 	streq.w	r2, [r8]
 80035e0:	605a      	strne	r2, [r3, #4]
 80035e2:	e7eb      	b.n	80035bc <_malloc_r+0xa8>
 80035e4:	4623      	mov	r3, r4
 80035e6:	6864      	ldr	r4, [r4, #4]
 80035e8:	e7ae      	b.n	8003548 <_malloc_r+0x34>
 80035ea:	463c      	mov	r4, r7
 80035ec:	687f      	ldr	r7, [r7, #4]
 80035ee:	e7b6      	b.n	800355e <_malloc_r+0x4a>
 80035f0:	461a      	mov	r2, r3
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	42a3      	cmp	r3, r4
 80035f6:	d1fb      	bne.n	80035f0 <_malloc_r+0xdc>
 80035f8:	2300      	movs	r3, #0
 80035fa:	6053      	str	r3, [r2, #4]
 80035fc:	e7de      	b.n	80035bc <_malloc_r+0xa8>
 80035fe:	230c      	movs	r3, #12
 8003600:	4630      	mov	r0, r6
 8003602:	6033      	str	r3, [r6, #0]
 8003604:	f000 f80c 	bl	8003620 <__malloc_unlock>
 8003608:	e794      	b.n	8003534 <_malloc_r+0x20>
 800360a:	6005      	str	r5, [r0, #0]
 800360c:	e7d6      	b.n	80035bc <_malloc_r+0xa8>
 800360e:	bf00      	nop
 8003610:	20001080 	.word	0x20001080

08003614 <__malloc_lock>:
 8003614:	4801      	ldr	r0, [pc, #4]	@ (800361c <__malloc_lock+0x8>)
 8003616:	f7ff bf03 	b.w	8003420 <__retarget_lock_acquire_recursive>
 800361a:	bf00      	nop
 800361c:	20001078 	.word	0x20001078

08003620 <__malloc_unlock>:
 8003620:	4801      	ldr	r0, [pc, #4]	@ (8003628 <__malloc_unlock+0x8>)
 8003622:	f7ff befe 	b.w	8003422 <__retarget_lock_release_recursive>
 8003626:	bf00      	nop
 8003628:	20001078 	.word	0x20001078

0800362c <__ssputs_r>:
 800362c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003630:	461f      	mov	r7, r3
 8003632:	688e      	ldr	r6, [r1, #8]
 8003634:	4682      	mov	sl, r0
 8003636:	42be      	cmp	r6, r7
 8003638:	460c      	mov	r4, r1
 800363a:	4690      	mov	r8, r2
 800363c:	680b      	ldr	r3, [r1, #0]
 800363e:	d82d      	bhi.n	800369c <__ssputs_r+0x70>
 8003640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003648:	d026      	beq.n	8003698 <__ssputs_r+0x6c>
 800364a:	6965      	ldr	r5, [r4, #20]
 800364c:	6909      	ldr	r1, [r1, #16]
 800364e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003652:	eba3 0901 	sub.w	r9, r3, r1
 8003656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800365a:	1c7b      	adds	r3, r7, #1
 800365c:	444b      	add	r3, r9
 800365e:	106d      	asrs	r5, r5, #1
 8003660:	429d      	cmp	r5, r3
 8003662:	bf38      	it	cc
 8003664:	461d      	movcc	r5, r3
 8003666:	0553      	lsls	r3, r2, #21
 8003668:	d527      	bpl.n	80036ba <__ssputs_r+0x8e>
 800366a:	4629      	mov	r1, r5
 800366c:	f7ff ff52 	bl	8003514 <_malloc_r>
 8003670:	4606      	mov	r6, r0
 8003672:	b360      	cbz	r0, 80036ce <__ssputs_r+0xa2>
 8003674:	464a      	mov	r2, r9
 8003676:	6921      	ldr	r1, [r4, #16]
 8003678:	f7ff fed4 	bl	8003424 <memcpy>
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003686:	81a3      	strh	r3, [r4, #12]
 8003688:	6126      	str	r6, [r4, #16]
 800368a:	444e      	add	r6, r9
 800368c:	6026      	str	r6, [r4, #0]
 800368e:	463e      	mov	r6, r7
 8003690:	6165      	str	r5, [r4, #20]
 8003692:	eba5 0509 	sub.w	r5, r5, r9
 8003696:	60a5      	str	r5, [r4, #8]
 8003698:	42be      	cmp	r6, r7
 800369a:	d900      	bls.n	800369e <__ssputs_r+0x72>
 800369c:	463e      	mov	r6, r7
 800369e:	4632      	mov	r2, r6
 80036a0:	4641      	mov	r1, r8
 80036a2:	6820      	ldr	r0, [r4, #0]
 80036a4:	f000 faac 	bl	8003c00 <memmove>
 80036a8:	2000      	movs	r0, #0
 80036aa:	68a3      	ldr	r3, [r4, #8]
 80036ac:	1b9b      	subs	r3, r3, r6
 80036ae:	60a3      	str	r3, [r4, #8]
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	4433      	add	r3, r6
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ba:	462a      	mov	r2, r5
 80036bc:	f000 fad8 	bl	8003c70 <_realloc_r>
 80036c0:	4606      	mov	r6, r0
 80036c2:	2800      	cmp	r0, #0
 80036c4:	d1e0      	bne.n	8003688 <__ssputs_r+0x5c>
 80036c6:	4650      	mov	r0, sl
 80036c8:	6921      	ldr	r1, [r4, #16]
 80036ca:	f7ff feb9 	bl	8003440 <_free_r>
 80036ce:	230c      	movs	r3, #12
 80036d0:	f8ca 3000 	str.w	r3, [sl]
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	f04f 30ff 	mov.w	r0, #4294967295
 80036da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	e7e9      	b.n	80036b6 <__ssputs_r+0x8a>
	...

080036e4 <_svfiprintf_r>:
 80036e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e8:	4698      	mov	r8, r3
 80036ea:	898b      	ldrh	r3, [r1, #12]
 80036ec:	4607      	mov	r7, r0
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	460d      	mov	r5, r1
 80036f2:	4614      	mov	r4, r2
 80036f4:	b09d      	sub	sp, #116	@ 0x74
 80036f6:	d510      	bpl.n	800371a <_svfiprintf_r+0x36>
 80036f8:	690b      	ldr	r3, [r1, #16]
 80036fa:	b973      	cbnz	r3, 800371a <_svfiprintf_r+0x36>
 80036fc:	2140      	movs	r1, #64	@ 0x40
 80036fe:	f7ff ff09 	bl	8003514 <_malloc_r>
 8003702:	6028      	str	r0, [r5, #0]
 8003704:	6128      	str	r0, [r5, #16]
 8003706:	b930      	cbnz	r0, 8003716 <_svfiprintf_r+0x32>
 8003708:	230c      	movs	r3, #12
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	b01d      	add	sp, #116	@ 0x74
 8003712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003716:	2340      	movs	r3, #64	@ 0x40
 8003718:	616b      	str	r3, [r5, #20]
 800371a:	2300      	movs	r3, #0
 800371c:	9309      	str	r3, [sp, #36]	@ 0x24
 800371e:	2320      	movs	r3, #32
 8003720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003724:	2330      	movs	r3, #48	@ 0x30
 8003726:	f04f 0901 	mov.w	r9, #1
 800372a:	f8cd 800c 	str.w	r8, [sp, #12]
 800372e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80038c8 <_svfiprintf_r+0x1e4>
 8003732:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003736:	4623      	mov	r3, r4
 8003738:	469a      	mov	sl, r3
 800373a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800373e:	b10a      	cbz	r2, 8003744 <_svfiprintf_r+0x60>
 8003740:	2a25      	cmp	r2, #37	@ 0x25
 8003742:	d1f9      	bne.n	8003738 <_svfiprintf_r+0x54>
 8003744:	ebba 0b04 	subs.w	fp, sl, r4
 8003748:	d00b      	beq.n	8003762 <_svfiprintf_r+0x7e>
 800374a:	465b      	mov	r3, fp
 800374c:	4622      	mov	r2, r4
 800374e:	4629      	mov	r1, r5
 8003750:	4638      	mov	r0, r7
 8003752:	f7ff ff6b 	bl	800362c <__ssputs_r>
 8003756:	3001      	adds	r0, #1
 8003758:	f000 80a7 	beq.w	80038aa <_svfiprintf_r+0x1c6>
 800375c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800375e:	445a      	add	r2, fp
 8003760:	9209      	str	r2, [sp, #36]	@ 0x24
 8003762:	f89a 3000 	ldrb.w	r3, [sl]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 809f 	beq.w	80038aa <_svfiprintf_r+0x1c6>
 800376c:	2300      	movs	r3, #0
 800376e:	f04f 32ff 	mov.w	r2, #4294967295
 8003772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003776:	f10a 0a01 	add.w	sl, sl, #1
 800377a:	9304      	str	r3, [sp, #16]
 800377c:	9307      	str	r3, [sp, #28]
 800377e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003782:	931a      	str	r3, [sp, #104]	@ 0x68
 8003784:	4654      	mov	r4, sl
 8003786:	2205      	movs	r2, #5
 8003788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800378c:	484e      	ldr	r0, [pc, #312]	@ (80038c8 <_svfiprintf_r+0x1e4>)
 800378e:	f000 fa61 	bl	8003c54 <memchr>
 8003792:	9a04      	ldr	r2, [sp, #16]
 8003794:	b9d8      	cbnz	r0, 80037ce <_svfiprintf_r+0xea>
 8003796:	06d0      	lsls	r0, r2, #27
 8003798:	bf44      	itt	mi
 800379a:	2320      	movmi	r3, #32
 800379c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037a0:	0711      	lsls	r1, r2, #28
 80037a2:	bf44      	itt	mi
 80037a4:	232b      	movmi	r3, #43	@ 0x2b
 80037a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037aa:	f89a 3000 	ldrb.w	r3, [sl]
 80037ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80037b0:	d015      	beq.n	80037de <_svfiprintf_r+0xfa>
 80037b2:	4654      	mov	r4, sl
 80037b4:	2000      	movs	r0, #0
 80037b6:	f04f 0c0a 	mov.w	ip, #10
 80037ba:	9a07      	ldr	r2, [sp, #28]
 80037bc:	4621      	mov	r1, r4
 80037be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037c2:	3b30      	subs	r3, #48	@ 0x30
 80037c4:	2b09      	cmp	r3, #9
 80037c6:	d94b      	bls.n	8003860 <_svfiprintf_r+0x17c>
 80037c8:	b1b0      	cbz	r0, 80037f8 <_svfiprintf_r+0x114>
 80037ca:	9207      	str	r2, [sp, #28]
 80037cc:	e014      	b.n	80037f8 <_svfiprintf_r+0x114>
 80037ce:	eba0 0308 	sub.w	r3, r0, r8
 80037d2:	fa09 f303 	lsl.w	r3, r9, r3
 80037d6:	4313      	orrs	r3, r2
 80037d8:	46a2      	mov	sl, r4
 80037da:	9304      	str	r3, [sp, #16]
 80037dc:	e7d2      	b.n	8003784 <_svfiprintf_r+0xa0>
 80037de:	9b03      	ldr	r3, [sp, #12]
 80037e0:	1d19      	adds	r1, r3, #4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	9103      	str	r1, [sp, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bfbb      	ittet	lt
 80037ea:	425b      	neglt	r3, r3
 80037ec:	f042 0202 	orrlt.w	r2, r2, #2
 80037f0:	9307      	strge	r3, [sp, #28]
 80037f2:	9307      	strlt	r3, [sp, #28]
 80037f4:	bfb8      	it	lt
 80037f6:	9204      	strlt	r2, [sp, #16]
 80037f8:	7823      	ldrb	r3, [r4, #0]
 80037fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80037fc:	d10a      	bne.n	8003814 <_svfiprintf_r+0x130>
 80037fe:	7863      	ldrb	r3, [r4, #1]
 8003800:	2b2a      	cmp	r3, #42	@ 0x2a
 8003802:	d132      	bne.n	800386a <_svfiprintf_r+0x186>
 8003804:	9b03      	ldr	r3, [sp, #12]
 8003806:	3402      	adds	r4, #2
 8003808:	1d1a      	adds	r2, r3, #4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	9203      	str	r2, [sp, #12]
 800380e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003812:	9305      	str	r3, [sp, #20]
 8003814:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80038cc <_svfiprintf_r+0x1e8>
 8003818:	2203      	movs	r2, #3
 800381a:	4650      	mov	r0, sl
 800381c:	7821      	ldrb	r1, [r4, #0]
 800381e:	f000 fa19 	bl	8003c54 <memchr>
 8003822:	b138      	cbz	r0, 8003834 <_svfiprintf_r+0x150>
 8003824:	2240      	movs	r2, #64	@ 0x40
 8003826:	9b04      	ldr	r3, [sp, #16]
 8003828:	eba0 000a 	sub.w	r0, r0, sl
 800382c:	4082      	lsls	r2, r0
 800382e:	4313      	orrs	r3, r2
 8003830:	3401      	adds	r4, #1
 8003832:	9304      	str	r3, [sp, #16]
 8003834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003838:	2206      	movs	r2, #6
 800383a:	4825      	ldr	r0, [pc, #148]	@ (80038d0 <_svfiprintf_r+0x1ec>)
 800383c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003840:	f000 fa08 	bl	8003c54 <memchr>
 8003844:	2800      	cmp	r0, #0
 8003846:	d036      	beq.n	80038b6 <_svfiprintf_r+0x1d2>
 8003848:	4b22      	ldr	r3, [pc, #136]	@ (80038d4 <_svfiprintf_r+0x1f0>)
 800384a:	bb1b      	cbnz	r3, 8003894 <_svfiprintf_r+0x1b0>
 800384c:	9b03      	ldr	r3, [sp, #12]
 800384e:	3307      	adds	r3, #7
 8003850:	f023 0307 	bic.w	r3, r3, #7
 8003854:	3308      	adds	r3, #8
 8003856:	9303      	str	r3, [sp, #12]
 8003858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800385a:	4433      	add	r3, r6
 800385c:	9309      	str	r3, [sp, #36]	@ 0x24
 800385e:	e76a      	b.n	8003736 <_svfiprintf_r+0x52>
 8003860:	460c      	mov	r4, r1
 8003862:	2001      	movs	r0, #1
 8003864:	fb0c 3202 	mla	r2, ip, r2, r3
 8003868:	e7a8      	b.n	80037bc <_svfiprintf_r+0xd8>
 800386a:	2300      	movs	r3, #0
 800386c:	f04f 0c0a 	mov.w	ip, #10
 8003870:	4619      	mov	r1, r3
 8003872:	3401      	adds	r4, #1
 8003874:	9305      	str	r3, [sp, #20]
 8003876:	4620      	mov	r0, r4
 8003878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800387c:	3a30      	subs	r2, #48	@ 0x30
 800387e:	2a09      	cmp	r2, #9
 8003880:	d903      	bls.n	800388a <_svfiprintf_r+0x1a6>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0c6      	beq.n	8003814 <_svfiprintf_r+0x130>
 8003886:	9105      	str	r1, [sp, #20]
 8003888:	e7c4      	b.n	8003814 <_svfiprintf_r+0x130>
 800388a:	4604      	mov	r4, r0
 800388c:	2301      	movs	r3, #1
 800388e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003892:	e7f0      	b.n	8003876 <_svfiprintf_r+0x192>
 8003894:	ab03      	add	r3, sp, #12
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	462a      	mov	r2, r5
 800389a:	4638      	mov	r0, r7
 800389c:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <_svfiprintf_r+0x1f4>)
 800389e:	a904      	add	r1, sp, #16
 80038a0:	f3af 8000 	nop.w
 80038a4:	1c42      	adds	r2, r0, #1
 80038a6:	4606      	mov	r6, r0
 80038a8:	d1d6      	bne.n	8003858 <_svfiprintf_r+0x174>
 80038aa:	89ab      	ldrh	r3, [r5, #12]
 80038ac:	065b      	lsls	r3, r3, #25
 80038ae:	f53f af2d 	bmi.w	800370c <_svfiprintf_r+0x28>
 80038b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038b4:	e72c      	b.n	8003710 <_svfiprintf_r+0x2c>
 80038b6:	ab03      	add	r3, sp, #12
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	462a      	mov	r2, r5
 80038bc:	4638      	mov	r0, r7
 80038be:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <_svfiprintf_r+0x1f4>)
 80038c0:	a904      	add	r1, sp, #16
 80038c2:	f000 f87d 	bl	80039c0 <_printf_i>
 80038c6:	e7ed      	b.n	80038a4 <_svfiprintf_r+0x1c0>
 80038c8:	08003efa 	.word	0x08003efa
 80038cc:	08003f00 	.word	0x08003f00
 80038d0:	08003f04 	.word	0x08003f04
 80038d4:	00000000 	.word	0x00000000
 80038d8:	0800362d 	.word	0x0800362d

080038dc <_printf_common>:
 80038dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e0:	4616      	mov	r6, r2
 80038e2:	4698      	mov	r8, r3
 80038e4:	688a      	ldr	r2, [r1, #8]
 80038e6:	690b      	ldr	r3, [r1, #16]
 80038e8:	4607      	mov	r7, r0
 80038ea:	4293      	cmp	r3, r2
 80038ec:	bfb8      	it	lt
 80038ee:	4613      	movlt	r3, r2
 80038f0:	6033      	str	r3, [r6, #0]
 80038f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038f6:	460c      	mov	r4, r1
 80038f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038fc:	b10a      	cbz	r2, 8003902 <_printf_common+0x26>
 80038fe:	3301      	adds	r3, #1
 8003900:	6033      	str	r3, [r6, #0]
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	0699      	lsls	r1, r3, #26
 8003906:	bf42      	ittt	mi
 8003908:	6833      	ldrmi	r3, [r6, #0]
 800390a:	3302      	addmi	r3, #2
 800390c:	6033      	strmi	r3, [r6, #0]
 800390e:	6825      	ldr	r5, [r4, #0]
 8003910:	f015 0506 	ands.w	r5, r5, #6
 8003914:	d106      	bne.n	8003924 <_printf_common+0x48>
 8003916:	f104 0a19 	add.w	sl, r4, #25
 800391a:	68e3      	ldr	r3, [r4, #12]
 800391c:	6832      	ldr	r2, [r6, #0]
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	42ab      	cmp	r3, r5
 8003922:	dc2b      	bgt.n	800397c <_printf_common+0xa0>
 8003924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	3b00      	subs	r3, #0
 800392c:	bf18      	it	ne
 800392e:	2301      	movne	r3, #1
 8003930:	0692      	lsls	r2, r2, #26
 8003932:	d430      	bmi.n	8003996 <_printf_common+0xba>
 8003934:	4641      	mov	r1, r8
 8003936:	4638      	mov	r0, r7
 8003938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800393c:	47c8      	blx	r9
 800393e:	3001      	adds	r0, #1
 8003940:	d023      	beq.n	800398a <_printf_common+0xae>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	6922      	ldr	r2, [r4, #16]
 8003946:	f003 0306 	and.w	r3, r3, #6
 800394a:	2b04      	cmp	r3, #4
 800394c:	bf14      	ite	ne
 800394e:	2500      	movne	r5, #0
 8003950:	6833      	ldreq	r3, [r6, #0]
 8003952:	f04f 0600 	mov.w	r6, #0
 8003956:	bf08      	it	eq
 8003958:	68e5      	ldreq	r5, [r4, #12]
 800395a:	f104 041a 	add.w	r4, r4, #26
 800395e:	bf08      	it	eq
 8003960:	1aed      	subeq	r5, r5, r3
 8003962:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003966:	bf08      	it	eq
 8003968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800396c:	4293      	cmp	r3, r2
 800396e:	bfc4      	itt	gt
 8003970:	1a9b      	subgt	r3, r3, r2
 8003972:	18ed      	addgt	r5, r5, r3
 8003974:	42b5      	cmp	r5, r6
 8003976:	d11a      	bne.n	80039ae <_printf_common+0xd2>
 8003978:	2000      	movs	r0, #0
 800397a:	e008      	b.n	800398e <_printf_common+0xb2>
 800397c:	2301      	movs	r3, #1
 800397e:	4652      	mov	r2, sl
 8003980:	4641      	mov	r1, r8
 8003982:	4638      	mov	r0, r7
 8003984:	47c8      	blx	r9
 8003986:	3001      	adds	r0, #1
 8003988:	d103      	bne.n	8003992 <_printf_common+0xb6>
 800398a:	f04f 30ff 	mov.w	r0, #4294967295
 800398e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003992:	3501      	adds	r5, #1
 8003994:	e7c1      	b.n	800391a <_printf_common+0x3e>
 8003996:	2030      	movs	r0, #48	@ 0x30
 8003998:	18e1      	adds	r1, r4, r3
 800399a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039a4:	4422      	add	r2, r4
 80039a6:	3302      	adds	r3, #2
 80039a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039ac:	e7c2      	b.n	8003934 <_printf_common+0x58>
 80039ae:	2301      	movs	r3, #1
 80039b0:	4622      	mov	r2, r4
 80039b2:	4641      	mov	r1, r8
 80039b4:	4638      	mov	r0, r7
 80039b6:	47c8      	blx	r9
 80039b8:	3001      	adds	r0, #1
 80039ba:	d0e6      	beq.n	800398a <_printf_common+0xae>
 80039bc:	3601      	adds	r6, #1
 80039be:	e7d9      	b.n	8003974 <_printf_common+0x98>

080039c0 <_printf_i>:
 80039c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039c4:	7e0f      	ldrb	r7, [r1, #24]
 80039c6:	4691      	mov	r9, r2
 80039c8:	2f78      	cmp	r7, #120	@ 0x78
 80039ca:	4680      	mov	r8, r0
 80039cc:	460c      	mov	r4, r1
 80039ce:	469a      	mov	sl, r3
 80039d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039d6:	d807      	bhi.n	80039e8 <_printf_i+0x28>
 80039d8:	2f62      	cmp	r7, #98	@ 0x62
 80039da:	d80a      	bhi.n	80039f2 <_printf_i+0x32>
 80039dc:	2f00      	cmp	r7, #0
 80039de:	f000 80d3 	beq.w	8003b88 <_printf_i+0x1c8>
 80039e2:	2f58      	cmp	r7, #88	@ 0x58
 80039e4:	f000 80ba 	beq.w	8003b5c <_printf_i+0x19c>
 80039e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039f0:	e03a      	b.n	8003a68 <_printf_i+0xa8>
 80039f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039f6:	2b15      	cmp	r3, #21
 80039f8:	d8f6      	bhi.n	80039e8 <_printf_i+0x28>
 80039fa:	a101      	add	r1, pc, #4	@ (adr r1, 8003a00 <_printf_i+0x40>)
 80039fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	08003a6d 	.word	0x08003a6d
 8003a08:	080039e9 	.word	0x080039e9
 8003a0c:	080039e9 	.word	0x080039e9
 8003a10:	080039e9 	.word	0x080039e9
 8003a14:	080039e9 	.word	0x080039e9
 8003a18:	08003a6d 	.word	0x08003a6d
 8003a1c:	080039e9 	.word	0x080039e9
 8003a20:	080039e9 	.word	0x080039e9
 8003a24:	080039e9 	.word	0x080039e9
 8003a28:	080039e9 	.word	0x080039e9
 8003a2c:	08003b6f 	.word	0x08003b6f
 8003a30:	08003a97 	.word	0x08003a97
 8003a34:	08003b29 	.word	0x08003b29
 8003a38:	080039e9 	.word	0x080039e9
 8003a3c:	080039e9 	.word	0x080039e9
 8003a40:	08003b91 	.word	0x08003b91
 8003a44:	080039e9 	.word	0x080039e9
 8003a48:	08003a97 	.word	0x08003a97
 8003a4c:	080039e9 	.word	0x080039e9
 8003a50:	080039e9 	.word	0x080039e9
 8003a54:	08003b31 	.word	0x08003b31
 8003a58:	6833      	ldr	r3, [r6, #0]
 8003a5a:	1d1a      	adds	r2, r3, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6032      	str	r2, [r6, #0]
 8003a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e09e      	b.n	8003baa <_printf_i+0x1ea>
 8003a6c:	6833      	ldr	r3, [r6, #0]
 8003a6e:	6820      	ldr	r0, [r4, #0]
 8003a70:	1d19      	adds	r1, r3, #4
 8003a72:	6031      	str	r1, [r6, #0]
 8003a74:	0606      	lsls	r6, r0, #24
 8003a76:	d501      	bpl.n	8003a7c <_printf_i+0xbc>
 8003a78:	681d      	ldr	r5, [r3, #0]
 8003a7a:	e003      	b.n	8003a84 <_printf_i+0xc4>
 8003a7c:	0645      	lsls	r5, r0, #25
 8003a7e:	d5fb      	bpl.n	8003a78 <_printf_i+0xb8>
 8003a80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a84:	2d00      	cmp	r5, #0
 8003a86:	da03      	bge.n	8003a90 <_printf_i+0xd0>
 8003a88:	232d      	movs	r3, #45	@ 0x2d
 8003a8a:	426d      	negs	r5, r5
 8003a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a90:	230a      	movs	r3, #10
 8003a92:	4859      	ldr	r0, [pc, #356]	@ (8003bf8 <_printf_i+0x238>)
 8003a94:	e011      	b.n	8003aba <_printf_i+0xfa>
 8003a96:	6821      	ldr	r1, [r4, #0]
 8003a98:	6833      	ldr	r3, [r6, #0]
 8003a9a:	0608      	lsls	r0, r1, #24
 8003a9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003aa0:	d402      	bmi.n	8003aa8 <_printf_i+0xe8>
 8003aa2:	0649      	lsls	r1, r1, #25
 8003aa4:	bf48      	it	mi
 8003aa6:	b2ad      	uxthmi	r5, r5
 8003aa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003aaa:	6033      	str	r3, [r6, #0]
 8003aac:	bf14      	ite	ne
 8003aae:	230a      	movne	r3, #10
 8003ab0:	2308      	moveq	r3, #8
 8003ab2:	4851      	ldr	r0, [pc, #324]	@ (8003bf8 <_printf_i+0x238>)
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003aba:	6866      	ldr	r6, [r4, #4]
 8003abc:	2e00      	cmp	r6, #0
 8003abe:	bfa8      	it	ge
 8003ac0:	6821      	ldrge	r1, [r4, #0]
 8003ac2:	60a6      	str	r6, [r4, #8]
 8003ac4:	bfa4      	itt	ge
 8003ac6:	f021 0104 	bicge.w	r1, r1, #4
 8003aca:	6021      	strge	r1, [r4, #0]
 8003acc:	b90d      	cbnz	r5, 8003ad2 <_printf_i+0x112>
 8003ace:	2e00      	cmp	r6, #0
 8003ad0:	d04b      	beq.n	8003b6a <_printf_i+0x1aa>
 8003ad2:	4616      	mov	r6, r2
 8003ad4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ad8:	fb03 5711 	mls	r7, r3, r1, r5
 8003adc:	5dc7      	ldrb	r7, [r0, r7]
 8003ade:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ae2:	462f      	mov	r7, r5
 8003ae4:	42bb      	cmp	r3, r7
 8003ae6:	460d      	mov	r5, r1
 8003ae8:	d9f4      	bls.n	8003ad4 <_printf_i+0x114>
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d10b      	bne.n	8003b06 <_printf_i+0x146>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	07df      	lsls	r7, r3, #31
 8003af2:	d508      	bpl.n	8003b06 <_printf_i+0x146>
 8003af4:	6923      	ldr	r3, [r4, #16]
 8003af6:	6861      	ldr	r1, [r4, #4]
 8003af8:	4299      	cmp	r1, r3
 8003afa:	bfde      	ittt	le
 8003afc:	2330      	movle	r3, #48	@ 0x30
 8003afe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b06:	1b92      	subs	r2, r2, r6
 8003b08:	6122      	str	r2, [r4, #16]
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	4640      	mov	r0, r8
 8003b10:	f8cd a000 	str.w	sl, [sp]
 8003b14:	aa03      	add	r2, sp, #12
 8003b16:	f7ff fee1 	bl	80038dc <_printf_common>
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d14a      	bne.n	8003bb4 <_printf_i+0x1f4>
 8003b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b22:	b004      	add	sp, #16
 8003b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	f043 0320 	orr.w	r3, r3, #32
 8003b2e:	6023      	str	r3, [r4, #0]
 8003b30:	2778      	movs	r7, #120	@ 0x78
 8003b32:	4832      	ldr	r0, [pc, #200]	@ (8003bfc <_printf_i+0x23c>)
 8003b34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	6831      	ldr	r1, [r6, #0]
 8003b3c:	061f      	lsls	r7, r3, #24
 8003b3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b42:	d402      	bmi.n	8003b4a <_printf_i+0x18a>
 8003b44:	065f      	lsls	r7, r3, #25
 8003b46:	bf48      	it	mi
 8003b48:	b2ad      	uxthmi	r5, r5
 8003b4a:	6031      	str	r1, [r6, #0]
 8003b4c:	07d9      	lsls	r1, r3, #31
 8003b4e:	bf44      	itt	mi
 8003b50:	f043 0320 	orrmi.w	r3, r3, #32
 8003b54:	6023      	strmi	r3, [r4, #0]
 8003b56:	b11d      	cbz	r5, 8003b60 <_printf_i+0x1a0>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	e7ab      	b.n	8003ab4 <_printf_i+0xf4>
 8003b5c:	4826      	ldr	r0, [pc, #152]	@ (8003bf8 <_printf_i+0x238>)
 8003b5e:	e7e9      	b.n	8003b34 <_printf_i+0x174>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f023 0320 	bic.w	r3, r3, #32
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	e7f6      	b.n	8003b58 <_printf_i+0x198>
 8003b6a:	4616      	mov	r6, r2
 8003b6c:	e7bd      	b.n	8003aea <_printf_i+0x12a>
 8003b6e:	6833      	ldr	r3, [r6, #0]
 8003b70:	6825      	ldr	r5, [r4, #0]
 8003b72:	1d18      	adds	r0, r3, #4
 8003b74:	6961      	ldr	r1, [r4, #20]
 8003b76:	6030      	str	r0, [r6, #0]
 8003b78:	062e      	lsls	r6, r5, #24
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	d501      	bpl.n	8003b82 <_printf_i+0x1c2>
 8003b7e:	6019      	str	r1, [r3, #0]
 8003b80:	e002      	b.n	8003b88 <_printf_i+0x1c8>
 8003b82:	0668      	lsls	r0, r5, #25
 8003b84:	d5fb      	bpl.n	8003b7e <_printf_i+0x1be>
 8003b86:	8019      	strh	r1, [r3, #0]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4616      	mov	r6, r2
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	e7bc      	b.n	8003b0a <_printf_i+0x14a>
 8003b90:	6833      	ldr	r3, [r6, #0]
 8003b92:	2100      	movs	r1, #0
 8003b94:	1d1a      	adds	r2, r3, #4
 8003b96:	6032      	str	r2, [r6, #0]
 8003b98:	681e      	ldr	r6, [r3, #0]
 8003b9a:	6862      	ldr	r2, [r4, #4]
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f000 f859 	bl	8003c54 <memchr>
 8003ba2:	b108      	cbz	r0, 8003ba8 <_printf_i+0x1e8>
 8003ba4:	1b80      	subs	r0, r0, r6
 8003ba6:	6060      	str	r0, [r4, #4]
 8003ba8:	6863      	ldr	r3, [r4, #4]
 8003baa:	6123      	str	r3, [r4, #16]
 8003bac:	2300      	movs	r3, #0
 8003bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bb2:	e7aa      	b.n	8003b0a <_printf_i+0x14a>
 8003bb4:	4632      	mov	r2, r6
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	4640      	mov	r0, r8
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	47d0      	blx	sl
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	d0ad      	beq.n	8003b1e <_printf_i+0x15e>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	079b      	lsls	r3, r3, #30
 8003bc6:	d413      	bmi.n	8003bf0 <_printf_i+0x230>
 8003bc8:	68e0      	ldr	r0, [r4, #12]
 8003bca:	9b03      	ldr	r3, [sp, #12]
 8003bcc:	4298      	cmp	r0, r3
 8003bce:	bfb8      	it	lt
 8003bd0:	4618      	movlt	r0, r3
 8003bd2:	e7a6      	b.n	8003b22 <_printf_i+0x162>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4632      	mov	r2, r6
 8003bd8:	4649      	mov	r1, r9
 8003bda:	4640      	mov	r0, r8
 8003bdc:	47d0      	blx	sl
 8003bde:	3001      	adds	r0, #1
 8003be0:	d09d      	beq.n	8003b1e <_printf_i+0x15e>
 8003be2:	3501      	adds	r5, #1
 8003be4:	68e3      	ldr	r3, [r4, #12]
 8003be6:	9903      	ldr	r1, [sp, #12]
 8003be8:	1a5b      	subs	r3, r3, r1
 8003bea:	42ab      	cmp	r3, r5
 8003bec:	dcf2      	bgt.n	8003bd4 <_printf_i+0x214>
 8003bee:	e7eb      	b.n	8003bc8 <_printf_i+0x208>
 8003bf0:	2500      	movs	r5, #0
 8003bf2:	f104 0619 	add.w	r6, r4, #25
 8003bf6:	e7f5      	b.n	8003be4 <_printf_i+0x224>
 8003bf8:	08003f0b 	.word	0x08003f0b
 8003bfc:	08003f1c 	.word	0x08003f1c

08003c00 <memmove>:
 8003c00:	4288      	cmp	r0, r1
 8003c02:	b510      	push	{r4, lr}
 8003c04:	eb01 0402 	add.w	r4, r1, r2
 8003c08:	d902      	bls.n	8003c10 <memmove+0x10>
 8003c0a:	4284      	cmp	r4, r0
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	d807      	bhi.n	8003c20 <memmove+0x20>
 8003c10:	1e43      	subs	r3, r0, #1
 8003c12:	42a1      	cmp	r1, r4
 8003c14:	d008      	beq.n	8003c28 <memmove+0x28>
 8003c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c1e:	e7f8      	b.n	8003c12 <memmove+0x12>
 8003c20:	4601      	mov	r1, r0
 8003c22:	4402      	add	r2, r0
 8003c24:	428a      	cmp	r2, r1
 8003c26:	d100      	bne.n	8003c2a <memmove+0x2a>
 8003c28:	bd10      	pop	{r4, pc}
 8003c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c32:	e7f7      	b.n	8003c24 <memmove+0x24>

08003c34 <_sbrk_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	2300      	movs	r3, #0
 8003c38:	4d05      	ldr	r5, [pc, #20]	@ (8003c50 <_sbrk_r+0x1c>)
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	602b      	str	r3, [r5, #0]
 8003c40:	f7fd f98c 	bl	8000f5c <_sbrk>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_sbrk_r+0x1a>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_sbrk_r+0x1a>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	20001074 	.word	0x20001074

08003c54 <memchr>:
 8003c54:	4603      	mov	r3, r0
 8003c56:	b510      	push	{r4, lr}
 8003c58:	b2c9      	uxtb	r1, r1
 8003c5a:	4402      	add	r2, r0
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	d101      	bne.n	8003c66 <memchr+0x12>
 8003c62:	2000      	movs	r0, #0
 8003c64:	e003      	b.n	8003c6e <memchr+0x1a>
 8003c66:	7804      	ldrb	r4, [r0, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	428c      	cmp	r4, r1
 8003c6c:	d1f6      	bne.n	8003c5c <memchr+0x8>
 8003c6e:	bd10      	pop	{r4, pc}

08003c70 <_realloc_r>:
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c74:	4680      	mov	r8, r0
 8003c76:	4615      	mov	r5, r2
 8003c78:	460c      	mov	r4, r1
 8003c7a:	b921      	cbnz	r1, 8003c86 <_realloc_r+0x16>
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c82:	f7ff bc47 	b.w	8003514 <_malloc_r>
 8003c86:	b92a      	cbnz	r2, 8003c94 <_realloc_r+0x24>
 8003c88:	f7ff fbda 	bl	8003440 <_free_r>
 8003c8c:	2400      	movs	r4, #0
 8003c8e:	4620      	mov	r0, r4
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c94:	f000 f81a 	bl	8003ccc <_malloc_usable_size_r>
 8003c98:	4285      	cmp	r5, r0
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	d802      	bhi.n	8003ca4 <_realloc_r+0x34>
 8003c9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003ca2:	d8f4      	bhi.n	8003c8e <_realloc_r+0x1e>
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	f7ff fc34 	bl	8003514 <_malloc_r>
 8003cac:	4607      	mov	r7, r0
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d0ec      	beq.n	8003c8c <_realloc_r+0x1c>
 8003cb2:	42b5      	cmp	r5, r6
 8003cb4:	462a      	mov	r2, r5
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	bf28      	it	cs
 8003cba:	4632      	movcs	r2, r6
 8003cbc:	f7ff fbb2 	bl	8003424 <memcpy>
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	f7ff fbbc 	bl	8003440 <_free_r>
 8003cc8:	463c      	mov	r4, r7
 8003cca:	e7e0      	b.n	8003c8e <_realloc_r+0x1e>

08003ccc <_malloc_usable_size_r>:
 8003ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd0:	1f18      	subs	r0, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bfbc      	itt	lt
 8003cd6:	580b      	ldrlt	r3, [r1, r0]
 8003cd8:	18c0      	addlt	r0, r0, r3
 8003cda:	4770      	bx	lr

08003cdc <_init>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	bf00      	nop
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr

08003ce8 <_fini>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	bf00      	nop
 8003cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cee:	bc08      	pop	{r3}
 8003cf0:	469e      	mov	lr, r3
 8003cf2:	4770      	bx	lr
