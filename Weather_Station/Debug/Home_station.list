
Home_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002d08  08002d08  00003d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d54  08002d54  00003d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d5c  08002d5c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00003d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d60  08002d60  00003d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d64  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000010  08002d70  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08002d70  00004270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf70  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225a  00000000  00000000  00010fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00013200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095e  00000000  00000000  00013e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174c1  00000000  00000000  00014776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffed  00000000  00000000  0002bc37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087755  00000000  00000000  0003bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000312c  00000000  00000000  000c33bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000c64e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002cf0 	.word	0x08002cf0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002cf0 	.word	0x08002cf0

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b968 	b.w	8000438 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9d08      	ldr	r5, [sp, #32]
 8000186:	460c      	mov	r4, r1
 8000188:	2b00      	cmp	r3, #0
 800018a:	d14e      	bne.n	800022a <__udivmoddi4+0xaa>
 800018c:	4694      	mov	ip, r2
 800018e:	458c      	cmp	ip, r1
 8000190:	4686      	mov	lr, r0
 8000192:	fab2 f282 	clz	r2, r2
 8000196:	d962      	bls.n	800025e <__udivmoddi4+0xde>
 8000198:	b14a      	cbz	r2, 80001ae <__udivmoddi4+0x2e>
 800019a:	f1c2 0320 	rsb	r3, r2, #32
 800019e:	4091      	lsls	r1, r2
 80001a0:	fa20 f303 	lsr.w	r3, r0, r3
 80001a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001a8:	4319      	orrs	r1, r3
 80001aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001b6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ba:	fa1f f68c 	uxth.w	r6, ip
 80001be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001c6:	fb04 f106 	mul.w	r1, r4, r6
 80001ca:	4299      	cmp	r1, r3
 80001cc:	d90a      	bls.n	80001e4 <__udivmoddi4+0x64>
 80001ce:	eb1c 0303 	adds.w	r3, ip, r3
 80001d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80001d6:	f080 8110 	bcs.w	80003fa <__udivmoddi4+0x27a>
 80001da:	4299      	cmp	r1, r3
 80001dc:	f240 810d 	bls.w	80003fa <__udivmoddi4+0x27a>
 80001e0:	3c02      	subs	r4, #2
 80001e2:	4463      	add	r3, ip
 80001e4:	1a59      	subs	r1, r3, r1
 80001e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80001ea:	fb07 1110 	mls	r1, r7, r0, r1
 80001ee:	fb00 f606 	mul.w	r6, r0, r6
 80001f2:	fa1f f38e 	uxth.w	r3, lr
 80001f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fa:	429e      	cmp	r6, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f100 31ff 	add.w	r1, r0, #4294967295
 8000206:	f080 80fa 	bcs.w	80003fe <__udivmoddi4+0x27e>
 800020a:	429e      	cmp	r6, r3
 800020c:	f240 80f7 	bls.w	80003fe <__udivmoddi4+0x27e>
 8000210:	4463      	add	r3, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	1b9b      	subs	r3, r3, r6
 8000218:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800021c:	b11d      	cbz	r5, 8000226 <__udivmoddi4+0xa6>
 800021e:	40d3      	lsrs	r3, r2
 8000220:	2200      	movs	r2, #0
 8000222:	e9c5 3200 	strd	r3, r2, [r5]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d905      	bls.n	800023a <__udivmoddi4+0xba>
 800022e:	b10d      	cbz	r5, 8000234 <__udivmoddi4+0xb4>
 8000230:	e9c5 0100 	strd	r0, r1, [r5]
 8000234:	2100      	movs	r1, #0
 8000236:	4608      	mov	r0, r1
 8000238:	e7f5      	b.n	8000226 <__udivmoddi4+0xa6>
 800023a:	fab3 f183 	clz	r1, r3
 800023e:	2900      	cmp	r1, #0
 8000240:	d146      	bne.n	80002d0 <__udivmoddi4+0x150>
 8000242:	42a3      	cmp	r3, r4
 8000244:	d302      	bcc.n	800024c <__udivmoddi4+0xcc>
 8000246:	4290      	cmp	r0, r2
 8000248:	f0c0 80ee 	bcc.w	8000428 <__udivmoddi4+0x2a8>
 800024c:	1a86      	subs	r6, r0, r2
 800024e:	eb64 0303 	sbc.w	r3, r4, r3
 8000252:	2001      	movs	r0, #1
 8000254:	2d00      	cmp	r5, #0
 8000256:	d0e6      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000258:	e9c5 6300 	strd	r6, r3, [r5]
 800025c:	e7e3      	b.n	8000226 <__udivmoddi4+0xa6>
 800025e:	2a00      	cmp	r2, #0
 8000260:	f040 808f 	bne.w	8000382 <__udivmoddi4+0x202>
 8000264:	eba1 040c 	sub.w	r4, r1, ip
 8000268:	2101      	movs	r1, #1
 800026a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fbb4 f6f8 	udiv	r6, r4, r8
 8000276:	fb08 4416 	mls	r4, r8, r6, r4
 800027a:	fb07 f006 	mul.w	r0, r7, r6
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000286:	4298      	cmp	r0, r3
 8000288:	d908      	bls.n	800029c <__udivmoddi4+0x11c>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000292:	d202      	bcs.n	800029a <__udivmoddi4+0x11a>
 8000294:	4298      	cmp	r0, r3
 8000296:	f200 80cb 	bhi.w	8000430 <__udivmoddi4+0x2b0>
 800029a:	4626      	mov	r6, r4
 800029c:	1a1c      	subs	r4, r3, r0
 800029e:	fbb4 f0f8 	udiv	r0, r4, r8
 80002a2:	fb08 4410 	mls	r4, r8, r0, r4
 80002a6:	fb00 f707 	mul.w	r7, r0, r7
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	429f      	cmp	r7, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x148>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x146>
 80002c0:	429f      	cmp	r7, r3
 80002c2:	f200 80ae 	bhi.w	8000422 <__udivmoddi4+0x2a2>
 80002c6:	4620      	mov	r0, r4
 80002c8:	1bdb      	subs	r3, r3, r7
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	e7a5      	b.n	800021c <__udivmoddi4+0x9c>
 80002d0:	f1c1 0720 	rsb	r7, r1, #32
 80002d4:	408b      	lsls	r3, r1
 80002d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002da:	ea4c 0c03 	orr.w	ip, ip, r3
 80002de:	fa24 f607 	lsr.w	r6, r4, r7
 80002e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002e6:	fbb6 f8f9 	udiv	r8, r6, r9
 80002ea:	fa1f fe8c 	uxth.w	lr, ip
 80002ee:	fb09 6618 	mls	r6, r9, r8, r6
 80002f2:	fa20 f307 	lsr.w	r3, r0, r7
 80002f6:	408c      	lsls	r4, r1
 80002f8:	fa00 fa01 	lsl.w	sl, r0, r1
 80002fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000300:	431c      	orrs	r4, r3
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000308:	4298      	cmp	r0, r3
 800030a:	fa02 f201 	lsl.w	r2, r2, r1
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x1a6>
 8000310:	eb1c 0303 	adds.w	r3, ip, r3
 8000314:	f108 36ff 	add.w	r6, r8, #4294967295
 8000318:	f080 8081 	bcs.w	800041e <__udivmoddi4+0x29e>
 800031c:	4298      	cmp	r0, r3
 800031e:	d97e      	bls.n	800041e <__udivmoddi4+0x29e>
 8000320:	f1a8 0802 	sub.w	r8, r8, #2
 8000324:	4463      	add	r3, ip
 8000326:	1a1e      	subs	r6, r3, r0
 8000328:	fbb6 f3f9 	udiv	r3, r6, r9
 800032c:	fb09 6613 	mls	r6, r9, r3, r6
 8000330:	fb03 fe0e 	mul.w	lr, r3, lr
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800033a:	45a6      	cmp	lr, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x1d0>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f103 30ff 	add.w	r0, r3, #4294967295
 8000346:	d266      	bcs.n	8000416 <__udivmoddi4+0x296>
 8000348:	45a6      	cmp	lr, r4
 800034a:	d964      	bls.n	8000416 <__udivmoddi4+0x296>
 800034c:	3b02      	subs	r3, #2
 800034e:	4464      	add	r4, ip
 8000350:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000354:	fba0 8302 	umull	r8, r3, r0, r2
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	429c      	cmp	r4, r3
 800035e:	46c6      	mov	lr, r8
 8000360:	461e      	mov	r6, r3
 8000362:	d350      	bcc.n	8000406 <__udivmoddi4+0x286>
 8000364:	d04d      	beq.n	8000402 <__udivmoddi4+0x282>
 8000366:	b155      	cbz	r5, 800037e <__udivmoddi4+0x1fe>
 8000368:	ebba 030e 	subs.w	r3, sl, lr
 800036c:	eb64 0406 	sbc.w	r4, r4, r6
 8000370:	fa04 f707 	lsl.w	r7, r4, r7
 8000374:	40cb      	lsrs	r3, r1
 8000376:	431f      	orrs	r7, r3
 8000378:	40cc      	lsrs	r4, r1
 800037a:	e9c5 7400 	strd	r7, r4, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	e751      	b.n	8000226 <__udivmoddi4+0xa6>
 8000382:	fa0c fc02 	lsl.w	ip, ip, r2
 8000386:	f1c2 0320 	rsb	r3, r2, #32
 800038a:	40d9      	lsrs	r1, r3
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa00 fe02 	lsl.w	lr, r0, r2
 8000398:	fbb1 f0f8 	udiv	r0, r1, r8
 800039c:	fb08 1110 	mls	r1, r8, r0, r1
 80003a0:	4094      	lsls	r4, r2
 80003a2:	431c      	orrs	r4, r3
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	0c23      	lsrs	r3, r4, #16
 80003aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ae:	fb00 f107 	mul.w	r1, r0, r7
 80003b2:	4299      	cmp	r1, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x248>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 36ff 	add.w	r6, r0, #4294967295
 80003be:	d22c      	bcs.n	800041a <__udivmoddi4+0x29a>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d92a      	bls.n	800041a <__udivmoddi4+0x29a>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4463      	add	r3, ip
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	fbb3 f1f8 	udiv	r1, r3, r8
 80003ce:	fb08 3311 	mls	r3, r8, r1, r3
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d8:	fb01 f307 	mul.w	r3, r1, r7
 80003dc:	42a3      	cmp	r3, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x272>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f101 36ff 	add.w	r6, r1, #4294967295
 80003e8:	d213      	bcs.n	8000412 <__udivmoddi4+0x292>
 80003ea:	42a3      	cmp	r3, r4
 80003ec:	d911      	bls.n	8000412 <__udivmoddi4+0x292>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	1ae4      	subs	r4, r4, r3
 80003f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f8:	e73b      	b.n	8000272 <__udivmoddi4+0xf2>
 80003fa:	4604      	mov	r4, r0
 80003fc:	e6f2      	b.n	80001e4 <__udivmoddi4+0x64>
 80003fe:	4608      	mov	r0, r1
 8000400:	e708      	b.n	8000214 <__udivmoddi4+0x94>
 8000402:	45c2      	cmp	sl, r8
 8000404:	d2af      	bcs.n	8000366 <__udivmoddi4+0x1e6>
 8000406:	ebb8 0e02 	subs.w	lr, r8, r2
 800040a:	eb63 060c 	sbc.w	r6, r3, ip
 800040e:	3801      	subs	r0, #1
 8000410:	e7a9      	b.n	8000366 <__udivmoddi4+0x1e6>
 8000412:	4631      	mov	r1, r6
 8000414:	e7ed      	b.n	80003f2 <__udivmoddi4+0x272>
 8000416:	4603      	mov	r3, r0
 8000418:	e79a      	b.n	8000350 <__udivmoddi4+0x1d0>
 800041a:	4630      	mov	r0, r6
 800041c:	e7d4      	b.n	80003c8 <__udivmoddi4+0x248>
 800041e:	46b0      	mov	r8, r6
 8000420:	e781      	b.n	8000326 <__udivmoddi4+0x1a6>
 8000422:	4463      	add	r3, ip
 8000424:	3802      	subs	r0, #2
 8000426:	e74f      	b.n	80002c8 <__udivmoddi4+0x148>
 8000428:	4606      	mov	r6, r0
 800042a:	4623      	mov	r3, r4
 800042c:	4608      	mov	r0, r1
 800042e:	e711      	b.n	8000254 <__udivmoddi4+0xd4>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	e732      	b.n	800029c <__udivmoddi4+0x11c>
 8000436:	bf00      	nop

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000444:	2101      	movs	r1, #1
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f000 f80d 	bl	8000466 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	6858      	ldr	r0, [r3, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	b29b      	uxth	r3, r3
 8000456:	2201      	movs	r2, #1
 8000458:	4619      	mov	r1, r3
 800045a:	f001 f978 	bl	800174e <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
 800046e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6958      	ldr	r0, [r3, #20]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	691b      	ldr	r3, [r3, #16]
 8000478:	b299      	uxth	r1, r3
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	bf0c      	ite	eq
 8000480:	2301      	moveq	r3, #1
 8000482:	2300      	movne	r3, #0
 8000484:	b2db      	uxtb	r3, r3
 8000486:	461a      	mov	r2, r3
 8000488:	f001 f961 	bl	800174e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800049c:	2101      	movs	r1, #1
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ffe1 	bl	8000466 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6858      	ldr	r0, [r3, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	2200      	movs	r2, #0
 80004b0:	4619      	mov	r1, r3
 80004b2:	f001 f94c 	bl	800174e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 f856 	bl	8000568 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6858      	ldr	r0, [r3, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	2201      	movs	r2, #1
 80004c8:	4619      	mov	r1, r3
 80004ca:	f001 f940 	bl	800174e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80004ce:	2064      	movs	r0, #100	@ 0x64
 80004d0:	f000 f84a 	bl	8000568 <SX1278_hw_DelayMs>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 80004e8:	2100      	movs	r1, #0
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff ffbb 	bl	8000466 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6998      	ldr	r0, [r3, #24]
 80004f4:	1cf9      	adds	r1, r7, #3
 80004f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004fa:	2201      	movs	r2, #1
 80004fc:	f001 ff3a 	bl	8002374 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000500:	bf00      	nop
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fa21 	bl	800294e <HAL_SPI_GetState>
 800050c:	4603      	mov	r3, r0
 800050e:	2b01      	cmp	r3, #1
 8000510:	d1f7      	bne.n	8000502 <SX1278_hw_SPICommand+0x26>
		;
}
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af02      	add	r7, sp, #8
 8000522:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800052c:	2100      	movs	r1, #0
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff ff99 	bl	8000466 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6998      	ldr	r0, [r3, #24]
 8000538:	f107 020e 	add.w	r2, r7, #14
 800053c:	f107 010f 	add.w	r1, r7, #15
 8000540:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2301      	movs	r3, #1
 8000548:	f002 f858 	bl	80025fc <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800054c:	bf00      	nop
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4618      	mov	r0, r3
 8000554:	f002 f9fb 	bl	800294e <HAL_SPI_GetState>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d1f7      	bne.n	800054e <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800055e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 fe1f 	bl	80011b4 <HAL_Delay>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000594:	4b42      	ldr	r3, [pc, #264]	@ (80006a0 <MX_GPIO_Init+0x120>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a41      	ldr	r2, [pc, #260]	@ (80006a0 <MX_GPIO_Init+0x120>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b3f      	ldr	r3, [pc, #252]	@ (80006a0 <MX_GPIO_Init+0x120>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0310 	and.w	r3, r3, #16
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ac:	4b3c      	ldr	r3, [pc, #240]	@ (80006a0 <MX_GPIO_Init+0x120>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a3b      	ldr	r2, [pc, #236]	@ (80006a0 <MX_GPIO_Init+0x120>)
 80005b2:	f043 0320 	orr.w	r3, r3, #32
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b39      	ldr	r3, [pc, #228]	@ (80006a0 <MX_GPIO_Init+0x120>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0320 	and.w	r3, r3, #32
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b36      	ldr	r3, [pc, #216]	@ (80006a0 <MX_GPIO_Init+0x120>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a35      	ldr	r2, [pc, #212]	@ (80006a0 <MX_GPIO_Init+0x120>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b33      	ldr	r3, [pc, #204]	@ (80006a0 <MX_GPIO_Init+0x120>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b30      	ldr	r3, [pc, #192]	@ (80006a0 <MX_GPIO_Init+0x120>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a2f      	ldr	r2, [pc, #188]	@ (80006a0 <MX_GPIO_Init+0x120>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b2d      	ldr	r3, [pc, #180]	@ (80006a0 <MX_GPIO_Init+0x120>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0308 	and.w	r3, r3, #8
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005fa:	482a      	ldr	r0, [pc, #168]	@ (80006a4 <MX_GPIO_Init+0x124>)
 80005fc:	f001 f8a7 	bl	800174e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|ESP_01S_RST_Pin, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000606:	4828      	ldr	r0, [pc, #160]	@ (80006a8 <MX_GPIO_Init+0x128>)
 8000608:	f001 f8a1 	bl	800174e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2101      	movs	r1, #1
 8000610:	4826      	ldr	r0, [pc, #152]	@ (80006ac <MX_GPIO_Init+0x12c>)
 8000612:	f001 f89c 	bl	800174e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000616:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	481d      	ldr	r0, [pc, #116]	@ (80006a4 <MX_GPIO_Init+0x124>)
 8000630:	f000 fef2 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|ESP_01S_RST_Pin;
 8000634:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2302      	movs	r3, #2
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	4619      	mov	r1, r3
 800064c:	4816      	ldr	r0, [pc, #88]	@ (80006a8 <MX_GPIO_Init+0x128>)
 800064e:	f000 fee3 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000652:	2301      	movs	r3, #1
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2302      	movs	r3, #2
 8000660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	4619      	mov	r1, r3
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <MX_GPIO_Init+0x12c>)
 800066a:	f000 fed5 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000672:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_GPIO_Init+0x130>)
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	480a      	ldr	r0, [pc, #40]	@ (80006ac <MX_GPIO_Init+0x12c>)
 8000682:	f000 fec9 	bl	8001418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2007      	movs	r0, #7
 800068c:	f000 fe8d 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000690:	2007      	movs	r0, #7
 8000692:	f000 fea6 	bl	80013e2 <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40011000 	.word	0x40011000
 80006a8:	40010800 	.word	0x40010800
 80006ac:	40010c00 	.word	0x40010c00
 80006b0:	10110000 	.word	0x10110000

080006b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <MX_I2C1_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_I2C1_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006f2:	f001 f867 	bl	80017c4 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f923 	bl	8000946 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000002c 	.word	0x2000002c
 8000708:	40005400 	.word	0x40005400
 800070c:	000186a0 	.word	0x000186a0

08000710 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a15      	ldr	r2, [pc, #84]	@ (8000780 <HAL_I2C_MspInit+0x70>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d123      	bne.n	8000778 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <HAL_I2C_MspInit+0x74>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <HAL_I2C_MspInit+0x74>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <HAL_I2C_MspInit+0x74>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 8000748:	23c0      	movs	r3, #192	@ 0xc0
 800074a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074c:	2312      	movs	r3, #18
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	480b      	ldr	r0, [pc, #44]	@ (8000788 <HAL_I2C_MspInit+0x78>)
 800075c:	f000 fe5c 	bl	8001418 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <HAL_I2C_MspInit+0x74>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <HAL_I2C_MspInit+0x74>)
 8000766:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800076a:	61d3      	str	r3, [r2, #28]
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <HAL_I2C_MspInit+0x74>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40005400 	.word	0x40005400
 8000784:	40021000 	.word	0x40021000
 8000788:	40010c00 	.word	0x40010c00

0800078c <LoRaSetRxMode>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Puts LoRa module in receive mode
// -- LED should be off --
void LoRaSetRxMode(){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000790:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000794:	2110      	movs	r1, #16
 8000796:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <LoRaSetRxMode+0x3c>)
 8000798:	f000 fc24 	bl	8000fe4 <SX1278_LoRaEntryTx>
 800079c:	4603      	mov	r3, r0
 800079e:	4a0b      	ldr	r2, [pc, #44]	@ (80007cc <LoRaSetRxMode+0x40>)
 80007a0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a8:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <LoRaSetRxMode+0x44>)
 80007aa:	f000 ffd0 	bl	800174e <HAL_GPIO_WritePin>
	while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin));
 80007ae:	bf00      	nop
 80007b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b4:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <LoRaSetRxMode+0x44>)
 80007b6:	f000 ffb3 	bl	8001720 <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0f7      	beq.n	80007b0 <LoRaSetRxMode+0x24>
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000a0 	.word	0x200000a0
 80007cc:	200001bc 	.word	0x200001bc
 80007d0:	40011000 	.word	0x40011000
 80007d4:	00000000 	.word	0x00000000

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fc87 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f86b 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e6:	f7ff fecb 	bl	8000580 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007ea:	f000 f8b3 	bl	8000954 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007ee:	f000 f99d 	bl	8000b2c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80007f2:	f7ff ff5f 	bl	80006b4 <MX_I2C1_Init>
   * 	===== LoRa setup =====
   */
  // This is main station so first mode should be Tx
  // 0 - send mode
  // 1 - receive mode
  master = 1;
 80007f6:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <main+0xc0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
  control_val++;
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <main+0xc4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a26      	ldr	r2, [pc, #152]	@ (800089c <main+0xc4>)
 8000804:	6013      	str	r3, [r2, #0]

  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000806:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <main+0xc8>)
 8000808:	4a26      	ldr	r2, [pc, #152]	@ (80008a4 <main+0xcc>)
 800080a:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <main+0xc8>)
 800080e:	2202      	movs	r2, #2
 8000810:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8000812:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <main+0xc8>)
 8000814:	4a24      	ldr	r2, [pc, #144]	@ (80008a8 <main+0xd0>)
 8000816:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8000818:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <main+0xc8>)
 800081a:	2210      	movs	r2, #16
 800081c:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RST_GPIO_Port;
 800081e:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <main+0xc8>)
 8000820:	4a20      	ldr	r2, [pc, #128]	@ (80008a4 <main+0xcc>)
 8000822:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RST_Pin;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <main+0xc8>)
 8000826:	2201      	movs	r2, #1
 8000828:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <main+0xc8>)
 800082c:	4a1f      	ldr	r2, [pc, #124]	@ (80008ac <main+0xd4>)
 800082e:	619a      	str	r2, [r3, #24]

  control_val++;
 8000830:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <main+0xc4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a19      	ldr	r2, [pc, #100]	@ (800089c <main+0xc4>)
 8000838:	6013      	str	r3, [r2, #0]
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 800083a:	230a      	movs	r3, #10
 800083c:	9305      	str	r3, [sp, #20]
 800083e:	2300      	movs	r3, #0
 8000840:	9304      	str	r3, [sp, #16]
 8000842:	2300      	movs	r3, #0
 8000844:	9303      	str	r3, [sp, #12]
 8000846:	2307      	movs	r3, #7
 8000848:	9302      	str	r3, [sp, #8]
 800084a:	2301      	movs	r3, #1
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	2301      	movs	r3, #1
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	a30f      	add	r3, pc, #60	@ (adr r3, 8000890 <main+0xb8>)
 8000854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000858:	4815      	ldr	r0, [pc, #84]	@ (80008b0 <main+0xd8>)
 800085a:	f000 fc1b 	bl	8001094 <SX1278_init>
		  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  control_val++;
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <main+0xc4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <main+0xc4>)
 8000866:	6013      	str	r3, [r2, #0]

  LoRaSetRxMode();
 8000868:	f7ff ff90 	bl	800078c <LoRaSetRxMode>
  control_val++;
 800086c:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <main+0xc4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <main+0xc4>)
 8000874:	6013      	str	r3, [r2, #0]

  timeout = 10;
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <main+0xdc>)
 8000878:	220a      	movs	r2, #10
 800087a:	601a      	str	r2, [r3, #0]
  change_mode_time = 10;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <main+0xe0>)
 800087e:	220a      	movs	r2, #10
 8000880:	601a      	str	r2, [r3, #0]

	  //send_post_req(&Esp);

	// end delay default timeout
//	HAL_Delay(timeout);
	HAL_Delay(1000);
 8000882:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000886:	f000 fc95 	bl	80011b4 <HAL_Delay>
 800088a:	e7fa      	b.n	8000882 <main+0xaa>
 800088c:	f3af 8000 	nop.w
 8000890:	19de5080 	.word	0x19de5080
 8000894:	00000000 	.word	0x00000000
 8000898:	200001b8 	.word	0x200001b8
 800089c:	200001c8 	.word	0x200001c8
 80008a0:	20000080 	.word	0x20000080
 80008a4:	40010c00 	.word	0x40010c00
 80008a8:	40010800 	.word	0x40010800
 80008ac:	200001cc 	.word	0x200001cc
 80008b0:	200000a0 	.word	0x200000a0
 80008b4:	200001c0 	.word	0x200001c0
 80008b8:	200001c4 	.word	0x200001c4

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b090      	sub	sp, #64	@ 0x40
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	2228      	movs	r2, #40	@ 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 f9e4 	bl	8002c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	4618      	mov	r0, r3
 8000906:	f001 f8a1 	bl	8001a4c <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000910:	f000 f819 	bl	8000946 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2302      	movs	r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2102      	movs	r1, #2
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fb0e 	bl	8001f50 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800093a:	f000 f804 	bl	8000946 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3740      	adds	r7, #64	@ 0x40
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094a:	b672      	cpsid	i
}
 800094c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094e:	bf00      	nop
 8000950:	e7fd      	b.n	800094e <Error_Handler+0x8>
	...

08000954 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_SPI1_Init+0x64>)
 800095a:	4a18      	ldr	r2, [pc, #96]	@ (80009bc <MX_SPI1_Init+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_SPI1_Init+0x64>)
 8000960:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_SPI1_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_SPI1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_SPI1_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_SPI1_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_SPI1_Init+0x64>)
 8000980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000984:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_SPI1_Init+0x64>)
 8000988:	2210      	movs	r2, #16
 800098a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_SPI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <MX_SPI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_SPI1_Init+0x64>)
 80009a0:	220a      	movs	r2, #10
 80009a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_SPI1_Init+0x64>)
 80009a6:	f001 fc61 	bl	800226c <HAL_SPI_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009b0:	f7ff ffc9 	bl	8000946 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200001cc 	.word	0x200001cc
 80009bc:	40013000 	.word	0x40013000

080009c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <HAL_SPI_MspInit+0x88>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d12f      	bne.n	8000a40 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <HAL_SPI_MspInit+0x8c>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <HAL_SPI_MspInit+0x8c>)
 80009e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <HAL_SPI_MspInit+0x8c>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <HAL_SPI_MspInit+0x8c>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a13      	ldr	r2, [pc, #76]	@ (8000a4c <HAL_SPI_MspInit+0x8c>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <HAL_SPI_MspInit+0x8c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a10:	23a0      	movs	r3, #160	@ 0xa0
 8000a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	480b      	ldr	r0, [pc, #44]	@ (8000a50 <HAL_SPI_MspInit+0x90>)
 8000a24:	f000 fcf8 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a28:	2340      	movs	r3, #64	@ 0x40
 8000a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <HAL_SPI_MspInit+0x90>)
 8000a3c:	f000 fcec 	bl	8001418 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40013000 	.word	0x40013000
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010800 	.word	0x40010800

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_MspInit+0x5c>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <HAL_MspInit+0x5c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_MspInit+0x5c>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <HAL_MspInit+0x5c>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <HAL_MspInit+0x5c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <HAL_MspInit+0x5c>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_MspInit+0x60>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <HAL_MspInit+0x60>)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <NMI_Handler+0x4>

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <UsageFault_Handler+0x4>

08000ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 fb38 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8000b14:	2002      	movs	r0, #2
 8000b16:	f000 fe33 	bl	8001780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
	...

08000b2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <MX_USART1_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b64:	f001 ffb9 	bl	8002ada <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f7ff feea 	bl	8000946 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000224 	.word	0x20000224
 8000b7c:	40013800 	.word	0x40013800

08000b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <HAL_UART_MspInit+0x8c>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d131      	bne.n	8000c04 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <HAL_UART_MspInit+0x90>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c10 <HAL_UART_MspInit+0x90>)
 8000ba6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <HAL_UART_MspInit+0x90>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_UART_MspInit+0x90>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a14      	ldr	r2, [pc, #80]	@ (8000c10 <HAL_UART_MspInit+0x90>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_UART_MspInit+0x90>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    */
    GPIO_InitStruct.Pin = ESP_01S_TX_Pin;
 8000bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESP_01S_TX_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	4619      	mov	r1, r3
 8000be4:	480b      	ldr	r0, [pc, #44]	@ (8000c14 <HAL_UART_MspInit+0x94>)
 8000be6:	f000 fc17 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_01S_RX_Pin|RTC_ALARM_Pin;
 8000bea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <HAL_UART_MspInit+0x94>)
 8000c00:	f000 fc0a 	bl	8001418 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010800 	.word	0x40010800

08000c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c18:	f7ff ff81 	bl	8000b1e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c1e:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c20:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c34:	4c09      	ldr	r4, [pc, #36]	@ (8000c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c42:	f002 f831 	bl	8002ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c46:	f7ff fdc7 	bl	80007d8 <main>
  bx lr
 8000c4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c54:	08002d64 	.word	0x08002d64
  ldr r2, =_sbss
 8000c58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c5c:	20000270 	.word	0x20000270

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>

08000c62 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	78fa      	ldrb	r2, [r7, #3]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fc30 	bl	80004dc <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fc4b 	bl	800051c <SX1278_hw_SPIReadByte>
 8000c86:	4603      	mov	r3, r0
 8000c88:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fbe8 	bl	8000466 <SX1278_hw_SetNSS>
	return tmp;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]
 8000cac:	4613      	mov	r3, r2
 8000cae:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fbd5 	bl	8000466 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4610      	mov	r0, r2
 8000ccc:	f7ff fc06 	bl	80004dc <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	78ba      	ldrb	r2, [r7, #2]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fbff 	bl	80004dc <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fbbe 	bl	8000466 <SX1278_hw_SetNSS>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	460b      	mov	r3, r1
 8000d00:	72fb      	strb	r3, [r7, #11]
 8000d02:	4613      	mov	r3, r2
 8000d04:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000d06:	7abb      	ldrb	r3, [r7, #10]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d929      	bls.n	8000d60 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fba7 	bl	8000466 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4619      	mov	r1, r3
 8000d26:	4610      	mov	r0, r2
 8000d28:	f7ff fbd8 	bl	80004dc <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	75fb      	strb	r3, [r7, #23]
 8000d30:	e00b      	b.n	8000d4a <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f7ff fbcc 	bl	80004dc <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	3301      	adds	r3, #1
 8000d48:	75fb      	strb	r3, [r7, #23]
 8000d4a:	7dfa      	ldrb	r2, [r7, #23]
 8000d4c:	7abb      	ldrb	r3, [r7, #10]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3ef      	bcc.n	8000d32 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2101      	movs	r1, #1
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fb84 	bl	8000466 <SX1278_hw_SetNSS>
 8000d5e:	e000      	b.n	8000d62 <SX1278_SPIBurstWrite+0x70>
		return;
 8000d60:	bf00      	nop
	}
}
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 f90d 	bl	8000f90 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000d76:	200f      	movs	r0, #15
 8000d78:	f7ff fbf6 	bl	8000568 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f000 f917 	bl	8000fb0 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d88:	f04f 0000 	mov.w	r0, #0
 8000d8c:	f04f 0100 	mov.w	r1, #0
 8000d90:	04d9      	lsls	r1, r3, #19
 8000d92:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000d96:	04d0      	lsls	r0, r2, #19
 8000d98:	4a6f      	ldr	r2, [pc, #444]	@ (8000f58 <SX1278_config+0x1f0>)
 8000d9a:	f04f 0300 	mov.w	r3, #0
 8000d9e:	f7ff f9d7 	bl	8000150 <__aeabi_uldivmod>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000daa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	0c02      	lsrs	r2, r0, #16
 8000db8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	b2d3      	uxtb	r3, r2
 8000dc0:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000dc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	0a02      	lsrs	r2, r0, #8
 8000dd0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000dd4:	0a0b      	lsrs	r3, r1, #8
 8000dd6:	b2d3      	uxtb	r3, r2
 8000dd8:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000dda:	7c3b      	ldrb	r3, [r7, #16]
 8000ddc:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000dde:	f107 020c 	add.w	r2, r7, #12
 8000de2:	2303      	movs	r3, #3
 8000de4:	2106      	movs	r1, #6
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff83 	bl	8000cf2 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000dec:	2234      	movs	r2, #52	@ 0x34
 8000dee:	2139      	movs	r1, #57	@ 0x39
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff55 	bl	8000ca0 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7c1b      	ldrb	r3, [r3, #16]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b57      	ldr	r3, [pc, #348]	@ (8000f5c <SX1278_config+0x1f4>)
 8000dfe:	5c9b      	ldrb	r3, [r3, r2]
 8000e00:	461a      	mov	r2, r3
 8000e02:	2109      	movs	r1, #9
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff4b 	bl	8000ca0 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000e0a:	220b      	movs	r2, #11
 8000e0c:	210b      	movs	r1, #11
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff46 	bl	8000ca0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000e14:	2223      	movs	r2, #35	@ 0x23
 8000e16:	210c      	movs	r1, #12
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff41 	bl	8000ca0 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7c5b      	ldrb	r3, [r3, #17]
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b4e      	ldr	r3, [pc, #312]	@ (8000f60 <SX1278_config+0x1f8>)
 8000e26:	5c9b      	ldrb	r3, [r3, r2]
 8000e28:	2b06      	cmp	r3, #6
 8000e2a:	d147      	bne.n	8000ebc <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7c9b      	ldrb	r3, [r3, #18]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b4c      	ldr	r3, [pc, #304]	@ (8000f64 <SX1278_config+0x1fc>)
 8000e34:	5c9b      	ldrb	r3, [r3, r2]
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7cdb      	ldrb	r3, [r3, #19]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <SX1278_config+0x200>)
 8000e42:	5c5b      	ldrb	r3, [r3, r1]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	211d      	movs	r1, #29
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff23 	bl	8000ca0 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7c5b      	ldrb	r3, [r3, #17]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b3f      	ldr	r3, [pc, #252]	@ (8000f60 <SX1278_config+0x1f8>)
 8000e62:	5c9b      	ldrb	r3, [r3, r2]
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7d1b      	ldrb	r3, [r3, #20]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <SX1278_config+0x204>)
 8000e70:	5c5b      	ldrb	r3, [r3, r1]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4413      	add	r3, r2
 8000e78:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000e7a:	3303      	adds	r3, #3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	211e      	movs	r1, #30
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff0c 	bl	8000ca0 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000e88:	2131      	movs	r1, #49	@ 0x31
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fee9 	bl	8000c62 <SX1278_SPIRead>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	f023 0307 	bic.w	r3, r3, #7
 8000e9a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	f043 0305 	orr.w	r3, r3, #5
 8000ea2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2131      	movs	r1, #49	@ 0x31
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fef8 	bl	8000ca0 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000eb0:	220c      	movs	r2, #12
 8000eb2:	2137      	movs	r1, #55	@ 0x37
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff fef3 	bl	8000ca0 <SX1278_SPIWrite>
 8000eba:	e029      	b.n	8000f10 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7c9b      	ldrb	r3, [r3, #18]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b28      	ldr	r3, [pc, #160]	@ (8000f64 <SX1278_config+0x1fc>)
 8000ec4:	5c9b      	ldrb	r3, [r3, r2]
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7cdb      	ldrb	r3, [r3, #19]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <SX1278_config+0x200>)
 8000ed2:	5c5b      	ldrb	r3, [r3, r1]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000ed8:	4413      	add	r3, r2
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	211d      	movs	r1, #29
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff fedd 	bl	8000ca0 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7c5b      	ldrb	r3, [r3, #17]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <SX1278_config+0x1f8>)
 8000eee:	5c9b      	ldrb	r3, [r3, r2]
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7d1b      	ldrb	r3, [r3, #20]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <SX1278_config+0x204>)
 8000efc:	5c5b      	ldrb	r3, [r3, r1]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000f02:	4413      	add	r3, r2
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	211e      	movs	r1, #30
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fec8 	bl	8000ca0 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000f10:	2204      	movs	r2, #4
 8000f12:	2126      	movs	r1, #38	@ 0x26
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fec3 	bl	8000ca0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	211f      	movs	r1, #31
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff febe 	bl	8000ca0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000f24:	2200      	movs	r2, #0
 8000f26:	2120      	movs	r1, #32
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff feb9 	bl	8000ca0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000f2e:	2208      	movs	r2, #8
 8000f30:	2121      	movs	r1, #33	@ 0x21
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff feb4 	bl	8000ca0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2141      	movs	r1, #65	@ 0x41
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff feaf 	bl	8000ca0 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f810 	bl	8000f70 <SX1278_standby>
}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	01e84800 	.word	0x01e84800
 8000f5c:	08002d20 	.word	0x08002d20
 8000f60:	08002d24 	.word	0x08002d24
 8000f64:	08002d2c 	.word	0x08002d2c
 8000f68:	08002d38 	.word	0x08002d38
 8000f6c:	08002d3c 	.word	0x08002d3c

08000f70 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000f78:	2209      	movs	r2, #9
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff fe8f 	bl	8000ca0 <SX1278_SPIWrite>
	module->status = STANDBY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	759a      	strb	r2, [r3, #22]
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000f98:	2208      	movs	r2, #8
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff fe7f 	bl	8000ca0 <SX1278_SPIWrite>
	module->status = SLEEP;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	759a      	strb	r2, [r3, #22]
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000fb8:	2288      	movs	r2, #136	@ 0x88
 8000fba:	2101      	movs	r1, #1
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fe6f 	bl	8000ca0 <SX1278_SPIWrite>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000fd2:	22ff      	movs	r2, #255	@ 0xff
 8000fd4:	2112      	movs	r1, #18
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fe62 	bl	8000ca0 <SX1278_SPIWrite>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	460b      	mov	r3, r1
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	7afa      	ldrb	r2, [r7, #11]
 8000ff6:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f7ff feb5 	bl	8000d68 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000ffe:	2287      	movs	r2, #135	@ 0x87
 8001000:	214d      	movs	r1, #77	@ 0x4d
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff fe4c 	bl	8000ca0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001008:	2200      	movs	r2, #0
 800100a:	2124      	movs	r1, #36	@ 0x24
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff fe47 	bl	8000ca0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001012:	2241      	movs	r2, #65	@ 0x41
 8001014:	2140      	movs	r1, #64	@ 0x40
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff fe42 	bl	8000ca0 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f7ff ffd4 	bl	8000fca <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8001022:	22f7      	movs	r2, #247	@ 0xf7
 8001024:	2111      	movs	r1, #17
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f7ff fe3a 	bl	8000ca0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800102c:	7afb      	ldrb	r3, [r7, #11]
 800102e:	461a      	mov	r2, r3
 8001030:	2122      	movs	r1, #34	@ 0x22
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff fe34 	bl	8000ca0 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001038:	210e      	movs	r1, #14
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff fe11 	bl	8000c62 <SX1278_SPIRead>
 8001040:	4603      	mov	r3, r0
 8001042:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	461a      	mov	r2, r3
 8001048:	210d      	movs	r1, #13
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f7ff fe28 	bl	8000ca0 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8001050:	2122      	movs	r1, #34	@ 0x22
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f7ff fe05 	bl	8000c62 <SX1278_SPIRead>
 8001058:	4603      	mov	r3, r0
 800105a:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 800105c:	7dba      	ldrb	r2, [r7, #22]
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	429a      	cmp	r2, r3
 8001062:	d104      	bne.n	800106e <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2202      	movs	r2, #2
 8001068:	759a      	strb	r2, [r3, #22]
			return 1;
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3b01      	subs	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1ea      	bne.n	8001050 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa08 	bl	8000494 <SX1278_hw_Reset>
			SX1278_config(module);
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff fe6f 	bl	8000d68 <SX1278_config>
			return 0;
 800108a:	2300      	movs	r3, #0
		}
	}
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <SX1278_init>:
	}
}

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f9c9 	bl	800043c <SX1278_hw_init>
	module->frequency = frequency;
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	7e3a      	ldrb	r2, [r7, #24]
 80010b8:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	7f3a      	ldrb	r2, [r7, #28]
 80010be:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010c6:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80010ce:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80010d6:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80010de:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fe41 	bl	8000d68 <SX1278_config>
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <HAL_Init+0x28>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	@ (8001118 <HAL_Init+0x28>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f947 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	200f      	movs	r0, #15
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fca2 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40022000 	.word	0x40022000

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f95f 	bl	80013fe <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f927 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	@ (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000000 	.word	0x20000000
 8001174:	20000008 	.word	0x20000008
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x1c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	@ (800119c <HAL_IncTick+0x20>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a03      	ldr	r2, [pc, #12]	@ (800119c <HAL_IncTick+0x20>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000008 	.word	0x20000008
 800119c:	2000026c 	.word	0x2000026c

080011a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b02      	ldr	r3, [pc, #8]	@ (80011b0 <HAL_GetTick+0x10>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	2000026c 	.word	0x2000026c

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff fff0 	bl	80011a0 <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffe0 	bl	80011a0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4906      	ldr	r1, [pc, #24]	@ (8001294 <__NVIC_EnableIRQ+0x34>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	@ (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	@ (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	@ 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	@ 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff90 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff2d 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff42 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff90 	bl	80012ec <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5f 	bl	8001298 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff35 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b08b      	sub	sp, #44	@ 0x2c
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	e169      	b.n	8001700 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800142c:	2201      	movs	r2, #1
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8158 	bne.w	80016fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a9a      	ldr	r2, [pc, #616]	@ (80016b8 <HAL_GPIO_Init+0x2a0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d05e      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001454:	4a98      	ldr	r2, [pc, #608]	@ (80016b8 <HAL_GPIO_Init+0x2a0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d875      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800145a:	4a98      	ldr	r2, [pc, #608]	@ (80016bc <HAL_GPIO_Init+0x2a4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d058      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001460:	4a96      	ldr	r2, [pc, #600]	@ (80016bc <HAL_GPIO_Init+0x2a4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d86f      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001466:	4a96      	ldr	r2, [pc, #600]	@ (80016c0 <HAL_GPIO_Init+0x2a8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d052      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 800146c:	4a94      	ldr	r2, [pc, #592]	@ (80016c0 <HAL_GPIO_Init+0x2a8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d869      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001472:	4a94      	ldr	r2, [pc, #592]	@ (80016c4 <HAL_GPIO_Init+0x2ac>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d04c      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001478:	4a92      	ldr	r2, [pc, #584]	@ (80016c4 <HAL_GPIO_Init+0x2ac>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d863      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800147e:	4a92      	ldr	r2, [pc, #584]	@ (80016c8 <HAL_GPIO_Init+0x2b0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d046      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001484:	4a90      	ldr	r2, [pc, #576]	@ (80016c8 <HAL_GPIO_Init+0x2b0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d85d      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800148a:	2b12      	cmp	r3, #18
 800148c:	d82a      	bhi.n	80014e4 <HAL_GPIO_Init+0xcc>
 800148e:	2b12      	cmp	r3, #18
 8001490:	d859      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001492:	a201      	add	r2, pc, #4	@ (adr r2, 8001498 <HAL_GPIO_Init+0x80>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	08001513 	.word	0x08001513
 800149c:	080014ed 	.word	0x080014ed
 80014a0:	080014ff 	.word	0x080014ff
 80014a4:	08001541 	.word	0x08001541
 80014a8:	08001547 	.word	0x08001547
 80014ac:	08001547 	.word	0x08001547
 80014b0:	08001547 	.word	0x08001547
 80014b4:	08001547 	.word	0x08001547
 80014b8:	08001547 	.word	0x08001547
 80014bc:	08001547 	.word	0x08001547
 80014c0:	08001547 	.word	0x08001547
 80014c4:	08001547 	.word	0x08001547
 80014c8:	08001547 	.word	0x08001547
 80014cc:	08001547 	.word	0x08001547
 80014d0:	08001547 	.word	0x08001547
 80014d4:	08001547 	.word	0x08001547
 80014d8:	08001547 	.word	0x08001547
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	08001509 	.word	0x08001509
 80014e4:	4a79      	ldr	r2, [pc, #484]	@ (80016cc <HAL_GPIO_Init+0x2b4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ea:	e02c      	b.n	8001546 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e029      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	3304      	adds	r3, #4
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e024      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	3308      	adds	r3, #8
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e01f      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	330c      	adds	r3, #12
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e01a      	b.n	8001548 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800151a:	2304      	movs	r3, #4
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e013      	b.n	8001548 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d105      	bne.n	8001534 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001528:	2308      	movs	r3, #8
 800152a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	611a      	str	r2, [r3, #16]
          break;
 8001532:	e009      	b.n	8001548 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001534:	2308      	movs	r3, #8
 8001536:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	615a      	str	r2, [r3, #20]
          break;
 800153e:	e003      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
          break;
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x130>
          break;
 8001546:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2bff      	cmp	r3, #255	@ 0xff
 800154c:	d801      	bhi.n	8001552 <HAL_GPIO_Init+0x13a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	e001      	b.n	8001556 <HAL_GPIO_Init+0x13e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3304      	adds	r3, #4
 8001556:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2bff      	cmp	r3, #255	@ 0xff
 800155c:	d802      	bhi.n	8001564 <HAL_GPIO_Init+0x14c>
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	e002      	b.n	800156a <HAL_GPIO_Init+0x152>
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	3b08      	subs	r3, #8
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	210f      	movs	r1, #15
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	6a39      	ldr	r1, [r7, #32]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	fa01 f303 	lsl.w	r3, r1, r3
 8001584:	431a      	orrs	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 80b1 	beq.w	80016fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001598:	4b4d      	ldr	r3, [pc, #308]	@ (80016d0 <HAL_GPIO_Init+0x2b8>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a4c      	ldr	r2, [pc, #304]	@ (80016d0 <HAL_GPIO_Init+0x2b8>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b4a      	ldr	r3, [pc, #296]	@ (80016d0 <HAL_GPIO_Init+0x2b8>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b0:	4a48      	ldr	r2, [pc, #288]	@ (80016d4 <HAL_GPIO_Init+0x2bc>)
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a40      	ldr	r2, [pc, #256]	@ (80016d8 <HAL_GPIO_Init+0x2c0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d013      	beq.n	8001604 <HAL_GPIO_Init+0x1ec>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a3f      	ldr	r2, [pc, #252]	@ (80016dc <HAL_GPIO_Init+0x2c4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00d      	beq.n	8001600 <HAL_GPIO_Init+0x1e8>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a3e      	ldr	r2, [pc, #248]	@ (80016e0 <HAL_GPIO_Init+0x2c8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d007      	beq.n	80015fc <HAL_GPIO_Init+0x1e4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a3d      	ldr	r2, [pc, #244]	@ (80016e4 <HAL_GPIO_Init+0x2cc>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d101      	bne.n	80015f8 <HAL_GPIO_Init+0x1e0>
 80015f4:	2303      	movs	r3, #3
 80015f6:	e006      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 80015f8:	2304      	movs	r3, #4
 80015fa:	e004      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_GPIO_Init+0x1ee>
 8001604:	2300      	movs	r3, #0
 8001606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001608:	f002 0203 	and.w	r2, r2, #3
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	4093      	lsls	r3, r2
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001616:	492f      	ldr	r1, [pc, #188]	@ (80016d4 <HAL_GPIO_Init+0x2bc>)
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001630:	4b2d      	ldr	r3, [pc, #180]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	492c      	ldr	r1, [pc, #176]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800163e:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	43db      	mvns	r3, r3
 8001646:	4928      	ldr	r1, [pc, #160]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001648:	4013      	ands	r3, r2
 800164a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001658:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	4922      	ldr	r1, [pc, #136]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	60cb      	str	r3, [r1, #12]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001666:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	491e      	ldr	r1, [pc, #120]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001670:	4013      	ands	r3, r2
 8001672:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4918      	ldr	r1, [pc, #96]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800168e:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	4914      	ldr	r1, [pc, #80]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 8001698:	4013      	ands	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d021      	beq.n	80016ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	490e      	ldr	r1, [pc, #56]	@ (80016e8 <HAL_GPIO_Init+0x2d0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
 80016b4:	e021      	b.n	80016fa <HAL_GPIO_Init+0x2e2>
 80016b6:	bf00      	nop
 80016b8:	10320000 	.word	0x10320000
 80016bc:	10310000 	.word	0x10310000
 80016c0:	10220000 	.word	0x10220000
 80016c4:	10210000 	.word	0x10210000
 80016c8:	10120000 	.word	0x10120000
 80016cc:	10110000 	.word	0x10110000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	40010800 	.word	0x40010800
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	40011000 	.word	0x40011000
 80016e4:	40011400 	.word	0x40011400
 80016e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_GPIO_Init+0x304>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4909      	ldr	r1, [pc, #36]	@ (800171c <HAL_GPIO_Init+0x304>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f47f ae8e 	bne.w	800142c <HAL_GPIO_Init+0x14>
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	372c      	adds	r7, #44	@ 0x2c
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	40010400 	.word	0x40010400

08001720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e001      	b.n	8001742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	807b      	strh	r3, [r7, #2]
 800175a:	4613      	mov	r3, r2
 800175c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800175e:	787b      	ldrb	r3, [r7, #1]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800176a:	e003      	b.n	8001774 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	041a      	lsls	r2, r3, #16
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	611a      	str	r2, [r3, #16]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
	...

08001780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d006      	beq.n	80017a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f806 	bl	80017b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40010400 	.word	0x40010400

080017b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e12b      	b.n	8001a2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7fe ff90 	bl	8000710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2224      	movs	r2, #36	@ 0x24
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001816:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001826:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001828:	f000 fcda 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 800182c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a81      	ldr	r2, [pc, #516]	@ (8001a38 <HAL_I2C_Init+0x274>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d807      	bhi.n	8001848 <HAL_I2C_Init+0x84>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a80      	ldr	r2, [pc, #512]	@ (8001a3c <HAL_I2C_Init+0x278>)
 800183c:	4293      	cmp	r3, r2
 800183e:	bf94      	ite	ls
 8001840:	2301      	movls	r3, #1
 8001842:	2300      	movhi	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e006      	b.n	8001856 <HAL_I2C_Init+0x92>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a40 <HAL_I2C_Init+0x27c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	bf94      	ite	ls
 8001850:	2301      	movls	r3, #1
 8001852:	2300      	movhi	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0e7      	b.n	8001a2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a78      	ldr	r2, [pc, #480]	@ (8001a44 <HAL_I2C_Init+0x280>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9b      	lsrs	r3, r3, #18
 8001868:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a6a      	ldr	r2, [pc, #424]	@ (8001a38 <HAL_I2C_Init+0x274>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d802      	bhi.n	8001898 <HAL_I2C_Init+0xd4>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	3301      	adds	r3, #1
 8001896:	e009      	b.n	80018ac <HAL_I2C_Init+0xe8>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	4a69      	ldr	r2, [pc, #420]	@ (8001a48 <HAL_I2C_Init+0x284>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	3301      	adds	r3, #1
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	495c      	ldr	r1, [pc, #368]	@ (8001a38 <HAL_I2C_Init+0x274>)
 80018c8:	428b      	cmp	r3, r1
 80018ca:	d819      	bhi.n	8001900 <HAL_I2C_Init+0x13c>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1e59      	subs	r1, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018da:	1c59      	adds	r1, r3, #1
 80018dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018e0:	400b      	ands	r3, r1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <HAL_I2C_Init+0x138>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e59      	subs	r1, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fa:	e051      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e04f      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d111      	bne.n	800192c <HAL_I2C_Init+0x168>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	440b      	add	r3, r1
 8001916:	fbb0 f3f3 	udiv	r3, r0, r3
 800191a:	3301      	adds	r3, #1
 800191c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	e012      	b.n	8001952 <HAL_I2C_Init+0x18e>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e58      	subs	r0, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	0099      	lsls	r1, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_I2C_Init+0x196>
 8001956:	2301      	movs	r3, #1
 8001958:	e022      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10e      	bne.n	8001980 <HAL_I2C_Init+0x1bc>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1e58      	subs	r0, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	440b      	add	r3, r1
 8001970:	fbb0 f3f3 	udiv	r3, r0, r3
 8001974:	3301      	adds	r3, #1
 8001976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800197e:	e00f      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1e58      	subs	r0, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	0099      	lsls	r1, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	fbb0 f3f3 	udiv	r3, r0, r3
 8001996:	3301      	adds	r3, #1
 8001998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	6809      	ldr	r1, [r1, #0]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6911      	ldr	r1, [r2, #16]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68d2      	ldr	r2, [r2, #12]
 80019da:	4311      	orrs	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	000186a0 	.word	0x000186a0
 8001a3c:	001e847f 	.word	0x001e847f
 8001a40:	003d08ff 	.word	0x003d08ff
 8001a44:	431bde83 	.word	0x431bde83
 8001a48:	10624dd3 	.word	0x10624dd3

08001a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e272      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8087 	beq.w	8001b7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a6c:	4b92      	ldr	r3, [pc, #584]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d00c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a78:	4b8f      	ldr	r3, [pc, #572]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d112      	bne.n	8001aaa <HAL_RCC_OscConfig+0x5e>
 8001a84:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a90:	d10b      	bne.n	8001aaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a92:	4b89      	ldr	r3, [pc, #548]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d06c      	beq.n	8001b78 <HAL_RCC_OscConfig+0x12c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d168      	bne.n	8001b78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e24c      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x76>
 8001ab4:	4b80      	ldr	r3, [pc, #512]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a7f      	ldr	r2, [pc, #508]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	e02e      	b.n	8001b20 <HAL_RCC_OscConfig+0xd4>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x98>
 8001aca:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a7a      	ldr	r2, [pc, #488]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b78      	ldr	r3, [pc, #480]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a77      	ldr	r2, [pc, #476]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e01d      	b.n	8001b20 <HAL_RCC_OscConfig+0xd4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0xbc>
 8001aee:	4b72      	ldr	r3, [pc, #456]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a71      	ldr	r2, [pc, #452]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0xd4>
 8001b08:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b68      	ldr	r3, [pc, #416]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a67      	ldr	r2, [pc, #412]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fb3a 	bl	80011a0 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fb36 	bl	80011a0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	@ 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e200      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0xe4>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fb26 	bl	80011a0 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff fb22 	bl	80011a0 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	@ 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1ec      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	4b53      	ldr	r3, [pc, #332]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x10c>
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d063      	beq.n	8001c4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b86:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b92:	4b49      	ldr	r3, [pc, #292]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d11c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x18c>
 8001b9e:	4b46      	ldr	r3, [pc, #280]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d116      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	4b43      	ldr	r3, [pc, #268]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x176>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e1c0      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4939      	ldr	r1, [pc, #228]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	e03a      	b.n	8001c4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be0:	4b36      	ldr	r3, [pc, #216]	@ (8001cbc <HAL_RCC_OscConfig+0x270>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff fadb 	bl	80011a0 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bee:	f7ff fad7 	bl	80011a0 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e1a1      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4927      	ldr	r1, [pc, #156]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c22:	4b26      	ldr	r3, [pc, #152]	@ (8001cbc <HAL_RCC_OscConfig+0x270>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff faba 	bl	80011a0 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c30:	f7ff fab6 	bl	80011a0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e180      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d03a      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d019      	beq.n	8001c96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c62:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <HAL_RCC_OscConfig+0x274>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7ff fa9a 	bl	80011a0 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff fa96 	bl	80011a0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e160      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f000 face 	bl	8002230 <RCC_Delay>
 8001c94:	e01c      	b.n	8001cd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_RCC_OscConfig+0x274>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fa80 	bl	80011a0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fa7c 	bl	80011a0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d908      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e146      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	42420000 	.word	0x42420000
 8001cc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc4:	4b92      	ldr	r3, [pc, #584]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1e9      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80a6 	beq.w	8001e2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10d      	bne.n	8001d0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4b88      	ldr	r3, [pc, #544]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a87      	ldr	r2, [pc, #540]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf8:	61d3      	str	r3, [r2, #28]
 8001cfa:	4b85      	ldr	r3, [pc, #532]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b82      	ldr	r3, [pc, #520]	@ (8001f14 <HAL_RCC_OscConfig+0x4c8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d118      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4b7f      	ldr	r3, [pc, #508]	@ (8001f14 <HAL_RCC_OscConfig+0x4c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f14 <HAL_RCC_OscConfig+0x4c8>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fa3d 	bl	80011a0 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2a:	f7ff fa39 	bl	80011a0 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	@ 0x64
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e103      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	4b75      	ldr	r3, [pc, #468]	@ (8001f14 <HAL_RCC_OscConfig+0x4c8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x312>
 8001d50:	4b6f      	ldr	r3, [pc, #444]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a6e      	ldr	r2, [pc, #440]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6213      	str	r3, [r2, #32]
 8001d5c:	e02d      	b.n	8001dba <HAL_RCC_OscConfig+0x36e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x334>
 8001d66:	4b6a      	ldr	r3, [pc, #424]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a69      	ldr	r2, [pc, #420]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	6213      	str	r3, [r2, #32]
 8001d72:	4b67      	ldr	r3, [pc, #412]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a66      	ldr	r2, [pc, #408]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	f023 0304 	bic.w	r3, r3, #4
 8001d7c:	6213      	str	r3, [r2, #32]
 8001d7e:	e01c      	b.n	8001dba <HAL_RCC_OscConfig+0x36e>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d10c      	bne.n	8001da2 <HAL_RCC_OscConfig+0x356>
 8001d88:	4b61      	ldr	r3, [pc, #388]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a60      	ldr	r2, [pc, #384]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	4b5e      	ldr	r3, [pc, #376]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a5d      	ldr	r2, [pc, #372]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	e00b      	b.n	8001dba <HAL_RCC_OscConfig+0x36e>
 8001da2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a5a      	ldr	r2, [pc, #360]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	4b58      	ldr	r3, [pc, #352]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a57      	ldr	r2, [pc, #348]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d015      	beq.n	8001dee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff f9ed 	bl	80011a0 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff f9e9 	bl	80011a0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e0b1      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	4b4b      	ldr	r3, [pc, #300]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ee      	beq.n	8001dca <HAL_RCC_OscConfig+0x37e>
 8001dec:	e014      	b.n	8001e18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff f9d7 	bl	80011a0 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff f9d3 	bl	80011a0 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e09b      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	4b40      	ldr	r3, [pc, #256]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1ee      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d105      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4a3b      	ldr	r2, [pc, #236]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8087 	beq.w	8001f42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e34:	4b36      	ldr	r3, [pc, #216]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d061      	beq.n	8001f04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d146      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e48:	4b33      	ldr	r3, [pc, #204]	@ (8001f18 <HAL_RCC_OscConfig+0x4cc>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f9a7 	bl	80011a0 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e56:	f7ff f9a3 	bl	80011a0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e06d      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7c:	d108      	bne.n	8001e90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4921      	ldr	r1, [pc, #132]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e90:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a19      	ldr	r1, [r3, #32]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	491b      	ldr	r1, [pc, #108]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x4cc>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7ff f977 	bl	80011a0 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff f973 	bl	80011a0 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e03d      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x46a>
 8001ed4:	e035      	b.n	8001f42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <HAL_RCC_OscConfig+0x4cc>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff f960 	bl	80011a0 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f95c 	bl	80011a0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e026      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x498>
 8001f02:	e01e      	b.n	8001f42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e019      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40007000 	.word	0x40007000
 8001f18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_RCC_OscConfig+0x500>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000

08001f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0d0      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b6a      	ldr	r3, [pc, #424]	@ (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d910      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b67      	ldr	r3, [pc, #412]	@ (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4965      	ldr	r1, [pc, #404]	@ (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b63      	ldr	r3, [pc, #396]	@ (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0b8      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fac:	4b59      	ldr	r3, [pc, #356]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a58      	ldr	r2, [pc, #352]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc4:	4b53      	ldr	r3, [pc, #332]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b50      	ldr	r3, [pc, #320]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	494d      	ldr	r1, [pc, #308]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d040      	beq.n	8002070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b47      	ldr	r3, [pc, #284]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d115      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e07f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b41      	ldr	r3, [pc, #260]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e073      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	4b3d      	ldr	r3, [pc, #244]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06b      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b39      	ldr	r3, [pc, #228]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4936      	ldr	r1, [pc, #216]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002040:	f7ff f8ae 	bl	80011a0 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7ff f8aa 	bl	80011a0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e053      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b2d      	ldr	r3, [pc, #180]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002070:	4b27      	ldr	r3, [pc, #156]	@ (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d210      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4922      	ldr	r1, [pc, #136]	@ (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b20      	ldr	r3, [pc, #128]	@ (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e032      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4916      	ldr	r1, [pc, #88]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ca:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	490e      	ldr	r1, [pc, #56]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020de:	f000 f821 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	490a      	ldr	r1, [pc, #40]	@ (8002118 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	5ccb      	ldrb	r3, [r1, r3]
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	4a09      	ldr	r2, [pc, #36]	@ (800211c <HAL_RCC_ClockConfig+0x1cc>)
 80020f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_RCC_ClockConfig+0x1d0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f80c 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40022000 	.word	0x40022000
 8002114:	40021000 	.word	0x40021000
 8002118:	08002d08 	.word	0x08002d08
 800211c:	20000000 	.word	0x20000000
 8002120:	20000004 	.word	0x20000004

08002124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800213e:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b04      	cmp	r3, #4
 800214c:	d002      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x30>
 800214e:	2b08      	cmp	r3, #8
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x36>
 8002152:	e027      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002154:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002156:	613b      	str	r3, [r7, #16]
      break;
 8002158:	e027      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	0c9b      	lsrs	r3, r3, #18
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	4a17      	ldr	r2, [pc, #92]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d010      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002172:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0c5b      	lsrs	r3, r3, #17
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	4a11      	ldr	r2, [pc, #68]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002186:	fb03 f202 	mul.w	r2, r3, r2
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e004      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a0c      	ldr	r2, [pc, #48]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002198:	fb02 f303 	mul.w	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	613b      	str	r3, [r7, #16]
      break;
 80021a2:	e002      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x98>)
 80021a6:	613b      	str	r3, [r7, #16]
      break;
 80021a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021aa:	693b      	ldr	r3, [r7, #16]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	007a1200 	.word	0x007a1200
 80021c0:	08002d40 	.word	0x08002d40
 80021c4:	08002d50 	.word	0x08002d50
 80021c8:	003d0900 	.word	0x003d0900

080021cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d0:	4b02      	ldr	r3, [pc, #8]	@ (80021dc <HAL_RCC_GetHCLKFreq+0x10>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	20000000 	.word	0x20000000

080021e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e4:	f7ff fff2 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	@ (8002204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	08002d18 	.word	0x08002d18

08002208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800220c:	f7ff ffde 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	0adb      	lsrs	r3, r3, #11
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4903      	ldr	r1, [pc, #12]	@ (800222c <HAL_RCC_GetPCLK2Freq+0x24>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	08002d18 	.word	0x08002d18

08002230 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002238:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <RCC_Delay+0x34>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <RCC_Delay+0x38>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0a5b      	lsrs	r3, r3, #9
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800224c:	bf00      	nop
  }
  while (Delay --);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	60fa      	str	r2, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f9      	bne.n	800224c <RCC_Delay+0x1c>
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20000000 	.word	0x20000000
 8002268:	10624dd3 	.word	0x10624dd3

0800226c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e076      	b.n	800236c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800228e:	d009      	beq.n	80022a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
 8002296:	e005      	b.n	80022a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fb7e 	bl	80009c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002328:	ea42 0103 	orr.w	r1, r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	0c1a      	lsrs	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f002 0204 	and.w	r2, r2, #4
 800234a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800235a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002384:	f7fe ff0c 	bl	80011a0 <HAL_GetTick>
 8002388:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800239a:	2302      	movs	r3, #2
 800239c:	e12a      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_SPI_Transmit+0x36>
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e122      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_SPI_Transmit+0x48>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e11b      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2203      	movs	r2, #3
 80023c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800240a:	d10f      	bne.n	800242c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800241a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800242a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002436:	2b40      	cmp	r3, #64	@ 0x40
 8002438:	d007      	beq.n	800244a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002452:	d152      	bne.n	80024fa <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_SPI_Transmit+0xee>
 800245c:	8b7b      	ldrh	r3, [r7, #26]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d145      	bne.n	80024ee <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	881a      	ldrh	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	1c9a      	adds	r2, r3, #2
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002486:	e032      	b.n	80024ee <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d112      	bne.n	80024bc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	881a      	ldrh	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	1c9a      	adds	r2, r3, #2
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024ba:	e018      	b.n	80024ee <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024bc:	f7fe fe70 	bl	80011a0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d803      	bhi.n	80024d4 <HAL_SPI_Transmit+0x160>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d102      	bne.n	80024da <HAL_SPI_Transmit+0x166>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e082      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1c7      	bne.n	8002488 <HAL_SPI_Transmit+0x114>
 80024f8:	e053      	b.n	80025a2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_SPI_Transmit+0x194>
 8002502:	8b7b      	ldrh	r3, [r7, #26]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d147      	bne.n	8002598 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	330c      	adds	r3, #12
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800252e:	e033      	b.n	8002598 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d113      	bne.n	8002566 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	330c      	adds	r3, #12
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002564:	e018      	b.n	8002598 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002566:	f7fe fe1b 	bl	80011a0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d803      	bhi.n	800257e <HAL_SPI_Transmit+0x20a>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d102      	bne.n	8002584 <HAL_SPI_Transmit+0x210>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e02d      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1c6      	bne.n	8002530 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	6839      	ldr	r1, [r7, #0]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa66 	bl	8002a78 <SPI_EndRxTxTransaction>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2220      	movs	r2, #32
 80025b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10a      	bne.n	80025d6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
  }
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	@ 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800260a:	2301      	movs	r3, #1
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800260e:	f7fe fdc7 	bl	80011a0 <HAL_GetTick>
 8002612:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800261a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002626:	7ffb      	ldrb	r3, [r7, #31]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d00c      	beq.n	8002646 <HAL_SPI_TransmitReceive+0x4a>
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002632:	d106      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x46>
 800263c:	7ffb      	ldrb	r3, [r7, #31]
 800263e:	2b04      	cmp	r3, #4
 8002640:	d001      	beq.n	8002646 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
 8002644:	e17f      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x5c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x5c>
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e174      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_SPI_TransmitReceive+0x6e>
 8002666:	2302      	movs	r3, #2
 8002668:	e16d      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b04      	cmp	r3, #4
 800267c:	d003      	beq.n	8002686 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2205      	movs	r2, #5
 8002682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	887a      	ldrh	r2, [r7, #2]
 8002696:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	887a      	ldrh	r2, [r7, #2]
 80026ae:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c6:	2b40      	cmp	r3, #64	@ 0x40
 80026c8:	d007      	beq.n	80026da <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026e2:	d17e      	bne.n	80027e2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_SPI_TransmitReceive+0xf6>
 80026ec:	8afb      	ldrh	r3, [r7, #22]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d16c      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	1c9a      	adds	r2, r3, #2
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002716:	e059      	b.n	80027cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d11b      	bne.n	800275e <HAL_SPI_TransmitReceive+0x162>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d016      	beq.n	800275e <HAL_SPI_TransmitReceive+0x162>
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	2b01      	cmp	r3, #1
 8002734:	d113      	bne.n	800275e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d119      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x1a4>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d014      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002780:	b292      	uxth	r2, r2
 8002782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002788:	1c9a      	adds	r2, r3, #2
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800279c:	2301      	movs	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027a0:	f7fe fcfe 	bl	80011a0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d80d      	bhi.n	80027cc <HAL_SPI_TransmitReceive+0x1d0>
 80027b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d009      	beq.n	80027cc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0bc      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1a0      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x11c>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d19b      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x11c>
 80027e0:	e082      	b.n	80028e8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x1f4>
 80027ea:	8afb      	ldrh	r3, [r7, #22]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d171      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002816:	e05d      	b.n	80028d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b02      	cmp	r3, #2
 8002824:	d11c      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x264>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d017      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x264>
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	2b01      	cmp	r3, #1
 8002834:	d114      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	330c      	adds	r3, #12
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d119      	bne.n	80028a2 <HAL_SPI_TransmitReceive+0x2a6>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d014      	beq.n	80028a2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800289e:	2301      	movs	r3, #1
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028a2:	f7fe fc7d 	bl	80011a0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d803      	bhi.n	80028ba <HAL_SPI_TransmitReceive+0x2be>
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d102      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x2c4>
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e038      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d19c      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x21c>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d197      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028e8:	6a3a      	ldr	r2, [r7, #32]
 80028ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f8c3 	bl	8002a78 <SPI_EndRxTxTransaction>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e01d      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002944:	2300      	movs	r3, #0
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3728      	adds	r7, #40	@ 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800295c:	b2db      	uxtb	r3, r3
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002978:	f7fe fc12 	bl	80011a0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	4413      	add	r3, r2
 8002986:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002988:	f7fe fc0a 	bl	80011a0 <HAL_GetTick>
 800298c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800298e:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	015b      	lsls	r3, r3, #5
 8002994:	0d1b      	lsrs	r3, r3, #20
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800299e:	e054      	b.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a6:	d050      	beq.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029a8:	f7fe fbfa 	bl	80011a0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d902      	bls.n	80029be <SPI_WaitFlagStateUntilTimeout+0x56>
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d13d      	bne.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029d6:	d111      	bne.n	80029fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029e0:	d004      	beq.n	80029ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ea:	d107      	bne.n	80029fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a04:	d10f      	bne.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e017      	b.n	8002a6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d19b      	bne.n	80029a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ff6a 	bl	8002968 <SPI_WaitFlagStateUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e013      	b.n	8002ad2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2180      	movs	r1, #128	@ 0x80
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff ff57 	bl	8002968 <SPI_WaitFlagStateUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e000      	b.n	8002ad2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e042      	b.n	8002b72 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d106      	bne.n	8002b06 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7fe f83d 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2224      	movs	r2, #36	@ 0x24
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f82c 	bl	8002b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002bb6:	f023 030c 	bic.w	r3, r3, #12
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2c      	ldr	r2, [pc, #176]	@ (8002c90 <UART_SetConfig+0x114>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d103      	bne.n	8002bec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002be4:	f7ff fb10 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	e002      	b.n	8002bf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bec:	f7ff faf8 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009a      	lsls	r2, r3, #2
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	4a22      	ldr	r2, [pc, #136]	@ (8002c94 <UART_SetConfig+0x118>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	0119      	lsls	r1, r3, #4
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c28:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <UART_SetConfig+0x118>)
 8002c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2064      	movs	r0, #100	@ 0x64
 8002c32:	fb00 f303 	mul.w	r3, r0, r3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	3332      	adds	r3, #50	@ 0x32
 8002c3c:	4a15      	ldr	r2, [pc, #84]	@ (8002c94 <UART_SetConfig+0x118>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c48:	4419      	add	r1, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	009a      	lsls	r2, r3, #2
 8002c54:	441a      	add	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <UART_SetConfig+0x118>)
 8002c62:	fba3 0302 	umull	r0, r3, r3, r2
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2064      	movs	r0, #100	@ 0x64
 8002c6a:	fb00 f303 	mul.w	r3, r0, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	3332      	adds	r3, #50	@ 0x32
 8002c74:	4a07      	ldr	r2, [pc, #28]	@ (8002c94 <UART_SetConfig+0x118>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	440a      	add	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40013800 	.word	0x40013800
 8002c94:	51eb851f 	.word	0x51eb851f

08002c98 <memset>:
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4402      	add	r2, r0
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d100      	bne.n	8002ca2 <memset+0xa>
 8002ca0:	4770      	bx	lr
 8002ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca6:	e7f9      	b.n	8002c9c <memset+0x4>

08002ca8 <__libc_init_array>:
 8002ca8:	b570      	push	{r4, r5, r6, lr}
 8002caa:	2600      	movs	r6, #0
 8002cac:	4d0c      	ldr	r5, [pc, #48]	@ (8002ce0 <__libc_init_array+0x38>)
 8002cae:	4c0d      	ldr	r4, [pc, #52]	@ (8002ce4 <__libc_init_array+0x3c>)
 8002cb0:	1b64      	subs	r4, r4, r5
 8002cb2:	10a4      	asrs	r4, r4, #2
 8002cb4:	42a6      	cmp	r6, r4
 8002cb6:	d109      	bne.n	8002ccc <__libc_init_array+0x24>
 8002cb8:	f000 f81a 	bl	8002cf0 <_init>
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	4d0a      	ldr	r5, [pc, #40]	@ (8002ce8 <__libc_init_array+0x40>)
 8002cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8002cec <__libc_init_array+0x44>)
 8002cc2:	1b64      	subs	r4, r4, r5
 8002cc4:	10a4      	asrs	r4, r4, #2
 8002cc6:	42a6      	cmp	r6, r4
 8002cc8:	d105      	bne.n	8002cd6 <__libc_init_array+0x2e>
 8002cca:	bd70      	pop	{r4, r5, r6, pc}
 8002ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd0:	4798      	blx	r3
 8002cd2:	3601      	adds	r6, #1
 8002cd4:	e7ee      	b.n	8002cb4 <__libc_init_array+0xc>
 8002cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cda:	4798      	blx	r3
 8002cdc:	3601      	adds	r6, #1
 8002cde:	e7f2      	b.n	8002cc6 <__libc_init_array+0x1e>
 8002ce0:	08002d5c 	.word	0x08002d5c
 8002ce4:	08002d5c 	.word	0x08002d5c
 8002ce8:	08002d5c 	.word	0x08002d5c
 8002cec:	08002d60 	.word	0x08002d60

08002cf0 <_init>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr

08002cfc <_fini>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr
