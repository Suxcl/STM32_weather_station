
Home_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080049f8  080049f8  000059f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c6c  08004c6c  00005c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c74  08004c74  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c74  08004c74  00005c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000102c  2000005c  08004cd8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001088  08004cd8  00006088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e83e  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002750  00000000  00000000  000148c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00017018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a25  00000000  00000000  00017d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018863  00000000  00000000  00018765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e77  00000000  00000000  00030fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087761  00000000  00000000  00042e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca5a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b88  00000000  00000000  000ca5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ce16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080049e0 	.word	0x080049e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080049e0 	.word	0x080049e0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	@ 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2iz>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000900:	d215      	bcs.n	800092e <__aeabi_d2iz+0x36>
 8000902:	d511      	bpl.n	8000928 <__aeabi_d2iz+0x30>
 8000904:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800090c:	d912      	bls.n	8000934 <__aeabi_d2iz+0x3c>
 800090e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	bf18      	it	ne
 8000924:	4240      	negne	r0, r0
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d105      	bne.n	8000940 <__aeabi_d2iz+0x48>
 8000934:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000938:	bf08      	it	eq
 800093a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000948:	b4b0      	push	{r4, r5, r7}
 800094a:	b08f      	sub	sp, #60	@ 0x3c
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000950:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000956:	2307      	movs	r3, #7
 8000958:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800095c:	2307      	movs	r3, #7
 800095e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000962:	2301      	movs	r3, #1
 8000964:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000968:	23ff      	movs	r3, #255	@ 0xff
 800096a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800096e:	2364      	movs	r3, #100	@ 0x64
 8000970:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000974:	2308      	movs	r3, #8
 8000976:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	461d      	mov	r5, r3
 800097c:	f107 040c 	add.w	r4, r7, #12
 8000980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000988:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800098c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	373c      	adds	r7, #60	@ 0x3c
 8000994:	46bd      	mov	sp, r7
 8000996:	bcb0      	pop	{r4, r5, r7}
 8000998:	4770      	bx	lr

0800099a <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6898      	ldr	r0, [r3, #8]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	899b      	ldrh	r3, [r3, #12]
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	f001 fd47 	bl	8002440 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f001 fa8e 	bl	8001ed4 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6898      	ldr	r0, [r3, #8]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	899b      	ldrh	r3, [r3, #12]
 80009c0:	2201      	movs	r2, #1
 80009c2:	4619      	mov	r1, r3
 80009c4:	f001 fd3c 	bl	8002440 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80009c8:	2064      	movs	r0, #100	@ 0x64
 80009ca:	f001 fa83 	bl	8001ed4 <HAL_Delay>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b084      	sub	sp, #16
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80009e0:	2101      	movs	r1, #1
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f9ff 	bl	8000de6 <LoRa_read>
 80009e8:	4603      	mov	r3, r0
 80009ea:	73bb      	strb	r3, [r7, #14]
	data = read;
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d107      	bne.n	8000a06 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	f023 0307 	bic.w	r3, r3, #7
 80009fc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
 8000a04:	e03e      	b.n	8000a84 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d10c      	bne.n	8000a26 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000a0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a10:	f023 0307 	bic.w	r3, r3, #7
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2201      	movs	r2, #1
 8000a22:	61da      	str	r2, [r3, #28]
 8000a24:	e02e      	b.n	8000a84 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d10c      	bne.n	8000a46 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a30:	f023 0307 	bic.w	r3, r3, #7
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	f043 0303 	orr.w	r3, r3, #3
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2203      	movs	r2, #3
 8000a42:	61da      	str	r2, [r3, #28]
 8000a44:	e01e      	b.n	8000a84 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	2b05      	cmp	r3, #5
 8000a4a:	d10c      	bne.n	8000a66 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a50:	f023 0307 	bic.w	r3, r3, #7
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	f043 0305 	orr.w	r3, r3, #5
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2205      	movs	r2, #5
 8000a62:	61da      	str	r2, [r3, #28]
 8000a64:	e00e      	b.n	8000a84 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2b06      	cmp	r3, #6
 8000a6a:	d10b      	bne.n	8000a84 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a70:	f023 0307 	bic.w	r3, r3, #7
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	f043 0306 	orr.w	r3, r3, #6
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2206      	movs	r2, #6
 8000a82:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	461a      	mov	r2, r3
 8000a88:	2101      	movs	r1, #1
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f9c5 	bl	8000e1a <LoRa_write>
	//HAL_Delay(10);
}
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	889b      	ldrh	r3, [r3, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f001 fcc4 	bl	8002440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6998      	ldr	r0, [r3, #24]
 8000abc:	88fa      	ldrh	r2, [r7, #6]
 8000abe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ac2:	68b9      	ldr	r1, [r7, #8]
 8000ac4:	f002 fade 	bl	8003084 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ac8:	bf00      	nop
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fede 	bl	8003890 <HAL_SPI_GetState>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d1f7      	bne.n	8000aca <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6998      	ldr	r0, [r3, #24]
 8000ade:	8b3a      	ldrh	r2, [r7, #24]
 8000ae0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ae4:	6839      	ldr	r1, [r7, #0]
 8000ae6:	f002 fc11 	bl	800330c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000aea:	bf00      	nop
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 fecd 	bl	8003890 <HAL_SPI_GetState>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d1f7      	bne.n	8000aec <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	889b      	ldrh	r3, [r3, #4]
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	f001 fc9a 	bl	8002440 <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	4613      	mov	r3, r2
 8000b22:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6818      	ldr	r0, [r3, #0]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	889b      	ldrh	r3, [r3, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f001 fc86 	bl	8002440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	6998      	ldr	r0, [r3, #24]
 8000b38:	88fa      	ldrh	r2, [r7, #6]
 8000b3a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b3e:	68b9      	ldr	r1, [r7, #8]
 8000b40:	f002 faa0 	bl	8003084 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b44:	bf00      	nop
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fea0 	bl	8003890 <HAL_SPI_GetState>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d1f7      	bne.n	8000b46 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6998      	ldr	r0, [r3, #24]
 8000b5a:	8b3a      	ldrh	r2, [r7, #24]
 8000b5c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b60:	6839      	ldr	r1, [r7, #0]
 8000b62:	f002 fa8f 	bl	8003084 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b66:	bf00      	nop
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fe8f 	bl	8003890 <HAL_SPI_GetState>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d1f7      	bne.n	8000b68 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	889b      	ldrh	r3, [r3, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	4619      	mov	r1, r3
 8000b84:	f001 fc5c 	bl	8002440 <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000b9c:	2126      	movs	r1, #38	@ 0x26
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f000 f921 	bl	8000de6 <LoRa_read>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d004      	beq.n	8000bb8 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e003      	b.n	8000bc0 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000bb8:	7bbb      	ldrb	r3, [r7, #14]
 8000bba:	f023 0308 	bic.w	r3, r3, #8
 8000bbe:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2126      	movs	r1, #38	@ 0x26
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f927 	bl	8000e1a <LoRa_write>
	HAL_Delay(10);
 8000bcc:	200a      	movs	r0, #10
 8000bce:	f001 f981 	bl	8001ed4 <HAL_Delay>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b096      	sub	sp, #88	@ 0x58
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000be4:	4a17      	ldr	r2, [pc, #92]	@ (8000c44 <LoRa_setAutoLDO+0x68>)
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4611      	mov	r1, r2
 8000bec:	2250      	movs	r2, #80	@ 0x50
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fa9a 	bl	8004128 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	4093      	lsls	r3, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fbfd 	bl	8000400 <__aeabi_i2d>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	3358      	adds	r3, #88	@ 0x58
 8000c10:	443b      	add	r3, r7
 8000c12:	3b50      	subs	r3, #80	@ 0x50
 8000c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c18:	f7ff fd86 	bl	8000728 <__aeabi_ddiv>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f7ff fe68 	bl	80008f8 <__aeabi_d2iz>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b10      	cmp	r3, #16
 8000c2c:	bfcc      	ite	gt
 8000c2e:	2301      	movgt	r3, #1
 8000c30:	2300      	movle	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4619      	mov	r1, r3
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffaa 	bl	8000b90 <LoRa_setLowDaraRateOptimization>
}
 8000c3c:	bf00      	nop
 8000c3e:	3758      	adds	r7, #88	@ 0x58
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	080049f8 	.word	0x080049f8

08000c48 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	04db      	lsls	r3, r3, #19
 8000c56:	115b      	asrs	r3, r3, #5
 8000c58:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	0c1b      	lsrs	r3, r3, #16
 8000c5e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000c60:	7afb      	ldrb	r3, [r7, #11]
 8000c62:	461a      	mov	r2, r3
 8000c64:	2106      	movs	r1, #6
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 f8d7 	bl	8000e1a <LoRa_write>
	HAL_Delay(5);
 8000c6c:	2005      	movs	r0, #5
 8000c6e:	f001 f931 	bl	8001ed4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000c78:	7afb      	ldrb	r3, [r7, #11]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 f8cb 	bl	8000e1a <LoRa_write>
	HAL_Delay(5);
 8000c84:	2005      	movs	r0, #5
 8000c86:	f001 f925 	bl	8001ed4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000c8e:	7afb      	ldrb	r3, [r7, #11]
 8000c90:	461a      	mov	r2, r3
 8000c92:	2108      	movs	r1, #8
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f8c0 	bl	8000e1a <LoRa_write>
	HAL_Delay(5);
 8000c9a:	2005      	movs	r0, #5
 8000c9c:	f001 f91a 	bl	8001ed4 <HAL_Delay>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2b0c      	cmp	r3, #12
 8000cb6:	dd01      	ble.n	8000cbc <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	dc01      	bgt.n	8000cc6 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000cc6:	211e      	movs	r1, #30
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f88c 	bl	8000de6 <LoRa_read>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000cd2:	200a      	movs	r0, #10
 8000cd4:	f001 f8fe 	bl	8001ed4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	4413      	add	r3, r2
 8000cea:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	211e      	movs	r1, #30
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f891 	bl	8000e1a <LoRa_write>
	HAL_Delay(10);
 8000cf8:	200a      	movs	r0, #10
 8000cfa:	f001 f8eb 	bl	8001ed4 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ff6c 	bl	8000bdc <LoRa_setAutoLDO>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	2109      	movs	r1, #9
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f87b 	bl	8000e1a <LoRa_write>
	HAL_Delay(10);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f001 f8d5 	bl	8001ed4 <HAL_Delay>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d48:	d801      	bhi.n	8000d4e <LoRa_setOCP+0x1a>
		current = 45;
 8000d4a:	232d      	movs	r3, #45	@ 0x2d
 8000d4c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	2bf0      	cmp	r3, #240	@ 0xf0
 8000d52:	d901      	bls.n	8000d58 <LoRa_setOCP+0x24>
		current = 240;
 8000d54:	23f0      	movs	r3, #240	@ 0xf0
 8000d56:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	2b78      	cmp	r3, #120	@ 0x78
 8000d5c:	d809      	bhi.n	8000d72 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	3b2d      	subs	r3, #45	@ 0x2d
 8000d62:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <LoRa_setOCP+0x78>)
 8000d64:	fb82 1203 	smull	r1, r2, r2, r3
 8000d68:	1052      	asrs	r2, r2, #1
 8000d6a:	17db      	asrs	r3, r3, #31
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e00b      	b.n	8000d8a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	2bf0      	cmp	r3, #240	@ 0xf0
 8000d76:	d808      	bhi.n	8000d8a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	331e      	adds	r3, #30
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dac <LoRa_setOCP+0x78>)
 8000d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d82:	1092      	asrs	r2, r2, #2
 8000d84:	17db      	asrs	r3, r3, #31
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	3320      	adds	r3, #32
 8000d8e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	461a      	mov	r2, r3
 8000d94:	210b      	movs	r1, #11
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 f83f 	bl	8000e1a <LoRa_write>
	HAL_Delay(10);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f001 f899 	bl	8001ed4 <HAL_Delay>
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	66666667 	.word	0x66666667

08000db0 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000db8:	211e      	movs	r1, #30
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f813 	bl	8000de6 <LoRa_read>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	f043 0307 	orr.w	r3, r3, #7
 8000dca:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000dcc:	7bbb      	ldrb	r3, [r7, #14]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	211e      	movs	r1, #30
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 f821 	bl	8000e1a <LoRa_write>
	HAL_Delay(10);
 8000dd8:	200a      	movs	r0, #10
 8000dda:	f001 f87b 	bl	8001ed4 <HAL_Delay>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af02      	add	r7, sp, #8
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000dfc:	f107 030f 	add.w	r3, r7, #15
 8000e00:	f107 010e 	add.w	r1, r7, #14
 8000e04:	2201      	movs	r2, #1
 8000e06:	9200      	str	r2, [sp, #0]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fe44 	bl	8000a98 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af02      	add	r7, sp, #8
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	70fb      	strb	r3, [r7, #3]
 8000e26:	4613      	mov	r3, r2
 8000e28:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000e34:	78bb      	ldrb	r3, [r7, #2]
 8000e36:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000e38:	f107 030f 	add.w	r3, r7, #15
 8000e3c:	f107 010e 	add.w	r1, r7, #14
 8000e40:	2201      	movs	r2, #1
 8000e42:	9200      	str	r2, [sp, #0]
 8000e44:	2201      	movs	r2, #1
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fe64 	bl	8000b14 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

	return 1;
 8000e5c:	2301      	movs	r3, #1
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	4613      	mov	r3, r2
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	e007      	b.n	8000e90 <LoRa_receive+0x28>
		data[i]=0;
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	4413      	add	r3, r2
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf3      	blt.n	8000e80 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f7ff fd9b 	bl	80009d6 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000ea0:	2112      	movs	r1, #18
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff ff9f 	bl	8000de6 <LoRa_read>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000eac:	7cfb      	ldrb	r3, [r7, #19]
 8000eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d02f      	beq.n	8000f16 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000eb6:	22ff      	movs	r2, #255	@ 0xff
 8000eb8:	2112      	movs	r1, #18
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f7ff ffad 	bl	8000e1a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000ec0:	2113      	movs	r1, #19
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff ff8f 	bl	8000de6 <LoRa_read>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000ecc:	2110      	movs	r1, #16
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f7ff ff89 	bl	8000de6 <LoRa_read>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ed8:	7cfb      	ldrb	r3, [r7, #19]
 8000eda:	461a      	mov	r2, r3
 8000edc:	210d      	movs	r1, #13
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff ff9b 	bl	8000e1a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000ee4:	7cba      	ldrb	r2, [r7, #18]
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	bf28      	it	cs
 8000eec:	4613      	movcs	r3, r2
 8000eee:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e00b      	b.n	8000f0e <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	18d4      	adds	r4, r2, r3
 8000efc:	2100      	movs	r1, #0
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f7ff ff71 	bl	8000de6 <LoRa_read>
 8000f04:	4603      	mov	r3, r0
 8000f06:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	7ffb      	ldrb	r3, [r7, #31]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dbef      	blt.n	8000ef6 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000f16:	2105      	movs	r1, #5
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff fd5c 	bl	80009d6 <LoRa_gotoMode>
    return min;
 8000f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3724      	adds	r7, #36	@ 0x24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd90      	pop	{r4, r7, pc}

08000f28 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff8f 	bl	8000e54 <LoRa_isvalid>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 8096 	beq.w	800106a <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fd48 	bl	80009d6 <LoRa_gotoMode>
			HAL_Delay(10);
 8000f46:	200a      	movs	r0, #10
 8000f48:	f000 ffc4 	bl	8001ed4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff49 	bl	8000de6 <LoRa_read>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f000 ffbb 	bl	8001ed4 <HAL_Delay>
			data = read | 0x80;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f64:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff54 	bl	8000e1a <LoRa_write>
			HAL_Delay(100);
 8000f72:	2064      	movs	r0, #100	@ 0x64
 8000f74:	f000 ffae 	bl	8001ed4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fe62 	bl	8000c48 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff febd 	bl	8000d0c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff feca 	bl	8000d34 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000fa0:	2223      	movs	r2, #35	@ 0x23
 8000fa2:	210c      	movs	r1, #12
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff38 	bl	8000e1a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff00 	bl	8000db0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fe75 	bl	8000ca8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000fbe:	22ff      	movs	r2, #255	@ 0xff
 8000fc0:	211f      	movs	r1, #31
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff29 	bl	8000e1a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000fe4:	7bbb      	ldrb	r3, [r7, #14]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	211d      	movs	r1, #29
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ff15 	bl	8000e1a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff fdf3 	bl	8000bdc <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	2120      	movs	r1, #32
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff08 	bl	8000e1a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800100e:	b2db      	uxtb	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	2121      	movs	r1, #33	@ 0x21
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff00 	bl	8000e1a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800101a:	2140      	movs	r1, #64	@ 0x40
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fee2 	bl	8000de6 <LoRa_read>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800102c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	461a      	mov	r2, r3
 8001032:	2140      	movs	r1, #64	@ 0x40
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fef0 	bl	8000e1a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800103a:	2101      	movs	r1, #1
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff fcca 	bl	80009d6 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001048:	200a      	movs	r0, #10
 800104a:	f000 ff43 	bl	8001ed4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800104e:	2142      	movs	r1, #66	@ 0x42
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fec8 	bl	8000de6 <LoRa_read>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	2b12      	cmp	r3, #18
 800105e:	d101      	bne.n	8001064 <LoRa_init+0x13c>
				return LORA_OK;
 8001060:	23c8      	movs	r3, #200	@ 0xc8
 8001062:	e004      	b.n	800106e <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001064:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001068:	e001      	b.n	800106e <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800106a:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2203      	movs	r2, #3
 8001082:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2203      	movs	r2, #3
 800108e:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2203      	movs	r2, #3
 8001094:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2203      	movs	r2, #3
 80010a0:	715a      	strb	r2, [r3, #5]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <newEsp01s>:



// restart and connect to defualt wifi

Esp01s newEsp01s(UART_HandleTypeDef* _UART){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	f6ad 0d58 	subw	sp, sp, #2136	@ 0x858
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80010b8:	f6a3 0354 	subw	r3, r3, #2132	@ 0x854
 80010bc:	6018      	str	r0, [r3, #0]
 80010be:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80010c2:	f6a3 0358 	subw	r3, r3, #2136	@ 0x858
 80010c6:	6019      	str	r1, [r3, #0]
	Esp01s new_ESP;
	new_ESP.esp_uart = _UART;
 80010c8:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80010cc:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 80010d0:	f607 0258 	addw	r2, r7, #2136	@ 0x858
 80010d4:	f6a2 0258 	subw	r2, r2, #2136	@ 0x858
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	f8c3 2604 	str.w	r2, [r3, #1540]	@ 0x604
	new_ESP.RxSize = 512;
 80010de:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 80010e2:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 80010e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ea:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
	memset(new_ESP.RxBuffer,0,sizeof(new_ESP.RxBuffer));
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80010f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 ffbb 	bl	8004078 <memset>
//	new_ESP->server_ip = "192.168.1.2";
//	new_ESP->server_port = "8000";


	// return element with default values
	return new_ESP;
 8001102:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8001106:	f6a3 0354 	subw	r3, r3, #2132	@ 0x854
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8001110:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f640 034c 	movw	r3, #2124	@ 0x84c
 800111c:	461a      	mov	r2, r3
 800111e:	f003 f803 	bl	8004128 <memcpy>
}
 8001122:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 8001126:	f6a3 0354 	subw	r3, r3, #2132	@ 0x854
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	f607 0758 	addw	r7, r7, #2136	@ 0x858
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <esp_transmit>:


// basic AT command
// OK - good

void esp_transmit(Esp01s* esp, char* c, int delay){
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(esp->esp_uart, (uint8_t *)c, strlen(c),delay);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f8d3 4604 	ldr.w	r4, [r3, #1540]	@ 0x604
 8001146:	68b8      	ldr	r0, [r7, #8]
 8001148:	f7ff f800 	bl	800014c <strlen>
 800114c:	4603      	mov	r3, r0
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	4620      	mov	r0, r4
 8001156:	f002 fd04 	bl	8003b62 <HAL_UART_Transmit>
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}

08001162 <esp_receive>:
void esp_receive(Esp01s* esp, int delay){
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive(esp->esp_uart, esp->RxBuffer, esp->RxSize,delay);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8d3 0604 	ldr.w	r0, [r3, #1540]	@ 0x604
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f503 7100 	add.w	r1, r3, #512	@ 0x200
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800117e:	b29a      	uxth	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f002 fd79 	bl	8003c78 <HAL_UART_Receive>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <check_at>:

void check_at(Esp01s* esp){
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, AT_cmd, 1000);
 8001198:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800119c:	4911      	ldr	r1, [pc, #68]	@ (80011e4 <check_at+0x54>)
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffc8 	bl	8001134 <esp_transmit>
	esp_receive(esp, 1000);
 80011a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffda 	bl	8001162 <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011b4:	490c      	ldr	r1, [pc, #48]	@ (80011e8 <check_at+0x58>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 ff73 	bl	80040a2 <strstr>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d004      	beq.n	80011cc <check_at+0x3c>
		esp->ok_status = AT_OK;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
 80011ca:	e003      	b.n	80011d4 <check_at+0x44>
	}else{
		esp->ok_status = AT_FAIL;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
	}
	HAL_Delay(100);
 80011d4:	2064      	movs	r0, #100	@ 0x64
 80011d6:	f000 fe7d 	bl	8001ed4 <HAL_Delay>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	08004a48 	.word	0x08004a48
 80011e8:	08004a50 	.word	0x08004a50

080011ec <reset_by_wire>:

void reset_by_wire(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	// restart the esp by changing ESP_01S_RST pin to LOW
	HAL_GPIO_WritePin(ESP_01S_RST_GPIO_Port,ESP_01S_RST_Pin , GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f6:	4809      	ldr	r0, [pc, #36]	@ (800121c <reset_by_wire+0x30>)
 80011f8:	f001 f922 	bl	8002440 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011fc:	2064      	movs	r0, #100	@ 0x64
 80011fe:	f000 fe69 	bl	8001ed4 <HAL_Delay>
	// tour it on and give it time to reset
	HAL_GPIO_WritePin(ESP_01S_RST_GPIO_Port,ESP_01S_RST_Pin , GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <reset_by_wire+0x30>)
 800120a:	f001 f919 	bl	8002440 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800120e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001212:	f000 fe5f 	bl	8001ed4 <HAL_Delay>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40010800 	.word	0x40010800

08001220 <mode_set_station>:
//	HAL_Delay(1000);
//}


// station mode
void mode_set_station(Esp01s* esp){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, MODE_STATION_cmd, 1000);
 8001228:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800122c:	490f      	ldr	r1, [pc, #60]	@ (800126c <mode_set_station+0x4c>)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff80 	bl	8001134 <esp_transmit>
	esp_receive(esp, 1000);
 8001234:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff92 	bl	8001162 <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001244:	490a      	ldr	r1, [pc, #40]	@ (8001270 <mode_set_station+0x50>)
 8001246:	4618      	mov	r0, r3
 8001248:	f002 ff2b 	bl	80040a2 <strstr>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <mode_set_station+0x3c>
		esp->station_status = STATION_SET;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f8c3 283c 	str.w	r2, [r3, #2108]	@ 0x83c
	}else{
		esp->station_status = STATION_ERR;
	}
}
 800125a:	e003      	b.n	8001264 <mode_set_station+0x44>
		esp->station_status = STATION_ERR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f8c3 283c 	str.w	r2, [r3, #2108]	@ 0x83c
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08004a54 	.word	0x08004a54
 8001270:	08004a50 	.word	0x08004a50

08001274 <connect_to_ap>:

void connect_to_ap(Esp01s* esp){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fef7 	bl	8004078 <memset>
	sprintf(esp->TxBuffer,"AT+CWJAP_CUR=%s,%s\r\n", esp->ssid, esp->password);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f503 62c2 	add.w	r2, r3, #1552	@ 0x610
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f203 6374 	addw	r3, r3, #1652	@ 0x674
 8001298:	4912      	ldr	r1, [pc, #72]	@ (80012e4 <connect_to_ap+0x70>)
 800129a:	f002 fecd 	bl	8004038 <siprintf>
	esp_transmit(esp, esp->TxBuffer,1000);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012a4:	4619      	mov	r1, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff44 	bl	8001134 <esp_transmit>
	esp_receive(esp, 10000);
 80012ac:	f242 7110 	movw	r1, #10000	@ 0x2710
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff56 	bl	8001162 <esp_receive>
	if(strstr((char *)esp->RxBuffer,"CONNECTED")){
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012bc:	490a      	ldr	r1, [pc, #40]	@ (80012e8 <connect_to_ap+0x74>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 feef 	bl	80040a2 <strstr>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <connect_to_ap+0x60>
		esp->wifi_status = CWJAP_CUR_OK;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
	}else{
		esp->wifi_status = CWJAP_CUR_CON_FAIL;
	}

}
 80012d2:	e003      	b.n	80012dc <connect_to_ap+0x68>
		esp->wifi_status = CWJAP_CUR_CON_FAIL;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2204      	movs	r2, #4
 80012d8:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	08004a68 	.word	0x08004a68
 80012e8:	08004a80 	.word	0x08004a80

080012ec <set_max_one_con>:

void set_max_one_con(Esp01s* esp){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, SET_ONE_CON_cmd,1000);
 80012f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012f8:	490f      	ldr	r1, [pc, #60]	@ (8001338 <set_max_one_con+0x4c>)
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff1a 	bl	8001134 <esp_transmit>
	esp_receive(esp, 1000);
 8001300:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff2c 	bl	8001162 <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001310:	490a      	ldr	r1, [pc, #40]	@ (800133c <set_max_one_con+0x50>)
 8001312:	4618      	mov	r0, r3
 8001314:	f002 fec5 	bl	80040a2 <strstr>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <set_max_one_con+0x3c>
		esp->one_con_status = ONE_CON_MODE_OK;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f8c3 2844 	str.w	r2, [r3, #2116]	@ 0x844
	}else{
		esp->one_con_status = ONE_CON_MODE_ERR;
	}
}
 8001326:	e003      	b.n	8001330 <set_max_one_con+0x44>
		esp->one_con_status = ONE_CON_MODE_ERR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f8c3 2844 	str.w	r2, [r3, #2116]	@ 0x844
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08004a8c 	.word	0x08004a8c
 800133c:	08004a50 	.word	0x08004a50

08001340 <esp_setup>:
void send_post_req(Esp01s* esp){
	esp_transmit(esp, CHECK_STATUS_cmd, 1000);
	esp_receive(esp, 1000);
}

void esp_setup(Esp01s* esp){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	check_at(esp);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff21 	bl	8001190 <check_at>
	while(esp->ok_status != AT_OK){
 800134e:	e004      	b.n	800135a <esp_setup+0x1a>
		reset_by_wire();
 8001350:	f7ff ff4c 	bl	80011ec <reset_by_wire>
		check_at(esp);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff1b 	bl	8001190 <check_at>
	while(esp->ok_status != AT_OK){
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f5      	bne.n	8001350 <esp_setup+0x10>
		// fatal error no communication with board
	}
	mode_set_station(esp);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff5b 	bl	8001220 <mode_set_station>
	connect_to_ap(esp);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff82 	bl	8001274 <connect_to_ap>
	if(esp->wifi_status != CWJAP_CUR_OK){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
 8001376:	2b00      	cmp	r3, #0
 8001378:	d103      	bne.n	8001382 <esp_setup+0x42>
		// error about bad wifi info
		return;
	}
	set_max_one_con(esp);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffb6 	bl	80012ec <set_max_one_con>
 8001380:	e000      	b.n	8001384 <esp_setup+0x44>
		return;
 8001382:	bf00      	nop

	// show that setup is ok

}
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a0:	4b42      	ldr	r3, [pc, #264]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a41      	ldr	r2, [pc, #260]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b8:	4b3c      	ldr	r3, [pc, #240]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a3b      	ldr	r2, [pc, #236]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013be:	f043 0320 	orr.w	r3, r3, #32
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b39      	ldr	r3, [pc, #228]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b36      	ldr	r3, [pc, #216]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a35      	ldr	r2, [pc, #212]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b33      	ldr	r3, [pc, #204]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	4b30      	ldr	r3, [pc, #192]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a2f      	ldr	r2, [pc, #188]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <MX_GPIO_Init+0x120>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001406:	482a      	ldr	r0, [pc, #168]	@ (80014b0 <MX_GPIO_Init+0x124>)
 8001408:	f001 f81a 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|ESP_01S_RST_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001412:	4828      	ldr	r0, [pc, #160]	@ (80014b4 <MX_GPIO_Init+0x128>)
 8001414:	f001 f814 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	2101      	movs	r1, #1
 800141c:	4826      	ldr	r0, [pc, #152]	@ (80014b8 <MX_GPIO_Init+0x12c>)
 800141e:	f001 f80f 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001422:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2302      	movs	r3, #2
 8001432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	481d      	ldr	r0, [pc, #116]	@ (80014b0 <MX_GPIO_Init+0x124>)
 800143c:	f000 fe7c 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|ESP_01S_RST_Pin;
 8001440:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2302      	movs	r3, #2
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4619      	mov	r1, r3
 8001458:	4816      	ldr	r0, [pc, #88]	@ (80014b4 <MX_GPIO_Init+0x128>)
 800145a:	f000 fe6d 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 800145e:	2301      	movs	r3, #1
 8001460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2302      	movs	r3, #2
 800146c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4619      	mov	r1, r3
 8001474:	4810      	ldr	r0, [pc, #64]	@ (80014b8 <MX_GPIO_Init+0x12c>)
 8001476:	f000 fe5f 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800147a:	2302      	movs	r3, #2
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_GPIO_Init+0x130>)
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	480a      	ldr	r0, [pc, #40]	@ (80014b8 <MX_GPIO_Init+0x12c>)
 800148e:	f000 fe53 	bl	8002138 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2007      	movs	r0, #7
 8001498:	f000 fe17 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800149c:	2007      	movs	r0, #7
 800149e:	f000 fe30 	bl	8002102 <HAL_NVIC_EnableIRQ>

}
 80014a2:	bf00      	nop
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40010800 	.word	0x40010800
 80014b8:	40010c00 	.word	0x40010c00
 80014bc:	10110000 	.word	0x10110000

080014c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	@ (8001514 <MX_I2C1_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <MX_I2C1_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014fe:	f000 ffe9 	bl	80024d4 <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001508:	f000 fa9c 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000078 	.word	0x20000078
 8001514:	40005400 	.word	0x40005400
 8001518:	000186a0 	.word	0x000186a0

0800151c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a15      	ldr	r2, [pc, #84]	@ (800158c <HAL_I2C_MspInit+0x70>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d123      	bne.n	8001584 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <HAL_I2C_MspInit+0x74>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a13      	ldr	r2, [pc, #76]	@ (8001590 <HAL_I2C_MspInit+0x74>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_I2C_MspInit+0x74>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 8001554:	23c0      	movs	r3, #192	@ 0xc0
 8001556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001558:	2312      	movs	r3, #18
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	4619      	mov	r1, r3
 8001566:	480b      	ldr	r0, [pc, #44]	@ (8001594 <HAL_I2C_MspInit+0x78>)
 8001568:	f000 fde6 	bl	8002138 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_I2C_MspInit+0x74>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	4a07      	ldr	r2, [pc, #28]	@ (8001590 <HAL_I2C_MspInit+0x74>)
 8001572:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001576:	61d3      	str	r3, [r2, #28]
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_I2C_MspInit+0x74>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40005400 	.word	0x40005400
 8001590:	40021000 	.word	0x40021000
 8001594:	40010c00 	.word	0x40010c00

08001598 <clearBuffers.0>:

  esp_setup(&Esp);



  void clearBuffers(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	f8c7 c004 	str.w	ip, [r7, #4]
	  memset(rxBuffer,0,sizeof(rxBuffer));
 80015a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a6:	2100      	movs	r1, #0
 80015a8:	4808      	ldr	r0, [pc, #32]	@ (80015cc <clearBuffers.0+0x34>)
 80015aa:	f002 fd65 	bl	8004078 <memset>
	  memset(ATcommand,0,sizeof(ATcommand));
 80015ae:	2296      	movs	r2, #150	@ 0x96
 80015b0:	2100      	movs	r1, #0
 80015b2:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <clearBuffers.0+0x38>)
 80015b4:	f002 fd60 	bl	8004078 <memset>
	  memset(toPost,0,sizeof(toPost));
 80015b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015bc:	2100      	movs	r1, #0
 80015be:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <clearBuffers.0+0x3c>)
 80015c0:	f002 fd5a 	bl	8004078 <memset>
  }
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000c94 	.word	0x20000c94
 80015d0:	200009fc 	.word	0x200009fc
 80015d4:	20000a94 	.word	0x20000a94

080015d8 <main>:
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	f6ad 0d88 	subw	sp, sp, #2184	@ 0x888
 80015de:	af00      	add	r7, sp, #0
int main(void)
 80015e0:	f607 0398 	addw	r3, r7, #2200	@ 0x898
 80015e4:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
  HAL_Init();
 80015e8:	f000 fc12 	bl	8001e10 <HAL_Init>
  SystemClock_Config();
 80015ec:	f000 f9ca 	bl	8001984 <SystemClock_Config>
  MX_GPIO_Init();
 80015f0:	f7ff fecc 	bl	800138c <MX_GPIO_Init>
  MX_SPI1_Init();
 80015f4:	f000 fa4e 	bl	8001a94 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80015f8:	f000 fb6e 	bl	8001cd8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80015fc:	f7ff ff60 	bl	80014c0 <MX_I2C1_Init>
  bmp280_init_default_params(&bmp280.params);
 8001600:	4845      	ldr	r0, [pc, #276]	@ (8001718 <main+0x140>)
 8001602:	f7ff fd38 	bl	8001076 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001606:	4b45      	ldr	r3, [pc, #276]	@ (800171c <main+0x144>)
 8001608:	2276      	movs	r2, #118	@ 0x76
 800160a:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 800160c:	4b43      	ldr	r3, [pc, #268]	@ (800171c <main+0x144>)
 800160e:	4a44      	ldr	r2, [pc, #272]	@ (8001720 <main+0x148>)
 8001610:	629a      	str	r2, [r3, #40]	@ 0x28
  myLoRa = newLoRa();
 8001612:	4c44      	ldr	r4, [pc, #272]	@ (8001724 <main+0x14c>)
 8001614:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff f995 	bl	8000948 <newLoRa>
 800161e:	4625      	mov	r5, r4
 8001620:	f507 6405 	add.w	r4, r7, #2128	@ 0x850
 8001624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001630:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myLoRa.CS_port         = NSS_GPIO_Port;
 8001634:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <main+0x14c>)
 8001636:	4a3c      	ldr	r2, [pc, #240]	@ (8001728 <main+0x150>)
 8001638:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 800163a:	4b3a      	ldr	r3, [pc, #232]	@ (8001724 <main+0x14c>)
 800163c:	2210      	movs	r2, #16
 800163e:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8001640:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <main+0x14c>)
 8001642:	4a3a      	ldr	r2, [pc, #232]	@ (800172c <main+0x154>)
 8001644:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8001646:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <main+0x14c>)
 8001648:	2201      	movs	r2, #1
 800164a:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 800164c:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <main+0x14c>)
 800164e:	4a37      	ldr	r2, [pc, #220]	@ (800172c <main+0x154>)
 8001650:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8001652:	4b34      	ldr	r3, [pc, #208]	@ (8001724 <main+0x14c>)
 8001654:	2202      	movs	r2, #2
 8001656:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001658:	4b32      	ldr	r3, [pc, #200]	@ (8001724 <main+0x14c>)
 800165a:	4a35      	ldr	r2, [pc, #212]	@ (8001730 <main+0x158>)
 800165c:	619a      	str	r2, [r3, #24]
  myLoRa.frequency             = 433;							  // default = 433 MHz
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <main+0x14c>)
 8001660:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001664:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8001666:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <main+0x14c>)
 8001668:	2207      	movs	r2, #7
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth			   = BW_125KHz;				  // default = BW_125KHz
 800166e:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <main+0x14c>)
 8001670:	2207      	movs	r2, #7
 8001672:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate			   = CR_4_5;						// default = CR_4_5
 8001676:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <main+0x14c>)
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power			       = POWER_20db;				// default = 20db
 800167e:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <main+0x14c>)
 8001680:	22ff      	movs	r2, #255	@ 0xff
 8001682:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100; 							// default = 100 mA
 8001686:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <main+0x14c>)
 8001688:	2264      	movs	r2, #100	@ 0x64
 800168a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble		       = 8;		  					// default = 8;
 800168e:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <main+0x14c>)
 8001690:	2208      	movs	r2, #8
 8001692:	851a      	strh	r2, [r3, #40]	@ 0x28
  LoRa_reset(&myLoRa);
 8001694:	4823      	ldr	r0, [pc, #140]	@ (8001724 <main+0x14c>)
 8001696:	f7ff f980 	bl	800099a <LoRa_reset>
  if(LoRa_init(&myLoRa)==LORA_OK){
 800169a:	4822      	ldr	r0, [pc, #136]	@ (8001724 <main+0x14c>)
 800169c:	f7ff fc44 	bl	8000f28 <LoRa_init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80016a4:	d107      	bne.n	80016b6 <main+0xde>
	LoRa_stat = 1;
 80016a6:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <main+0x15c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	801a      	strh	r2, [r3, #0]
	blink(3, 500);
 80016ac:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f9cd 	bl	8001a50 <blink>
  Esp = newEsp01s(&huart1);
 80016b6:	4c20      	ldr	r4, [pc, #128]	@ (8001738 <main+0x160>)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4920      	ldr	r1, [pc, #128]	@ (800173c <main+0x164>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fcf5 	bl	80010ac <newEsp01s>
 80016c2:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 80016c6:	f6a3 0388 	subw	r3, r3, #2184	@ 0x888
 80016ca:	4620      	mov	r0, r4
 80016cc:	4619      	mov	r1, r3
 80016ce:	f640 034c 	movw	r3, #2124	@ 0x84c
 80016d2:	461a      	mov	r2, r3
 80016d4:	f002 fd28 	bl	8004128 <memcpy>
  sprintf(Esp.ssid,"Netis Hifi Point");
 80016d8:	4919      	ldr	r1, [pc, #100]	@ (8001740 <main+0x168>)
 80016da:	481a      	ldr	r0, [pc, #104]	@ (8001744 <main+0x16c>)
 80016dc:	f002 fcac 	bl	8004038 <siprintf>
  sprintf(Esp.password,"kajaK123");
 80016e0:	4919      	ldr	r1, [pc, #100]	@ (8001748 <main+0x170>)
 80016e2:	481a      	ldr	r0, [pc, #104]	@ (800174c <main+0x174>)
 80016e4:	f002 fca8 	bl	8004038 <siprintf>
  sprintf(Esp.server_protocol,"TCP");
 80016e8:	4919      	ldr	r1, [pc, #100]	@ (8001750 <main+0x178>)
 80016ea:	481a      	ldr	r0, [pc, #104]	@ (8001754 <main+0x17c>)
 80016ec:	f002 fca4 	bl	8004038 <siprintf>
  sprintf(Esp.server_ip,"192.168.1.2");
 80016f0:	4919      	ldr	r1, [pc, #100]	@ (8001758 <main+0x180>)
 80016f2:	481a      	ldr	r0, [pc, #104]	@ (800175c <main+0x184>)
 80016f4:	f002 fca0 	bl	8004038 <siprintf>
  sprintf(Esp.server_port,"8000");
 80016f8:	4919      	ldr	r1, [pc, #100]	@ (8001760 <main+0x188>)
 80016fa:	481a      	ldr	r0, [pc, #104]	@ (8001764 <main+0x18c>)
 80016fc:	f002 fc9c 	bl	8004038 <siprintf>
  esp_setup(&Esp);
 8001700:	480d      	ldr	r0, [pc, #52]	@ (8001738 <main+0x160>)
 8001702:	f7ff fe1d 	bl	8001340 <esp_setup>


	  // === ESP-01s ===


  clearBuffers();
 8001706:	f607 0384 	addw	r3, r7, #2180	@ 0x884
 800170a:	469c      	mov	ip, r3
 800170c:	f7ff ff44 	bl	8001598 <clearBuffers.0>
	ATisOK = 0;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <main+0x190>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
	while(!ATisOK){
 8001716:	e04d      	b.n	80017b4 <main+0x1dc>
 8001718:	200000f8 	.word	0x200000f8
 800171c:	200000cc 	.word	0x200000cc
 8001720:	20000078 	.word	0x20000078
 8001724:	20000100 	.word	0x20000100
 8001728:	40010800 	.word	0x40010800
 800172c:	40010c00 	.word	0x40010c00
 8001730:	20000e98 	.word	0x20000e98
 8001734:	2000012c 	.word	0x2000012c
 8001738:	200001b0 	.word	0x200001b0
 800173c:	20000ef4 	.word	0x20000ef4
 8001740:	08004ad0 	.word	0x08004ad0
 8001744:	200007c0 	.word	0x200007c0
 8001748:	08004ae4 	.word	0x08004ae4
 800174c:	20000824 	.word	0x20000824
 8001750:	08004af0 	.word	0x08004af0
 8001754:	20000888 	.word	0x20000888
 8001758:	08004af4 	.word	0x08004af4
 800175c:	200008ba 	.word	0x200008ba
 8001760:	08004b00 	.word	0x08004b00
 8001764:	200008ec 	.word	0x200008ec
 8001768:	20000e94 	.word	0x20000e94
	  sprintf(ATcommand,"AT+CIPSTART=\"TCP\",\"192.168.1.2\",8000\r\n");
 800176c:	4979      	ldr	r1, [pc, #484]	@ (8001954 <main+0x37c>)
 800176e:	487a      	ldr	r0, [pc, #488]	@ (8001958 <main+0x380>)
 8001770:	f002 fc62 	bl	8004038 <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8001774:	4878      	ldr	r0, [pc, #480]	@ (8001958 <main+0x380>)
 8001776:	f7fe fce9 	bl	800014c <strlen>
 800177a:	4603      	mov	r3, r0
 800177c:	b29a      	uxth	r2, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001782:	4975      	ldr	r1, [pc, #468]	@ (8001958 <main+0x380>)
 8001784:	4875      	ldr	r0, [pc, #468]	@ (800195c <main+0x384>)
 8001786:	f002 f9ec 	bl	8003b62 <HAL_UART_Transmit>
	  HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 800178a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001792:	4973      	ldr	r1, [pc, #460]	@ (8001960 <main+0x388>)
 8001794:	4871      	ldr	r0, [pc, #452]	@ (800195c <main+0x384>)
 8001796:	f002 fa6f 	bl	8003c78 <HAL_UART_Receive>
	  if(strstr((char *)rxBuffer,"CONNECT")){
 800179a:	4972      	ldr	r1, [pc, #456]	@ (8001964 <main+0x38c>)
 800179c:	4870      	ldr	r0, [pc, #448]	@ (8001960 <main+0x388>)
 800179e:	f002 fc80 	bl	80040a2 <strstr>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <main+0x1d6>
		  ATisOK = 1;
 80017a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001968 <main+0x390>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(200);
 80017ae:	20c8      	movs	r0, #200	@ 0xc8
 80017b0:	f000 fb90 	bl	8001ed4 <HAL_Delay>
	while(!ATisOK){
 80017b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001968 <main+0x390>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0d7      	beq.n	800176c <main+0x194>
	}

	clearBuffers();
 80017bc:	f607 0384 	addw	r3, r7, #2180	@ 0x884
 80017c0:	469c      	mov	ip, r3
 80017c2:	f7ff fee9 	bl	8001598 <clearBuffers.0>


	sprintf(toPost, "GET /api/get-response/ HTTP/1.1\r\n"
 80017c6:	4969      	ldr	r1, [pc, #420]	@ (800196c <main+0x394>)
 80017c8:	4869      	ldr	r0, [pc, #420]	@ (8001970 <main+0x398>)
 80017ca:	f002 fc35 	bl	8004038 <siprintf>
					"Host: 192.168.1.2:8000\r\n\r\n");
	sprintf(ATcommand,"AT+CIPSEND=%d\r\n", strlen(toPost));
 80017ce:	4868      	ldr	r0, [pc, #416]	@ (8001970 <main+0x398>)
 80017d0:	f7fe fcbc 	bl	800014c <strlen>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	4966      	ldr	r1, [pc, #408]	@ (8001974 <main+0x39c>)
 80017da:	485f      	ldr	r0, [pc, #380]	@ (8001958 <main+0x380>)
 80017dc:	f002 fc2c 	bl	8004038 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),3000);
 80017e0:	485d      	ldr	r0, [pc, #372]	@ (8001958 <main+0x380>)
 80017e2:	f7fe fcb3 	bl	800014c <strlen>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80017ee:	495a      	ldr	r1, [pc, #360]	@ (8001958 <main+0x380>)
 80017f0:	485a      	ldr	r0, [pc, #360]	@ (800195c <main+0x384>)
 80017f2:	f002 f9b6 	bl	8003b62 <HAL_UART_Transmit>
	status = HAL_UART_Receive(&huart1, rxBuffer, 512, 5000);
 80017f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017fe:	4958      	ldr	r1, [pc, #352]	@ (8001960 <main+0x388>)
 8001800:	4856      	ldr	r0, [pc, #344]	@ (800195c <main+0x384>)
 8001802:	f002 fa39 	bl	8003c78 <HAL_UART_Receive>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b5b      	ldr	r3, [pc, #364]	@ (8001978 <main+0x3a0>)
 800180c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 800180e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001812:	f000 fb5f 	bl	8001ed4 <HAL_Delay>
	if(strstr((char *)rxBuffer,">")){
 8001816:	213e      	movs	r1, #62	@ 0x3e
 8001818:	4851      	ldr	r0, [pc, #324]	@ (8001960 <main+0x388>)
 800181a:	f002 fc35 	bl	8004088 <strchr>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <main+0x28e>
		memset(rxBuffer,0,sizeof(rxBuffer));
 8001824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001828:	2100      	movs	r1, #0
 800182a:	484d      	ldr	r0, [pc, #308]	@ (8001960 <main+0x388>)
 800182c:	f002 fc24 	bl	8004078 <memset>
		HAL_UART_Transmit(&huart1,(uint8_t *)toPost,strlen(toPost),1000);
 8001830:	484f      	ldr	r0, [pc, #316]	@ (8001970 <main+0x398>)
 8001832:	f7fe fc8b 	bl	800014c <strlen>
 8001836:	4603      	mov	r3, r0
 8001838:	b29a      	uxth	r2, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	494c      	ldr	r1, [pc, #304]	@ (8001970 <main+0x398>)
 8001840:	4846      	ldr	r0, [pc, #280]	@ (800195c <main+0x384>)
 8001842:	f002 f98e 	bl	8003b62 <HAL_UART_Transmit>
		status = HAL_UART_Receive(&huart1, rxBuffer, 512, 5000);
 8001846:	f241 3388 	movw	r3, #5000	@ 0x1388
 800184a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800184e:	4944      	ldr	r1, [pc, #272]	@ (8001960 <main+0x388>)
 8001850:	4842      	ldr	r0, [pc, #264]	@ (800195c <main+0x384>)
 8001852:	f002 fa11 	bl	8003c78 <HAL_UART_Receive>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b47      	ldr	r3, [pc, #284]	@ (8001978 <main+0x3a0>)
 800185c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 800185e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001862:	f000 fb37 	bl	8001ed4 <HAL_Delay>
		}



	clearBuffers();
 8001866:	f607 0384 	addw	r3, r7, #2180	@ 0x884
 800186a:	469c      	mov	ip, r3
 800186c:	f7ff fe94 	bl	8001598 <clearBuffers.0>
	// POST request
	sprintf(toPost,    	"POST /api/post-response/ HTTP/1.1\r\n"
 8001870:	4942      	ldr	r1, [pc, #264]	@ (800197c <main+0x3a4>)
 8001872:	483f      	ldr	r0, [pc, #252]	@ (8001970 <main+0x398>)
 8001874:	f002 fbe0 	bl	8004038 <siprintf>
						"Content-Type: text/plain\r\n"
						"Content-Length: 7\r\n\r\n"
						"1,2,3,4\r\n\r\n");


	sprintf(ATcommand,"AT+CIPSEND=%d\r\n", strlen(toPost));
 8001878:	483d      	ldr	r0, [pc, #244]	@ (8001970 <main+0x398>)
 800187a:	f7fe fc67 	bl	800014c <strlen>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	493c      	ldr	r1, [pc, #240]	@ (8001974 <main+0x39c>)
 8001884:	4834      	ldr	r0, [pc, #208]	@ (8001958 <main+0x380>)
 8001886:	f002 fbd7 	bl	8004038 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),3000);
 800188a:	4833      	ldr	r0, [pc, #204]	@ (8001958 <main+0x380>)
 800188c:	f7fe fc5e 	bl	800014c <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001898:	492f      	ldr	r1, [pc, #188]	@ (8001958 <main+0x380>)
 800189a:	4830      	ldr	r0, [pc, #192]	@ (800195c <main+0x384>)
 800189c:	f002 f961 	bl	8003b62 <HAL_UART_Transmit>
	status = HAL_UART_Receive(&huart1, rxBuffer, 512, 5000);
 80018a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80018a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a8:	492d      	ldr	r1, [pc, #180]	@ (8001960 <main+0x388>)
 80018aa:	482c      	ldr	r0, [pc, #176]	@ (800195c <main+0x384>)
 80018ac:	f002 f9e4 	bl	8003c78 <HAL_UART_Receive>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <main+0x3a0>)
 80018b6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 80018b8:	20c8      	movs	r0, #200	@ 0xc8
 80018ba:	f000 fb0b 	bl	8001ed4 <HAL_Delay>
	if(strstr((char *)rxBuffer,">")){
 80018be:	213e      	movs	r1, #62	@ 0x3e
 80018c0:	4827      	ldr	r0, [pc, #156]	@ (8001960 <main+0x388>)
 80018c2:	f002 fbe1 	bl	8004088 <strchr>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d01f      	beq.n	800190c <main+0x334>
		memset(rxBuffer,0,sizeof(rxBuffer));
 80018cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d0:	2100      	movs	r1, #0
 80018d2:	4823      	ldr	r0, [pc, #140]	@ (8001960 <main+0x388>)
 80018d4:	f002 fbd0 	bl	8004078 <memset>
		HAL_UART_Transmit(&huart1,(uint8_t *)toPost,strlen(toPost),1000);
 80018d8:	4825      	ldr	r0, [pc, #148]	@ (8001970 <main+0x398>)
 80018da:	f7fe fc37 	bl	800014c <strlen>
 80018de:	4603      	mov	r3, r0
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e6:	4922      	ldr	r1, [pc, #136]	@ (8001970 <main+0x398>)
 80018e8:	481c      	ldr	r0, [pc, #112]	@ (800195c <main+0x384>)
 80018ea:	f002 f93a 	bl	8003b62 <HAL_UART_Transmit>
		status = HAL_UART_Receive(&huart1, rxBuffer, 512, 5000);
 80018ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80018f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f6:	491a      	ldr	r1, [pc, #104]	@ (8001960 <main+0x388>)
 80018f8:	4818      	ldr	r0, [pc, #96]	@ (800195c <main+0x384>)
 80018fa:	f002 f9bd 	bl	8003c78 <HAL_UART_Receive>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <main+0x3a0>)
 8001904:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 8001906:	20c8      	movs	r0, #200	@ 0xc8
 8001908:	f000 fae4 	bl	8001ed4 <HAL_Delay>
	}

	sprintf(ATcommand,"AT+CIPCLOSE\r\n");
 800190c:	491c      	ldr	r1, [pc, #112]	@ (8001980 <main+0x3a8>)
 800190e:	4812      	ldr	r0, [pc, #72]	@ (8001958 <main+0x380>)
 8001910:	f002 fb92 	bl	8004038 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),3000);
 8001914:	4810      	ldr	r0, [pc, #64]	@ (8001958 <main+0x380>)
 8001916:	f7fe fc19 	bl	800014c <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <main+0x380>)
 8001924:	480d      	ldr	r0, [pc, #52]	@ (800195c <main+0x384>)
 8001926:	f002 f91c 	bl	8003b62 <HAL_UART_Transmit>
	status = HAL_UART_Receive(&huart1, rxBuffer, 512, 5000);
 800192a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800192e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001932:	490b      	ldr	r1, [pc, #44]	@ (8001960 <main+0x388>)
 8001934:	4809      	ldr	r0, [pc, #36]	@ (800195c <main+0x384>)
 8001936:	f002 f99f 	bl	8003c78 <HAL_UART_Receive>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <main+0x3a0>)
 8001940:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8001942:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001946:	f000 fac5 	bl	8001ed4 <HAL_Delay>

	HAL_Delay(2000);
 800194a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800194e:	f000 fac1 	bl	8001ed4 <HAL_Delay>
  clearBuffers();
 8001952:	e6d8      	b.n	8001706 <main+0x12e>
 8001954:	08004b08 	.word	0x08004b08
 8001958:	200009fc 	.word	0x200009fc
 800195c:	20000ef4 	.word	0x20000ef4
 8001960:	20000c94 	.word	0x20000c94
 8001964:	08004b30 	.word	0x08004b30
 8001968:	20000e94 	.word	0x20000e94
 800196c:	08004b38 	.word	0x08004b38
 8001970:	20000a94 	.word	0x20000a94
 8001974:	08004b74 	.word	0x08004b74
 8001978:	20000e95 	.word	0x20000e95
 800197c:	08004b84 	.word	0x08004b84
 8001980:	08004bfc 	.word	0x08004bfc

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b090      	sub	sp, #64	@ 0x40
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	f107 0318 	add.w	r3, r7, #24
 800198e:	2228      	movs	r2, #40	@ 0x28
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fb70 	bl	8004078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b4:	2301      	movs	r3, #1
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b8:	2302      	movs	r3, #2
 80019ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80019c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fec5 	bl	800275c <HAL_RCC_OscConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019d8:	f000 f834 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019dc:	230f      	movs	r3, #15
 80019de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e0:	2302      	movs	r3, #2
 80019e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2102      	movs	r1, #2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 f932 	bl	8002c60 <HAL_RCC_ClockConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a02:	f000 f81f 	bl	8001a44 <Error_Handler>
  }
}
 8001a06:	bf00      	nop
 8001a08:	3740      	adds	r7, #64	@ 0x40
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI interruption function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin==DIO0_Pin){
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d108      	bne.n	8001a32 <HAL_GPIO_EXTI_Callback+0x22>

	  LoRa_receive(&myLoRa,read_data, 2);
 8001a20:	2202      	movs	r2, #2
 8001a22:	4906      	ldr	r1, [pc, #24]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001a24:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x30>)
 8001a26:	f7ff fa1f 	bl	8000e68 <LoRa_receive>
	  blink(5, 100);
 8001a2a:	2164      	movs	r1, #100	@ 0x64
 8001a2c:	2005      	movs	r0, #5
 8001a2e:	f000 f80f 	bl	8001a50 <blink>
  }

}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000130 	.word	0x20000130
 8001a40:	20000100 	.word	0x20000100

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <Error_Handler+0x8>

08001a50 <blink>:
#include "spi.h"
#include "gpio.h"

#include "stdio.h"
#include "string.h"
void blink(int times, int interval){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a60:	480b      	ldr	r0, [pc, #44]	@ (8001a90 <blink+0x40>)
 8001a62:	f000 fced 	bl	8002440 <HAL_GPIO_WritePin>
	while(times>0){
 8001a66:	e00b      	b.n	8001a80 <blink+0x30>
		times--;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001a6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a72:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <blink+0x40>)
 8001a74:	f000 fcfc 	bl	8002470 <HAL_GPIO_TogglePin>
		HAL_Delay(interval);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fa2a 	bl	8001ed4 <HAL_Delay>
	while(times>0){
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	dcf0      	bgt.n	8001a68 <blink+0x18>
	}
}
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40011000 	.word	0x40011000

08001a94 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001a9a:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <MX_SPI1_Init+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001aa0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001aa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ac4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001ac8:	2210      	movs	r2, #16
 8001aca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001ae0:	220a      	movs	r2, #10
 8001ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	@ (8001af8 <MX_SPI1_Init+0x64>)
 8001ae6:	f001 fa49 	bl	8002f7c <HAL_SPI_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001af0:	f7ff ffa8 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000e98 	.word	0x20000e98
 8001afc:	40013000 	.word	0x40013000

08001b00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b88 <HAL_SPI_MspInit+0x88>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d12f      	bne.n	8001b80 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <HAL_SPI_MspInit+0x8c>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <HAL_SPI_MspInit+0x8c>)
 8001b26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_SPI_MspInit+0x8c>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_SPI_MspInit+0x8c>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <HAL_SPI_MspInit+0x8c>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_SPI_MspInit+0x8c>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b50:	23a0      	movs	r3, #160	@ 0xa0
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	480b      	ldr	r0, [pc, #44]	@ (8001b90 <HAL_SPI_MspInit+0x90>)
 8001b64:	f000 fae8 	bl	8002138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b68:	2340      	movs	r3, #64	@ 0x40
 8001b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <HAL_SPI_MspInit+0x90>)
 8001b7c:	f000 fadc 	bl	8002138 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40013000 	.word	0x40013000
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010800 	.word	0x40010800

08001b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_MspInit+0x5c>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	4a14      	ldr	r2, [pc, #80]	@ (8001bf0 <HAL_MspInit+0x5c>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6193      	str	r3, [r2, #24]
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_MspInit+0x5c>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <HAL_MspInit+0x5c>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf0 <HAL_MspInit+0x5c>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <HAL_MspInit+0x5c>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_MspInit+0x60>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <HAL_MspInit+0x60>)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000

08001bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <NMI_Handler+0x4>

08001c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <MemManage_Handler+0x4>

08001c10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c48:	f000 f928 	bl	8001e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001c54:	2002      	movs	r0, #2
 8001c56:	f000 fc25 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c68:	4a14      	ldr	r2, [pc, #80]	@ (8001cbc <_sbrk+0x5c>)
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <_sbrk+0x60>)
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c74:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <_sbrk+0x64>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <_sbrk+0x68>)
 8001c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d207      	bcs.n	8001ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c90:	f002 fa1e 	bl	80040d0 <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	220c      	movs	r2, #12
 8001c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	e009      	b.n	8001cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <_sbrk+0x64>)
 8001cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20005000 	.word	0x20005000
 8001cc0:	00000400 	.word	0x00000400
 8001cc4:	20000ef0 	.word	0x20000ef0
 8001cc8:	20001088 	.word	0x20001088

08001ccc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	@ (8001d28 <MX_USART1_UART_Init+0x50>)
 8001ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cfe:	220c      	movs	r2, #12
 8001d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001d10:	f001 fed7 	bl	8003ac2 <HAL_UART_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d1a:	f7ff fe93 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000ef4 	.word	0x20000ef4
 8001d28:	40013800 	.word	0x40013800

08001d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1c      	ldr	r2, [pc, #112]	@ (8001db8 <HAL_UART_MspInit+0x8c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d131      	bne.n	8001db0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	4a1a      	ldr	r2, [pc, #104]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d56:	6193      	str	r3, [r2, #24]
 8001d58:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d6a:	f043 0304 	orr.w	r3, r3, #4
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_01S_TX_Pin;
 8001d7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESP_01S_TX_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480b      	ldr	r0, [pc, #44]	@ (8001dc0 <HAL_UART_MspInit+0x94>)
 8001d92:	f000 f9d1 	bl	8002138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_01S_RX_Pin;
 8001d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ESP_01S_RX_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	4619      	mov	r1, r3
 8001daa:	4805      	ldr	r0, [pc, #20]	@ (8001dc0 <HAL_UART_MspInit+0x94>)
 8001dac:	f000 f9c4 	bl	8002138 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001db0:	bf00      	nop
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010800 	.word	0x40010800

08001dc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dc4:	f7ff ff82 	bl	8001ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc8:	480b      	ldr	r0, [pc, #44]	@ (8001df8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dca:	490c      	ldr	r1, [pc, #48]	@ (8001dfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001e00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dde:	4a09      	ldr	r2, [pc, #36]	@ (8001e04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001de0:	4c09      	ldr	r4, [pc, #36]	@ (8001e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dee:	f002 f975 	bl	80040dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001df2:	f7ff fbf1 	bl	80015d8 <main>
  bx lr
 8001df6:	4770      	bx	lr
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dfc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e00:	08004c7c 	.word	0x08004c7c
  ldr r2, =_sbss
 8001e04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e08:	20001088 	.word	0x20001088

08001e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC1_2_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <HAL_Init+0x28>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a07      	ldr	r2, [pc, #28]	@ (8001e38 <HAL_Init+0x28>)
 8001e1a:	f043 0310 	orr.w	r3, r3, #16
 8001e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f000 f947 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e26:	200f      	movs	r0, #15
 8001e28:	f000 f808 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2c:	f7ff feb2 	bl	8001b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40022000 	.word	0x40022000

08001e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e44:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_InitTick+0x54>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_InitTick+0x58>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f95f 	bl	800211e <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00e      	b.n	8001e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d80a      	bhi.n	8001e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f927 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	@ (8001e98 <HAL_InitTick+0x5c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_IncTick+0x1c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_IncTick+0x20>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a03      	ldr	r2, [pc, #12]	@ (8001ebc <HAL_IncTick+0x20>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	20000f3c 	.word	0x20000f3c

08001ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	@ (8001ed0 <HAL_GetTick+0x10>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20000f3c 	.word	0x20000f3c

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff fff0 	bl	8001ec0 <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffe0 	bl	8001ec0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000008 	.word	0x20000008

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4906      	ldr	r1, [pc, #24]	@ (8001fb4 <__NVIC_EnableIRQ+0x34>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff90 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff2d 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff42 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff90 	bl	800200c <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5f 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff35 	bl	8001f80 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b08b      	sub	sp, #44	@ 0x2c
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	e169      	b.n	8002420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800214c:	2201      	movs	r2, #1
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 8158 	bne.w	800241a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4a9a      	ldr	r2, [pc, #616]	@ (80023d8 <HAL_GPIO_Init+0x2a0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d05e      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002174:	4a98      	ldr	r2, [pc, #608]	@ (80023d8 <HAL_GPIO_Init+0x2a0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d875      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 800217a:	4a98      	ldr	r2, [pc, #608]	@ (80023dc <HAL_GPIO_Init+0x2a4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d058      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002180:	4a96      	ldr	r2, [pc, #600]	@ (80023dc <HAL_GPIO_Init+0x2a4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d86f      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 8002186:	4a96      	ldr	r2, [pc, #600]	@ (80023e0 <HAL_GPIO_Init+0x2a8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d052      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 800218c:	4a94      	ldr	r2, [pc, #592]	@ (80023e0 <HAL_GPIO_Init+0x2a8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d869      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 8002192:	4a94      	ldr	r2, [pc, #592]	@ (80023e4 <HAL_GPIO_Init+0x2ac>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d04c      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002198:	4a92      	ldr	r2, [pc, #584]	@ (80023e4 <HAL_GPIO_Init+0x2ac>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d863      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 800219e:	4a92      	ldr	r2, [pc, #584]	@ (80023e8 <HAL_GPIO_Init+0x2b0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d046      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 80021a4:	4a90      	ldr	r2, [pc, #576]	@ (80023e8 <HAL_GPIO_Init+0x2b0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d85d      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 80021aa:	2b12      	cmp	r3, #18
 80021ac:	d82a      	bhi.n	8002204 <HAL_GPIO_Init+0xcc>
 80021ae:	2b12      	cmp	r3, #18
 80021b0:	d859      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 80021b2:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <HAL_GPIO_Init+0x80>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	08002233 	.word	0x08002233
 80021bc:	0800220d 	.word	0x0800220d
 80021c0:	0800221f 	.word	0x0800221f
 80021c4:	08002261 	.word	0x08002261
 80021c8:	08002267 	.word	0x08002267
 80021cc:	08002267 	.word	0x08002267
 80021d0:	08002267 	.word	0x08002267
 80021d4:	08002267 	.word	0x08002267
 80021d8:	08002267 	.word	0x08002267
 80021dc:	08002267 	.word	0x08002267
 80021e0:	08002267 	.word	0x08002267
 80021e4:	08002267 	.word	0x08002267
 80021e8:	08002267 	.word	0x08002267
 80021ec:	08002267 	.word	0x08002267
 80021f0:	08002267 	.word	0x08002267
 80021f4:	08002267 	.word	0x08002267
 80021f8:	08002267 	.word	0x08002267
 80021fc:	08002215 	.word	0x08002215
 8002200:	08002229 	.word	0x08002229
 8002204:	4a79      	ldr	r2, [pc, #484]	@ (80023ec <HAL_GPIO_Init+0x2b4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800220a:	e02c      	b.n	8002266 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	623b      	str	r3, [r7, #32]
          break;
 8002212:	e029      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	3304      	adds	r3, #4
 800221a:	623b      	str	r3, [r7, #32]
          break;
 800221c:	e024      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	3308      	adds	r3, #8
 8002224:	623b      	str	r3, [r7, #32]
          break;
 8002226:	e01f      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	330c      	adds	r3, #12
 800222e:	623b      	str	r3, [r7, #32]
          break;
 8002230:	e01a      	b.n	8002268 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800223a:	2304      	movs	r3, #4
 800223c:	623b      	str	r3, [r7, #32]
          break;
 800223e:	e013      	b.n	8002268 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002248:	2308      	movs	r3, #8
 800224a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	611a      	str	r2, [r3, #16]
          break;
 8002252:	e009      	b.n	8002268 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002254:	2308      	movs	r3, #8
 8002256:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	615a      	str	r2, [r3, #20]
          break;
 800225e:	e003      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x130>
          break;
 8002266:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	@ 0xff
 800226c:	d801      	bhi.n	8002272 <HAL_GPIO_Init+0x13a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	e001      	b.n	8002276 <HAL_GPIO_Init+0x13e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2bff      	cmp	r3, #255	@ 0xff
 800227c:	d802      	bhi.n	8002284 <HAL_GPIO_Init+0x14c>
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	e002      	b.n	800228a <HAL_GPIO_Init+0x152>
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	3b08      	subs	r3, #8
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	210f      	movs	r1, #15
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	6a39      	ldr	r1, [r7, #32]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80b1 	beq.w	800241a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b8:	4b4d      	ldr	r3, [pc, #308]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b4a      	ldr	r3, [pc, #296]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022d0:	4a48      	ldr	r2, [pc, #288]	@ (80023f4 <HAL_GPIO_Init+0x2bc>)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4013      	ands	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a40      	ldr	r2, [pc, #256]	@ (80023f8 <HAL_GPIO_Init+0x2c0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <HAL_GPIO_Init+0x1ec>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3f      	ldr	r2, [pc, #252]	@ (80023fc <HAL_GPIO_Init+0x2c4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00d      	beq.n	8002320 <HAL_GPIO_Init+0x1e8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3e      	ldr	r2, [pc, #248]	@ (8002400 <HAL_GPIO_Init+0x2c8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <HAL_GPIO_Init+0x1e4>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3d      	ldr	r2, [pc, #244]	@ (8002404 <HAL_GPIO_Init+0x2cc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_GPIO_Init+0x1e0>
 8002314:	2303      	movs	r3, #3
 8002316:	e006      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002318:	2304      	movs	r3, #4
 800231a:	e004      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 800231c:	2302      	movs	r3, #2
 800231e:	e002      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002324:	2300      	movs	r3, #0
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	f002 0203 	and.w	r2, r2, #3
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	4093      	lsls	r3, r2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002336:	492f      	ldr	r1, [pc, #188]	@ (80023f4 <HAL_GPIO_Init+0x2bc>)
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002350:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	492c      	ldr	r1, [pc, #176]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800235e:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	43db      	mvns	r3, r3
 8002366:	4928      	ldr	r1, [pc, #160]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002368:	4013      	ands	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	4922      	ldr	r1, [pc, #136]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	60cb      	str	r3, [r1, #12]
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002386:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	43db      	mvns	r3, r3
 800238e:	491e      	ldr	r1, [pc, #120]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002390:	4013      	ands	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4918      	ldr	r1, [pc, #96]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ae:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4914      	ldr	r1, [pc, #80]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d021      	beq.n	800240c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	490e      	ldr	r1, [pc, #56]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e021      	b.n	800241a <HAL_GPIO_Init+0x2e2>
 80023d6:	bf00      	nop
 80023d8:	10320000 	.word	0x10320000
 80023dc:	10310000 	.word	0x10310000
 80023e0:	10220000 	.word	0x10220000
 80023e4:	10210000 	.word	0x10210000
 80023e8:	10120000 	.word	0x10120000
 80023ec:	10110000 	.word	0x10110000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40010800 	.word	0x40010800
 80023fc:	40010c00 	.word	0x40010c00
 8002400:	40011000 	.word	0x40011000
 8002404:	40011400 	.word	0x40011400
 8002408:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_GPIO_Init+0x304>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	43db      	mvns	r3, r3
 8002414:	4909      	ldr	r1, [pc, #36]	@ (800243c <HAL_GPIO_Init+0x304>)
 8002416:	4013      	ands	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	3301      	adds	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	f47f ae8e 	bne.w	800214c <HAL_GPIO_Init+0x14>
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	372c      	adds	r7, #44	@ 0x2c
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	40010400 	.word	0x40010400

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	611a      	str	r2, [r3, #16]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	041a      	lsls	r2, r3, #16
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43d9      	mvns	r1, r3
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	400b      	ands	r3, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	611a      	str	r2, [r3, #16]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff faa4 	bl	8001a10 <HAL_GPIO_EXTI_Callback>
  }
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40010400 	.word	0x40010400

080024d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e12b      	b.n	800273e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff f80e 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2224      	movs	r2, #36	@ 0x24
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002538:	f000 fcda 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 800253c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4a81      	ldr	r2, [pc, #516]	@ (8002748 <HAL_I2C_Init+0x274>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d807      	bhi.n	8002558 <HAL_I2C_Init+0x84>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a80      	ldr	r2, [pc, #512]	@ (800274c <HAL_I2C_Init+0x278>)
 800254c:	4293      	cmp	r3, r2
 800254e:	bf94      	ite	ls
 8002550:	2301      	movls	r3, #1
 8002552:	2300      	movhi	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	e006      	b.n	8002566 <HAL_I2C_Init+0x92>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a7d      	ldr	r2, [pc, #500]	@ (8002750 <HAL_I2C_Init+0x27c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	bf94      	ite	ls
 8002560:	2301      	movls	r3, #1
 8002562:	2300      	movhi	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0e7      	b.n	800273e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4a78      	ldr	r2, [pc, #480]	@ (8002754 <HAL_I2C_Init+0x280>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0c9b      	lsrs	r3, r3, #18
 8002578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	430a      	orrs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a6a      	ldr	r2, [pc, #424]	@ (8002748 <HAL_I2C_Init+0x274>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d802      	bhi.n	80025a8 <HAL_I2C_Init+0xd4>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	3301      	adds	r3, #1
 80025a6:	e009      	b.n	80025bc <HAL_I2C_Init+0xe8>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	4a69      	ldr	r2, [pc, #420]	@ (8002758 <HAL_I2C_Init+0x284>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	3301      	adds	r3, #1
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	495c      	ldr	r1, [pc, #368]	@ (8002748 <HAL_I2C_Init+0x274>)
 80025d8:	428b      	cmp	r3, r1
 80025da:	d819      	bhi.n	8002610 <HAL_I2C_Init+0x13c>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e59      	subs	r1, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ea:	1c59      	adds	r1, r3, #1
 80025ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025f0:	400b      	ands	r3, r1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_I2C_Init+0x138>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1e59      	subs	r1, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fbb1 f3f3 	udiv	r3, r1, r3
 8002604:	3301      	adds	r3, #1
 8002606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260a:	e051      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 800260c:	2304      	movs	r3, #4
 800260e:	e04f      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d111      	bne.n	800263c <HAL_I2C_Init+0x168>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1e58      	subs	r0, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	440b      	add	r3, r1
 8002626:	fbb0 f3f3 	udiv	r3, r0, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e012      	b.n	8002662 <HAL_I2C_Init+0x18e>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	0099      	lsls	r1, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Init+0x196>
 8002666:	2301      	movs	r3, #1
 8002668:	e022      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10e      	bne.n	8002690 <HAL_I2C_Init+0x1bc>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1e58      	subs	r0, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	440b      	add	r3, r1
 8002680:	fbb0 f3f3 	udiv	r3, r0, r3
 8002684:	3301      	adds	r3, #1
 8002686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800268e:	e00f      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e58      	subs	r0, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	0099      	lsls	r1, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	6809      	ldr	r1, [r1, #0]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6911      	ldr	r1, [r2, #16]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68d2      	ldr	r2, [r2, #12]
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	000186a0 	.word	0x000186a0
 800274c:	001e847f 	.word	0x001e847f
 8002750:	003d08ff 	.word	0x003d08ff
 8002754:	431bde83 	.word	0x431bde83
 8002758:	10624dd3 	.word	0x10624dd3

0800275c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e272      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8087 	beq.w	800288a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800277c:	4b92      	ldr	r3, [pc, #584]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b04      	cmp	r3, #4
 8002786:	d00c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002788:	4b8f      	ldr	r3, [pc, #572]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b08      	cmp	r3, #8
 8002792:	d112      	bne.n	80027ba <HAL_RCC_OscConfig+0x5e>
 8002794:	4b8c      	ldr	r3, [pc, #560]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800279c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a0:	d10b      	bne.n	80027ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a2:	4b89      	ldr	r3, [pc, #548]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d06c      	beq.n	8002888 <HAL_RCC_OscConfig+0x12c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d168      	bne.n	8002888 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e24c      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x76>
 80027c4:	4b80      	ldr	r3, [pc, #512]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a7f      	ldr	r2, [pc, #508]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	e02e      	b.n	8002830 <HAL_RCC_OscConfig+0xd4>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x98>
 80027da:	4b7b      	ldr	r3, [pc, #492]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a7a      	ldr	r2, [pc, #488]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b78      	ldr	r3, [pc, #480]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a77      	ldr	r2, [pc, #476]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e01d      	b.n	8002830 <HAL_RCC_OscConfig+0xd4>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0xbc>
 80027fe:	4b72      	ldr	r3, [pc, #456]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a71      	ldr	r2, [pc, #452]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 8002804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b6f      	ldr	r3, [pc, #444]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6e      	ldr	r2, [pc, #440]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0xd4>
 8002818:	4b6b      	ldr	r3, [pc, #428]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6a      	ldr	r2, [pc, #424]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 800281e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b68      	ldr	r3, [pc, #416]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a67      	ldr	r2, [pc, #412]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 800282a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800282e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff fb42 	bl	8001ec0 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002840:	f7ff fb3e 	bl	8001ec0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	@ 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e200      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	4b5d      	ldr	r3, [pc, #372]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0xe4>
 800285e:	e014      	b.n	800288a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fb2e 	bl	8001ec0 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7ff fb2a 	bl	8001ec0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	@ 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1ec      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	4b53      	ldr	r3, [pc, #332]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x10c>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d063      	beq.n	800295e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002896:	4b4c      	ldr	r3, [pc, #304]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00b      	beq.n	80028ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028a2:	4b49      	ldr	r3, [pc, #292]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d11c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x18c>
 80028ae:	4b46      	ldr	r3, [pc, #280]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d116      	bne.n	80028e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ba:	4b43      	ldr	r3, [pc, #268]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_RCC_OscConfig+0x176>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e1c0      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d2:	4b3d      	ldr	r3, [pc, #244]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4939      	ldr	r1, [pc, #228]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e6:	e03a      	b.n	800295e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f0:	4b36      	ldr	r3, [pc, #216]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7ff fae3 	bl	8001ec0 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fe:	f7ff fadf 	bl	8001ec0 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1a1      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	4b2d      	ldr	r3, [pc, #180]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291c:	4b2a      	ldr	r3, [pc, #168]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4927      	ldr	r1, [pc, #156]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
 8002930:	e015      	b.n	800295e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002932:	4b26      	ldr	r3, [pc, #152]	@ (80029cc <HAL_RCC_OscConfig+0x270>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7ff fac2 	bl	8001ec0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002940:	f7ff fabe 	bl	8001ec0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e180      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d03a      	beq.n	80029e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d019      	beq.n	80029a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002972:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <HAL_RCC_OscConfig+0x274>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002978:	f7ff faa2 	bl	8001ec0 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002980:	f7ff fa9e 	bl	8001ec0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e160      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	4b0d      	ldr	r3, [pc, #52]	@ (80029c8 <HAL_RCC_OscConfig+0x26c>)
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800299e:	2001      	movs	r0, #1
 80029a0:	f000 face 	bl	8002f40 <RCC_Delay>
 80029a4:	e01c      	b.n	80029e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <HAL_RCC_OscConfig+0x274>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ac:	f7ff fa88 	bl	8001ec0 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b2:	e00f      	b.n	80029d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b4:	f7ff fa84 	bl	8001ec0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d908      	bls.n	80029d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e146      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	42420000 	.word	0x42420000
 80029d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d4:	4b92      	ldr	r3, [pc, #584]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e9      	bne.n	80029b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80a6 	beq.w	8002b3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	4b88      	ldr	r3, [pc, #544]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4a87      	ldr	r2, [pc, #540]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a08:	61d3      	str	r3, [r2, #28]
 8002a0a:	4b85      	ldr	r3, [pc, #532]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b82      	ldr	r3, [pc, #520]	@ (8002c24 <HAL_RCC_OscConfig+0x4c8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4b7f      	ldr	r3, [pc, #508]	@ (8002c24 <HAL_RCC_OscConfig+0x4c8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c24 <HAL_RCC_OscConfig+0x4c8>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7ff fa45 	bl	8001ec0 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7ff fa41 	bl	8001ec0 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	@ 0x64
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e103      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b75      	ldr	r3, [pc, #468]	@ (8002c24 <HAL_RCC_OscConfig+0x4c8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x312>
 8002a60:	4b6f      	ldr	r3, [pc, #444]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4a6e      	ldr	r2, [pc, #440]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6213      	str	r3, [r2, #32]
 8002a6c:	e02d      	b.n	8002aca <HAL_RCC_OscConfig+0x36e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x334>
 8002a76:	4b6a      	ldr	r3, [pc, #424]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a69      	ldr	r2, [pc, #420]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6213      	str	r3, [r2, #32]
 8002a82:	4b67      	ldr	r3, [pc, #412]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	4a66      	ldr	r2, [pc, #408]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	f023 0304 	bic.w	r3, r3, #4
 8002a8c:	6213      	str	r3, [r2, #32]
 8002a8e:	e01c      	b.n	8002aca <HAL_RCC_OscConfig+0x36e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d10c      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x356>
 8002a98:	4b61      	ldr	r3, [pc, #388]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4a60      	ldr	r2, [pc, #384]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	f043 0304 	orr.w	r3, r3, #4
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6213      	str	r3, [r2, #32]
 8002ab0:	e00b      	b.n	8002aca <HAL_RCC_OscConfig+0x36e>
 8002ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4a5a      	ldr	r2, [pc, #360]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6213      	str	r3, [r2, #32]
 8002abe:	4b58      	ldr	r3, [pc, #352]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4a57      	ldr	r2, [pc, #348]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d015      	beq.n	8002afe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad2:	f7ff f9f5 	bl	8001ec0 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7ff f9f1 	bl	8001ec0 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0b1      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af0:	4b4b      	ldr	r3, [pc, #300]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ee      	beq.n	8002ada <HAL_RCC_OscConfig+0x37e>
 8002afc:	e014      	b.n	8002b28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afe:	f7ff f9df 	bl	8001ec0 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f7ff f9db 	bl	8001ec0 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e09b      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1c:	4b40      	ldr	r3, [pc, #256]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1ee      	bne.n	8002b06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	4a3b      	ldr	r2, [pc, #236]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8087 	beq.w	8002c52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b44:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d061      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d146      	bne.n	8002be6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b58:	4b33      	ldr	r3, [pc, #204]	@ (8002c28 <HAL_RCC_OscConfig+0x4cc>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7ff f9af 	bl	8001ec0 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b66:	f7ff f9ab 	bl	8001ec0 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e06d      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b78:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b8c:	d108      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b8e:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4921      	ldr	r1, [pc, #132]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a19      	ldr	r1, [r3, #32]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	491b      	ldr	r1, [pc, #108]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <HAL_RCC_OscConfig+0x4cc>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7ff f97f 	bl	8001ec0 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc6:	f7ff f97b 	bl	8001ec0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e03d      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd8:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x46a>
 8002be4:	e035      	b.n	8002c52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be6:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <HAL_RCC_OscConfig+0x4cc>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7ff f968 	bl	8001ec0 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7ff f964 	bl	8001ec0 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e026      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c06:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x498>
 8002c12:	e01e      	b.n	8002c52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d107      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e019      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40007000 	.word	0x40007000
 8002c28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <HAL_RCC_OscConfig+0x500>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000

08002c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0d0      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c74:	4b6a      	ldr	r3, [pc, #424]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d910      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b67      	ldr	r3, [pc, #412]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 0207 	bic.w	r2, r3, #7
 8002c8a:	4965      	ldr	r1, [pc, #404]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b63      	ldr	r3, [pc, #396]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0b8      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cbc:	4b59      	ldr	r3, [pc, #356]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a58      	ldr	r2, [pc, #352]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd4:	4b53      	ldr	r3, [pc, #332]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a52      	ldr	r2, [pc, #328]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002cde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce0:	4b50      	ldr	r3, [pc, #320]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	494d      	ldr	r1, [pc, #308]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d040      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	4b47      	ldr	r3, [pc, #284]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d115      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e07f      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	4b41      	ldr	r3, [pc, #260]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e073      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e06b      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3e:	4b39      	ldr	r3, [pc, #228]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4936      	ldr	r1, [pc, #216]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d50:	f7ff f8b6 	bl	8001ec0 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7ff f8b2 	bl	8001ec0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e053      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 020c 	and.w	r2, r3, #12
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d1eb      	bne.n	8002d58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d80:	4b27      	ldr	r3, [pc, #156]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d210      	bcs.n	8002db0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b24      	ldr	r3, [pc, #144]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 0207 	bic.w	r2, r3, #7
 8002d96:	4922      	ldr	r1, [pc, #136]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9e:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e032      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dbc:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4916      	ldr	r1, [pc, #88]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dda:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	490e      	ldr	r1, [pc, #56]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dee:	f000 f821 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8002df2:	4602      	mov	r2, r0
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	490a      	ldr	r1, [pc, #40]	@ (8002e28 <HAL_RCC_ClockConfig+0x1c8>)
 8002e00:	5ccb      	ldrb	r3, [r1, r3]
 8002e02:	fa22 f303 	lsr.w	r3, r2, r3
 8002e06:	4a09      	ldr	r2, [pc, #36]	@ (8002e2c <HAL_RCC_ClockConfig+0x1cc>)
 8002e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e0a:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <HAL_RCC_ClockConfig+0x1d0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f814 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40022000 	.word	0x40022000
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08004c0c 	.word	0x08004c0c
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	20000004 	.word	0x20000004

08002e34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x30>
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x36>
 8002e62:	e027      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e64:	4b19      	ldr	r3, [pc, #100]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8002e66:	613b      	str	r3, [r7, #16]
      break;
 8002e68:	e027      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	0c9b      	lsrs	r3, r3, #18
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	4a17      	ldr	r2, [pc, #92]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e74:	5cd3      	ldrb	r3, [r2, r3]
 8002e76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e82:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	0c5b      	lsrs	r3, r3, #17
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	4a11      	ldr	r2, [pc, #68]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e8e:	5cd3      	ldrb	r3, [r2, r3]
 8002e90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8002e96:	fb03 f202 	mul.w	r2, r3, r2
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e004      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ea8:	fb02 f303 	mul.w	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	613b      	str	r3, [r7, #16]
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8002eb6:	613b      	str	r3, [r7, #16]
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	693b      	ldr	r3, [r7, #16]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	007a1200 	.word	0x007a1200
 8002ed0:	08004c24 	.word	0x08004c24
 8002ed4:	08004c34 	.word	0x08004c34
 8002ed8:	003d0900 	.word	0x003d0900

08002edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee0:	4b02      	ldr	r3, [pc, #8]	@ (8002eec <HAL_RCC_GetHCLKFreq+0x10>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	20000000 	.word	0x20000000

08002ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ef4:	f7ff fff2 	bl	8002edc <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	@ (8002f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08004c1c 	.word	0x08004c1c

08002f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f1c:	f7ff ffde 	bl	8002edc <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	0adb      	lsrs	r3, r3, #11
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	@ (8002f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08004c1c 	.word	0x08004c1c

08002f40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f48:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <RCC_Delay+0x34>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f78 <RCC_Delay+0x38>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	0a5b      	lsrs	r3, r3, #9
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f5c:	bf00      	nop
  }
  while (Delay --);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1e5a      	subs	r2, r3, #1
 8002f62:	60fa      	str	r2, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f9      	bne.n	8002f5c <RCC_Delay+0x1c>
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	20000000 	.word	0x20000000
 8002f78:	10624dd3 	.word	0x10624dd3

08002f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e076      	b.n	800307c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f9e:	d009      	beq.n	8002fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
 8002fa6:	e005      	b.n	8002fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe fd96 	bl	8001b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003038:	ea42 0103 	orr.w	r1, r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	0c1a      	lsrs	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f002 0204 	and.w	r2, r2, #4
 800305a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800306a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003094:	f7fe ff14 	bl	8001ec0 <HAL_GetTick>
 8003098:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d001      	beq.n	80030ae <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
 80030ac:	e12a      	b.n	8003304 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_SPI_Transmit+0x36>
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e122      	b.n	8003304 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_SPI_Transmit+0x48>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e11b      	b.n	8003304 <HAL_SPI_Transmit+0x280>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2203      	movs	r2, #3
 80030d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	88fa      	ldrh	r2, [r7, #6]
 80030f2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311a:	d10f      	bne.n	800313c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800312a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800313a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003146:	2b40      	cmp	r3, #64	@ 0x40
 8003148:	d007      	beq.n	800315a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003158:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003162:	d152      	bne.n	800320a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_SPI_Transmit+0xee>
 800316c:	8b7b      	ldrh	r3, [r7, #26]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d145      	bne.n	80031fe <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	1c9a      	adds	r2, r3, #2
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003196:	e032      	b.n	80031fe <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d112      	bne.n	80031cc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	881a      	ldrh	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	1c9a      	adds	r2, r3, #2
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80031ca:	e018      	b.n	80031fe <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031cc:	f7fe fe78 	bl	8001ec0 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d803      	bhi.n	80031e4 <HAL_SPI_Transmit+0x160>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d102      	bne.n	80031ea <HAL_SPI_Transmit+0x166>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e082      	b.n	8003304 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1c7      	bne.n	8003198 <HAL_SPI_Transmit+0x114>
 8003208:	e053      	b.n	80032b2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_SPI_Transmit+0x194>
 8003212:	8b7b      	ldrh	r3, [r7, #26]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d147      	bne.n	80032a8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	7812      	ldrb	r2, [r2, #0]
 8003224:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800323e:	e033      	b.n	80032a8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d113      	bne.n	8003276 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	7812      	ldrb	r2, [r2, #0]
 800325a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003274:	e018      	b.n	80032a8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003276:	f7fe fe23 	bl	8001ec0 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d803      	bhi.n	800328e <HAL_SPI_Transmit+0x20a>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d102      	bne.n	8003294 <HAL_SPI_Transmit+0x210>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e02d      	b.n	8003304 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1c6      	bne.n	8003240 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	6839      	ldr	r1, [r7, #0]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fbd2 	bl	8003a60 <SPI_EndRxTxTransaction>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003302:	2300      	movs	r3, #0
  }
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d001      	beq.n	800332c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003328:	2302      	movs	r3, #2
 800332a:	e104      	b.n	8003536 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003334:	d112      	bne.n	800335c <HAL_SPI_Receive+0x50>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10e      	bne.n	800335c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2204      	movs	r2, #4
 8003342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003346:	88fa      	ldrh	r2, [r7, #6]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f8f3 	bl	800353e <HAL_SPI_TransmitReceive>
 8003358:	4603      	mov	r3, r0
 800335a:	e0ec      	b.n	8003536 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800335c:	f7fe fdb0 	bl	8001ec0 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_SPI_Receive+0x62>
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0e1      	b.n	8003536 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_SPI_Receive+0x74>
 800337c:	2302      	movs	r3, #2
 800337e:	e0da      	b.n	8003536 <HAL_SPI_Receive+0x22a>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2204      	movs	r2, #4
 800338c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	88fa      	ldrh	r2, [r7, #6]
 80033a6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ce:	d10f      	bne.n	80033f0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fa:	2b40      	cmp	r3, #64	@ 0x40
 80033fc:	d007      	beq.n	800340e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800340c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d170      	bne.n	80034f8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003416:	e035      	b.n	8003484 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d115      	bne.n	8003452 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f103 020c 	add.w	r2, r3, #12
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	7812      	ldrb	r2, [r2, #0]
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003450:	e018      	b.n	8003484 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003452:	f7fe fd35 	bl	8001ec0 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d803      	bhi.n	800346a <HAL_SPI_Receive+0x15e>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d102      	bne.n	8003470 <HAL_SPI_Receive+0x164>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e058      	b.n	8003536 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1c4      	bne.n	8003418 <HAL_SPI_Receive+0x10c>
 800348e:	e038      	b.n	8003502 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d113      	bne.n	80034c6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	b292      	uxth	r2, r2
 80034aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b0:	1c9a      	adds	r2, r3, #2
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034c4:	e018      	b.n	80034f8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034c6:	f7fe fcfb 	bl	8001ec0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d803      	bhi.n	80034de <HAL_SPI_Receive+0x1d2>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d102      	bne.n	80034e4 <HAL_SPI_Receive+0x1d8>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e01e      	b.n	8003536 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1c6      	bne.n	8003490 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6839      	ldr	r1, [r7, #0]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fa58 	bl	80039bc <SPI_EndRxTransaction>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003534:	2300      	movs	r3, #0
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b08a      	sub	sp, #40	@ 0x28
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800354c:	2301      	movs	r3, #1
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003550:	f7fe fcb6 	bl	8001ec0 <HAL_GetTick>
 8003554:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800355c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003564:	887b      	ldrh	r3, [r7, #2]
 8003566:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003568:	7ffb      	ldrb	r3, [r7, #31]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d00c      	beq.n	8003588 <HAL_SPI_TransmitReceive+0x4a>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003574:	d106      	bne.n	8003584 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <HAL_SPI_TransmitReceive+0x46>
 800357e:	7ffb      	ldrb	r3, [r7, #31]
 8003580:	2b04      	cmp	r3, #4
 8003582:	d001      	beq.n	8003588 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
 8003586:	e17f      	b.n	8003888 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_SPI_TransmitReceive+0x5c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_SPI_TransmitReceive+0x5c>
 8003594:	887b      	ldrh	r3, [r7, #2]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e174      	b.n	8003888 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_SPI_TransmitReceive+0x6e>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e16d      	b.n	8003888 <HAL_SPI_TransmitReceive+0x34a>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d003      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2205      	movs	r2, #5
 80035c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	887a      	ldrh	r2, [r7, #2]
 80035de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	887a      	ldrh	r2, [r7, #2]
 80035ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003608:	2b40      	cmp	r3, #64	@ 0x40
 800360a:	d007      	beq.n	800361c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800361a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003624:	d17e      	bne.n	8003724 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_TransmitReceive+0xf6>
 800362e:	8afb      	ldrh	r3, [r7, #22]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d16c      	bne.n	800370e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003638:	881a      	ldrh	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003658:	e059      	b.n	800370e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b02      	cmp	r3, #2
 8003666:	d11b      	bne.n	80036a0 <HAL_SPI_TransmitReceive+0x162>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_SPI_TransmitReceive+0x162>
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	2b01      	cmp	r3, #1
 8003676:	d113      	bne.n	80036a0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	881a      	ldrh	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	1c9a      	adds	r2, r3, #2
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d119      	bne.n	80036e2 <HAL_SPI_TransmitReceive+0x1a4>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d014      	beq.n	80036e2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c2:	b292      	uxth	r2, r2
 80036c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ca:	1c9a      	adds	r2, r3, #2
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036de:	2301      	movs	r3, #1
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036e2:	f7fe fbed 	bl	8001ec0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d80d      	bhi.n	800370e <HAL_SPI_TransmitReceive+0x1d0>
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d009      	beq.n	800370e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0bc      	b.n	8003888 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1a0      	bne.n	800365a <HAL_SPI_TransmitReceive+0x11c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d19b      	bne.n	800365a <HAL_SPI_TransmitReceive+0x11c>
 8003722:	e082      	b.n	800382a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x1f4>
 800372c:	8afb      	ldrh	r3, [r7, #22]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d171      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	330c      	adds	r3, #12
 800373c:	7812      	ldrb	r2, [r2, #0]
 800373e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003758:	e05d      	b.n	8003816 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b02      	cmp	r3, #2
 8003766:	d11c      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x264>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d017      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x264>
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	2b01      	cmp	r3, #1
 8003776:	d114      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	330c      	adds	r3, #12
 8003782:	7812      	ldrb	r2, [r2, #0]
 8003784:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d119      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x2a6>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d014      	beq.n	80037e4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037e0:	2301      	movs	r3, #1
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037e4:	f7fe fb6c 	bl	8001ec0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d803      	bhi.n	80037fc <HAL_SPI_TransmitReceive+0x2be>
 80037f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d102      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x2c4>
 80037fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e038      	b.n	8003888 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d19c      	bne.n	800375a <HAL_SPI_TransmitReceive+0x21c>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d197      	bne.n	800375a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800382a:	6a3a      	ldr	r2, [r7, #32]
 800382c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f916 	bl	8003a60 <SPI_EndRxTxTransaction>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e01d      	b.n	8003888 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003886:	2300      	movs	r3, #0
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3728      	adds	r7, #40	@ 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800389e:	b2db      	uxtb	r3, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
	...

080038ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038bc:	f7fe fb00 	bl	8001ec0 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	4413      	add	r3, r2
 80038ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038cc:	f7fe faf8 	bl	8001ec0 <HAL_GetTick>
 80038d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038d2:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	015b      	lsls	r3, r3, #5
 80038d8:	0d1b      	lsrs	r3, r3, #20
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038e2:	e054      	b.n	800398e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	d050      	beq.n	800398e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038ec:	f7fe fae8 	bl	8001ec0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d902      	bls.n	8003902 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d13d      	bne.n	800397e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003910:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800391a:	d111      	bne.n	8003940 <SPI_WaitFlagStateUntilTimeout+0x94>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003924:	d004      	beq.n	8003930 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800392e:	d107      	bne.n	8003940 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800393e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003948:	d10f      	bne.n	800396a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003968:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e017      	b.n	80039ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	3b01      	subs	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4013      	ands	r3, r2
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	bf0c      	ite	eq
 800399e:	2301      	moveq	r3, #1
 80039a0:	2300      	movne	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d19b      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000000 	.word	0x20000000

080039bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039d0:	d111      	bne.n	80039f6 <SPI_EndRxTransaction+0x3a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039da:	d004      	beq.n	80039e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e4:	d107      	bne.n	80039f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039f4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039fe:	d117      	bne.n	8003a30 <SPI_EndRxTransaction+0x74>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a08:	d112      	bne.n	8003a30 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2101      	movs	r1, #1
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff ff49 	bl	80038ac <SPI_WaitFlagStateUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01a      	beq.n	8003a56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e013      	b.n	8003a58 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2200      	movs	r2, #0
 8003a38:	2180      	movs	r1, #128	@ 0x80
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff ff36 	bl	80038ac <SPI_WaitFlagStateUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4a:	f043 0220 	orr.w	r2, r3, #32
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e000      	b.n	8003a58 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2201      	movs	r2, #1
 8003a74:	2102      	movs	r1, #2
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f7ff ff18 	bl	80038ac <SPI_WaitFlagStateUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a86:	f043 0220 	orr.w	r2, r3, #32
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e013      	b.n	8003aba <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2180      	movs	r1, #128	@ 0x80
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7ff ff05 	bl	80038ac <SPI_WaitFlagStateUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e000      	b.n	8003aba <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e042      	b.n	8003b5a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7fe f91f 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2224      	movs	r2, #36	@ 0x24
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fa08 	bl	8003f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b08a      	sub	sp, #40	@ 0x28
 8003b66:	af02      	add	r7, sp, #8
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d175      	bne.n	8003c6e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_UART_Transmit+0x2c>
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06e      	b.n	8003c70 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2221      	movs	r2, #33	@ 0x21
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ba0:	f7fe f98e 	bl	8001ec0 <HAL_GetTick>
 8003ba4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bba:	d108      	bne.n	8003bce <HAL_UART_Transmit+0x6c>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	e003      	b.n	8003bd6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bd6:	e02e      	b.n	8003c36 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2200      	movs	r2, #0
 8003be0:	2180      	movs	r1, #128	@ 0x80
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f8df 	bl	8003da6 <UART_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e03a      	b.n	8003c70 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	3302      	adds	r3, #2
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e007      	b.n	8003c28 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3301      	adds	r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1cb      	bne.n	8003bd8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2140      	movs	r1, #64	@ 0x40
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f8ab 	bl	8003da6 <UART_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e006      	b.n	8003c70 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	@ 0x28
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	f040 8081 	bne.w	8003d9c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_UART_Receive+0x2e>
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e079      	b.n	8003d9e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2222      	movs	r2, #34	@ 0x22
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cbe:	f7fe f8ff 	bl	8001ec0 <HAL_GetTick>
 8003cc2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd8:	d108      	bne.n	8003cec <HAL_UART_Receive+0x74>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d104      	bne.n	8003cec <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	e003      	b.n	8003cf4 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cf4:	e047      	b.n	8003d86 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2120      	movs	r1, #32
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f850 	bl	8003da6 <UART_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e042      	b.n	8003d9e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	3302      	adds	r3, #2
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	e01f      	b.n	8003d78 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d40:	d007      	beq.n	8003d52 <HAL_UART_Receive+0xda>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <HAL_UART_Receive+0xe8>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e008      	b.n	8003d72 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3301      	adds	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1b2      	bne.n	8003cf6 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	4613      	mov	r3, r2
 8003db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db6:	e03b      	b.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d037      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc0:	f7fe f87e 	bl	8001ec0 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d302      	bcc.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e03a      	b.n	8003e50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d023      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b80      	cmp	r3, #128	@ 0x80
 8003dec:	d020      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b40      	cmp	r3, #64	@ 0x40
 8003df2:	d01d      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d116      	bne.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f81d 	bl	8003e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2208      	movs	r2, #8
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e00f      	b.n	8003e50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d0b4      	beq.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b095      	sub	sp, #84	@ 0x54
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e80:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e5      	bne.n	8003e94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d119      	bne.n	8003f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f023 0310 	bic.w	r3, r3, #16
 8003ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ef0:	61ba      	str	r2, [r7, #24]
 8003ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	613b      	str	r3, [r7, #16]
   return(result);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f12:	bf00      	nop
 8003f14:	3754      	adds	r7, #84	@ 0x54
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f56:	f023 030c 	bic.w	r3, r3, #12
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004030 <UART_SetConfig+0x114>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d103      	bne.n	8003f8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f84:	f7fe ffc8 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	e002      	b.n	8003f92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe ffb0 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8003f90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009a      	lsls	r2, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	4a22      	ldr	r2, [pc, #136]	@ (8004034 <UART_SetConfig+0x118>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	0119      	lsls	r1, r3, #4
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009a      	lsls	r2, r3, #2
 8003fbc:	441a      	add	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004034 <UART_SetConfig+0x118>)
 8003fca:	fba3 0302 	umull	r0, r3, r3, r2
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2064      	movs	r0, #100	@ 0x64
 8003fd2:	fb00 f303 	mul.w	r3, r0, r3
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	3332      	adds	r3, #50	@ 0x32
 8003fdc:	4a15      	ldr	r2, [pc, #84]	@ (8004034 <UART_SetConfig+0x118>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fe8:	4419      	add	r1, r3
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009a      	lsls	r2, r3, #2
 8003ff4:	441a      	add	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004000:	4b0c      	ldr	r3, [pc, #48]	@ (8004034 <UART_SetConfig+0x118>)
 8004002:	fba3 0302 	umull	r0, r3, r3, r2
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2064      	movs	r0, #100	@ 0x64
 800400a:	fb00 f303 	mul.w	r3, r0, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	3332      	adds	r3, #50	@ 0x32
 8004014:	4a07      	ldr	r2, [pc, #28]	@ (8004034 <UART_SetConfig+0x118>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	f003 020f 	and.w	r2, r3, #15
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	440a      	add	r2, r1
 8004026:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40013800 	.word	0x40013800
 8004034:	51eb851f 	.word	0x51eb851f

08004038 <siprintf>:
 8004038:	b40e      	push	{r1, r2, r3}
 800403a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800403e:	b500      	push	{lr}
 8004040:	b09c      	sub	sp, #112	@ 0x70
 8004042:	ab1d      	add	r3, sp, #116	@ 0x74
 8004044:	9002      	str	r0, [sp, #8]
 8004046:	9006      	str	r0, [sp, #24]
 8004048:	9107      	str	r1, [sp, #28]
 800404a:	9104      	str	r1, [sp, #16]
 800404c:	4808      	ldr	r0, [pc, #32]	@ (8004070 <siprintf+0x38>)
 800404e:	4909      	ldr	r1, [pc, #36]	@ (8004074 <siprintf+0x3c>)
 8004050:	f853 2b04 	ldr.w	r2, [r3], #4
 8004054:	9105      	str	r1, [sp, #20]
 8004056:	6800      	ldr	r0, [r0, #0]
 8004058:	a902      	add	r1, sp, #8
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	f000 f9c4 	bl	80043e8 <_svfiprintf_r>
 8004060:	2200      	movs	r2, #0
 8004062:	9b02      	ldr	r3, [sp, #8]
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	b01c      	add	sp, #112	@ 0x70
 8004068:	f85d eb04 	ldr.w	lr, [sp], #4
 800406c:	b003      	add	sp, #12
 800406e:	4770      	bx	lr
 8004070:	2000000c 	.word	0x2000000c
 8004074:	ffff0208 	.word	0xffff0208

08004078 <memset>:
 8004078:	4603      	mov	r3, r0
 800407a:	4402      	add	r2, r0
 800407c:	4293      	cmp	r3, r2
 800407e:	d100      	bne.n	8004082 <memset+0xa>
 8004080:	4770      	bx	lr
 8004082:	f803 1b01 	strb.w	r1, [r3], #1
 8004086:	e7f9      	b.n	800407c <memset+0x4>

08004088 <strchr>:
 8004088:	4603      	mov	r3, r0
 800408a:	b2c9      	uxtb	r1, r1
 800408c:	4618      	mov	r0, r3
 800408e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004092:	b112      	cbz	r2, 800409a <strchr+0x12>
 8004094:	428a      	cmp	r2, r1
 8004096:	d1f9      	bne.n	800408c <strchr+0x4>
 8004098:	4770      	bx	lr
 800409a:	2900      	cmp	r1, #0
 800409c:	bf18      	it	ne
 800409e:	2000      	movne	r0, #0
 80040a0:	4770      	bx	lr

080040a2 <strstr>:
 80040a2:	780a      	ldrb	r2, [r1, #0]
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	b96a      	cbnz	r2, 80040c4 <strstr+0x22>
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d109      	bne.n	80040c2 <strstr+0x20>
 80040ae:	460c      	mov	r4, r1
 80040b0:	4605      	mov	r5, r0
 80040b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f6      	beq.n	80040a8 <strstr+0x6>
 80040ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80040be:	429e      	cmp	r6, r3
 80040c0:	d0f7      	beq.n	80040b2 <strstr+0x10>
 80040c2:	3001      	adds	r0, #1
 80040c4:	7803      	ldrb	r3, [r0, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ef      	bne.n	80040aa <strstr+0x8>
 80040ca:	4618      	mov	r0, r3
 80040cc:	e7ec      	b.n	80040a8 <strstr+0x6>
	...

080040d0 <__errno>:
 80040d0:	4b01      	ldr	r3, [pc, #4]	@ (80040d8 <__errno+0x8>)
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	2000000c 	.word	0x2000000c

080040dc <__libc_init_array>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	2600      	movs	r6, #0
 80040e0:	4d0c      	ldr	r5, [pc, #48]	@ (8004114 <__libc_init_array+0x38>)
 80040e2:	4c0d      	ldr	r4, [pc, #52]	@ (8004118 <__libc_init_array+0x3c>)
 80040e4:	1b64      	subs	r4, r4, r5
 80040e6:	10a4      	asrs	r4, r4, #2
 80040e8:	42a6      	cmp	r6, r4
 80040ea:	d109      	bne.n	8004100 <__libc_init_array+0x24>
 80040ec:	f000 fc78 	bl	80049e0 <_init>
 80040f0:	2600      	movs	r6, #0
 80040f2:	4d0a      	ldr	r5, [pc, #40]	@ (800411c <__libc_init_array+0x40>)
 80040f4:	4c0a      	ldr	r4, [pc, #40]	@ (8004120 <__libc_init_array+0x44>)
 80040f6:	1b64      	subs	r4, r4, r5
 80040f8:	10a4      	asrs	r4, r4, #2
 80040fa:	42a6      	cmp	r6, r4
 80040fc:	d105      	bne.n	800410a <__libc_init_array+0x2e>
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	f855 3b04 	ldr.w	r3, [r5], #4
 8004104:	4798      	blx	r3
 8004106:	3601      	adds	r6, #1
 8004108:	e7ee      	b.n	80040e8 <__libc_init_array+0xc>
 800410a:	f855 3b04 	ldr.w	r3, [r5], #4
 800410e:	4798      	blx	r3
 8004110:	3601      	adds	r6, #1
 8004112:	e7f2      	b.n	80040fa <__libc_init_array+0x1e>
 8004114:	08004c74 	.word	0x08004c74
 8004118:	08004c74 	.word	0x08004c74
 800411c:	08004c74 	.word	0x08004c74
 8004120:	08004c78 	.word	0x08004c78

08004124 <__retarget_lock_acquire_recursive>:
 8004124:	4770      	bx	lr

08004126 <__retarget_lock_release_recursive>:
 8004126:	4770      	bx	lr

08004128 <memcpy>:
 8004128:	440a      	add	r2, r1
 800412a:	4291      	cmp	r1, r2
 800412c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004130:	d100      	bne.n	8004134 <memcpy+0xc>
 8004132:	4770      	bx	lr
 8004134:	b510      	push	{r4, lr}
 8004136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800413a:	4291      	cmp	r1, r2
 800413c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004140:	d1f9      	bne.n	8004136 <memcpy+0xe>
 8004142:	bd10      	pop	{r4, pc}

08004144 <_free_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4605      	mov	r5, r0
 8004148:	2900      	cmp	r1, #0
 800414a:	d040      	beq.n	80041ce <_free_r+0x8a>
 800414c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004150:	1f0c      	subs	r4, r1, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	bfb8      	it	lt
 8004156:	18e4      	addlt	r4, r4, r3
 8004158:	f000 f8de 	bl	8004318 <__malloc_lock>
 800415c:	4a1c      	ldr	r2, [pc, #112]	@ (80041d0 <_free_r+0x8c>)
 800415e:	6813      	ldr	r3, [r2, #0]
 8004160:	b933      	cbnz	r3, 8004170 <_free_r+0x2c>
 8004162:	6063      	str	r3, [r4, #4]
 8004164:	6014      	str	r4, [r2, #0]
 8004166:	4628      	mov	r0, r5
 8004168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800416c:	f000 b8da 	b.w	8004324 <__malloc_unlock>
 8004170:	42a3      	cmp	r3, r4
 8004172:	d908      	bls.n	8004186 <_free_r+0x42>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	1821      	adds	r1, r4, r0
 8004178:	428b      	cmp	r3, r1
 800417a:	bf01      	itttt	eq
 800417c:	6819      	ldreq	r1, [r3, #0]
 800417e:	685b      	ldreq	r3, [r3, #4]
 8004180:	1809      	addeq	r1, r1, r0
 8004182:	6021      	streq	r1, [r4, #0]
 8004184:	e7ed      	b.n	8004162 <_free_r+0x1e>
 8004186:	461a      	mov	r2, r3
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	b10b      	cbz	r3, 8004190 <_free_r+0x4c>
 800418c:	42a3      	cmp	r3, r4
 800418e:	d9fa      	bls.n	8004186 <_free_r+0x42>
 8004190:	6811      	ldr	r1, [r2, #0]
 8004192:	1850      	adds	r0, r2, r1
 8004194:	42a0      	cmp	r0, r4
 8004196:	d10b      	bne.n	80041b0 <_free_r+0x6c>
 8004198:	6820      	ldr	r0, [r4, #0]
 800419a:	4401      	add	r1, r0
 800419c:	1850      	adds	r0, r2, r1
 800419e:	4283      	cmp	r3, r0
 80041a0:	6011      	str	r1, [r2, #0]
 80041a2:	d1e0      	bne.n	8004166 <_free_r+0x22>
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4408      	add	r0, r1
 80041aa:	6010      	str	r0, [r2, #0]
 80041ac:	6053      	str	r3, [r2, #4]
 80041ae:	e7da      	b.n	8004166 <_free_r+0x22>
 80041b0:	d902      	bls.n	80041b8 <_free_r+0x74>
 80041b2:	230c      	movs	r3, #12
 80041b4:	602b      	str	r3, [r5, #0]
 80041b6:	e7d6      	b.n	8004166 <_free_r+0x22>
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	1821      	adds	r1, r4, r0
 80041bc:	428b      	cmp	r3, r1
 80041be:	bf01      	itttt	eq
 80041c0:	6819      	ldreq	r1, [r3, #0]
 80041c2:	685b      	ldreq	r3, [r3, #4]
 80041c4:	1809      	addeq	r1, r1, r0
 80041c6:	6021      	streq	r1, [r4, #0]
 80041c8:	6063      	str	r3, [r4, #4]
 80041ca:	6054      	str	r4, [r2, #4]
 80041cc:	e7cb      	b.n	8004166 <_free_r+0x22>
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	20001084 	.word	0x20001084

080041d4 <sbrk_aligned>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004214 <sbrk_aligned+0x40>)
 80041d8:	460c      	mov	r4, r1
 80041da:	6831      	ldr	r1, [r6, #0]
 80041dc:	4605      	mov	r5, r0
 80041de:	b911      	cbnz	r1, 80041e6 <sbrk_aligned+0x12>
 80041e0:	f000 fbaa 	bl	8004938 <_sbrk_r>
 80041e4:	6030      	str	r0, [r6, #0]
 80041e6:	4621      	mov	r1, r4
 80041e8:	4628      	mov	r0, r5
 80041ea:	f000 fba5 	bl	8004938 <_sbrk_r>
 80041ee:	1c43      	adds	r3, r0, #1
 80041f0:	d103      	bne.n	80041fa <sbrk_aligned+0x26>
 80041f2:	f04f 34ff 	mov.w	r4, #4294967295
 80041f6:	4620      	mov	r0, r4
 80041f8:	bd70      	pop	{r4, r5, r6, pc}
 80041fa:	1cc4      	adds	r4, r0, #3
 80041fc:	f024 0403 	bic.w	r4, r4, #3
 8004200:	42a0      	cmp	r0, r4
 8004202:	d0f8      	beq.n	80041f6 <sbrk_aligned+0x22>
 8004204:	1a21      	subs	r1, r4, r0
 8004206:	4628      	mov	r0, r5
 8004208:	f000 fb96 	bl	8004938 <_sbrk_r>
 800420c:	3001      	adds	r0, #1
 800420e:	d1f2      	bne.n	80041f6 <sbrk_aligned+0x22>
 8004210:	e7ef      	b.n	80041f2 <sbrk_aligned+0x1e>
 8004212:	bf00      	nop
 8004214:	20001080 	.word	0x20001080

08004218 <_malloc_r>:
 8004218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800421c:	1ccd      	adds	r5, r1, #3
 800421e:	f025 0503 	bic.w	r5, r5, #3
 8004222:	3508      	adds	r5, #8
 8004224:	2d0c      	cmp	r5, #12
 8004226:	bf38      	it	cc
 8004228:	250c      	movcc	r5, #12
 800422a:	2d00      	cmp	r5, #0
 800422c:	4606      	mov	r6, r0
 800422e:	db01      	blt.n	8004234 <_malloc_r+0x1c>
 8004230:	42a9      	cmp	r1, r5
 8004232:	d904      	bls.n	800423e <_malloc_r+0x26>
 8004234:	230c      	movs	r3, #12
 8004236:	6033      	str	r3, [r6, #0]
 8004238:	2000      	movs	r0, #0
 800423a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800423e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004314 <_malloc_r+0xfc>
 8004242:	f000 f869 	bl	8004318 <__malloc_lock>
 8004246:	f8d8 3000 	ldr.w	r3, [r8]
 800424a:	461c      	mov	r4, r3
 800424c:	bb44      	cbnz	r4, 80042a0 <_malloc_r+0x88>
 800424e:	4629      	mov	r1, r5
 8004250:	4630      	mov	r0, r6
 8004252:	f7ff ffbf 	bl	80041d4 <sbrk_aligned>
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	4604      	mov	r4, r0
 800425a:	d158      	bne.n	800430e <_malloc_r+0xf6>
 800425c:	f8d8 4000 	ldr.w	r4, [r8]
 8004260:	4627      	mov	r7, r4
 8004262:	2f00      	cmp	r7, #0
 8004264:	d143      	bne.n	80042ee <_malloc_r+0xd6>
 8004266:	2c00      	cmp	r4, #0
 8004268:	d04b      	beq.n	8004302 <_malloc_r+0xea>
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	4639      	mov	r1, r7
 800426e:	4630      	mov	r0, r6
 8004270:	eb04 0903 	add.w	r9, r4, r3
 8004274:	f000 fb60 	bl	8004938 <_sbrk_r>
 8004278:	4581      	cmp	r9, r0
 800427a:	d142      	bne.n	8004302 <_malloc_r+0xea>
 800427c:	6821      	ldr	r1, [r4, #0]
 800427e:	4630      	mov	r0, r6
 8004280:	1a6d      	subs	r5, r5, r1
 8004282:	4629      	mov	r1, r5
 8004284:	f7ff ffa6 	bl	80041d4 <sbrk_aligned>
 8004288:	3001      	adds	r0, #1
 800428a:	d03a      	beq.n	8004302 <_malloc_r+0xea>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	442b      	add	r3, r5
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	f8d8 3000 	ldr.w	r3, [r8]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	bb62      	cbnz	r2, 80042f4 <_malloc_r+0xdc>
 800429a:	f8c8 7000 	str.w	r7, [r8]
 800429e:	e00f      	b.n	80042c0 <_malloc_r+0xa8>
 80042a0:	6822      	ldr	r2, [r4, #0]
 80042a2:	1b52      	subs	r2, r2, r5
 80042a4:	d420      	bmi.n	80042e8 <_malloc_r+0xd0>
 80042a6:	2a0b      	cmp	r2, #11
 80042a8:	d917      	bls.n	80042da <_malloc_r+0xc2>
 80042aa:	1961      	adds	r1, r4, r5
 80042ac:	42a3      	cmp	r3, r4
 80042ae:	6025      	str	r5, [r4, #0]
 80042b0:	bf18      	it	ne
 80042b2:	6059      	strne	r1, [r3, #4]
 80042b4:	6863      	ldr	r3, [r4, #4]
 80042b6:	bf08      	it	eq
 80042b8:	f8c8 1000 	streq.w	r1, [r8]
 80042bc:	5162      	str	r2, [r4, r5]
 80042be:	604b      	str	r3, [r1, #4]
 80042c0:	4630      	mov	r0, r6
 80042c2:	f000 f82f 	bl	8004324 <__malloc_unlock>
 80042c6:	f104 000b 	add.w	r0, r4, #11
 80042ca:	1d23      	adds	r3, r4, #4
 80042cc:	f020 0007 	bic.w	r0, r0, #7
 80042d0:	1ac2      	subs	r2, r0, r3
 80042d2:	bf1c      	itt	ne
 80042d4:	1a1b      	subne	r3, r3, r0
 80042d6:	50a3      	strne	r3, [r4, r2]
 80042d8:	e7af      	b.n	800423a <_malloc_r+0x22>
 80042da:	6862      	ldr	r2, [r4, #4]
 80042dc:	42a3      	cmp	r3, r4
 80042de:	bf0c      	ite	eq
 80042e0:	f8c8 2000 	streq.w	r2, [r8]
 80042e4:	605a      	strne	r2, [r3, #4]
 80042e6:	e7eb      	b.n	80042c0 <_malloc_r+0xa8>
 80042e8:	4623      	mov	r3, r4
 80042ea:	6864      	ldr	r4, [r4, #4]
 80042ec:	e7ae      	b.n	800424c <_malloc_r+0x34>
 80042ee:	463c      	mov	r4, r7
 80042f0:	687f      	ldr	r7, [r7, #4]
 80042f2:	e7b6      	b.n	8004262 <_malloc_r+0x4a>
 80042f4:	461a      	mov	r2, r3
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	42a3      	cmp	r3, r4
 80042fa:	d1fb      	bne.n	80042f4 <_malloc_r+0xdc>
 80042fc:	2300      	movs	r3, #0
 80042fe:	6053      	str	r3, [r2, #4]
 8004300:	e7de      	b.n	80042c0 <_malloc_r+0xa8>
 8004302:	230c      	movs	r3, #12
 8004304:	4630      	mov	r0, r6
 8004306:	6033      	str	r3, [r6, #0]
 8004308:	f000 f80c 	bl	8004324 <__malloc_unlock>
 800430c:	e794      	b.n	8004238 <_malloc_r+0x20>
 800430e:	6005      	str	r5, [r0, #0]
 8004310:	e7d6      	b.n	80042c0 <_malloc_r+0xa8>
 8004312:	bf00      	nop
 8004314:	20001084 	.word	0x20001084

08004318 <__malloc_lock>:
 8004318:	4801      	ldr	r0, [pc, #4]	@ (8004320 <__malloc_lock+0x8>)
 800431a:	f7ff bf03 	b.w	8004124 <__retarget_lock_acquire_recursive>
 800431e:	bf00      	nop
 8004320:	2000107c 	.word	0x2000107c

08004324 <__malloc_unlock>:
 8004324:	4801      	ldr	r0, [pc, #4]	@ (800432c <__malloc_unlock+0x8>)
 8004326:	f7ff befe 	b.w	8004126 <__retarget_lock_release_recursive>
 800432a:	bf00      	nop
 800432c:	2000107c 	.word	0x2000107c

08004330 <__ssputs_r>:
 8004330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004334:	461f      	mov	r7, r3
 8004336:	688e      	ldr	r6, [r1, #8]
 8004338:	4682      	mov	sl, r0
 800433a:	42be      	cmp	r6, r7
 800433c:	460c      	mov	r4, r1
 800433e:	4690      	mov	r8, r2
 8004340:	680b      	ldr	r3, [r1, #0]
 8004342:	d82d      	bhi.n	80043a0 <__ssputs_r+0x70>
 8004344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004348:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800434c:	d026      	beq.n	800439c <__ssputs_r+0x6c>
 800434e:	6965      	ldr	r5, [r4, #20]
 8004350:	6909      	ldr	r1, [r1, #16]
 8004352:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004356:	eba3 0901 	sub.w	r9, r3, r1
 800435a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800435e:	1c7b      	adds	r3, r7, #1
 8004360:	444b      	add	r3, r9
 8004362:	106d      	asrs	r5, r5, #1
 8004364:	429d      	cmp	r5, r3
 8004366:	bf38      	it	cc
 8004368:	461d      	movcc	r5, r3
 800436a:	0553      	lsls	r3, r2, #21
 800436c:	d527      	bpl.n	80043be <__ssputs_r+0x8e>
 800436e:	4629      	mov	r1, r5
 8004370:	f7ff ff52 	bl	8004218 <_malloc_r>
 8004374:	4606      	mov	r6, r0
 8004376:	b360      	cbz	r0, 80043d2 <__ssputs_r+0xa2>
 8004378:	464a      	mov	r2, r9
 800437a:	6921      	ldr	r1, [r4, #16]
 800437c:	f7ff fed4 	bl	8004128 <memcpy>
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	6126      	str	r6, [r4, #16]
 800438e:	444e      	add	r6, r9
 8004390:	6026      	str	r6, [r4, #0]
 8004392:	463e      	mov	r6, r7
 8004394:	6165      	str	r5, [r4, #20]
 8004396:	eba5 0509 	sub.w	r5, r5, r9
 800439a:	60a5      	str	r5, [r4, #8]
 800439c:	42be      	cmp	r6, r7
 800439e:	d900      	bls.n	80043a2 <__ssputs_r+0x72>
 80043a0:	463e      	mov	r6, r7
 80043a2:	4632      	mov	r2, r6
 80043a4:	4641      	mov	r1, r8
 80043a6:	6820      	ldr	r0, [r4, #0]
 80043a8:	f000 faac 	bl	8004904 <memmove>
 80043ac:	2000      	movs	r0, #0
 80043ae:	68a3      	ldr	r3, [r4, #8]
 80043b0:	1b9b      	subs	r3, r3, r6
 80043b2:	60a3      	str	r3, [r4, #8]
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	4433      	add	r3, r6
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043be:	462a      	mov	r2, r5
 80043c0:	f000 fad8 	bl	8004974 <_realloc_r>
 80043c4:	4606      	mov	r6, r0
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d1e0      	bne.n	800438c <__ssputs_r+0x5c>
 80043ca:	4650      	mov	r0, sl
 80043cc:	6921      	ldr	r1, [r4, #16]
 80043ce:	f7ff feb9 	bl	8004144 <_free_r>
 80043d2:	230c      	movs	r3, #12
 80043d4:	f8ca 3000 	str.w	r3, [sl]
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	f04f 30ff 	mov.w	r0, #4294967295
 80043de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043e2:	81a3      	strh	r3, [r4, #12]
 80043e4:	e7e9      	b.n	80043ba <__ssputs_r+0x8a>
	...

080043e8 <_svfiprintf_r>:
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	4698      	mov	r8, r3
 80043ee:	898b      	ldrh	r3, [r1, #12]
 80043f0:	4607      	mov	r7, r0
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	460d      	mov	r5, r1
 80043f6:	4614      	mov	r4, r2
 80043f8:	b09d      	sub	sp, #116	@ 0x74
 80043fa:	d510      	bpl.n	800441e <_svfiprintf_r+0x36>
 80043fc:	690b      	ldr	r3, [r1, #16]
 80043fe:	b973      	cbnz	r3, 800441e <_svfiprintf_r+0x36>
 8004400:	2140      	movs	r1, #64	@ 0x40
 8004402:	f7ff ff09 	bl	8004218 <_malloc_r>
 8004406:	6028      	str	r0, [r5, #0]
 8004408:	6128      	str	r0, [r5, #16]
 800440a:	b930      	cbnz	r0, 800441a <_svfiprintf_r+0x32>
 800440c:	230c      	movs	r3, #12
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	f04f 30ff 	mov.w	r0, #4294967295
 8004414:	b01d      	add	sp, #116	@ 0x74
 8004416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441a:	2340      	movs	r3, #64	@ 0x40
 800441c:	616b      	str	r3, [r5, #20]
 800441e:	2300      	movs	r3, #0
 8004420:	9309      	str	r3, [sp, #36]	@ 0x24
 8004422:	2320      	movs	r3, #32
 8004424:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004428:	2330      	movs	r3, #48	@ 0x30
 800442a:	f04f 0901 	mov.w	r9, #1
 800442e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004432:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80045cc <_svfiprintf_r+0x1e4>
 8004436:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800443a:	4623      	mov	r3, r4
 800443c:	469a      	mov	sl, r3
 800443e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004442:	b10a      	cbz	r2, 8004448 <_svfiprintf_r+0x60>
 8004444:	2a25      	cmp	r2, #37	@ 0x25
 8004446:	d1f9      	bne.n	800443c <_svfiprintf_r+0x54>
 8004448:	ebba 0b04 	subs.w	fp, sl, r4
 800444c:	d00b      	beq.n	8004466 <_svfiprintf_r+0x7e>
 800444e:	465b      	mov	r3, fp
 8004450:	4622      	mov	r2, r4
 8004452:	4629      	mov	r1, r5
 8004454:	4638      	mov	r0, r7
 8004456:	f7ff ff6b 	bl	8004330 <__ssputs_r>
 800445a:	3001      	adds	r0, #1
 800445c:	f000 80a7 	beq.w	80045ae <_svfiprintf_r+0x1c6>
 8004460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004462:	445a      	add	r2, fp
 8004464:	9209      	str	r2, [sp, #36]	@ 0x24
 8004466:	f89a 3000 	ldrb.w	r3, [sl]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 809f 	beq.w	80045ae <_svfiprintf_r+0x1c6>
 8004470:	2300      	movs	r3, #0
 8004472:	f04f 32ff 	mov.w	r2, #4294967295
 8004476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800447a:	f10a 0a01 	add.w	sl, sl, #1
 800447e:	9304      	str	r3, [sp, #16]
 8004480:	9307      	str	r3, [sp, #28]
 8004482:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004486:	931a      	str	r3, [sp, #104]	@ 0x68
 8004488:	4654      	mov	r4, sl
 800448a:	2205      	movs	r2, #5
 800448c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004490:	484e      	ldr	r0, [pc, #312]	@ (80045cc <_svfiprintf_r+0x1e4>)
 8004492:	f000 fa61 	bl	8004958 <memchr>
 8004496:	9a04      	ldr	r2, [sp, #16]
 8004498:	b9d8      	cbnz	r0, 80044d2 <_svfiprintf_r+0xea>
 800449a:	06d0      	lsls	r0, r2, #27
 800449c:	bf44      	itt	mi
 800449e:	2320      	movmi	r3, #32
 80044a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044a4:	0711      	lsls	r1, r2, #28
 80044a6:	bf44      	itt	mi
 80044a8:	232b      	movmi	r3, #43	@ 0x2b
 80044aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ae:	f89a 3000 	ldrb.w	r3, [sl]
 80044b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80044b4:	d015      	beq.n	80044e2 <_svfiprintf_r+0xfa>
 80044b6:	4654      	mov	r4, sl
 80044b8:	2000      	movs	r0, #0
 80044ba:	f04f 0c0a 	mov.w	ip, #10
 80044be:	9a07      	ldr	r2, [sp, #28]
 80044c0:	4621      	mov	r1, r4
 80044c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044c6:	3b30      	subs	r3, #48	@ 0x30
 80044c8:	2b09      	cmp	r3, #9
 80044ca:	d94b      	bls.n	8004564 <_svfiprintf_r+0x17c>
 80044cc:	b1b0      	cbz	r0, 80044fc <_svfiprintf_r+0x114>
 80044ce:	9207      	str	r2, [sp, #28]
 80044d0:	e014      	b.n	80044fc <_svfiprintf_r+0x114>
 80044d2:	eba0 0308 	sub.w	r3, r0, r8
 80044d6:	fa09 f303 	lsl.w	r3, r9, r3
 80044da:	4313      	orrs	r3, r2
 80044dc:	46a2      	mov	sl, r4
 80044de:	9304      	str	r3, [sp, #16]
 80044e0:	e7d2      	b.n	8004488 <_svfiprintf_r+0xa0>
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	9103      	str	r1, [sp, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bfbb      	ittet	lt
 80044ee:	425b      	neglt	r3, r3
 80044f0:	f042 0202 	orrlt.w	r2, r2, #2
 80044f4:	9307      	strge	r3, [sp, #28]
 80044f6:	9307      	strlt	r3, [sp, #28]
 80044f8:	bfb8      	it	lt
 80044fa:	9204      	strlt	r2, [sp, #16]
 80044fc:	7823      	ldrb	r3, [r4, #0]
 80044fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004500:	d10a      	bne.n	8004518 <_svfiprintf_r+0x130>
 8004502:	7863      	ldrb	r3, [r4, #1]
 8004504:	2b2a      	cmp	r3, #42	@ 0x2a
 8004506:	d132      	bne.n	800456e <_svfiprintf_r+0x186>
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	3402      	adds	r4, #2
 800450c:	1d1a      	adds	r2, r3, #4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	9203      	str	r2, [sp, #12]
 8004512:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004516:	9305      	str	r3, [sp, #20]
 8004518:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80045d0 <_svfiprintf_r+0x1e8>
 800451c:	2203      	movs	r2, #3
 800451e:	4650      	mov	r0, sl
 8004520:	7821      	ldrb	r1, [r4, #0]
 8004522:	f000 fa19 	bl	8004958 <memchr>
 8004526:	b138      	cbz	r0, 8004538 <_svfiprintf_r+0x150>
 8004528:	2240      	movs	r2, #64	@ 0x40
 800452a:	9b04      	ldr	r3, [sp, #16]
 800452c:	eba0 000a 	sub.w	r0, r0, sl
 8004530:	4082      	lsls	r2, r0
 8004532:	4313      	orrs	r3, r2
 8004534:	3401      	adds	r4, #1
 8004536:	9304      	str	r3, [sp, #16]
 8004538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800453c:	2206      	movs	r2, #6
 800453e:	4825      	ldr	r0, [pc, #148]	@ (80045d4 <_svfiprintf_r+0x1ec>)
 8004540:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004544:	f000 fa08 	bl	8004958 <memchr>
 8004548:	2800      	cmp	r0, #0
 800454a:	d036      	beq.n	80045ba <_svfiprintf_r+0x1d2>
 800454c:	4b22      	ldr	r3, [pc, #136]	@ (80045d8 <_svfiprintf_r+0x1f0>)
 800454e:	bb1b      	cbnz	r3, 8004598 <_svfiprintf_r+0x1b0>
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	3307      	adds	r3, #7
 8004554:	f023 0307 	bic.w	r3, r3, #7
 8004558:	3308      	adds	r3, #8
 800455a:	9303      	str	r3, [sp, #12]
 800455c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800455e:	4433      	add	r3, r6
 8004560:	9309      	str	r3, [sp, #36]	@ 0x24
 8004562:	e76a      	b.n	800443a <_svfiprintf_r+0x52>
 8004564:	460c      	mov	r4, r1
 8004566:	2001      	movs	r0, #1
 8004568:	fb0c 3202 	mla	r2, ip, r2, r3
 800456c:	e7a8      	b.n	80044c0 <_svfiprintf_r+0xd8>
 800456e:	2300      	movs	r3, #0
 8004570:	f04f 0c0a 	mov.w	ip, #10
 8004574:	4619      	mov	r1, r3
 8004576:	3401      	adds	r4, #1
 8004578:	9305      	str	r3, [sp, #20]
 800457a:	4620      	mov	r0, r4
 800457c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004580:	3a30      	subs	r2, #48	@ 0x30
 8004582:	2a09      	cmp	r2, #9
 8004584:	d903      	bls.n	800458e <_svfiprintf_r+0x1a6>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0c6      	beq.n	8004518 <_svfiprintf_r+0x130>
 800458a:	9105      	str	r1, [sp, #20]
 800458c:	e7c4      	b.n	8004518 <_svfiprintf_r+0x130>
 800458e:	4604      	mov	r4, r0
 8004590:	2301      	movs	r3, #1
 8004592:	fb0c 2101 	mla	r1, ip, r1, r2
 8004596:	e7f0      	b.n	800457a <_svfiprintf_r+0x192>
 8004598:	ab03      	add	r3, sp, #12
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	462a      	mov	r2, r5
 800459e:	4638      	mov	r0, r7
 80045a0:	4b0e      	ldr	r3, [pc, #56]	@ (80045dc <_svfiprintf_r+0x1f4>)
 80045a2:	a904      	add	r1, sp, #16
 80045a4:	f3af 8000 	nop.w
 80045a8:	1c42      	adds	r2, r0, #1
 80045aa:	4606      	mov	r6, r0
 80045ac:	d1d6      	bne.n	800455c <_svfiprintf_r+0x174>
 80045ae:	89ab      	ldrh	r3, [r5, #12]
 80045b0:	065b      	lsls	r3, r3, #25
 80045b2:	f53f af2d 	bmi.w	8004410 <_svfiprintf_r+0x28>
 80045b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045b8:	e72c      	b.n	8004414 <_svfiprintf_r+0x2c>
 80045ba:	ab03      	add	r3, sp, #12
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	462a      	mov	r2, r5
 80045c0:	4638      	mov	r0, r7
 80045c2:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <_svfiprintf_r+0x1f4>)
 80045c4:	a904      	add	r1, sp, #16
 80045c6:	f000 f87d 	bl	80046c4 <_printf_i>
 80045ca:	e7ed      	b.n	80045a8 <_svfiprintf_r+0x1c0>
 80045cc:	08004c36 	.word	0x08004c36
 80045d0:	08004c3c 	.word	0x08004c3c
 80045d4:	08004c40 	.word	0x08004c40
 80045d8:	00000000 	.word	0x00000000
 80045dc:	08004331 	.word	0x08004331

080045e0 <_printf_common>:
 80045e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e4:	4616      	mov	r6, r2
 80045e6:	4698      	mov	r8, r3
 80045e8:	688a      	ldr	r2, [r1, #8]
 80045ea:	690b      	ldr	r3, [r1, #16]
 80045ec:	4607      	mov	r7, r0
 80045ee:	4293      	cmp	r3, r2
 80045f0:	bfb8      	it	lt
 80045f2:	4613      	movlt	r3, r2
 80045f4:	6033      	str	r3, [r6, #0]
 80045f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045fa:	460c      	mov	r4, r1
 80045fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004600:	b10a      	cbz	r2, 8004606 <_printf_common+0x26>
 8004602:	3301      	adds	r3, #1
 8004604:	6033      	str	r3, [r6, #0]
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	0699      	lsls	r1, r3, #26
 800460a:	bf42      	ittt	mi
 800460c:	6833      	ldrmi	r3, [r6, #0]
 800460e:	3302      	addmi	r3, #2
 8004610:	6033      	strmi	r3, [r6, #0]
 8004612:	6825      	ldr	r5, [r4, #0]
 8004614:	f015 0506 	ands.w	r5, r5, #6
 8004618:	d106      	bne.n	8004628 <_printf_common+0x48>
 800461a:	f104 0a19 	add.w	sl, r4, #25
 800461e:	68e3      	ldr	r3, [r4, #12]
 8004620:	6832      	ldr	r2, [r6, #0]
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	42ab      	cmp	r3, r5
 8004626:	dc2b      	bgt.n	8004680 <_printf_common+0xa0>
 8004628:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800462c:	6822      	ldr	r2, [r4, #0]
 800462e:	3b00      	subs	r3, #0
 8004630:	bf18      	it	ne
 8004632:	2301      	movne	r3, #1
 8004634:	0692      	lsls	r2, r2, #26
 8004636:	d430      	bmi.n	800469a <_printf_common+0xba>
 8004638:	4641      	mov	r1, r8
 800463a:	4638      	mov	r0, r7
 800463c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004640:	47c8      	blx	r9
 8004642:	3001      	adds	r0, #1
 8004644:	d023      	beq.n	800468e <_printf_common+0xae>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	6922      	ldr	r2, [r4, #16]
 800464a:	f003 0306 	and.w	r3, r3, #6
 800464e:	2b04      	cmp	r3, #4
 8004650:	bf14      	ite	ne
 8004652:	2500      	movne	r5, #0
 8004654:	6833      	ldreq	r3, [r6, #0]
 8004656:	f04f 0600 	mov.w	r6, #0
 800465a:	bf08      	it	eq
 800465c:	68e5      	ldreq	r5, [r4, #12]
 800465e:	f104 041a 	add.w	r4, r4, #26
 8004662:	bf08      	it	eq
 8004664:	1aed      	subeq	r5, r5, r3
 8004666:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800466a:	bf08      	it	eq
 800466c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004670:	4293      	cmp	r3, r2
 8004672:	bfc4      	itt	gt
 8004674:	1a9b      	subgt	r3, r3, r2
 8004676:	18ed      	addgt	r5, r5, r3
 8004678:	42b5      	cmp	r5, r6
 800467a:	d11a      	bne.n	80046b2 <_printf_common+0xd2>
 800467c:	2000      	movs	r0, #0
 800467e:	e008      	b.n	8004692 <_printf_common+0xb2>
 8004680:	2301      	movs	r3, #1
 8004682:	4652      	mov	r2, sl
 8004684:	4641      	mov	r1, r8
 8004686:	4638      	mov	r0, r7
 8004688:	47c8      	blx	r9
 800468a:	3001      	adds	r0, #1
 800468c:	d103      	bne.n	8004696 <_printf_common+0xb6>
 800468e:	f04f 30ff 	mov.w	r0, #4294967295
 8004692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004696:	3501      	adds	r5, #1
 8004698:	e7c1      	b.n	800461e <_printf_common+0x3e>
 800469a:	2030      	movs	r0, #48	@ 0x30
 800469c:	18e1      	adds	r1, r4, r3
 800469e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046a8:	4422      	add	r2, r4
 80046aa:	3302      	adds	r3, #2
 80046ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046b0:	e7c2      	b.n	8004638 <_printf_common+0x58>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4622      	mov	r2, r4
 80046b6:	4641      	mov	r1, r8
 80046b8:	4638      	mov	r0, r7
 80046ba:	47c8      	blx	r9
 80046bc:	3001      	adds	r0, #1
 80046be:	d0e6      	beq.n	800468e <_printf_common+0xae>
 80046c0:	3601      	adds	r6, #1
 80046c2:	e7d9      	b.n	8004678 <_printf_common+0x98>

080046c4 <_printf_i>:
 80046c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	7e0f      	ldrb	r7, [r1, #24]
 80046ca:	4691      	mov	r9, r2
 80046cc:	2f78      	cmp	r7, #120	@ 0x78
 80046ce:	4680      	mov	r8, r0
 80046d0:	460c      	mov	r4, r1
 80046d2:	469a      	mov	sl, r3
 80046d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046da:	d807      	bhi.n	80046ec <_printf_i+0x28>
 80046dc:	2f62      	cmp	r7, #98	@ 0x62
 80046de:	d80a      	bhi.n	80046f6 <_printf_i+0x32>
 80046e0:	2f00      	cmp	r7, #0
 80046e2:	f000 80d3 	beq.w	800488c <_printf_i+0x1c8>
 80046e6:	2f58      	cmp	r7, #88	@ 0x58
 80046e8:	f000 80ba 	beq.w	8004860 <_printf_i+0x19c>
 80046ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046f4:	e03a      	b.n	800476c <_printf_i+0xa8>
 80046f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046fa:	2b15      	cmp	r3, #21
 80046fc:	d8f6      	bhi.n	80046ec <_printf_i+0x28>
 80046fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004704 <_printf_i+0x40>)
 8004700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004704:	0800475d 	.word	0x0800475d
 8004708:	08004771 	.word	0x08004771
 800470c:	080046ed 	.word	0x080046ed
 8004710:	080046ed 	.word	0x080046ed
 8004714:	080046ed 	.word	0x080046ed
 8004718:	080046ed 	.word	0x080046ed
 800471c:	08004771 	.word	0x08004771
 8004720:	080046ed 	.word	0x080046ed
 8004724:	080046ed 	.word	0x080046ed
 8004728:	080046ed 	.word	0x080046ed
 800472c:	080046ed 	.word	0x080046ed
 8004730:	08004873 	.word	0x08004873
 8004734:	0800479b 	.word	0x0800479b
 8004738:	0800482d 	.word	0x0800482d
 800473c:	080046ed 	.word	0x080046ed
 8004740:	080046ed 	.word	0x080046ed
 8004744:	08004895 	.word	0x08004895
 8004748:	080046ed 	.word	0x080046ed
 800474c:	0800479b 	.word	0x0800479b
 8004750:	080046ed 	.word	0x080046ed
 8004754:	080046ed 	.word	0x080046ed
 8004758:	08004835 	.word	0x08004835
 800475c:	6833      	ldr	r3, [r6, #0]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6032      	str	r2, [r6, #0]
 8004764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004768:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800476c:	2301      	movs	r3, #1
 800476e:	e09e      	b.n	80048ae <_printf_i+0x1ea>
 8004770:	6833      	ldr	r3, [r6, #0]
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	1d19      	adds	r1, r3, #4
 8004776:	6031      	str	r1, [r6, #0]
 8004778:	0606      	lsls	r6, r0, #24
 800477a:	d501      	bpl.n	8004780 <_printf_i+0xbc>
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	e003      	b.n	8004788 <_printf_i+0xc4>
 8004780:	0645      	lsls	r5, r0, #25
 8004782:	d5fb      	bpl.n	800477c <_printf_i+0xb8>
 8004784:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004788:	2d00      	cmp	r5, #0
 800478a:	da03      	bge.n	8004794 <_printf_i+0xd0>
 800478c:	232d      	movs	r3, #45	@ 0x2d
 800478e:	426d      	negs	r5, r5
 8004790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004794:	230a      	movs	r3, #10
 8004796:	4859      	ldr	r0, [pc, #356]	@ (80048fc <_printf_i+0x238>)
 8004798:	e011      	b.n	80047be <_printf_i+0xfa>
 800479a:	6821      	ldr	r1, [r4, #0]
 800479c:	6833      	ldr	r3, [r6, #0]
 800479e:	0608      	lsls	r0, r1, #24
 80047a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047a4:	d402      	bmi.n	80047ac <_printf_i+0xe8>
 80047a6:	0649      	lsls	r1, r1, #25
 80047a8:	bf48      	it	mi
 80047aa:	b2ad      	uxthmi	r5, r5
 80047ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80047ae:	6033      	str	r3, [r6, #0]
 80047b0:	bf14      	ite	ne
 80047b2:	230a      	movne	r3, #10
 80047b4:	2308      	moveq	r3, #8
 80047b6:	4851      	ldr	r0, [pc, #324]	@ (80048fc <_printf_i+0x238>)
 80047b8:	2100      	movs	r1, #0
 80047ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047be:	6866      	ldr	r6, [r4, #4]
 80047c0:	2e00      	cmp	r6, #0
 80047c2:	bfa8      	it	ge
 80047c4:	6821      	ldrge	r1, [r4, #0]
 80047c6:	60a6      	str	r6, [r4, #8]
 80047c8:	bfa4      	itt	ge
 80047ca:	f021 0104 	bicge.w	r1, r1, #4
 80047ce:	6021      	strge	r1, [r4, #0]
 80047d0:	b90d      	cbnz	r5, 80047d6 <_printf_i+0x112>
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	d04b      	beq.n	800486e <_printf_i+0x1aa>
 80047d6:	4616      	mov	r6, r2
 80047d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80047dc:	fb03 5711 	mls	r7, r3, r1, r5
 80047e0:	5dc7      	ldrb	r7, [r0, r7]
 80047e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047e6:	462f      	mov	r7, r5
 80047e8:	42bb      	cmp	r3, r7
 80047ea:	460d      	mov	r5, r1
 80047ec:	d9f4      	bls.n	80047d8 <_printf_i+0x114>
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d10b      	bne.n	800480a <_printf_i+0x146>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	07df      	lsls	r7, r3, #31
 80047f6:	d508      	bpl.n	800480a <_printf_i+0x146>
 80047f8:	6923      	ldr	r3, [r4, #16]
 80047fa:	6861      	ldr	r1, [r4, #4]
 80047fc:	4299      	cmp	r1, r3
 80047fe:	bfde      	ittt	le
 8004800:	2330      	movle	r3, #48	@ 0x30
 8004802:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004806:	f106 36ff 	addle.w	r6, r6, #4294967295
 800480a:	1b92      	subs	r2, r2, r6
 800480c:	6122      	str	r2, [r4, #16]
 800480e:	464b      	mov	r3, r9
 8004810:	4621      	mov	r1, r4
 8004812:	4640      	mov	r0, r8
 8004814:	f8cd a000 	str.w	sl, [sp]
 8004818:	aa03      	add	r2, sp, #12
 800481a:	f7ff fee1 	bl	80045e0 <_printf_common>
 800481e:	3001      	adds	r0, #1
 8004820:	d14a      	bne.n	80048b8 <_printf_i+0x1f4>
 8004822:	f04f 30ff 	mov.w	r0, #4294967295
 8004826:	b004      	add	sp, #16
 8004828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	f043 0320 	orr.w	r3, r3, #32
 8004832:	6023      	str	r3, [r4, #0]
 8004834:	2778      	movs	r7, #120	@ 0x78
 8004836:	4832      	ldr	r0, [pc, #200]	@ (8004900 <_printf_i+0x23c>)
 8004838:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	6831      	ldr	r1, [r6, #0]
 8004840:	061f      	lsls	r7, r3, #24
 8004842:	f851 5b04 	ldr.w	r5, [r1], #4
 8004846:	d402      	bmi.n	800484e <_printf_i+0x18a>
 8004848:	065f      	lsls	r7, r3, #25
 800484a:	bf48      	it	mi
 800484c:	b2ad      	uxthmi	r5, r5
 800484e:	6031      	str	r1, [r6, #0]
 8004850:	07d9      	lsls	r1, r3, #31
 8004852:	bf44      	itt	mi
 8004854:	f043 0320 	orrmi.w	r3, r3, #32
 8004858:	6023      	strmi	r3, [r4, #0]
 800485a:	b11d      	cbz	r5, 8004864 <_printf_i+0x1a0>
 800485c:	2310      	movs	r3, #16
 800485e:	e7ab      	b.n	80047b8 <_printf_i+0xf4>
 8004860:	4826      	ldr	r0, [pc, #152]	@ (80048fc <_printf_i+0x238>)
 8004862:	e7e9      	b.n	8004838 <_printf_i+0x174>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	f023 0320 	bic.w	r3, r3, #32
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	e7f6      	b.n	800485c <_printf_i+0x198>
 800486e:	4616      	mov	r6, r2
 8004870:	e7bd      	b.n	80047ee <_printf_i+0x12a>
 8004872:	6833      	ldr	r3, [r6, #0]
 8004874:	6825      	ldr	r5, [r4, #0]
 8004876:	1d18      	adds	r0, r3, #4
 8004878:	6961      	ldr	r1, [r4, #20]
 800487a:	6030      	str	r0, [r6, #0]
 800487c:	062e      	lsls	r6, r5, #24
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	d501      	bpl.n	8004886 <_printf_i+0x1c2>
 8004882:	6019      	str	r1, [r3, #0]
 8004884:	e002      	b.n	800488c <_printf_i+0x1c8>
 8004886:	0668      	lsls	r0, r5, #25
 8004888:	d5fb      	bpl.n	8004882 <_printf_i+0x1be>
 800488a:	8019      	strh	r1, [r3, #0]
 800488c:	2300      	movs	r3, #0
 800488e:	4616      	mov	r6, r2
 8004890:	6123      	str	r3, [r4, #16]
 8004892:	e7bc      	b.n	800480e <_printf_i+0x14a>
 8004894:	6833      	ldr	r3, [r6, #0]
 8004896:	2100      	movs	r1, #0
 8004898:	1d1a      	adds	r2, r3, #4
 800489a:	6032      	str	r2, [r6, #0]
 800489c:	681e      	ldr	r6, [r3, #0]
 800489e:	6862      	ldr	r2, [r4, #4]
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 f859 	bl	8004958 <memchr>
 80048a6:	b108      	cbz	r0, 80048ac <_printf_i+0x1e8>
 80048a8:	1b80      	subs	r0, r0, r6
 80048aa:	6060      	str	r0, [r4, #4]
 80048ac:	6863      	ldr	r3, [r4, #4]
 80048ae:	6123      	str	r3, [r4, #16]
 80048b0:	2300      	movs	r3, #0
 80048b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048b6:	e7aa      	b.n	800480e <_printf_i+0x14a>
 80048b8:	4632      	mov	r2, r6
 80048ba:	4649      	mov	r1, r9
 80048bc:	4640      	mov	r0, r8
 80048be:	6923      	ldr	r3, [r4, #16]
 80048c0:	47d0      	blx	sl
 80048c2:	3001      	adds	r0, #1
 80048c4:	d0ad      	beq.n	8004822 <_printf_i+0x15e>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	079b      	lsls	r3, r3, #30
 80048ca:	d413      	bmi.n	80048f4 <_printf_i+0x230>
 80048cc:	68e0      	ldr	r0, [r4, #12]
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	4298      	cmp	r0, r3
 80048d2:	bfb8      	it	lt
 80048d4:	4618      	movlt	r0, r3
 80048d6:	e7a6      	b.n	8004826 <_printf_i+0x162>
 80048d8:	2301      	movs	r3, #1
 80048da:	4632      	mov	r2, r6
 80048dc:	4649      	mov	r1, r9
 80048de:	4640      	mov	r0, r8
 80048e0:	47d0      	blx	sl
 80048e2:	3001      	adds	r0, #1
 80048e4:	d09d      	beq.n	8004822 <_printf_i+0x15e>
 80048e6:	3501      	adds	r5, #1
 80048e8:	68e3      	ldr	r3, [r4, #12]
 80048ea:	9903      	ldr	r1, [sp, #12]
 80048ec:	1a5b      	subs	r3, r3, r1
 80048ee:	42ab      	cmp	r3, r5
 80048f0:	dcf2      	bgt.n	80048d8 <_printf_i+0x214>
 80048f2:	e7eb      	b.n	80048cc <_printf_i+0x208>
 80048f4:	2500      	movs	r5, #0
 80048f6:	f104 0619 	add.w	r6, r4, #25
 80048fa:	e7f5      	b.n	80048e8 <_printf_i+0x224>
 80048fc:	08004c47 	.word	0x08004c47
 8004900:	08004c58 	.word	0x08004c58

08004904 <memmove>:
 8004904:	4288      	cmp	r0, r1
 8004906:	b510      	push	{r4, lr}
 8004908:	eb01 0402 	add.w	r4, r1, r2
 800490c:	d902      	bls.n	8004914 <memmove+0x10>
 800490e:	4284      	cmp	r4, r0
 8004910:	4623      	mov	r3, r4
 8004912:	d807      	bhi.n	8004924 <memmove+0x20>
 8004914:	1e43      	subs	r3, r0, #1
 8004916:	42a1      	cmp	r1, r4
 8004918:	d008      	beq.n	800492c <memmove+0x28>
 800491a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800491e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004922:	e7f8      	b.n	8004916 <memmove+0x12>
 8004924:	4601      	mov	r1, r0
 8004926:	4402      	add	r2, r0
 8004928:	428a      	cmp	r2, r1
 800492a:	d100      	bne.n	800492e <memmove+0x2a>
 800492c:	bd10      	pop	{r4, pc}
 800492e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004936:	e7f7      	b.n	8004928 <memmove+0x24>

08004938 <_sbrk_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	2300      	movs	r3, #0
 800493c:	4d05      	ldr	r5, [pc, #20]	@ (8004954 <_sbrk_r+0x1c>)
 800493e:	4604      	mov	r4, r0
 8004940:	4608      	mov	r0, r1
 8004942:	602b      	str	r3, [r5, #0]
 8004944:	f7fd f98c 	bl	8001c60 <_sbrk>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_sbrk_r+0x1a>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_sbrk_r+0x1a>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	20001078 	.word	0x20001078

08004958 <memchr>:
 8004958:	4603      	mov	r3, r0
 800495a:	b510      	push	{r4, lr}
 800495c:	b2c9      	uxtb	r1, r1
 800495e:	4402      	add	r2, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	4618      	mov	r0, r3
 8004964:	d101      	bne.n	800496a <memchr+0x12>
 8004966:	2000      	movs	r0, #0
 8004968:	e003      	b.n	8004972 <memchr+0x1a>
 800496a:	7804      	ldrb	r4, [r0, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	428c      	cmp	r4, r1
 8004970:	d1f6      	bne.n	8004960 <memchr+0x8>
 8004972:	bd10      	pop	{r4, pc}

08004974 <_realloc_r>:
 8004974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004978:	4680      	mov	r8, r0
 800497a:	4615      	mov	r5, r2
 800497c:	460c      	mov	r4, r1
 800497e:	b921      	cbnz	r1, 800498a <_realloc_r+0x16>
 8004980:	4611      	mov	r1, r2
 8004982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004986:	f7ff bc47 	b.w	8004218 <_malloc_r>
 800498a:	b92a      	cbnz	r2, 8004998 <_realloc_r+0x24>
 800498c:	f7ff fbda 	bl	8004144 <_free_r>
 8004990:	2400      	movs	r4, #0
 8004992:	4620      	mov	r0, r4
 8004994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004998:	f000 f81a 	bl	80049d0 <_malloc_usable_size_r>
 800499c:	4285      	cmp	r5, r0
 800499e:	4606      	mov	r6, r0
 80049a0:	d802      	bhi.n	80049a8 <_realloc_r+0x34>
 80049a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80049a6:	d8f4      	bhi.n	8004992 <_realloc_r+0x1e>
 80049a8:	4629      	mov	r1, r5
 80049aa:	4640      	mov	r0, r8
 80049ac:	f7ff fc34 	bl	8004218 <_malloc_r>
 80049b0:	4607      	mov	r7, r0
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d0ec      	beq.n	8004990 <_realloc_r+0x1c>
 80049b6:	42b5      	cmp	r5, r6
 80049b8:	462a      	mov	r2, r5
 80049ba:	4621      	mov	r1, r4
 80049bc:	bf28      	it	cs
 80049be:	4632      	movcs	r2, r6
 80049c0:	f7ff fbb2 	bl	8004128 <memcpy>
 80049c4:	4621      	mov	r1, r4
 80049c6:	4640      	mov	r0, r8
 80049c8:	f7ff fbbc 	bl	8004144 <_free_r>
 80049cc:	463c      	mov	r4, r7
 80049ce:	e7e0      	b.n	8004992 <_realloc_r+0x1e>

080049d0 <_malloc_usable_size_r>:
 80049d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d4:	1f18      	subs	r0, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfbc      	itt	lt
 80049da:	580b      	ldrlt	r3, [r1, r0]
 80049dc:	18c0      	addlt	r0, r0, r3
 80049de:	4770      	bx	lr

080049e0 <_init>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr

080049ec <_fini>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	bf00      	nop
 80049f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	469e      	mov	lr, r3
 80049f6:	4770      	bx	lr
