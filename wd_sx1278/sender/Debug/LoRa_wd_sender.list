
LoRa_wd_sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c04  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003d14  08003d14  00004d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dbc  08003dbc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003dbc  08003dbc  00004dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dc4  08003dc4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc4  08003dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dc8  08003dc8  00004dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003dcc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000068  08003e34  00005068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08003e34  00005578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a96  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b36  00000000  00000000  0000bb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0000d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a7  00000000  00000000  0000de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018325  00000000  00000000  0000e3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097ab  00000000  00000000  000266ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084206  00000000  00000000  0002fe97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b409d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000267c  00000000  00000000  000b40e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000b675c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cfc 	.word	0x08003cfc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08003cfc 	.word	0x08003cfc

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b968 	b.w	8000438 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9d08      	ldr	r5, [sp, #32]
 8000186:	460c      	mov	r4, r1
 8000188:	2b00      	cmp	r3, #0
 800018a:	d14e      	bne.n	800022a <__udivmoddi4+0xaa>
 800018c:	4694      	mov	ip, r2
 800018e:	458c      	cmp	ip, r1
 8000190:	4686      	mov	lr, r0
 8000192:	fab2 f282 	clz	r2, r2
 8000196:	d962      	bls.n	800025e <__udivmoddi4+0xde>
 8000198:	b14a      	cbz	r2, 80001ae <__udivmoddi4+0x2e>
 800019a:	f1c2 0320 	rsb	r3, r2, #32
 800019e:	4091      	lsls	r1, r2
 80001a0:	fa20 f303 	lsr.w	r3, r0, r3
 80001a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001a8:	4319      	orrs	r1, r3
 80001aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001b6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ba:	fa1f f68c 	uxth.w	r6, ip
 80001be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001c6:	fb04 f106 	mul.w	r1, r4, r6
 80001ca:	4299      	cmp	r1, r3
 80001cc:	d90a      	bls.n	80001e4 <__udivmoddi4+0x64>
 80001ce:	eb1c 0303 	adds.w	r3, ip, r3
 80001d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80001d6:	f080 8110 	bcs.w	80003fa <__udivmoddi4+0x27a>
 80001da:	4299      	cmp	r1, r3
 80001dc:	f240 810d 	bls.w	80003fa <__udivmoddi4+0x27a>
 80001e0:	3c02      	subs	r4, #2
 80001e2:	4463      	add	r3, ip
 80001e4:	1a59      	subs	r1, r3, r1
 80001e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80001ea:	fb07 1110 	mls	r1, r7, r0, r1
 80001ee:	fb00 f606 	mul.w	r6, r0, r6
 80001f2:	fa1f f38e 	uxth.w	r3, lr
 80001f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fa:	429e      	cmp	r6, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f100 31ff 	add.w	r1, r0, #4294967295
 8000206:	f080 80fa 	bcs.w	80003fe <__udivmoddi4+0x27e>
 800020a:	429e      	cmp	r6, r3
 800020c:	f240 80f7 	bls.w	80003fe <__udivmoddi4+0x27e>
 8000210:	4463      	add	r3, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	1b9b      	subs	r3, r3, r6
 8000218:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800021c:	b11d      	cbz	r5, 8000226 <__udivmoddi4+0xa6>
 800021e:	40d3      	lsrs	r3, r2
 8000220:	2200      	movs	r2, #0
 8000222:	e9c5 3200 	strd	r3, r2, [r5]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d905      	bls.n	800023a <__udivmoddi4+0xba>
 800022e:	b10d      	cbz	r5, 8000234 <__udivmoddi4+0xb4>
 8000230:	e9c5 0100 	strd	r0, r1, [r5]
 8000234:	2100      	movs	r1, #0
 8000236:	4608      	mov	r0, r1
 8000238:	e7f5      	b.n	8000226 <__udivmoddi4+0xa6>
 800023a:	fab3 f183 	clz	r1, r3
 800023e:	2900      	cmp	r1, #0
 8000240:	d146      	bne.n	80002d0 <__udivmoddi4+0x150>
 8000242:	42a3      	cmp	r3, r4
 8000244:	d302      	bcc.n	800024c <__udivmoddi4+0xcc>
 8000246:	4290      	cmp	r0, r2
 8000248:	f0c0 80ee 	bcc.w	8000428 <__udivmoddi4+0x2a8>
 800024c:	1a86      	subs	r6, r0, r2
 800024e:	eb64 0303 	sbc.w	r3, r4, r3
 8000252:	2001      	movs	r0, #1
 8000254:	2d00      	cmp	r5, #0
 8000256:	d0e6      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000258:	e9c5 6300 	strd	r6, r3, [r5]
 800025c:	e7e3      	b.n	8000226 <__udivmoddi4+0xa6>
 800025e:	2a00      	cmp	r2, #0
 8000260:	f040 808f 	bne.w	8000382 <__udivmoddi4+0x202>
 8000264:	eba1 040c 	sub.w	r4, r1, ip
 8000268:	2101      	movs	r1, #1
 800026a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fbb4 f6f8 	udiv	r6, r4, r8
 8000276:	fb08 4416 	mls	r4, r8, r6, r4
 800027a:	fb07 f006 	mul.w	r0, r7, r6
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000286:	4298      	cmp	r0, r3
 8000288:	d908      	bls.n	800029c <__udivmoddi4+0x11c>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000292:	d202      	bcs.n	800029a <__udivmoddi4+0x11a>
 8000294:	4298      	cmp	r0, r3
 8000296:	f200 80cb 	bhi.w	8000430 <__udivmoddi4+0x2b0>
 800029a:	4626      	mov	r6, r4
 800029c:	1a1c      	subs	r4, r3, r0
 800029e:	fbb4 f0f8 	udiv	r0, r4, r8
 80002a2:	fb08 4410 	mls	r4, r8, r0, r4
 80002a6:	fb00 f707 	mul.w	r7, r0, r7
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	429f      	cmp	r7, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x148>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x146>
 80002c0:	429f      	cmp	r7, r3
 80002c2:	f200 80ae 	bhi.w	8000422 <__udivmoddi4+0x2a2>
 80002c6:	4620      	mov	r0, r4
 80002c8:	1bdb      	subs	r3, r3, r7
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	e7a5      	b.n	800021c <__udivmoddi4+0x9c>
 80002d0:	f1c1 0720 	rsb	r7, r1, #32
 80002d4:	408b      	lsls	r3, r1
 80002d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002da:	ea4c 0c03 	orr.w	ip, ip, r3
 80002de:	fa24 f607 	lsr.w	r6, r4, r7
 80002e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002e6:	fbb6 f8f9 	udiv	r8, r6, r9
 80002ea:	fa1f fe8c 	uxth.w	lr, ip
 80002ee:	fb09 6618 	mls	r6, r9, r8, r6
 80002f2:	fa20 f307 	lsr.w	r3, r0, r7
 80002f6:	408c      	lsls	r4, r1
 80002f8:	fa00 fa01 	lsl.w	sl, r0, r1
 80002fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000300:	431c      	orrs	r4, r3
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000308:	4298      	cmp	r0, r3
 800030a:	fa02 f201 	lsl.w	r2, r2, r1
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x1a6>
 8000310:	eb1c 0303 	adds.w	r3, ip, r3
 8000314:	f108 36ff 	add.w	r6, r8, #4294967295
 8000318:	f080 8081 	bcs.w	800041e <__udivmoddi4+0x29e>
 800031c:	4298      	cmp	r0, r3
 800031e:	d97e      	bls.n	800041e <__udivmoddi4+0x29e>
 8000320:	f1a8 0802 	sub.w	r8, r8, #2
 8000324:	4463      	add	r3, ip
 8000326:	1a1e      	subs	r6, r3, r0
 8000328:	fbb6 f3f9 	udiv	r3, r6, r9
 800032c:	fb09 6613 	mls	r6, r9, r3, r6
 8000330:	fb03 fe0e 	mul.w	lr, r3, lr
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800033a:	45a6      	cmp	lr, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x1d0>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f103 30ff 	add.w	r0, r3, #4294967295
 8000346:	d266      	bcs.n	8000416 <__udivmoddi4+0x296>
 8000348:	45a6      	cmp	lr, r4
 800034a:	d964      	bls.n	8000416 <__udivmoddi4+0x296>
 800034c:	3b02      	subs	r3, #2
 800034e:	4464      	add	r4, ip
 8000350:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000354:	fba0 8302 	umull	r8, r3, r0, r2
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	429c      	cmp	r4, r3
 800035e:	46c6      	mov	lr, r8
 8000360:	461e      	mov	r6, r3
 8000362:	d350      	bcc.n	8000406 <__udivmoddi4+0x286>
 8000364:	d04d      	beq.n	8000402 <__udivmoddi4+0x282>
 8000366:	b155      	cbz	r5, 800037e <__udivmoddi4+0x1fe>
 8000368:	ebba 030e 	subs.w	r3, sl, lr
 800036c:	eb64 0406 	sbc.w	r4, r4, r6
 8000370:	fa04 f707 	lsl.w	r7, r4, r7
 8000374:	40cb      	lsrs	r3, r1
 8000376:	431f      	orrs	r7, r3
 8000378:	40cc      	lsrs	r4, r1
 800037a:	e9c5 7400 	strd	r7, r4, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	e751      	b.n	8000226 <__udivmoddi4+0xa6>
 8000382:	fa0c fc02 	lsl.w	ip, ip, r2
 8000386:	f1c2 0320 	rsb	r3, r2, #32
 800038a:	40d9      	lsrs	r1, r3
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa00 fe02 	lsl.w	lr, r0, r2
 8000398:	fbb1 f0f8 	udiv	r0, r1, r8
 800039c:	fb08 1110 	mls	r1, r8, r0, r1
 80003a0:	4094      	lsls	r4, r2
 80003a2:	431c      	orrs	r4, r3
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	0c23      	lsrs	r3, r4, #16
 80003aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ae:	fb00 f107 	mul.w	r1, r0, r7
 80003b2:	4299      	cmp	r1, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x248>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 36ff 	add.w	r6, r0, #4294967295
 80003be:	d22c      	bcs.n	800041a <__udivmoddi4+0x29a>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d92a      	bls.n	800041a <__udivmoddi4+0x29a>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4463      	add	r3, ip
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	fbb3 f1f8 	udiv	r1, r3, r8
 80003ce:	fb08 3311 	mls	r3, r8, r1, r3
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d8:	fb01 f307 	mul.w	r3, r1, r7
 80003dc:	42a3      	cmp	r3, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x272>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f101 36ff 	add.w	r6, r1, #4294967295
 80003e8:	d213      	bcs.n	8000412 <__udivmoddi4+0x292>
 80003ea:	42a3      	cmp	r3, r4
 80003ec:	d911      	bls.n	8000412 <__udivmoddi4+0x292>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	1ae4      	subs	r4, r4, r3
 80003f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f8:	e73b      	b.n	8000272 <__udivmoddi4+0xf2>
 80003fa:	4604      	mov	r4, r0
 80003fc:	e6f2      	b.n	80001e4 <__udivmoddi4+0x64>
 80003fe:	4608      	mov	r0, r1
 8000400:	e708      	b.n	8000214 <__udivmoddi4+0x94>
 8000402:	45c2      	cmp	sl, r8
 8000404:	d2af      	bcs.n	8000366 <__udivmoddi4+0x1e6>
 8000406:	ebb8 0e02 	subs.w	lr, r8, r2
 800040a:	eb63 060c 	sbc.w	r6, r3, ip
 800040e:	3801      	subs	r0, #1
 8000410:	e7a9      	b.n	8000366 <__udivmoddi4+0x1e6>
 8000412:	4631      	mov	r1, r6
 8000414:	e7ed      	b.n	80003f2 <__udivmoddi4+0x272>
 8000416:	4603      	mov	r3, r0
 8000418:	e79a      	b.n	8000350 <__udivmoddi4+0x1d0>
 800041a:	4630      	mov	r0, r6
 800041c:	e7d4      	b.n	80003c8 <__udivmoddi4+0x248>
 800041e:	46b0      	mov	r8, r6
 8000420:	e781      	b.n	8000326 <__udivmoddi4+0x1a6>
 8000422:	4463      	add	r3, ip
 8000424:	3802      	subs	r0, #2
 8000426:	e74f      	b.n	80002c8 <__udivmoddi4+0x148>
 8000428:	4606      	mov	r6, r0
 800042a:	4623      	mov	r3, r4
 800042c:	4608      	mov	r0, r1
 800042e:	e711      	b.n	8000254 <__udivmoddi4+0xd4>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	e732      	b.n	800029c <__udivmoddi4+0x11c>
 8000436:	bf00      	nop

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	78fa      	ldrb	r2, [r7, #3]
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fbd0 	bl	8000bf6 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fbeb 	bl	8000c36 <SX1278_hw_SPIReadByte>
 8000460:	4603      	mov	r3, r0
 8000462:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fb88 	bl	8000b80 <SX1278_hw_SetNSS>
	return tmp;
 8000470:	7bfb      	ldrb	r3, [r7, #15]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	460b      	mov	r3, r1
 8000484:	70fb      	strb	r3, [r7, #3]
 8000486:	4613      	mov	r3, r2
 8000488:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fb75 	bl	8000b80 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	4610      	mov	r0, r2
 80004a6:	f000 fba6 	bl	8000bf6 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	78ba      	ldrb	r2, [r7, #2]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fb9f 	bl	8000bf6 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fb5e 	bl	8000b80 <SX1278_hw_SetNSS>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	607a      	str	r2, [r7, #4]
 80004d6:	461a      	mov	r2, r3
 80004d8:	460b      	mov	r3, r1
 80004da:	72fb      	strb	r3, [r7, #11]
 80004dc:	4613      	mov	r3, r2
 80004de:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004e0:	7abb      	ldrb	r3, [r7, #10]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d927      	bls.n	8000536 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fb47 	bl	8000b80 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	7afa      	ldrb	r2, [r7, #11]
 80004f8:	4611      	mov	r1, r2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fb7b 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000500:	2300      	movs	r3, #0
 8000502:	75fb      	strb	r3, [r7, #23]
 8000504:	e00c      	b.n	8000520 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6819      	ldr	r1, [r3, #0]
 800050a:	7dfb      	ldrb	r3, [r7, #23]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	18d4      	adds	r4, r2, r3
 8000510:	4608      	mov	r0, r1
 8000512:	f000 fb90 	bl	8000c36 <SX1278_hw_SPIReadByte>
 8000516:	4603      	mov	r3, r0
 8000518:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800051a:	7dfb      	ldrb	r3, [r7, #23]
 800051c:	3301      	adds	r3, #1
 800051e:	75fb      	strb	r3, [r7, #23]
 8000520:	7dfa      	ldrb	r2, [r7, #23]
 8000522:	7abb      	ldrb	r3, [r7, #10]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3ee      	bcc.n	8000506 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fb26 	bl	8000b80 <SX1278_hw_SetNSS>
 8000534:	e000      	b.n	8000538 <SX1278_SPIBurstRead+0x6c>
		return;
 8000536:	bf00      	nop
	}
}
 8000538:	371c      	adds	r7, #28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd90      	pop	{r4, r7, pc}

0800053e <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	607a      	str	r2, [r7, #4]
 8000548:	461a      	mov	r2, r3
 800054a:	460b      	mov	r3, r1
 800054c:	72fb      	strb	r3, [r7, #11]
 800054e:	4613      	mov	r3, r2
 8000550:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000552:	7abb      	ldrb	r3, [r7, #10]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d929      	bls.n	80005ac <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fb0e 	bl	8000b80 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	7afb      	ldrb	r3, [r7, #11]
 800056a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	4610      	mov	r0, r2
 8000574:	f000 fb3f 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	75fb      	strb	r3, [r7, #23]
 800057c:	e00b      	b.n	8000596 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	f000 fb33 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000590:	7dfb      	ldrb	r3, [r7, #23]
 8000592:	3301      	adds	r3, #1
 8000594:	75fb      	strb	r3, [r7, #23]
 8000596:	7dfa      	ldrb	r2, [r7, #23]
 8000598:	7abb      	ldrb	r3, [r7, #10]
 800059a:	429a      	cmp	r2, r3
 800059c:	d3ef      	bcc.n	800057e <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2101      	movs	r1, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 faeb 	bl	8000b80 <SX1278_hw_SetNSS>
 80005aa:	e000      	b.n	80005ae <SX1278_SPIBurstWrite+0x70>
		return;
 80005ac:	bf00      	nop
	}
}
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f90d 	bl	80007dc <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 fb5d 	bl	8000c82 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f917 	bl	80007fc <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	f04f 0100 	mov.w	r1, #0
 80005dc:	04d9      	lsls	r1, r3, #19
 80005de:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005e2:	04d0      	lsls	r0, r2, #19
 80005e4:	4a6f      	ldr	r2, [pc, #444]	@ (80007a4 <SX1278_config+0x1f0>)
 80005e6:	f04f 0300 	mov.w	r3, #0
 80005ea:	f7ff fdb1 	bl	8000150 <__aeabi_uldivmod>
 80005ee:	4602      	mov	r2, r0
 80005f0:	460b      	mov	r3, r1
 80005f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80005f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005fa:	f04f 0200 	mov.w	r2, #0
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	0c02      	lsrs	r2, r0, #16
 8000604:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000608:	0c0b      	lsrs	r3, r1, #16
 800060a:	b2d3      	uxtb	r3, r2
 800060c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800060e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	0a02      	lsrs	r2, r0, #8
 800061c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000620:	0a0b      	lsrs	r3, r1, #8
 8000622:	b2d3      	uxtb	r3, r2
 8000624:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000626:	7c3b      	ldrb	r3, [r7, #16]
 8000628:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800062a:	f107 020c 	add.w	r2, r7, #12
 800062e:	2303      	movs	r3, #3
 8000630:	2106      	movs	r1, #6
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ff83 	bl	800053e <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000638:	2234      	movs	r2, #52	@ 0x34
 800063a:	2139      	movs	r1, #57	@ 0x39
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ff1c 	bl	800047a <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7c1b      	ldrb	r3, [r3, #16]
 8000646:	461a      	mov	r2, r3
 8000648:	4b57      	ldr	r3, [pc, #348]	@ (80007a8 <SX1278_config+0x1f4>)
 800064a:	5c9b      	ldrb	r3, [r3, r2]
 800064c:	461a      	mov	r2, r3
 800064e:	2109      	movs	r1, #9
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff12 	bl	800047a <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000656:	220b      	movs	r2, #11
 8000658:	210b      	movs	r1, #11
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff ff0d 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000660:	2223      	movs	r2, #35	@ 0x23
 8000662:	210c      	movs	r1, #12
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ff08 	bl	800047a <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7c5b      	ldrb	r3, [r3, #17]
 800066e:	461a      	mov	r2, r3
 8000670:	4b4e      	ldr	r3, [pc, #312]	@ (80007ac <SX1278_config+0x1f8>)
 8000672:	5c9b      	ldrb	r3, [r3, r2]
 8000674:	2b06      	cmp	r3, #6
 8000676:	d147      	bne.n	8000708 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7c9b      	ldrb	r3, [r3, #18]
 800067c:	461a      	mov	r2, r3
 800067e:	4b4c      	ldr	r3, [pc, #304]	@ (80007b0 <SX1278_config+0x1fc>)
 8000680:	5c9b      	ldrb	r3, [r3, r2]
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7cdb      	ldrb	r3, [r3, #19]
 800068a:	4619      	mov	r1, r3
 800068c:	4b49      	ldr	r3, [pc, #292]	@ (80007b4 <SX1278_config+0x200>)
 800068e:	5c5b      	ldrb	r3, [r3, r1]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000698:	3301      	adds	r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	211d      	movs	r1, #29
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff feea 	bl	800047a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7c5b      	ldrb	r3, [r3, #17]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b3f      	ldr	r3, [pc, #252]	@ (80007ac <SX1278_config+0x1f8>)
 80006ae:	5c9b      	ldrb	r3, [r3, r2]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7d1b      	ldrb	r3, [r3, #20]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4b3f      	ldr	r3, [pc, #252]	@ (80007b8 <SX1278_config+0x204>)
 80006bc:	5c5b      	ldrb	r3, [r3, r1]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4413      	add	r3, r2
 80006c4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006c6:	3303      	adds	r3, #3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	211e      	movs	r1, #30
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff fed3 	bl	800047a <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006d4:	2131      	movs	r1, #49	@ 0x31
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff feb0 	bl	800043c <SX1278_SPIRead>
 80006dc:	4603      	mov	r3, r0
 80006de:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	f023 0307 	bic.w	r3, r3, #7
 80006e6:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f043 0305 	orr.w	r3, r3, #5
 80006ee:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	461a      	mov	r2, r3
 80006f4:	2131      	movs	r1, #49	@ 0x31
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff febf 	bl	800047a <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80006fc:	220c      	movs	r2, #12
 80006fe:	2137      	movs	r1, #55	@ 0x37
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff feba 	bl	800047a <SX1278_SPIWrite>
 8000706:	e029      	b.n	800075c <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7c9b      	ldrb	r3, [r3, #18]
 800070c:	461a      	mov	r2, r3
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <SX1278_config+0x1fc>)
 8000710:	5c9b      	ldrb	r3, [r3, r2]
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	7cdb      	ldrb	r3, [r3, #19]
 800071a:	4619      	mov	r1, r3
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <SX1278_config+0x200>)
 800071e:	5c5b      	ldrb	r3, [r3, r1]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000724:	4413      	add	r3, r2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	211d      	movs	r1, #29
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fea4 	bl	800047a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7c5b      	ldrb	r3, [r3, #17]
 8000736:	461a      	mov	r2, r3
 8000738:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <SX1278_config+0x1f8>)
 800073a:	5c9b      	ldrb	r3, [r3, r2]
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7d1b      	ldrb	r3, [r3, #20]
 8000744:	4619      	mov	r1, r3
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <SX1278_config+0x204>)
 8000748:	5c5b      	ldrb	r3, [r3, r1]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	211e      	movs	r1, #30
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fe8f 	bl	800047a <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800075c:	2204      	movs	r2, #4
 800075e:	2126      	movs	r1, #38	@ 0x26
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fe8a 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000766:	2208      	movs	r2, #8
 8000768:	211f      	movs	r1, #31
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fe85 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe80 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800077a:	2208      	movs	r2, #8
 800077c:	2121      	movs	r1, #33	@ 0x21
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe7b 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000784:	2201      	movs	r2, #1
 8000786:	2141      	movs	r1, #65	@ 0x41
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fe76 	bl	800047a <SX1278_SPIWrite>
	module->readBytes = 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 f810 	bl	80007bc <SX1278_standby>
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	01e84800 	.word	0x01e84800
 80007a8:	08003d44 	.word	0x08003d44
 80007ac:	08003d48 	.word	0x08003d48
 80007b0:	08003d50 	.word	0x08003d50
 80007b4:	08003d5c 	.word	0x08003d5c
 80007b8:	08003d60 	.word	0x08003d60

080007bc <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007c4:	2209      	movs	r2, #9
 80007c6:	2101      	movs	r1, #1
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff fe56 	bl	800047a <SX1278_SPIWrite>
	module->status = STANDBY;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2201      	movs	r2, #1
 80007d2:	759a      	strb	r2, [r3, #22]
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80007e4:	2208      	movs	r2, #8
 80007e6:	2101      	movs	r1, #1
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fe46 	bl	800047a <SX1278_SPIWrite>
	module->status = SLEEP;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	759a      	strb	r2, [r3, #22]
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000804:	2288      	movs	r2, #136	@ 0x88
 8000806:	2101      	movs	r1, #1
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff fe36 	bl	800047a <SX1278_SPIWrite>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800081e:	22ff      	movs	r2, #255	@ 0xff
 8000820:	2112      	movs	r1, #18
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff fe29 	bl	800047a <SX1278_SPIWrite>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	460b      	mov	r3, r1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	7afa      	ldrb	r2, [r7, #11]
 8000842:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f7ff feb5 	bl	80005b4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800084a:	2284      	movs	r2, #132	@ 0x84
 800084c:	214d      	movs	r1, #77	@ 0x4d
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f7ff fe13 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000854:	22ff      	movs	r2, #255	@ 0xff
 8000856:	2124      	movs	r1, #36	@ 0x24
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff fe0e 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800085e:	2201      	movs	r2, #1
 8000860:	2140      	movs	r1, #64	@ 0x40
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f7ff fe09 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000868:	223f      	movs	r2, #63	@ 0x3f
 800086a:	2111      	movs	r1, #17
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff fe04 	bl	800047a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f7ff ffcf 	bl	8000816 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000878:	7afb      	ldrb	r3, [r7, #11]
 800087a:	461a      	mov	r2, r3
 800087c:	2122      	movs	r1, #34	@ 0x22
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fdfb 	bl	800047a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000884:	210f      	movs	r1, #15
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff fdd8 	bl	800043c <SX1278_SPIRead>
 800088c:	4603      	mov	r3, r0
 800088e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	461a      	mov	r2, r3
 8000894:	210d      	movs	r1, #13
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff fdef 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800089c:	228d      	movs	r2, #141	@ 0x8d
 800089e:	2101      	movs	r1, #1
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fdea 	bl	800047a <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008ae:	2118      	movs	r1, #24
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff fdc3 	bl	800043c <SX1278_SPIRead>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d104      	bne.n	80008ca <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2203      	movs	r2, #3
 80008c4:	759a      	strb	r2, [r3, #22]
			return 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e013      	b.n	80008f2 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d109      	bne.n	80008ea <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f967 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff fe67 	bl	80005b4 <SX1278_config>
			return 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e003      	b.n	80008f2 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 f9c9 	bl	8000c82 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008f0:	e7dd      	b.n	80008ae <SX1278_LoRaEntryRx+0x7e>
	}
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f9c6 	bl	8000c98 <SX1278_hw_GetDIO0>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d030      	beq.n	8000974 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3317      	adds	r3, #23
 8000916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fa14 	bl	8002d4a <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000922:	2110      	movs	r1, #16
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fd89 	bl	800043c <SX1278_SPIRead>
 800092a:	4603      	mov	r3, r0
 800092c:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	461a      	mov	r2, r3
 8000932:	210d      	movs	r1, #13
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fda0 	bl	800047a <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7c5b      	ldrb	r3, [r3, #17]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7d5b      	ldrb	r3, [r3, #21]
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e005      	b.n	8000956 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800094a:	2113      	movs	r1, #19
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fd75 	bl	800043c <SX1278_SPIRead>
 8000952:	4603      	mov	r3, r0
 8000954:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f103 0217 	add.w	r2, r3, #23
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	2100      	movs	r1, #0
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fdb3 	bl	80004cc <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff51 	bl	8000816 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	460b      	mov	r3, r1
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	7afa      	ldrb	r2, [r7, #11]
 8000994:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f7ff fe0c 	bl	80005b4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800099c:	2287      	movs	r2, #135	@ 0x87
 800099e:	214d      	movs	r1, #77	@ 0x4d
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff fd6a 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009a6:	2200      	movs	r2, #0
 80009a8:	2124      	movs	r1, #36	@ 0x24
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fd65 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009b0:	2241      	movs	r2, #65	@ 0x41
 80009b2:	2140      	movs	r1, #64	@ 0x40
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fd60 	bl	800047a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f7ff ff2b 	bl	8000816 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009c0:	22f7      	movs	r2, #247	@ 0xf7
 80009c2:	2111      	movs	r1, #17
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f7ff fd58 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009ca:	7afb      	ldrb	r3, [r7, #11]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2122      	movs	r1, #34	@ 0x22
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fd52 	bl	800047a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009d6:	210e      	movs	r1, #14
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fd2f 	bl	800043c <SX1278_SPIRead>
 80009de:	4603      	mov	r3, r0
 80009e0:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	461a      	mov	r2, r3
 80009e6:	210d      	movs	r1, #13
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f7ff fd46 	bl	800047a <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80009ee:	2122      	movs	r1, #34	@ 0x22
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff fd23 	bl	800043c <SX1278_SPIRead>
 80009f6:	4603      	mov	r3, r0
 80009f8:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80009fa:	7dba      	ldrb	r2, [r7, #22]
 80009fc:	7afb      	ldrb	r3, [r7, #11]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d104      	bne.n	8000a0c <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e00e      	b.n	8000a2a <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1ea      	bne.n	80009ee <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f8c6 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff fdc6 	bl	80005b4 <SX1278_config>
			return 0;
 8000a28:	2300      	movs	r3, #0
		}
	}
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	2100      	movs	r1, #0
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fd78 	bl	800053e <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a4e:	228b      	movs	r2, #139	@ 0x8b
 8000a50:	2101      	movs	r1, #1
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fd11 	bl	800047a <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f91b 	bl	8000c98 <SX1278_hw_GetDIO0>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00b      	beq.n	8000a80 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a68:	2112      	movs	r1, #18
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff fce6 	bl	800043c <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fed0 	bl	8000816 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fea0 	bl	80007bc <SX1278_standby>
			return 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e013      	b.n	8000aa8 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d109      	bne.n	8000aa0 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f88c 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff fd8c 	bl	80005b4 <SX1278_config>
			return 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e003      	b.n	8000aa8 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 f8ee 	bl	8000c82 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000aa6:	e7d7      	b.n	8000a58 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f848 	bl	8000b56 <SX1278_hw_init>
	module->frequency = frequency;
 8000ac6:	68f9      	ldr	r1, [r7, #12]
 8000ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000acc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	7e3a      	ldrb	r2, [r7, #24]
 8000ad4:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	7f3a      	ldrb	r2, [r7, #28]
 8000ada:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ae2:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000aea:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000af2:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000afa:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff fd59 	bl	80005b4 <SX1278_config>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	4613      	mov	r3, r2
 8000b16:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d003      	beq.n	8000b2c <SX1278_read+0x22>
		length = module->readBytes;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b2a:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3317      	adds	r3, #23
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	4619      	mov	r1, r3
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f002 f984 	bl	8002e42 <memcpy>
	rxBuf[length] = '\0';
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	4413      	add	r3, r2
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000b5e:	2101      	movs	r1, #1
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f80d 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6858      	ldr	r0, [r3, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	4619      	mov	r1, r3
 8000b74:	f000 ff61 	bl	8001a3a <HAL_GPIO_WritePin>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6958      	ldr	r0, [r3, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	b299      	uxth	r1, r3
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	f000 ff4a 	bl	8001a3a <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffe1 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6858      	ldr	r0, [r3, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f000 ff35 	bl	8001a3a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 f856 	bl	8000c82 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6858      	ldr	r0, [r3, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	2201      	movs	r2, #1
 8000be2:	4619      	mov	r1, r3
 8000be4:	f000 ff29 	bl	8001a3a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000be8:	2064      	movs	r0, #100	@ 0x64
 8000bea:	f000 f84a 	bl	8000c82 <SX1278_hw_DelayMs>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ffbb 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6998      	ldr	r0, [r3, #24]
 8000c0e:	1cf9      	adds	r1, r7, #3
 8000c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c14:	2201      	movs	r2, #1
 8000c16:	f001 fbad 	bl	8002374 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c1a:	bf00      	nop
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fe94 	bl	800294e <HAL_SPI_GetState>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d1f7      	bne.n	8000c1c <SX1278_hw_SPICommand+0x26>
		;
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af02      	add	r7, sp, #8
 8000c3c:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff99 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6998      	ldr	r0, [r3, #24]
 8000c52:	f107 020e 	add.w	r2, r7, #14
 8000c56:	f107 010f 	add.w	r1, r7, #15
 8000c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	f001 fccb 	bl	80025fc <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c66:	bf00      	nop
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fe6e 	bl	800294e <HAL_SPI_GetState>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d1f7      	bne.n	8000c68 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 fc08 	bl	80014a0 <HAL_Delay>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	4619      	mov	r1, r3
 8000cac:	4610      	mov	r0, r2
 8000cae:	f000 fead 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	bf0c      	ite	eq
 8000cb8:	2301      	moveq	r3, #1
 8000cba:	2300      	movne	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cdc:	4b41      	ldr	r3, [pc, #260]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a40      	ldr	r2, [pc, #256]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000cfa:	f043 0320 	orr.w	r3, r3, #32
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b38      	ldr	r3, [pc, #224]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0320 	and.w	r3, r3, #32
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4b35      	ldr	r3, [pc, #212]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a34      	ldr	r2, [pc, #208]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a2e      	ldr	r2, [pc, #184]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d42:	4829      	ldr	r0, [pc, #164]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d44:	f000 fe79 	bl	8001a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4827      	ldr	r0, [pc, #156]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d4e:	f000 fe74 	bl	8001a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2101      	movs	r1, #1
 8000d56:	4826      	ldr	r0, [pc, #152]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000d58:	f000 fe6f 	bl	8001a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	481c      	ldr	r0, [pc, #112]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d76:	f000 fcc5 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4816      	ldr	r0, [pc, #88]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d92:	f000 fcb7 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000d96:	2301      	movs	r3, #1
 8000d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	4810      	ldr	r0, [pc, #64]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000dae:	f000 fca9 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000db2:	2302      	movs	r3, #2
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_GPIO_Init+0x12c>)
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480a      	ldr	r0, [pc, #40]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000dc6:	f000 fc9d 	bl	8001704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2007      	movs	r0, #7
 8000dd0:	f000 fc61 	bl	8001696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000dd4:	2007      	movs	r0, #7
 8000dd6:	f000 fc7a 	bl	80016ce <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	10110000 	.word	0x10110000

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfe:	f000 faed 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e02:	f000 f8ef 	bl	8000fe4 <SystemClock_Config>

  /* USER CODE END SysInit */


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e06:	f7ff ff5f 	bl	8000cc8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e0a:	f000 f937 	bl	800107c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  master = 1;
 8000e0e:	4b66      	ldr	r3, [pc, #408]	@ (8000fa8 <main+0x1b0>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]

  control_val++;
 8000e14:	4b65      	ldr	r3, [pc, #404]	@ (8000fac <main+0x1b4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a64      	ldr	r2, [pc, #400]	@ (8000fac <main+0x1b4>)
 8000e1c:	6013      	str	r3, [r2, #0]
  //initialize LoRa module
  	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000e1e:	4b64      	ldr	r3, [pc, #400]	@ (8000fb0 <main+0x1b8>)
 8000e20:	4a64      	ldr	r2, [pc, #400]	@ (8000fb4 <main+0x1bc>)
 8000e22:	60da      	str	r2, [r3, #12]
  	SX1278_hw.dio0.pin = DIO0_Pin;
 8000e24:	4b62      	ldr	r3, [pc, #392]	@ (8000fb0 <main+0x1b8>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	609a      	str	r2, [r3, #8]
  	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000e2a:	4b61      	ldr	r3, [pc, #388]	@ (8000fb0 <main+0x1b8>)
 8000e2c:	4a62      	ldr	r2, [pc, #392]	@ (8000fb8 <main+0x1c0>)
 8000e2e:	615a      	str	r2, [r3, #20]
  	SX1278_hw.nss.pin = NSS_Pin;
 8000e30:	4b5f      	ldr	r3, [pc, #380]	@ (8000fb0 <main+0x1b8>)
 8000e32:	2210      	movs	r2, #16
 8000e34:	611a      	str	r2, [r3, #16]
  	SX1278_hw.reset.port = RST_GPIO_Port;
 8000e36:	4b5e      	ldr	r3, [pc, #376]	@ (8000fb0 <main+0x1b8>)
 8000e38:	4a5e      	ldr	r2, [pc, #376]	@ (8000fb4 <main+0x1bc>)
 8000e3a:	605a      	str	r2, [r3, #4]
  	SX1278_hw.reset.pin = RST_Pin;
 8000e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb0 <main+0x1b8>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	601a      	str	r2, [r3, #0]
  	SX1278_hw.spi = &hspi1;
 8000e42:	4b5b      	ldr	r3, [pc, #364]	@ (8000fb0 <main+0x1b8>)
 8000e44:	4a5d      	ldr	r2, [pc, #372]	@ (8000fbc <main+0x1c4>)
 8000e46:	619a      	str	r2, [r3, #24]

  	SX1278.hw = &SX1278_hw;
 8000e48:	4b5d      	ldr	r3, [pc, #372]	@ (8000fc0 <main+0x1c8>)
 8000e4a:	4a59      	ldr	r2, [pc, #356]	@ (8000fb0 <main+0x1b8>)
 8000e4c:	601a      	str	r2, [r3, #0]

  	control_val++;
 8000e4e:	4b57      	ldr	r3, [pc, #348]	@ (8000fac <main+0x1b4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a55      	ldr	r2, [pc, #340]	@ (8000fac <main+0x1b4>)
 8000e56:	6013      	str	r3, [r2, #0]
  	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000e58:	230a      	movs	r3, #10
 8000e5a:	9305      	str	r3, [sp, #20]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9304      	str	r3, [sp, #16]
 8000e60:	2300      	movs	r3, #0
 8000e62:	9303      	str	r3, [sp, #12]
 8000e64:	2307      	movs	r3, #7
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	a34b      	add	r3, pc, #300	@ (adr r3, 8000fa0 <main+0x1a8>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	4852      	ldr	r0, [pc, #328]	@ (8000fc0 <main+0x1c8>)
 8000e78:	f7ff fe1a 	bl	8000ab0 <SX1278_init>
  	SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  	control_val++;
 8000e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8000fac <main+0x1b4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a4a      	ldr	r2, [pc, #296]	@ (8000fac <main+0x1b4>)
 8000e84:	6013      	str	r3, [r2, #0]


  	if (master == 1) {
 8000e86:	4b48      	ldr	r3, [pc, #288]	@ (8000fa8 <main+0x1b0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d10f      	bne.n	8000eae <main+0xb6>
  			ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000e8e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e92:	2110      	movs	r1, #16
 8000e94:	484a      	ldr	r0, [pc, #296]	@ (8000fc0 <main+0x1c8>)
 8000e96:	f7ff fd74 	bl	8000982 <SX1278_LoRaEntryTx>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a49      	ldr	r2, [pc, #292]	@ (8000fc4 <main+0x1cc>)
 8000e9e:	6013      	str	r3, [r2, #0]
  			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea6:	4848      	ldr	r0, [pc, #288]	@ (8000fc8 <main+0x1d0>)
 8000ea8:	f000 fdc7 	bl	8001a3a <HAL_GPIO_WritePin>
 8000eac:	e00e      	b.n	8000ecc <main+0xd4>

  		} else {
  			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000eae:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	4842      	ldr	r0, [pc, #264]	@ (8000fc0 <main+0x1c8>)
 8000eb6:	f7ff fcbb 	bl	8000830 <SX1278_LoRaEntryRx>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a41      	ldr	r2, [pc, #260]	@ (8000fc4 <main+0x1cc>)
 8000ebe:	6013      	str	r3, [r2, #0]
  			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec6:	4840      	ldr	r0, [pc, #256]	@ (8000fc8 <main+0x1d0>)
 8000ec8:	f000 fdb7 	bl	8001a3a <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (master == 1) {
 8000ecc:	4b36      	ldr	r3, [pc, #216]	@ (8000fa8 <main+0x1b0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d132      	bne.n	8000f3a <main+0x142>

	  	  			HAL_Delay(1000);
 8000ed4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ed8:	f000 fae2 	bl	80014a0 <HAL_Delay>

	  	  			message_length = sprintf(buffer, "Hello %d", message);
 8000edc:	4b3b      	ldr	r3, [pc, #236]	@ (8000fcc <main+0x1d4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	493b      	ldr	r1, [pc, #236]	@ (8000fd0 <main+0x1d8>)
 8000ee4:	483b      	ldr	r0, [pc, #236]	@ (8000fd4 <main+0x1dc>)
 8000ee6:	f001 fecd 	bl	8002c84 <siprintf>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a3a      	ldr	r2, [pc, #232]	@ (8000fd8 <main+0x1e0>)
 8000eee:	6013      	str	r3, [r2, #0]
	  	  			ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000ef0:	4b39      	ldr	r3, [pc, #228]	@ (8000fd8 <main+0x1e0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000efa:	4619      	mov	r1, r3
 8000efc:	4830      	ldr	r0, [pc, #192]	@ (8000fc0 <main+0x1c8>)
 8000efe:	f7ff fd40 	bl	8000982 <SX1278_LoRaEntryTx>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc4 <main+0x1cc>)
 8000f06:	6013      	str	r3, [r2, #0]
	  	  			control_val = 0;
 8000f08:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <main+0x1b4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
	  	  			ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 8000f0e:	4b32      	ldr	r3, [pc, #200]	@ (8000fd8 <main+0x1e0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f18:	492e      	ldr	r1, [pc, #184]	@ (8000fd4 <main+0x1dc>)
 8000f1a:	4829      	ldr	r0, [pc, #164]	@ (8000fc0 <main+0x1c8>)
 8000f1c:	f7ff fd89 	bl	8000a32 <SX1278_LoRaTxPacket>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a28      	ldr	r2, [pc, #160]	@ (8000fc4 <main+0x1cc>)
 8000f24:	6013      	str	r3, [r2, #0]
	  	  					message_length, 2000);
	  	  			message += 1;
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <main+0x1d4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4a27      	ldr	r2, [pc, #156]	@ (8000fcc <main+0x1d4>)
 8000f2e:	6013      	str	r3, [r2, #0]

	  	  			control_val = -1;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <main+0x1b4>)
 8000f32:	f04f 32ff 	mov.w	r2, #4294967295
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e7c8      	b.n	8000ecc <main+0xd4>
	  	  		} else {

	  	  			HAL_Delay(800);
 8000f3a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000f3e:	f000 faaf 	bl	80014a0 <HAL_Delay>
	  	  			control_val = 0;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <main+0x1b4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
	  	  			ret = SX1278_LoRaRxPacket(&SX1278);
 8000f48:	481d      	ldr	r0, [pc, #116]	@ (8000fc0 <main+0x1c8>)
 8000f4a:	f7ff fcd6 	bl	80008fa <SX1278_LoRaRxPacket>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <main+0x1cc>)
 8000f54:	601a      	str	r2, [r3, #0]
	  	  			printf("Received: %d\r\n", ret);
 8000f56:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <main+0x1cc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481f      	ldr	r0, [pc, #124]	@ (8000fdc <main+0x1e4>)
 8000f5e:	f001 fe7f 	bl	8002c60 <iprintf>
	  	  			if (ret > 0) {
 8000f62:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <main+0x1cc>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	dd0e      	ble.n	8000f88 <main+0x190>
	  	  				SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000f6a:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <main+0x1cc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	4918      	ldr	r1, [pc, #96]	@ (8000fd4 <main+0x1dc>)
 8000f74:	4812      	ldr	r0, [pc, #72]	@ (8000fc0 <main+0x1c8>)
 8000f76:	f7ff fdc8 	bl	8000b0a <SX1278_read>
	  	  				printf("Content (%d): %s\r\n", ret, buffer);
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <main+0x1cc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a15      	ldr	r2, [pc, #84]	@ (8000fd4 <main+0x1dc>)
 8000f80:	4619      	mov	r1, r3
 8000f82:	4817      	ldr	r0, [pc, #92]	@ (8000fe0 <main+0x1e8>)
 8000f84:	f001 fe6c 	bl	8002c60 <iprintf>
	  	  			}
	  	  			control_val = -1;
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <main+0x1b4>)
 8000f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8e:	601a      	str	r2, [r3, #0]
	  	  			HAL_Delay(1000);
 8000f90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f94:	f000 fa84 	bl	80014a0 <HAL_Delay>
	  if (master == 1) {
 8000f98:	e798      	b.n	8000ecc <main+0xd4>
 8000f9a:	bf00      	nop
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	19de5080 	.word	0x19de5080
 8000fa4:	00000000 	.word	0x00000000
 8000fa8:	200001b8 	.word	0x200001b8
 8000fac:	200003c8 	.word	0x200003c8
 8000fb0:	20000084 	.word	0x20000084
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	200003cc 	.word	0x200003cc
 8000fc0:	200000a0 	.word	0x200000a0
 8000fc4:	200001bc 	.word	0x200001bc
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	200003c0 	.word	0x200003c0
 8000fd0:	08003d14 	.word	0x08003d14
 8000fd4:	200001c0 	.word	0x200001c0
 8000fd8:	200003c4 	.word	0x200003c4
 8000fdc:	08003d20 	.word	0x08003d20
 8000fe0:	08003d30 	.word	0x08003d30

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b090      	sub	sp, #64	@ 0x40
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	2228      	movs	r2, #40	@ 0x28
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fea9 	bl	8002d4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800100e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001020:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001022:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fd3f 	bl	8001ab0 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001038:	f000 f819 	bl	800106e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800104c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2102      	movs	r1, #2
 8001056:	4618      	mov	r0, r3
 8001058:	f000 ffac 	bl	8001fb4 <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001062:	f000 f804 	bl	800106e <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3740      	adds	r7, #64	@ 0x40
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001072:	b672      	cpsid	i
}
 8001074:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001076:	bf00      	nop
 8001078:	e7fd      	b.n	8001076 <Error_Handler+0x8>
	...

0800107c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001080:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <MX_SPI1_Init+0x64>)
 8001082:	4a18      	ldr	r2, [pc, #96]	@ (80010e4 <MX_SPI1_Init+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001086:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <MX_SPI1_Init+0x64>)
 8001088:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800108c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <MX_SPI1_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <MX_SPI1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_SPI1_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MX_SPI1_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_SPI1_Init+0x64>)
 80010a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_SPI1_Init+0x64>)
 80010b0:	2210      	movs	r2, #16
 80010b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_SPI1_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <MX_SPI1_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_SPI1_Init+0x64>)
 80010c8:	220a      	movs	r2, #10
 80010ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <MX_SPI1_Init+0x64>)
 80010ce:	f001 f8cd 	bl	800226c <HAL_SPI_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d8:	f7ff ffc9 	bl	800106e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200003cc 	.word	0x200003cc
 80010e4:	40013000 	.word	0x40013000

080010e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1b      	ldr	r2, [pc, #108]	@ (8001170 <HAL_SPI_MspInit+0x88>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d12f      	bne.n	8001168 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <HAL_SPI_MspInit+0x8c>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a19      	ldr	r2, [pc, #100]	@ (8001174 <HAL_SPI_MspInit+0x8c>)
 800110e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_SPI_MspInit+0x8c>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_SPI_MspInit+0x8c>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a13      	ldr	r2, [pc, #76]	@ (8001174 <HAL_SPI_MspInit+0x8c>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_SPI_MspInit+0x8c>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001138:	23a0      	movs	r3, #160	@ 0xa0
 800113a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	480b      	ldr	r0, [pc, #44]	@ (8001178 <HAL_SPI_MspInit+0x90>)
 800114c:	f000 fada 	bl	8001704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001150:	2340      	movs	r3, #64	@ 0x40
 8001152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <HAL_SPI_MspInit+0x90>)
 8001164:	f000 face 	bl	8001704 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40013000 	.word	0x40013000
 8001174:	40021000 	.word	0x40021000
 8001178:	40010800 	.word	0x40010800

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_MspInit+0x5c>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <HAL_MspInit+0x5c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HAL_MspInit+0x5c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_MspInit+0x5c>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a0e      	ldr	r2, [pc, #56]	@ (80011d8 <HAL_MspInit+0x5c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <HAL_MspInit+0x5c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_MspInit+0x60>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <HAL_MspInit+0x60>)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <NMI_Handler+0x4>

080011e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <UsageFault_Handler+0x4>

08001208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001230:	f000 f91a 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800123c:	2002      	movs	r0, #2
 800123e:	f000 fc15 	bl	8001a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}

08001246 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e00a      	b.n	800126e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001258:	f3af 8000 	nop.w
 800125c:	4601      	mov	r1, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	60ba      	str	r2, [r7, #8]
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	dbf0      	blt.n	8001258 <_read+0x12>
  }

  return len;
 8001276:	687b      	ldr	r3, [r7, #4]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e009      	b.n	80012a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	60ba      	str	r2, [r7, #8]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbf1      	blt.n	8001292 <_write+0x12>
  }
  return len;
 80012ae:	687b      	ldr	r3, [r7, #4]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_close>:

int _close(int file)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012de:	605a      	str	r2, [r3, #4]
  return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <_isatty>:

int _isatty(int file)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f001 fd4e 	bl	8002de8 <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20005000 	.word	0x20005000
 8001378:	00000400 	.word	0x00000400
 800137c:	20000424 	.word	0x20000424
 8001380:	20000578 	.word	0x20000578

08001384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001390:	f7ff fff8 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480b      	ldr	r0, [pc, #44]	@ (80013c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001396:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001398:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a09      	ldr	r2, [pc, #36]	@ (80013d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013ac:	4c09      	ldr	r4, [pc, #36]	@ (80013d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ba:	f001 fd1b 	bl	8002df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013be:	f7ff fd1b 	bl	8000df8 <main>
  bx lr
 80013c2:	4770      	bx	lr
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013cc:	08003dcc 	.word	0x08003dcc
  ldr r2, =_sbss
 80013d0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013d4:	20000578 	.word	0x20000578

080013d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC1_2_IRQHandler>
	...

080013dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_Init+0x28>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <HAL_Init+0x28>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f947 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	200f      	movs	r0, #15
 80013f4:	f000 f808 	bl	8001408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff fec0 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40022000 	.word	0x40022000

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_InitTick+0x54>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_InitTick+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f95f 	bl	80016ea <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f927 	bl	8001696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	@ (8001464 <HAL_InitTick+0x5c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000000 	.word	0x20000000
 8001460:	20000008 	.word	0x20000008
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <HAL_IncTick+0x1c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_IncTick+0x20>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a03      	ldr	r2, [pc, #12]	@ (8001488 <HAL_IncTick+0x20>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000008 	.word	0x20000008
 8001488:	20000428 	.word	0x20000428

0800148c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b02      	ldr	r3, [pc, #8]	@ (800149c <HAL_GetTick+0x10>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	20000428 	.word	0x20000428

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff fff0 	bl	800148c <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffe0 	bl	800148c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4906      	ldr	r1, [pc, #24]	@ (8001580 <__NVIC_EnableIRQ+0x34>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	@ (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f7ff ff90 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	@ (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff2d 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff42 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff90 	bl	80015d8 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5f 	bl	8001584 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff35 	bl	800154c <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffa2 	bl	800163c <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b08b      	sub	sp, #44	@ 0x2c
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001716:	e169      	b.n	80019ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001718:	2201      	movs	r2, #1
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8158 	bne.w	80019e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4a9a      	ldr	r2, [pc, #616]	@ (80019a4 <HAL_GPIO_Init+0x2a0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d05e      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001740:	4a98      	ldr	r2, [pc, #608]	@ (80019a4 <HAL_GPIO_Init+0x2a0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d875      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 8001746:	4a98      	ldr	r2, [pc, #608]	@ (80019a8 <HAL_GPIO_Init+0x2a4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d058      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 800174c:	4a96      	ldr	r2, [pc, #600]	@ (80019a8 <HAL_GPIO_Init+0x2a4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d86f      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 8001752:	4a96      	ldr	r2, [pc, #600]	@ (80019ac <HAL_GPIO_Init+0x2a8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d052      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001758:	4a94      	ldr	r2, [pc, #592]	@ (80019ac <HAL_GPIO_Init+0x2a8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d869      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 800175e:	4a94      	ldr	r2, [pc, #592]	@ (80019b0 <HAL_GPIO_Init+0x2ac>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d04c      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001764:	4a92      	ldr	r2, [pc, #584]	@ (80019b0 <HAL_GPIO_Init+0x2ac>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d863      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 800176a:	4a92      	ldr	r2, [pc, #584]	@ (80019b4 <HAL_GPIO_Init+0x2b0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d046      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
 8001770:	4a90      	ldr	r2, [pc, #576]	@ (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d85d      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 8001776:	2b12      	cmp	r3, #18
 8001778:	d82a      	bhi.n	80017d0 <HAL_GPIO_Init+0xcc>
 800177a:	2b12      	cmp	r3, #18
 800177c:	d859      	bhi.n	8001832 <HAL_GPIO_Init+0x12e>
 800177e:	a201      	add	r2, pc, #4	@ (adr r2, 8001784 <HAL_GPIO_Init+0x80>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	080017ff 	.word	0x080017ff
 8001788:	080017d9 	.word	0x080017d9
 800178c:	080017eb 	.word	0x080017eb
 8001790:	0800182d 	.word	0x0800182d
 8001794:	08001833 	.word	0x08001833
 8001798:	08001833 	.word	0x08001833
 800179c:	08001833 	.word	0x08001833
 80017a0:	08001833 	.word	0x08001833
 80017a4:	08001833 	.word	0x08001833
 80017a8:	08001833 	.word	0x08001833
 80017ac:	08001833 	.word	0x08001833
 80017b0:	08001833 	.word	0x08001833
 80017b4:	08001833 	.word	0x08001833
 80017b8:	08001833 	.word	0x08001833
 80017bc:	08001833 	.word	0x08001833
 80017c0:	08001833 	.word	0x08001833
 80017c4:	08001833 	.word	0x08001833
 80017c8:	080017e1 	.word	0x080017e1
 80017cc:	080017f5 	.word	0x080017f5
 80017d0:	4a79      	ldr	r2, [pc, #484]	@ (80019b8 <HAL_GPIO_Init+0x2b4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017d6:	e02c      	b.n	8001832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	623b      	str	r3, [r7, #32]
          break;
 80017de:	e029      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	3304      	adds	r3, #4
 80017e6:	623b      	str	r3, [r7, #32]
          break;
 80017e8:	e024      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	3308      	adds	r3, #8
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e01f      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	330c      	adds	r3, #12
 80017fa:	623b      	str	r3, [r7, #32]
          break;
 80017fc:	e01a      	b.n	8001834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001806:	2304      	movs	r3, #4
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e013      	b.n	8001834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001814:	2308      	movs	r3, #8
 8001816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	611a      	str	r2, [r3, #16]
          break;
 800181e:	e009      	b.n	8001834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001820:	2308      	movs	r3, #8
 8001822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	615a      	str	r2, [r3, #20]
          break;
 800182a:	e003      	b.n	8001834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
          break;
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x130>
          break;
 8001832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2bff      	cmp	r3, #255	@ 0xff
 8001838:	d801      	bhi.n	800183e <HAL_GPIO_Init+0x13a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	e001      	b.n	8001842 <HAL_GPIO_Init+0x13e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
 8001842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2bff      	cmp	r3, #255	@ 0xff
 8001848:	d802      	bhi.n	8001850 <HAL_GPIO_Init+0x14c>
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0x152>
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	3b08      	subs	r3, #8
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	210f      	movs	r1, #15
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	401a      	ands	r2, r3
 8001868:	6a39      	ldr	r1, [r7, #32]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	431a      	orrs	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80b1 	beq.w	80019e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001884:	4b4d      	ldr	r3, [pc, #308]	@ (80019bc <HAL_GPIO_Init+0x2b8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a4c      	ldr	r2, [pc, #304]	@ (80019bc <HAL_GPIO_Init+0x2b8>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b4a      	ldr	r3, [pc, #296]	@ (80019bc <HAL_GPIO_Init+0x2b8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800189c:	4a48      	ldr	r2, [pc, #288]	@ (80019c0 <HAL_GPIO_Init+0x2bc>)
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a40      	ldr	r2, [pc, #256]	@ (80019c4 <HAL_GPIO_Init+0x2c0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d013      	beq.n	80018f0 <HAL_GPIO_Init+0x1ec>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a3f      	ldr	r2, [pc, #252]	@ (80019c8 <HAL_GPIO_Init+0x2c4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d00d      	beq.n	80018ec <HAL_GPIO_Init+0x1e8>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a3e      	ldr	r2, [pc, #248]	@ (80019cc <HAL_GPIO_Init+0x2c8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d007      	beq.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a3d      	ldr	r2, [pc, #244]	@ (80019d0 <HAL_GPIO_Init+0x2cc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_GPIO_Init+0x1e0>
 80018e0:	2303      	movs	r3, #3
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e004      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_GPIO_Init+0x1ee>
 80018f0:	2300      	movs	r3, #0
 80018f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001902:	492f      	ldr	r1, [pc, #188]	@ (80019c0 <HAL_GPIO_Init+0x2bc>)
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	492c      	ldr	r1, [pc, #176]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800192a:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	4928      	ldr	r1, [pc, #160]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001934:	4013      	ands	r3, r2
 8001936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001944:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	4922      	ldr	r1, [pc, #136]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	60cb      	str	r3, [r1, #12]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	491e      	ldr	r1, [pc, #120]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800195c:	4013      	ands	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800196c:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4918      	ldr	r1, [pc, #96]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	4914      	ldr	r1, [pc, #80]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001984:	4013      	ands	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d021      	beq.n	80019d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	490e      	ldr	r1, [pc, #56]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
 80019a0:	e021      	b.n	80019e6 <HAL_GPIO_Init+0x2e2>
 80019a2:	bf00      	nop
 80019a4:	10320000 	.word	0x10320000
 80019a8:	10310000 	.word	0x10310000
 80019ac:	10220000 	.word	0x10220000
 80019b0:	10210000 	.word	0x10210000
 80019b4:	10120000 	.word	0x10120000
 80019b8:	10110000 	.word	0x10110000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010000 	.word	0x40010000
 80019c4:	40010800 	.word	0x40010800
 80019c8:	40010c00 	.word	0x40010c00
 80019cc:	40011000 	.word	0x40011000
 80019d0:	40011400 	.word	0x40011400
 80019d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_GPIO_Init+0x304>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	43db      	mvns	r3, r3
 80019e0:	4909      	ldr	r1, [pc, #36]	@ (8001a08 <HAL_GPIO_Init+0x304>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	3301      	adds	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f47f ae8e 	bne.w	8001718 <HAL_GPIO_Init+0x14>
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	372c      	adds	r7, #44	@ 0x2c
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	807b      	strh	r3, [r7, #2]
 8001a46:	4613      	mov	r3, r2
 8001a48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4a:	787b      	ldrb	r3, [r7, #1]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a50:	887a      	ldrh	r2, [r7, #2]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a56:	e003      	b.n	8001a60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	041a      	lsls	r2, r3, #16
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	611a      	str	r2, [r3, #16]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a76:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a82:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f806 	bl	8001a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e272      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8087 	beq.w	8001bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad0:	4b92      	ldr	r3, [pc, #584]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d00c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001adc:	4b8f      	ldr	r3, [pc, #572]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d112      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5e>
 8001ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af4:	d10b      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	4b89      	ldr	r3, [pc, #548]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d06c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x12c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d168      	bne.n	8001bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e24c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x76>
 8001b18:	4b80      	ldr	r3, [pc, #512]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a7f      	ldr	r2, [pc, #508]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e02e      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x98>
 8001b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7a      	ldr	r2, [pc, #488]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b78      	ldr	r3, [pc, #480]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a77      	ldr	r2, [pc, #476]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e01d      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0xbc>
 8001b52:	4b72      	ldr	r3, [pc, #456]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a71      	ldr	r2, [pc, #452]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6e      	ldr	r2, [pc, #440]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b6c:	4b6b      	ldr	r3, [pc, #428]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a6a      	ldr	r2, [pc, #424]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b68      	ldr	r3, [pc, #416]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a67      	ldr	r2, [pc, #412]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fc7e 	bl	800148c <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fc7a 	bl	800148c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e200      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0xe4>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fc6a 	bl	800148c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fc66 	bl	800148c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	@ 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1ec      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	4b53      	ldr	r3, [pc, #332]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x10c>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d063      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bea:	4b4c      	ldr	r3, [pc, #304]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bf6:	4b49      	ldr	r3, [pc, #292]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d11c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x18c>
 8001c02:	4b46      	ldr	r3, [pc, #280]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d116      	bne.n	8001c3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	4b43      	ldr	r3, [pc, #268]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_RCC_OscConfig+0x176>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e1c0      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c26:	4b3d      	ldr	r3, [pc, #244]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4939      	ldr	r1, [pc, #228]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	e03a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c44:	4b36      	ldr	r3, [pc, #216]	@ (8001d20 <HAL_RCC_OscConfig+0x270>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fc1f 	bl	800148c <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff fc1b 	bl	800148c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e1a1      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	4b2d      	ldr	r3, [pc, #180]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4927      	ldr	r1, [pc, #156]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	e015      	b.n	8001cb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c86:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <HAL_RCC_OscConfig+0x270>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fbfe 	bl	800148c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c94:	f7ff fbfa 	bl	800148c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e180      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d03a      	beq.n	8001d34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d019      	beq.n	8001cfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc6:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fbde 	bl	800148c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fbda 	bl	800148c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e160      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f000 fa9c 	bl	8002230 <RCC_Delay>
 8001cf8:	e01c      	b.n	8001d34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7ff fbc4 	bl	800148c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d06:	e00f      	b.n	8001d28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff fbc0 	bl	800148c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d908      	bls.n	8001d28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e146      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	42420000 	.word	0x42420000
 8001d24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	4b92      	ldr	r3, [pc, #584]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e9      	bne.n	8001d08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a6 	beq.w	8001e8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d46:	4b8b      	ldr	r3, [pc, #556]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10d      	bne.n	8001d6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b88      	ldr	r3, [pc, #544]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a87      	ldr	r2, [pc, #540]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b85      	ldr	r3, [pc, #532]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b82      	ldr	r3, [pc, #520]	@ (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d118      	bne.n	8001dac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7ff fb81 	bl	800148c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7ff fb7d 	bl	800148c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	@ 0x64
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e103      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b75      	ldr	r3, [pc, #468]	@ (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x312>
 8001db4:	4b6f      	ldr	r3, [pc, #444]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a6e      	ldr	r2, [pc, #440]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e02d      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x334>
 8001dca:	4b6a      	ldr	r3, [pc, #424]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a69      	ldr	r2, [pc, #420]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	4b67      	ldr	r3, [pc, #412]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a66      	ldr	r2, [pc, #408]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	e01c      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d10c      	bne.n	8001e06 <HAL_RCC_OscConfig+0x356>
 8001dec:	4b61      	ldr	r3, [pc, #388]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a60      	ldr	r2, [pc, #384]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	e00b      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001e06:	4b5b      	ldr	r3, [pc, #364]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a5a      	ldr	r2, [pc, #360]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	4b58      	ldr	r3, [pc, #352]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a57      	ldr	r2, [pc, #348]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d015      	beq.n	8001e52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff fb31 	bl	800148c <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7ff fb2d 	bl	800148c <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0b1      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	4b4b      	ldr	r3, [pc, #300]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ee      	beq.n	8001e2e <HAL_RCC_OscConfig+0x37e>
 8001e50:	e014      	b.n	8001e7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff fb1b 	bl	800148c <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7ff fb17 	bl	800148c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e09b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	4b40      	ldr	r3, [pc, #256]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ee      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d105      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4b3c      	ldr	r3, [pc, #240]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a3b      	ldr	r2, [pc, #236]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8087 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e98:	4b36      	ldr	r3, [pc, #216]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d061      	beq.n	8001f68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d146      	bne.n	8001f3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eac:	4b33      	ldr	r3, [pc, #204]	@ (8001f7c <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff faeb 	bl	800148c <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eba:	f7ff fae7 	bl	800148c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e06d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	4b29      	ldr	r3, [pc, #164]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee0:	d108      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4921      	ldr	r1, [pc, #132]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a19      	ldr	r1, [r3, #32]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f04:	430b      	orrs	r3, r1
 8001f06:	491b      	ldr	r1, [pc, #108]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <HAL_RCC_OscConfig+0x4cc>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff fabb 	bl	800148c <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff fab7 	bl	800148c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e03d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x46a>
 8001f38:	e035      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <HAL_RCC_OscConfig+0x4cc>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff faa4 	bl	800148c <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff faa0 	bl	800148c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e026      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x498>
 8001f66:	e01e      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e019      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f80:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_RCC_OscConfig+0x500>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0d0      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d910      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b67      	ldr	r3, [pc, #412]	@ (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 0207 	bic.w	r2, r3, #7
 8001fde:	4965      	ldr	r1, [pc, #404]	@ (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	@ (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002010:	4b59      	ldr	r3, [pc, #356]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a58      	ldr	r2, [pc, #352]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800201a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002028:	4b53      	ldr	r3, [pc, #332]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a52      	ldr	r2, [pc, #328]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002032:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b50      	ldr	r3, [pc, #320]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	494d      	ldr	r1, [pc, #308]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d040      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b47      	ldr	r3, [pc, #284]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d115      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07f      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002072:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e073      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	4b3d      	ldr	r3, [pc, #244]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e06b      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002092:	4b39      	ldr	r3, [pc, #228]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4936      	ldr	r1, [pc, #216]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a4:	f7ff f9f2 	bl	800148c <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7ff f9ee 	bl	800148c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e053      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 020c 	and.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1eb      	bne.n	80020ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b27      	ldr	r3, [pc, #156]	@ (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d210      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4922      	ldr	r1, [pc, #136]	@ (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b20      	ldr	r3, [pc, #128]	@ (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e032      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4916      	ldr	r1, [pc, #88]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800212e:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	490e      	ldr	r1, [pc, #56]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002142:	f000 f821 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	490a      	ldr	r1, [pc, #40]	@ (800217c <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	5ccb      	ldrb	r3, [r1, r3]
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	4a09      	ldr	r2, [pc, #36]	@ (8002180 <HAL_RCC_ClockConfig+0x1cc>)
 800215c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <HAL_RCC_ClockConfig+0x1d0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f950 	bl	8001408 <HAL_InitTick>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40022000 	.word	0x40022000
 8002178:	40021000 	.word	0x40021000
 800217c:	08003d64 	.word	0x08003d64
 8002180:	20000000 	.word	0x20000000
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021a2:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <HAL_RCC_GetSysClockFreq+0x94>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d002      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x30>
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x36>
 80021b6:	e027      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b8:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ba:	613b      	str	r3, [r7, #16]
      break;
 80021bc:	e027      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	0c9b      	lsrs	r3, r3, #18
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d010      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_RCC_GetSysClockFreq+0x94>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	0c5b      	lsrs	r3, r3, #17
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	4a11      	ldr	r2, [pc, #68]	@ (8002228 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ea:	fb03 f202 	mul.w	r2, r3, r2
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e004      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a0c      	ldr	r2, [pc, #48]	@ (800222c <HAL_RCC_GetSysClockFreq+0xa4>)
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	613b      	str	r3, [r7, #16]
      break;
 8002206:	e002      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x98>)
 800220a:	613b      	str	r3, [r7, #16]
      break;
 800220c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220e:	693b      	ldr	r3, [r7, #16]
}
 8002210:	4618      	mov	r0, r3
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	007a1200 	.word	0x007a1200
 8002224:	08003d74 	.word	0x08003d74
 8002228:	08003d84 	.word	0x08003d84
 800222c:	003d0900 	.word	0x003d0900

08002230 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002238:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <RCC_Delay+0x34>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <RCC_Delay+0x38>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0a5b      	lsrs	r3, r3, #9
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800224c:	bf00      	nop
  }
  while (Delay --);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	60fa      	str	r2, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f9      	bne.n	800224c <RCC_Delay+0x1c>
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20000000 	.word	0x20000000
 8002268:	10624dd3 	.word	0x10624dd3

0800226c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e076      	b.n	800236c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800228e:	d009      	beq.n	80022a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
 8002296:	e005      	b.n	80022a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe ff12 	bl	80010e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002328:	ea42 0103 	orr.w	r1, r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	0c1a      	lsrs	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f002 0204 	and.w	r2, r2, #4
 800234a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800235a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002384:	f7ff f882 	bl	800148c <HAL_GetTick>
 8002388:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800239a:	2302      	movs	r3, #2
 800239c:	e12a      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_SPI_Transmit+0x36>
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e122      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_SPI_Transmit+0x48>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e11b      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2203      	movs	r2, #3
 80023c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800240a:	d10f      	bne.n	800242c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800241a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800242a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002436:	2b40      	cmp	r3, #64	@ 0x40
 8002438:	d007      	beq.n	800244a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002452:	d152      	bne.n	80024fa <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_SPI_Transmit+0xee>
 800245c:	8b7b      	ldrh	r3, [r7, #26]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d145      	bne.n	80024ee <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	881a      	ldrh	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	1c9a      	adds	r2, r3, #2
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002486:	e032      	b.n	80024ee <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d112      	bne.n	80024bc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	881a      	ldrh	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	1c9a      	adds	r2, r3, #2
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024ba:	e018      	b.n	80024ee <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024bc:	f7fe ffe6 	bl	800148c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d803      	bhi.n	80024d4 <HAL_SPI_Transmit+0x160>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d102      	bne.n	80024da <HAL_SPI_Transmit+0x166>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e082      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1c7      	bne.n	8002488 <HAL_SPI_Transmit+0x114>
 80024f8:	e053      	b.n	80025a2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_SPI_Transmit+0x194>
 8002502:	8b7b      	ldrh	r3, [r7, #26]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d147      	bne.n	8002598 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	330c      	adds	r3, #12
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800252e:	e033      	b.n	8002598 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d113      	bne.n	8002566 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	330c      	adds	r3, #12
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002564:	e018      	b.n	8002598 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002566:	f7fe ff91 	bl	800148c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d803      	bhi.n	800257e <HAL_SPI_Transmit+0x20a>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d102      	bne.n	8002584 <HAL_SPI_Transmit+0x210>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e02d      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1c6      	bne.n	8002530 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	6839      	ldr	r1, [r7, #0]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa66 	bl	8002a78 <SPI_EndRxTxTransaction>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2220      	movs	r2, #32
 80025b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10a      	bne.n	80025d6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
  }
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	@ 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800260a:	2301      	movs	r3, #1
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800260e:	f7fe ff3d 	bl	800148c <HAL_GetTick>
 8002612:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800261a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002626:	7ffb      	ldrb	r3, [r7, #31]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d00c      	beq.n	8002646 <HAL_SPI_TransmitReceive+0x4a>
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002632:	d106      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x46>
 800263c:	7ffb      	ldrb	r3, [r7, #31]
 800263e:	2b04      	cmp	r3, #4
 8002640:	d001      	beq.n	8002646 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
 8002644:	e17f      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x5c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x5c>
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e174      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_SPI_TransmitReceive+0x6e>
 8002666:	2302      	movs	r3, #2
 8002668:	e16d      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b04      	cmp	r3, #4
 800267c:	d003      	beq.n	8002686 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2205      	movs	r2, #5
 8002682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	887a      	ldrh	r2, [r7, #2]
 8002696:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	887a      	ldrh	r2, [r7, #2]
 80026ae:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c6:	2b40      	cmp	r3, #64	@ 0x40
 80026c8:	d007      	beq.n	80026da <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026e2:	d17e      	bne.n	80027e2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_SPI_TransmitReceive+0xf6>
 80026ec:	8afb      	ldrh	r3, [r7, #22]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d16c      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	1c9a      	adds	r2, r3, #2
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002716:	e059      	b.n	80027cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d11b      	bne.n	800275e <HAL_SPI_TransmitReceive+0x162>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d016      	beq.n	800275e <HAL_SPI_TransmitReceive+0x162>
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	2b01      	cmp	r3, #1
 8002734:	d113      	bne.n	800275e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d119      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x1a4>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d014      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002780:	b292      	uxth	r2, r2
 8002782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002788:	1c9a      	adds	r2, r3, #2
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800279c:	2301      	movs	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027a0:	f7fe fe74 	bl	800148c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d80d      	bhi.n	80027cc <HAL_SPI_TransmitReceive+0x1d0>
 80027b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d009      	beq.n	80027cc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0bc      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1a0      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x11c>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d19b      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x11c>
 80027e0:	e082      	b.n	80028e8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x1f4>
 80027ea:	8afb      	ldrh	r3, [r7, #22]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d171      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002816:	e05d      	b.n	80028d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b02      	cmp	r3, #2
 8002824:	d11c      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x264>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d017      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x264>
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	2b01      	cmp	r3, #1
 8002834:	d114      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	330c      	adds	r3, #12
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d119      	bne.n	80028a2 <HAL_SPI_TransmitReceive+0x2a6>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d014      	beq.n	80028a2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800289e:	2301      	movs	r3, #1
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028a2:	f7fe fdf3 	bl	800148c <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d803      	bhi.n	80028ba <HAL_SPI_TransmitReceive+0x2be>
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d102      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x2c4>
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e038      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d19c      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x21c>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d197      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028e8:	6a3a      	ldr	r2, [r7, #32]
 80028ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f8c3 	bl	8002a78 <SPI_EndRxTxTransaction>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e01d      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002944:	2300      	movs	r3, #0
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3728      	adds	r7, #40	@ 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800295c:	b2db      	uxtb	r3, r3
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002978:	f7fe fd88 	bl	800148c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	4413      	add	r3, r2
 8002986:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002988:	f7fe fd80 	bl	800148c <HAL_GetTick>
 800298c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800298e:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	015b      	lsls	r3, r3, #5
 8002994:	0d1b      	lsrs	r3, r3, #20
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800299e:	e054      	b.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a6:	d050      	beq.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029a8:	f7fe fd70 	bl	800148c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d902      	bls.n	80029be <SPI_WaitFlagStateUntilTimeout+0x56>
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d13d      	bne.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029d6:	d111      	bne.n	80029fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029e0:	d004      	beq.n	80029ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ea:	d107      	bne.n	80029fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a04:	d10f      	bne.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e017      	b.n	8002a6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d19b      	bne.n	80029a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ff6a 	bl	8002968 <SPI_WaitFlagStateUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e013      	b.n	8002ad2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2180      	movs	r1, #128	@ 0x80
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff ff57 	bl	8002968 <SPI_WaitFlagStateUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e000      	b.n	8002ad2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <std>:
 8002adc:	2300      	movs	r3, #0
 8002ade:	b510      	push	{r4, lr}
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002aea:	6083      	str	r3, [r0, #8]
 8002aec:	8181      	strh	r1, [r0, #12]
 8002aee:	6643      	str	r3, [r0, #100]	@ 0x64
 8002af0:	81c2      	strh	r2, [r0, #14]
 8002af2:	6183      	str	r3, [r0, #24]
 8002af4:	4619      	mov	r1, r3
 8002af6:	2208      	movs	r2, #8
 8002af8:	305c      	adds	r0, #92	@ 0x5c
 8002afa:	f000 f926 	bl	8002d4a <memset>
 8002afe:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <std+0x58>)
 8002b00:	6224      	str	r4, [r4, #32]
 8002b02:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <std+0x5c>)
 8002b06:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <std+0x60>)
 8002b0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <std+0x64>)
 8002b0e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <std+0x68>)
 8002b12:	429c      	cmp	r4, r3
 8002b14:	d006      	beq.n	8002b24 <std+0x48>
 8002b16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b1a:	4294      	cmp	r4, r2
 8002b1c:	d002      	beq.n	8002b24 <std+0x48>
 8002b1e:	33d0      	adds	r3, #208	@ 0xd0
 8002b20:	429c      	cmp	r4, r3
 8002b22:	d105      	bne.n	8002b30 <std+0x54>
 8002b24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b2c:	f000 b986 	b.w	8002e3c <__retarget_lock_init_recursive>
 8002b30:	bd10      	pop	{r4, pc}
 8002b32:	bf00      	nop
 8002b34:	08002cc5 	.word	0x08002cc5
 8002b38:	08002ce7 	.word	0x08002ce7
 8002b3c:	08002d1f 	.word	0x08002d1f
 8002b40:	08002d43 	.word	0x08002d43
 8002b44:	2000042c 	.word	0x2000042c

08002b48 <stdio_exit_handler>:
 8002b48:	4a02      	ldr	r2, [pc, #8]	@ (8002b54 <stdio_exit_handler+0xc>)
 8002b4a:	4903      	ldr	r1, [pc, #12]	@ (8002b58 <stdio_exit_handler+0x10>)
 8002b4c:	4803      	ldr	r0, [pc, #12]	@ (8002b5c <stdio_exit_handler+0x14>)
 8002b4e:	f000 b869 	b.w	8002c24 <_fwalk_sglue>
 8002b52:	bf00      	nop
 8002b54:	2000000c 	.word	0x2000000c
 8002b58:	080039a1 	.word	0x080039a1
 8002b5c:	2000001c 	.word	0x2000001c

08002b60 <cleanup_stdio>:
 8002b60:	6841      	ldr	r1, [r0, #4]
 8002b62:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <cleanup_stdio+0x34>)
 8002b64:	b510      	push	{r4, lr}
 8002b66:	4299      	cmp	r1, r3
 8002b68:	4604      	mov	r4, r0
 8002b6a:	d001      	beq.n	8002b70 <cleanup_stdio+0x10>
 8002b6c:	f000 ff18 	bl	80039a0 <_fflush_r>
 8002b70:	68a1      	ldr	r1, [r4, #8]
 8002b72:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <cleanup_stdio+0x38>)
 8002b74:	4299      	cmp	r1, r3
 8002b76:	d002      	beq.n	8002b7e <cleanup_stdio+0x1e>
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f000 ff11 	bl	80039a0 <_fflush_r>
 8002b7e:	68e1      	ldr	r1, [r4, #12]
 8002b80:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <cleanup_stdio+0x3c>)
 8002b82:	4299      	cmp	r1, r3
 8002b84:	d004      	beq.n	8002b90 <cleanup_stdio+0x30>
 8002b86:	4620      	mov	r0, r4
 8002b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b8c:	f000 bf08 	b.w	80039a0 <_fflush_r>
 8002b90:	bd10      	pop	{r4, pc}
 8002b92:	bf00      	nop
 8002b94:	2000042c 	.word	0x2000042c
 8002b98:	20000494 	.word	0x20000494
 8002b9c:	200004fc 	.word	0x200004fc

08002ba0 <global_stdio_init.part.0>:
 8002ba0:	b510      	push	{r4, lr}
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <global_stdio_init.part.0+0x30>)
 8002ba4:	4c0b      	ldr	r4, [pc, #44]	@ (8002bd4 <global_stdio_init.part.0+0x34>)
 8002ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd8 <global_stdio_init.part.0+0x38>)
 8002ba8:	4620      	mov	r0, r4
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	2104      	movs	r1, #4
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f7ff ff94 	bl	8002adc <std>
 8002bb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002bb8:	2201      	movs	r2, #1
 8002bba:	2109      	movs	r1, #9
 8002bbc:	f7ff ff8e 	bl	8002adc <std>
 8002bc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bca:	2112      	movs	r1, #18
 8002bcc:	f7ff bf86 	b.w	8002adc <std>
 8002bd0:	20000564 	.word	0x20000564
 8002bd4:	2000042c 	.word	0x2000042c
 8002bd8:	08002b49 	.word	0x08002b49

08002bdc <__sfp_lock_acquire>:
 8002bdc:	4801      	ldr	r0, [pc, #4]	@ (8002be4 <__sfp_lock_acquire+0x8>)
 8002bde:	f000 b92e 	b.w	8002e3e <__retarget_lock_acquire_recursive>
 8002be2:	bf00      	nop
 8002be4:	2000056d 	.word	0x2000056d

08002be8 <__sfp_lock_release>:
 8002be8:	4801      	ldr	r0, [pc, #4]	@ (8002bf0 <__sfp_lock_release+0x8>)
 8002bea:	f000 b929 	b.w	8002e40 <__retarget_lock_release_recursive>
 8002bee:	bf00      	nop
 8002bf0:	2000056d 	.word	0x2000056d

08002bf4 <__sinit>:
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	f7ff fff0 	bl	8002bdc <__sfp_lock_acquire>
 8002bfc:	6a23      	ldr	r3, [r4, #32]
 8002bfe:	b11b      	cbz	r3, 8002c08 <__sinit+0x14>
 8002c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c04:	f7ff bff0 	b.w	8002be8 <__sfp_lock_release>
 8002c08:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <__sinit+0x28>)
 8002c0a:	6223      	str	r3, [r4, #32]
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <__sinit+0x2c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f5      	bne.n	8002c00 <__sinit+0xc>
 8002c14:	f7ff ffc4 	bl	8002ba0 <global_stdio_init.part.0>
 8002c18:	e7f2      	b.n	8002c00 <__sinit+0xc>
 8002c1a:	bf00      	nop
 8002c1c:	08002b61 	.word	0x08002b61
 8002c20:	20000564 	.word	0x20000564

08002c24 <_fwalk_sglue>:
 8002c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c28:	4607      	mov	r7, r0
 8002c2a:	4688      	mov	r8, r1
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	2600      	movs	r6, #0
 8002c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c34:	f1b9 0901 	subs.w	r9, r9, #1
 8002c38:	d505      	bpl.n	8002c46 <_fwalk_sglue+0x22>
 8002c3a:	6824      	ldr	r4, [r4, #0]
 8002c3c:	2c00      	cmp	r4, #0
 8002c3e:	d1f7      	bne.n	8002c30 <_fwalk_sglue+0xc>
 8002c40:	4630      	mov	r0, r6
 8002c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c46:	89ab      	ldrh	r3, [r5, #12]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d907      	bls.n	8002c5c <_fwalk_sglue+0x38>
 8002c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c50:	3301      	adds	r3, #1
 8002c52:	d003      	beq.n	8002c5c <_fwalk_sglue+0x38>
 8002c54:	4629      	mov	r1, r5
 8002c56:	4638      	mov	r0, r7
 8002c58:	47c0      	blx	r8
 8002c5a:	4306      	orrs	r6, r0
 8002c5c:	3568      	adds	r5, #104	@ 0x68
 8002c5e:	e7e9      	b.n	8002c34 <_fwalk_sglue+0x10>

08002c60 <iprintf>:
 8002c60:	b40f      	push	{r0, r1, r2, r3}
 8002c62:	b507      	push	{r0, r1, r2, lr}
 8002c64:	4906      	ldr	r1, [pc, #24]	@ (8002c80 <iprintf+0x20>)
 8002c66:	ab04      	add	r3, sp, #16
 8002c68:	6808      	ldr	r0, [r1, #0]
 8002c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c6e:	6881      	ldr	r1, [r0, #8]
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	f000 fb6b 	bl	800334c <_vfiprintf_r>
 8002c76:	b003      	add	sp, #12
 8002c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c7c:	b004      	add	sp, #16
 8002c7e:	4770      	bx	lr
 8002c80:	20000018 	.word	0x20000018

08002c84 <siprintf>:
 8002c84:	b40e      	push	{r1, r2, r3}
 8002c86:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002c8a:	b500      	push	{lr}
 8002c8c:	b09c      	sub	sp, #112	@ 0x70
 8002c8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002c90:	9002      	str	r0, [sp, #8]
 8002c92:	9006      	str	r0, [sp, #24]
 8002c94:	9107      	str	r1, [sp, #28]
 8002c96:	9104      	str	r1, [sp, #16]
 8002c98:	4808      	ldr	r0, [pc, #32]	@ (8002cbc <siprintf+0x38>)
 8002c9a:	4909      	ldr	r1, [pc, #36]	@ (8002cc0 <siprintf+0x3c>)
 8002c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ca0:	9105      	str	r1, [sp, #20]
 8002ca2:	6800      	ldr	r0, [r0, #0]
 8002ca4:	a902      	add	r1, sp, #8
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	f000 fa2c 	bl	8003104 <_svfiprintf_r>
 8002cac:	2200      	movs	r2, #0
 8002cae:	9b02      	ldr	r3, [sp, #8]
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	b01c      	add	sp, #112	@ 0x70
 8002cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cb8:	b003      	add	sp, #12
 8002cba:	4770      	bx	lr
 8002cbc:	20000018 	.word	0x20000018
 8002cc0:	ffff0208 	.word	0xffff0208

08002cc4 <__sread>:
 8002cc4:	b510      	push	{r4, lr}
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ccc:	f000 f868 	bl	8002da0 <_read_r>
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	bfab      	itete	ge
 8002cd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8002cd8:	181b      	addge	r3, r3, r0
 8002cda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002cde:	bfac      	ite	ge
 8002ce0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ce2:	81a3      	strhlt	r3, [r4, #12]
 8002ce4:	bd10      	pop	{r4, pc}

08002ce6 <__swrite>:
 8002ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cea:	461f      	mov	r7, r3
 8002cec:	898b      	ldrh	r3, [r1, #12]
 8002cee:	4605      	mov	r5, r0
 8002cf0:	05db      	lsls	r3, r3, #23
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	4616      	mov	r6, r2
 8002cf6:	d505      	bpl.n	8002d04 <__swrite+0x1e>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d00:	f000 f83c 	bl	8002d7c <_lseek_r>
 8002d04:	89a3      	ldrh	r3, [r4, #12]
 8002d06:	4632      	mov	r2, r6
 8002d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d0c:	81a3      	strh	r3, [r4, #12]
 8002d0e:	4628      	mov	r0, r5
 8002d10:	463b      	mov	r3, r7
 8002d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d1a:	f000 b853 	b.w	8002dc4 <_write_r>

08002d1e <__sseek>:
 8002d1e:	b510      	push	{r4, lr}
 8002d20:	460c      	mov	r4, r1
 8002d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d26:	f000 f829 	bl	8002d7c <_lseek_r>
 8002d2a:	1c43      	adds	r3, r0, #1
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	bf15      	itete	ne
 8002d30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002d3a:	81a3      	strheq	r3, [r4, #12]
 8002d3c:	bf18      	it	ne
 8002d3e:	81a3      	strhne	r3, [r4, #12]
 8002d40:	bd10      	pop	{r4, pc}

08002d42 <__sclose>:
 8002d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d46:	f000 b809 	b.w	8002d5c <_close_r>

08002d4a <memset>:
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4402      	add	r2, r0
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d100      	bne.n	8002d54 <memset+0xa>
 8002d52:	4770      	bx	lr
 8002d54:	f803 1b01 	strb.w	r1, [r3], #1
 8002d58:	e7f9      	b.n	8002d4e <memset+0x4>
	...

08002d5c <_close_r>:
 8002d5c:	b538      	push	{r3, r4, r5, lr}
 8002d5e:	2300      	movs	r3, #0
 8002d60:	4d05      	ldr	r5, [pc, #20]	@ (8002d78 <_close_r+0x1c>)
 8002d62:	4604      	mov	r4, r0
 8002d64:	4608      	mov	r0, r1
 8002d66:	602b      	str	r3, [r5, #0]
 8002d68:	f7fe faa6 	bl	80012b8 <_close>
 8002d6c:	1c43      	adds	r3, r0, #1
 8002d6e:	d102      	bne.n	8002d76 <_close_r+0x1a>
 8002d70:	682b      	ldr	r3, [r5, #0]
 8002d72:	b103      	cbz	r3, 8002d76 <_close_r+0x1a>
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	bd38      	pop	{r3, r4, r5, pc}
 8002d78:	20000568 	.word	0x20000568

08002d7c <_lseek_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	4604      	mov	r4, r0
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	2200      	movs	r2, #0
 8002d86:	4d05      	ldr	r5, [pc, #20]	@ (8002d9c <_lseek_r+0x20>)
 8002d88:	602a      	str	r2, [r5, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f7fe fab8 	bl	8001300 <_lseek>
 8002d90:	1c43      	adds	r3, r0, #1
 8002d92:	d102      	bne.n	8002d9a <_lseek_r+0x1e>
 8002d94:	682b      	ldr	r3, [r5, #0]
 8002d96:	b103      	cbz	r3, 8002d9a <_lseek_r+0x1e>
 8002d98:	6023      	str	r3, [r4, #0]
 8002d9a:	bd38      	pop	{r3, r4, r5, pc}
 8002d9c:	20000568 	.word	0x20000568

08002da0 <_read_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4604      	mov	r4, r0
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	2200      	movs	r2, #0
 8002daa:	4d05      	ldr	r5, [pc, #20]	@ (8002dc0 <_read_r+0x20>)
 8002dac:	602a      	str	r2, [r5, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f7fe fa49 	bl	8001246 <_read>
 8002db4:	1c43      	adds	r3, r0, #1
 8002db6:	d102      	bne.n	8002dbe <_read_r+0x1e>
 8002db8:	682b      	ldr	r3, [r5, #0]
 8002dba:	b103      	cbz	r3, 8002dbe <_read_r+0x1e>
 8002dbc:	6023      	str	r3, [r4, #0]
 8002dbe:	bd38      	pop	{r3, r4, r5, pc}
 8002dc0:	20000568 	.word	0x20000568

08002dc4 <_write_r>:
 8002dc4:	b538      	push	{r3, r4, r5, lr}
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	4608      	mov	r0, r1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4d05      	ldr	r5, [pc, #20]	@ (8002de4 <_write_r+0x20>)
 8002dd0:	602a      	str	r2, [r5, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f7fe fa54 	bl	8001280 <_write>
 8002dd8:	1c43      	adds	r3, r0, #1
 8002dda:	d102      	bne.n	8002de2 <_write_r+0x1e>
 8002ddc:	682b      	ldr	r3, [r5, #0]
 8002dde:	b103      	cbz	r3, 8002de2 <_write_r+0x1e>
 8002de0:	6023      	str	r3, [r4, #0]
 8002de2:	bd38      	pop	{r3, r4, r5, pc}
 8002de4:	20000568 	.word	0x20000568

08002de8 <__errno>:
 8002de8:	4b01      	ldr	r3, [pc, #4]	@ (8002df0 <__errno+0x8>)
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000018 	.word	0x20000018

08002df4 <__libc_init_array>:
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	2600      	movs	r6, #0
 8002df8:	4d0c      	ldr	r5, [pc, #48]	@ (8002e2c <__libc_init_array+0x38>)
 8002dfa:	4c0d      	ldr	r4, [pc, #52]	@ (8002e30 <__libc_init_array+0x3c>)
 8002dfc:	1b64      	subs	r4, r4, r5
 8002dfe:	10a4      	asrs	r4, r4, #2
 8002e00:	42a6      	cmp	r6, r4
 8002e02:	d109      	bne.n	8002e18 <__libc_init_array+0x24>
 8002e04:	f000 ff7a 	bl	8003cfc <_init>
 8002e08:	2600      	movs	r6, #0
 8002e0a:	4d0a      	ldr	r5, [pc, #40]	@ (8002e34 <__libc_init_array+0x40>)
 8002e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e38 <__libc_init_array+0x44>)
 8002e0e:	1b64      	subs	r4, r4, r5
 8002e10:	10a4      	asrs	r4, r4, #2
 8002e12:	42a6      	cmp	r6, r4
 8002e14:	d105      	bne.n	8002e22 <__libc_init_array+0x2e>
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e1c:	4798      	blx	r3
 8002e1e:	3601      	adds	r6, #1
 8002e20:	e7ee      	b.n	8002e00 <__libc_init_array+0xc>
 8002e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e26:	4798      	blx	r3
 8002e28:	3601      	adds	r6, #1
 8002e2a:	e7f2      	b.n	8002e12 <__libc_init_array+0x1e>
 8002e2c:	08003dc4 	.word	0x08003dc4
 8002e30:	08003dc4 	.word	0x08003dc4
 8002e34:	08003dc4 	.word	0x08003dc4
 8002e38:	08003dc8 	.word	0x08003dc8

08002e3c <__retarget_lock_init_recursive>:
 8002e3c:	4770      	bx	lr

08002e3e <__retarget_lock_acquire_recursive>:
 8002e3e:	4770      	bx	lr

08002e40 <__retarget_lock_release_recursive>:
 8002e40:	4770      	bx	lr

08002e42 <memcpy>:
 8002e42:	440a      	add	r2, r1
 8002e44:	4291      	cmp	r1, r2
 8002e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e4a:	d100      	bne.n	8002e4e <memcpy+0xc>
 8002e4c:	4770      	bx	lr
 8002e4e:	b510      	push	{r4, lr}
 8002e50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e54:	4291      	cmp	r1, r2
 8002e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e5a:	d1f9      	bne.n	8002e50 <memcpy+0xe>
 8002e5c:	bd10      	pop	{r4, pc}
	...

08002e60 <_free_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4605      	mov	r5, r0
 8002e64:	2900      	cmp	r1, #0
 8002e66:	d040      	beq.n	8002eea <_free_r+0x8a>
 8002e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e6c:	1f0c      	subs	r4, r1, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bfb8      	it	lt
 8002e72:	18e4      	addlt	r4, r4, r3
 8002e74:	f000 f8de 	bl	8003034 <__malloc_lock>
 8002e78:	4a1c      	ldr	r2, [pc, #112]	@ (8002eec <_free_r+0x8c>)
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	b933      	cbnz	r3, 8002e8c <_free_r+0x2c>
 8002e7e:	6063      	str	r3, [r4, #4]
 8002e80:	6014      	str	r4, [r2, #0]
 8002e82:	4628      	mov	r0, r5
 8002e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e88:	f000 b8da 	b.w	8003040 <__malloc_unlock>
 8002e8c:	42a3      	cmp	r3, r4
 8002e8e:	d908      	bls.n	8002ea2 <_free_r+0x42>
 8002e90:	6820      	ldr	r0, [r4, #0]
 8002e92:	1821      	adds	r1, r4, r0
 8002e94:	428b      	cmp	r3, r1
 8002e96:	bf01      	itttt	eq
 8002e98:	6819      	ldreq	r1, [r3, #0]
 8002e9a:	685b      	ldreq	r3, [r3, #4]
 8002e9c:	1809      	addeq	r1, r1, r0
 8002e9e:	6021      	streq	r1, [r4, #0]
 8002ea0:	e7ed      	b.n	8002e7e <_free_r+0x1e>
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	b10b      	cbz	r3, 8002eac <_free_r+0x4c>
 8002ea8:	42a3      	cmp	r3, r4
 8002eaa:	d9fa      	bls.n	8002ea2 <_free_r+0x42>
 8002eac:	6811      	ldr	r1, [r2, #0]
 8002eae:	1850      	adds	r0, r2, r1
 8002eb0:	42a0      	cmp	r0, r4
 8002eb2:	d10b      	bne.n	8002ecc <_free_r+0x6c>
 8002eb4:	6820      	ldr	r0, [r4, #0]
 8002eb6:	4401      	add	r1, r0
 8002eb8:	1850      	adds	r0, r2, r1
 8002eba:	4283      	cmp	r3, r0
 8002ebc:	6011      	str	r1, [r2, #0]
 8002ebe:	d1e0      	bne.n	8002e82 <_free_r+0x22>
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4408      	add	r0, r1
 8002ec6:	6010      	str	r0, [r2, #0]
 8002ec8:	6053      	str	r3, [r2, #4]
 8002eca:	e7da      	b.n	8002e82 <_free_r+0x22>
 8002ecc:	d902      	bls.n	8002ed4 <_free_r+0x74>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	602b      	str	r3, [r5, #0]
 8002ed2:	e7d6      	b.n	8002e82 <_free_r+0x22>
 8002ed4:	6820      	ldr	r0, [r4, #0]
 8002ed6:	1821      	adds	r1, r4, r0
 8002ed8:	428b      	cmp	r3, r1
 8002eda:	bf01      	itttt	eq
 8002edc:	6819      	ldreq	r1, [r3, #0]
 8002ede:	685b      	ldreq	r3, [r3, #4]
 8002ee0:	1809      	addeq	r1, r1, r0
 8002ee2:	6021      	streq	r1, [r4, #0]
 8002ee4:	6063      	str	r3, [r4, #4]
 8002ee6:	6054      	str	r4, [r2, #4]
 8002ee8:	e7cb      	b.n	8002e82 <_free_r+0x22>
 8002eea:	bd38      	pop	{r3, r4, r5, pc}
 8002eec:	20000574 	.word	0x20000574

08002ef0 <sbrk_aligned>:
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	4e0f      	ldr	r6, [pc, #60]	@ (8002f30 <sbrk_aligned+0x40>)
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	6831      	ldr	r1, [r6, #0]
 8002ef8:	4605      	mov	r5, r0
 8002efa:	b911      	cbnz	r1, 8002f02 <sbrk_aligned+0x12>
 8002efc:	f000 fe26 	bl	8003b4c <_sbrk_r>
 8002f00:	6030      	str	r0, [r6, #0]
 8002f02:	4621      	mov	r1, r4
 8002f04:	4628      	mov	r0, r5
 8002f06:	f000 fe21 	bl	8003b4c <_sbrk_r>
 8002f0a:	1c43      	adds	r3, r0, #1
 8002f0c:	d103      	bne.n	8002f16 <sbrk_aligned+0x26>
 8002f0e:	f04f 34ff 	mov.w	r4, #4294967295
 8002f12:	4620      	mov	r0, r4
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
 8002f16:	1cc4      	adds	r4, r0, #3
 8002f18:	f024 0403 	bic.w	r4, r4, #3
 8002f1c:	42a0      	cmp	r0, r4
 8002f1e:	d0f8      	beq.n	8002f12 <sbrk_aligned+0x22>
 8002f20:	1a21      	subs	r1, r4, r0
 8002f22:	4628      	mov	r0, r5
 8002f24:	f000 fe12 	bl	8003b4c <_sbrk_r>
 8002f28:	3001      	adds	r0, #1
 8002f2a:	d1f2      	bne.n	8002f12 <sbrk_aligned+0x22>
 8002f2c:	e7ef      	b.n	8002f0e <sbrk_aligned+0x1e>
 8002f2e:	bf00      	nop
 8002f30:	20000570 	.word	0x20000570

08002f34 <_malloc_r>:
 8002f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f38:	1ccd      	adds	r5, r1, #3
 8002f3a:	f025 0503 	bic.w	r5, r5, #3
 8002f3e:	3508      	adds	r5, #8
 8002f40:	2d0c      	cmp	r5, #12
 8002f42:	bf38      	it	cc
 8002f44:	250c      	movcc	r5, #12
 8002f46:	2d00      	cmp	r5, #0
 8002f48:	4606      	mov	r6, r0
 8002f4a:	db01      	blt.n	8002f50 <_malloc_r+0x1c>
 8002f4c:	42a9      	cmp	r1, r5
 8002f4e:	d904      	bls.n	8002f5a <_malloc_r+0x26>
 8002f50:	230c      	movs	r3, #12
 8002f52:	6033      	str	r3, [r6, #0]
 8002f54:	2000      	movs	r0, #0
 8002f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003030 <_malloc_r+0xfc>
 8002f5e:	f000 f869 	bl	8003034 <__malloc_lock>
 8002f62:	f8d8 3000 	ldr.w	r3, [r8]
 8002f66:	461c      	mov	r4, r3
 8002f68:	bb44      	cbnz	r4, 8002fbc <_malloc_r+0x88>
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	4630      	mov	r0, r6
 8002f6e:	f7ff ffbf 	bl	8002ef0 <sbrk_aligned>
 8002f72:	1c43      	adds	r3, r0, #1
 8002f74:	4604      	mov	r4, r0
 8002f76:	d158      	bne.n	800302a <_malloc_r+0xf6>
 8002f78:	f8d8 4000 	ldr.w	r4, [r8]
 8002f7c:	4627      	mov	r7, r4
 8002f7e:	2f00      	cmp	r7, #0
 8002f80:	d143      	bne.n	800300a <_malloc_r+0xd6>
 8002f82:	2c00      	cmp	r4, #0
 8002f84:	d04b      	beq.n	800301e <_malloc_r+0xea>
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	4639      	mov	r1, r7
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	eb04 0903 	add.w	r9, r4, r3
 8002f90:	f000 fddc 	bl	8003b4c <_sbrk_r>
 8002f94:	4581      	cmp	r9, r0
 8002f96:	d142      	bne.n	800301e <_malloc_r+0xea>
 8002f98:	6821      	ldr	r1, [r4, #0]
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	1a6d      	subs	r5, r5, r1
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	f7ff ffa6 	bl	8002ef0 <sbrk_aligned>
 8002fa4:	3001      	adds	r0, #1
 8002fa6:	d03a      	beq.n	800301e <_malloc_r+0xea>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	442b      	add	r3, r5
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	f8d8 3000 	ldr.w	r3, [r8]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	bb62      	cbnz	r2, 8003010 <_malloc_r+0xdc>
 8002fb6:	f8c8 7000 	str.w	r7, [r8]
 8002fba:	e00f      	b.n	8002fdc <_malloc_r+0xa8>
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	1b52      	subs	r2, r2, r5
 8002fc0:	d420      	bmi.n	8003004 <_malloc_r+0xd0>
 8002fc2:	2a0b      	cmp	r2, #11
 8002fc4:	d917      	bls.n	8002ff6 <_malloc_r+0xc2>
 8002fc6:	1961      	adds	r1, r4, r5
 8002fc8:	42a3      	cmp	r3, r4
 8002fca:	6025      	str	r5, [r4, #0]
 8002fcc:	bf18      	it	ne
 8002fce:	6059      	strne	r1, [r3, #4]
 8002fd0:	6863      	ldr	r3, [r4, #4]
 8002fd2:	bf08      	it	eq
 8002fd4:	f8c8 1000 	streq.w	r1, [r8]
 8002fd8:	5162      	str	r2, [r4, r5]
 8002fda:	604b      	str	r3, [r1, #4]
 8002fdc:	4630      	mov	r0, r6
 8002fde:	f000 f82f 	bl	8003040 <__malloc_unlock>
 8002fe2:	f104 000b 	add.w	r0, r4, #11
 8002fe6:	1d23      	adds	r3, r4, #4
 8002fe8:	f020 0007 	bic.w	r0, r0, #7
 8002fec:	1ac2      	subs	r2, r0, r3
 8002fee:	bf1c      	itt	ne
 8002ff0:	1a1b      	subne	r3, r3, r0
 8002ff2:	50a3      	strne	r3, [r4, r2]
 8002ff4:	e7af      	b.n	8002f56 <_malloc_r+0x22>
 8002ff6:	6862      	ldr	r2, [r4, #4]
 8002ff8:	42a3      	cmp	r3, r4
 8002ffa:	bf0c      	ite	eq
 8002ffc:	f8c8 2000 	streq.w	r2, [r8]
 8003000:	605a      	strne	r2, [r3, #4]
 8003002:	e7eb      	b.n	8002fdc <_malloc_r+0xa8>
 8003004:	4623      	mov	r3, r4
 8003006:	6864      	ldr	r4, [r4, #4]
 8003008:	e7ae      	b.n	8002f68 <_malloc_r+0x34>
 800300a:	463c      	mov	r4, r7
 800300c:	687f      	ldr	r7, [r7, #4]
 800300e:	e7b6      	b.n	8002f7e <_malloc_r+0x4a>
 8003010:	461a      	mov	r2, r3
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	42a3      	cmp	r3, r4
 8003016:	d1fb      	bne.n	8003010 <_malloc_r+0xdc>
 8003018:	2300      	movs	r3, #0
 800301a:	6053      	str	r3, [r2, #4]
 800301c:	e7de      	b.n	8002fdc <_malloc_r+0xa8>
 800301e:	230c      	movs	r3, #12
 8003020:	4630      	mov	r0, r6
 8003022:	6033      	str	r3, [r6, #0]
 8003024:	f000 f80c 	bl	8003040 <__malloc_unlock>
 8003028:	e794      	b.n	8002f54 <_malloc_r+0x20>
 800302a:	6005      	str	r5, [r0, #0]
 800302c:	e7d6      	b.n	8002fdc <_malloc_r+0xa8>
 800302e:	bf00      	nop
 8003030:	20000574 	.word	0x20000574

08003034 <__malloc_lock>:
 8003034:	4801      	ldr	r0, [pc, #4]	@ (800303c <__malloc_lock+0x8>)
 8003036:	f7ff bf02 	b.w	8002e3e <__retarget_lock_acquire_recursive>
 800303a:	bf00      	nop
 800303c:	2000056c 	.word	0x2000056c

08003040 <__malloc_unlock>:
 8003040:	4801      	ldr	r0, [pc, #4]	@ (8003048 <__malloc_unlock+0x8>)
 8003042:	f7ff befd 	b.w	8002e40 <__retarget_lock_release_recursive>
 8003046:	bf00      	nop
 8003048:	2000056c 	.word	0x2000056c

0800304c <__ssputs_r>:
 800304c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003050:	461f      	mov	r7, r3
 8003052:	688e      	ldr	r6, [r1, #8]
 8003054:	4682      	mov	sl, r0
 8003056:	42be      	cmp	r6, r7
 8003058:	460c      	mov	r4, r1
 800305a:	4690      	mov	r8, r2
 800305c:	680b      	ldr	r3, [r1, #0]
 800305e:	d82d      	bhi.n	80030bc <__ssputs_r+0x70>
 8003060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003068:	d026      	beq.n	80030b8 <__ssputs_r+0x6c>
 800306a:	6965      	ldr	r5, [r4, #20]
 800306c:	6909      	ldr	r1, [r1, #16]
 800306e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003072:	eba3 0901 	sub.w	r9, r3, r1
 8003076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800307a:	1c7b      	adds	r3, r7, #1
 800307c:	444b      	add	r3, r9
 800307e:	106d      	asrs	r5, r5, #1
 8003080:	429d      	cmp	r5, r3
 8003082:	bf38      	it	cc
 8003084:	461d      	movcc	r5, r3
 8003086:	0553      	lsls	r3, r2, #21
 8003088:	d527      	bpl.n	80030da <__ssputs_r+0x8e>
 800308a:	4629      	mov	r1, r5
 800308c:	f7ff ff52 	bl	8002f34 <_malloc_r>
 8003090:	4606      	mov	r6, r0
 8003092:	b360      	cbz	r0, 80030ee <__ssputs_r+0xa2>
 8003094:	464a      	mov	r2, r9
 8003096:	6921      	ldr	r1, [r4, #16]
 8003098:	f7ff fed3 	bl	8002e42 <memcpy>
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80030a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030a6:	81a3      	strh	r3, [r4, #12]
 80030a8:	6126      	str	r6, [r4, #16]
 80030aa:	444e      	add	r6, r9
 80030ac:	6026      	str	r6, [r4, #0]
 80030ae:	463e      	mov	r6, r7
 80030b0:	6165      	str	r5, [r4, #20]
 80030b2:	eba5 0509 	sub.w	r5, r5, r9
 80030b6:	60a5      	str	r5, [r4, #8]
 80030b8:	42be      	cmp	r6, r7
 80030ba:	d900      	bls.n	80030be <__ssputs_r+0x72>
 80030bc:	463e      	mov	r6, r7
 80030be:	4632      	mov	r2, r6
 80030c0:	4641      	mov	r1, r8
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	f000 fd28 	bl	8003b18 <memmove>
 80030c8:	2000      	movs	r0, #0
 80030ca:	68a3      	ldr	r3, [r4, #8]
 80030cc:	1b9b      	subs	r3, r3, r6
 80030ce:	60a3      	str	r3, [r4, #8]
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	4433      	add	r3, r6
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030da:	462a      	mov	r2, r5
 80030dc:	f000 fd54 	bl	8003b88 <_realloc_r>
 80030e0:	4606      	mov	r6, r0
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d1e0      	bne.n	80030a8 <__ssputs_r+0x5c>
 80030e6:	4650      	mov	r0, sl
 80030e8:	6921      	ldr	r1, [r4, #16]
 80030ea:	f7ff feb9 	bl	8002e60 <_free_r>
 80030ee:	230c      	movs	r3, #12
 80030f0:	f8ca 3000 	str.w	r3, [sl]
 80030f4:	89a3      	ldrh	r3, [r4, #12]
 80030f6:	f04f 30ff 	mov.w	r0, #4294967295
 80030fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030fe:	81a3      	strh	r3, [r4, #12]
 8003100:	e7e9      	b.n	80030d6 <__ssputs_r+0x8a>
	...

08003104 <_svfiprintf_r>:
 8003104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003108:	4698      	mov	r8, r3
 800310a:	898b      	ldrh	r3, [r1, #12]
 800310c:	4607      	mov	r7, r0
 800310e:	061b      	lsls	r3, r3, #24
 8003110:	460d      	mov	r5, r1
 8003112:	4614      	mov	r4, r2
 8003114:	b09d      	sub	sp, #116	@ 0x74
 8003116:	d510      	bpl.n	800313a <_svfiprintf_r+0x36>
 8003118:	690b      	ldr	r3, [r1, #16]
 800311a:	b973      	cbnz	r3, 800313a <_svfiprintf_r+0x36>
 800311c:	2140      	movs	r1, #64	@ 0x40
 800311e:	f7ff ff09 	bl	8002f34 <_malloc_r>
 8003122:	6028      	str	r0, [r5, #0]
 8003124:	6128      	str	r0, [r5, #16]
 8003126:	b930      	cbnz	r0, 8003136 <_svfiprintf_r+0x32>
 8003128:	230c      	movs	r3, #12
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	b01d      	add	sp, #116	@ 0x74
 8003132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003136:	2340      	movs	r3, #64	@ 0x40
 8003138:	616b      	str	r3, [r5, #20]
 800313a:	2300      	movs	r3, #0
 800313c:	9309      	str	r3, [sp, #36]	@ 0x24
 800313e:	2320      	movs	r3, #32
 8003140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003144:	2330      	movs	r3, #48	@ 0x30
 8003146:	f04f 0901 	mov.w	r9, #1
 800314a:	f8cd 800c 	str.w	r8, [sp, #12]
 800314e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80032e8 <_svfiprintf_r+0x1e4>
 8003152:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003156:	4623      	mov	r3, r4
 8003158:	469a      	mov	sl, r3
 800315a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800315e:	b10a      	cbz	r2, 8003164 <_svfiprintf_r+0x60>
 8003160:	2a25      	cmp	r2, #37	@ 0x25
 8003162:	d1f9      	bne.n	8003158 <_svfiprintf_r+0x54>
 8003164:	ebba 0b04 	subs.w	fp, sl, r4
 8003168:	d00b      	beq.n	8003182 <_svfiprintf_r+0x7e>
 800316a:	465b      	mov	r3, fp
 800316c:	4622      	mov	r2, r4
 800316e:	4629      	mov	r1, r5
 8003170:	4638      	mov	r0, r7
 8003172:	f7ff ff6b 	bl	800304c <__ssputs_r>
 8003176:	3001      	adds	r0, #1
 8003178:	f000 80a7 	beq.w	80032ca <_svfiprintf_r+0x1c6>
 800317c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800317e:	445a      	add	r2, fp
 8003180:	9209      	str	r2, [sp, #36]	@ 0x24
 8003182:	f89a 3000 	ldrb.w	r3, [sl]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 809f 	beq.w	80032ca <_svfiprintf_r+0x1c6>
 800318c:	2300      	movs	r3, #0
 800318e:	f04f 32ff 	mov.w	r2, #4294967295
 8003192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003196:	f10a 0a01 	add.w	sl, sl, #1
 800319a:	9304      	str	r3, [sp, #16]
 800319c:	9307      	str	r3, [sp, #28]
 800319e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80031a4:	4654      	mov	r4, sl
 80031a6:	2205      	movs	r2, #5
 80031a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031ac:	484e      	ldr	r0, [pc, #312]	@ (80032e8 <_svfiprintf_r+0x1e4>)
 80031ae:	f000 fcdd 	bl	8003b6c <memchr>
 80031b2:	9a04      	ldr	r2, [sp, #16]
 80031b4:	b9d8      	cbnz	r0, 80031ee <_svfiprintf_r+0xea>
 80031b6:	06d0      	lsls	r0, r2, #27
 80031b8:	bf44      	itt	mi
 80031ba:	2320      	movmi	r3, #32
 80031bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031c0:	0711      	lsls	r1, r2, #28
 80031c2:	bf44      	itt	mi
 80031c4:	232b      	movmi	r3, #43	@ 0x2b
 80031c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031ca:	f89a 3000 	ldrb.w	r3, [sl]
 80031ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80031d0:	d015      	beq.n	80031fe <_svfiprintf_r+0xfa>
 80031d2:	4654      	mov	r4, sl
 80031d4:	2000      	movs	r0, #0
 80031d6:	f04f 0c0a 	mov.w	ip, #10
 80031da:	9a07      	ldr	r2, [sp, #28]
 80031dc:	4621      	mov	r1, r4
 80031de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031e2:	3b30      	subs	r3, #48	@ 0x30
 80031e4:	2b09      	cmp	r3, #9
 80031e6:	d94b      	bls.n	8003280 <_svfiprintf_r+0x17c>
 80031e8:	b1b0      	cbz	r0, 8003218 <_svfiprintf_r+0x114>
 80031ea:	9207      	str	r2, [sp, #28]
 80031ec:	e014      	b.n	8003218 <_svfiprintf_r+0x114>
 80031ee:	eba0 0308 	sub.w	r3, r0, r8
 80031f2:	fa09 f303 	lsl.w	r3, r9, r3
 80031f6:	4313      	orrs	r3, r2
 80031f8:	46a2      	mov	sl, r4
 80031fa:	9304      	str	r3, [sp, #16]
 80031fc:	e7d2      	b.n	80031a4 <_svfiprintf_r+0xa0>
 80031fe:	9b03      	ldr	r3, [sp, #12]
 8003200:	1d19      	adds	r1, r3, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	9103      	str	r1, [sp, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	bfbb      	ittet	lt
 800320a:	425b      	neglt	r3, r3
 800320c:	f042 0202 	orrlt.w	r2, r2, #2
 8003210:	9307      	strge	r3, [sp, #28]
 8003212:	9307      	strlt	r3, [sp, #28]
 8003214:	bfb8      	it	lt
 8003216:	9204      	strlt	r2, [sp, #16]
 8003218:	7823      	ldrb	r3, [r4, #0]
 800321a:	2b2e      	cmp	r3, #46	@ 0x2e
 800321c:	d10a      	bne.n	8003234 <_svfiprintf_r+0x130>
 800321e:	7863      	ldrb	r3, [r4, #1]
 8003220:	2b2a      	cmp	r3, #42	@ 0x2a
 8003222:	d132      	bne.n	800328a <_svfiprintf_r+0x186>
 8003224:	9b03      	ldr	r3, [sp, #12]
 8003226:	3402      	adds	r4, #2
 8003228:	1d1a      	adds	r2, r3, #4
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	9203      	str	r2, [sp, #12]
 800322e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003232:	9305      	str	r3, [sp, #20]
 8003234:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80032ec <_svfiprintf_r+0x1e8>
 8003238:	2203      	movs	r2, #3
 800323a:	4650      	mov	r0, sl
 800323c:	7821      	ldrb	r1, [r4, #0]
 800323e:	f000 fc95 	bl	8003b6c <memchr>
 8003242:	b138      	cbz	r0, 8003254 <_svfiprintf_r+0x150>
 8003244:	2240      	movs	r2, #64	@ 0x40
 8003246:	9b04      	ldr	r3, [sp, #16]
 8003248:	eba0 000a 	sub.w	r0, r0, sl
 800324c:	4082      	lsls	r2, r0
 800324e:	4313      	orrs	r3, r2
 8003250:	3401      	adds	r4, #1
 8003252:	9304      	str	r3, [sp, #16]
 8003254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003258:	2206      	movs	r2, #6
 800325a:	4825      	ldr	r0, [pc, #148]	@ (80032f0 <_svfiprintf_r+0x1ec>)
 800325c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003260:	f000 fc84 	bl	8003b6c <memchr>
 8003264:	2800      	cmp	r0, #0
 8003266:	d036      	beq.n	80032d6 <_svfiprintf_r+0x1d2>
 8003268:	4b22      	ldr	r3, [pc, #136]	@ (80032f4 <_svfiprintf_r+0x1f0>)
 800326a:	bb1b      	cbnz	r3, 80032b4 <_svfiprintf_r+0x1b0>
 800326c:	9b03      	ldr	r3, [sp, #12]
 800326e:	3307      	adds	r3, #7
 8003270:	f023 0307 	bic.w	r3, r3, #7
 8003274:	3308      	adds	r3, #8
 8003276:	9303      	str	r3, [sp, #12]
 8003278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800327a:	4433      	add	r3, r6
 800327c:	9309      	str	r3, [sp, #36]	@ 0x24
 800327e:	e76a      	b.n	8003156 <_svfiprintf_r+0x52>
 8003280:	460c      	mov	r4, r1
 8003282:	2001      	movs	r0, #1
 8003284:	fb0c 3202 	mla	r2, ip, r2, r3
 8003288:	e7a8      	b.n	80031dc <_svfiprintf_r+0xd8>
 800328a:	2300      	movs	r3, #0
 800328c:	f04f 0c0a 	mov.w	ip, #10
 8003290:	4619      	mov	r1, r3
 8003292:	3401      	adds	r4, #1
 8003294:	9305      	str	r3, [sp, #20]
 8003296:	4620      	mov	r0, r4
 8003298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800329c:	3a30      	subs	r2, #48	@ 0x30
 800329e:	2a09      	cmp	r2, #9
 80032a0:	d903      	bls.n	80032aa <_svfiprintf_r+0x1a6>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0c6      	beq.n	8003234 <_svfiprintf_r+0x130>
 80032a6:	9105      	str	r1, [sp, #20]
 80032a8:	e7c4      	b.n	8003234 <_svfiprintf_r+0x130>
 80032aa:	4604      	mov	r4, r0
 80032ac:	2301      	movs	r3, #1
 80032ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80032b2:	e7f0      	b.n	8003296 <_svfiprintf_r+0x192>
 80032b4:	ab03      	add	r3, sp, #12
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	462a      	mov	r2, r5
 80032ba:	4638      	mov	r0, r7
 80032bc:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <_svfiprintf_r+0x1f4>)
 80032be:	a904      	add	r1, sp, #16
 80032c0:	f3af 8000 	nop.w
 80032c4:	1c42      	adds	r2, r0, #1
 80032c6:	4606      	mov	r6, r0
 80032c8:	d1d6      	bne.n	8003278 <_svfiprintf_r+0x174>
 80032ca:	89ab      	ldrh	r3, [r5, #12]
 80032cc:	065b      	lsls	r3, r3, #25
 80032ce:	f53f af2d 	bmi.w	800312c <_svfiprintf_r+0x28>
 80032d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032d4:	e72c      	b.n	8003130 <_svfiprintf_r+0x2c>
 80032d6:	ab03      	add	r3, sp, #12
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	462a      	mov	r2, r5
 80032dc:	4638      	mov	r0, r7
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <_svfiprintf_r+0x1f4>)
 80032e0:	a904      	add	r1, sp, #16
 80032e2:	f000 f9bd 	bl	8003660 <_printf_i>
 80032e6:	e7ed      	b.n	80032c4 <_svfiprintf_r+0x1c0>
 80032e8:	08003d86 	.word	0x08003d86
 80032ec:	08003d8c 	.word	0x08003d8c
 80032f0:	08003d90 	.word	0x08003d90
 80032f4:	00000000 	.word	0x00000000
 80032f8:	0800304d 	.word	0x0800304d

080032fc <__sfputc_r>:
 80032fc:	6893      	ldr	r3, [r2, #8]
 80032fe:	b410      	push	{r4}
 8003300:	3b01      	subs	r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	6093      	str	r3, [r2, #8]
 8003306:	da07      	bge.n	8003318 <__sfputc_r+0x1c>
 8003308:	6994      	ldr	r4, [r2, #24]
 800330a:	42a3      	cmp	r3, r4
 800330c:	db01      	blt.n	8003312 <__sfputc_r+0x16>
 800330e:	290a      	cmp	r1, #10
 8003310:	d102      	bne.n	8003318 <__sfputc_r+0x1c>
 8003312:	bc10      	pop	{r4}
 8003314:	f000 bb6c 	b.w	80039f0 <__swbuf_r>
 8003318:	6813      	ldr	r3, [r2, #0]
 800331a:	1c58      	adds	r0, r3, #1
 800331c:	6010      	str	r0, [r2, #0]
 800331e:	7019      	strb	r1, [r3, #0]
 8003320:	4608      	mov	r0, r1
 8003322:	bc10      	pop	{r4}
 8003324:	4770      	bx	lr

08003326 <__sfputs_r>:
 8003326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003328:	4606      	mov	r6, r0
 800332a:	460f      	mov	r7, r1
 800332c:	4614      	mov	r4, r2
 800332e:	18d5      	adds	r5, r2, r3
 8003330:	42ac      	cmp	r4, r5
 8003332:	d101      	bne.n	8003338 <__sfputs_r+0x12>
 8003334:	2000      	movs	r0, #0
 8003336:	e007      	b.n	8003348 <__sfputs_r+0x22>
 8003338:	463a      	mov	r2, r7
 800333a:	4630      	mov	r0, r6
 800333c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003340:	f7ff ffdc 	bl	80032fc <__sfputc_r>
 8003344:	1c43      	adds	r3, r0, #1
 8003346:	d1f3      	bne.n	8003330 <__sfputs_r+0xa>
 8003348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800334c <_vfiprintf_r>:
 800334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003350:	460d      	mov	r5, r1
 8003352:	4614      	mov	r4, r2
 8003354:	4698      	mov	r8, r3
 8003356:	4606      	mov	r6, r0
 8003358:	b09d      	sub	sp, #116	@ 0x74
 800335a:	b118      	cbz	r0, 8003364 <_vfiprintf_r+0x18>
 800335c:	6a03      	ldr	r3, [r0, #32]
 800335e:	b90b      	cbnz	r3, 8003364 <_vfiprintf_r+0x18>
 8003360:	f7ff fc48 	bl	8002bf4 <__sinit>
 8003364:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003366:	07d9      	lsls	r1, r3, #31
 8003368:	d405      	bmi.n	8003376 <_vfiprintf_r+0x2a>
 800336a:	89ab      	ldrh	r3, [r5, #12]
 800336c:	059a      	lsls	r2, r3, #22
 800336e:	d402      	bmi.n	8003376 <_vfiprintf_r+0x2a>
 8003370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003372:	f7ff fd64 	bl	8002e3e <__retarget_lock_acquire_recursive>
 8003376:	89ab      	ldrh	r3, [r5, #12]
 8003378:	071b      	lsls	r3, r3, #28
 800337a:	d501      	bpl.n	8003380 <_vfiprintf_r+0x34>
 800337c:	692b      	ldr	r3, [r5, #16]
 800337e:	b99b      	cbnz	r3, 80033a8 <_vfiprintf_r+0x5c>
 8003380:	4629      	mov	r1, r5
 8003382:	4630      	mov	r0, r6
 8003384:	f000 fb72 	bl	8003a6c <__swsetup_r>
 8003388:	b170      	cbz	r0, 80033a8 <_vfiprintf_r+0x5c>
 800338a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800338c:	07dc      	lsls	r4, r3, #31
 800338e:	d504      	bpl.n	800339a <_vfiprintf_r+0x4e>
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	b01d      	add	sp, #116	@ 0x74
 8003396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339a:	89ab      	ldrh	r3, [r5, #12]
 800339c:	0598      	lsls	r0, r3, #22
 800339e:	d4f7      	bmi.n	8003390 <_vfiprintf_r+0x44>
 80033a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033a2:	f7ff fd4d 	bl	8002e40 <__retarget_lock_release_recursive>
 80033a6:	e7f3      	b.n	8003390 <_vfiprintf_r+0x44>
 80033a8:	2300      	movs	r3, #0
 80033aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80033ac:	2320      	movs	r3, #32
 80033ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033b2:	2330      	movs	r3, #48	@ 0x30
 80033b4:	f04f 0901 	mov.w	r9, #1
 80033b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80033bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003568 <_vfiprintf_r+0x21c>
 80033c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033c4:	4623      	mov	r3, r4
 80033c6:	469a      	mov	sl, r3
 80033c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033cc:	b10a      	cbz	r2, 80033d2 <_vfiprintf_r+0x86>
 80033ce:	2a25      	cmp	r2, #37	@ 0x25
 80033d0:	d1f9      	bne.n	80033c6 <_vfiprintf_r+0x7a>
 80033d2:	ebba 0b04 	subs.w	fp, sl, r4
 80033d6:	d00b      	beq.n	80033f0 <_vfiprintf_r+0xa4>
 80033d8:	465b      	mov	r3, fp
 80033da:	4622      	mov	r2, r4
 80033dc:	4629      	mov	r1, r5
 80033de:	4630      	mov	r0, r6
 80033e0:	f7ff ffa1 	bl	8003326 <__sfputs_r>
 80033e4:	3001      	adds	r0, #1
 80033e6:	f000 80a7 	beq.w	8003538 <_vfiprintf_r+0x1ec>
 80033ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033ec:	445a      	add	r2, fp
 80033ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80033f0:	f89a 3000 	ldrb.w	r3, [sl]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 809f 	beq.w	8003538 <_vfiprintf_r+0x1ec>
 80033fa:	2300      	movs	r3, #0
 80033fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003404:	f10a 0a01 	add.w	sl, sl, #1
 8003408:	9304      	str	r3, [sp, #16]
 800340a:	9307      	str	r3, [sp, #28]
 800340c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003410:	931a      	str	r3, [sp, #104]	@ 0x68
 8003412:	4654      	mov	r4, sl
 8003414:	2205      	movs	r2, #5
 8003416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800341a:	4853      	ldr	r0, [pc, #332]	@ (8003568 <_vfiprintf_r+0x21c>)
 800341c:	f000 fba6 	bl	8003b6c <memchr>
 8003420:	9a04      	ldr	r2, [sp, #16]
 8003422:	b9d8      	cbnz	r0, 800345c <_vfiprintf_r+0x110>
 8003424:	06d1      	lsls	r1, r2, #27
 8003426:	bf44      	itt	mi
 8003428:	2320      	movmi	r3, #32
 800342a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800342e:	0713      	lsls	r3, r2, #28
 8003430:	bf44      	itt	mi
 8003432:	232b      	movmi	r3, #43	@ 0x2b
 8003434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003438:	f89a 3000 	ldrb.w	r3, [sl]
 800343c:	2b2a      	cmp	r3, #42	@ 0x2a
 800343e:	d015      	beq.n	800346c <_vfiprintf_r+0x120>
 8003440:	4654      	mov	r4, sl
 8003442:	2000      	movs	r0, #0
 8003444:	f04f 0c0a 	mov.w	ip, #10
 8003448:	9a07      	ldr	r2, [sp, #28]
 800344a:	4621      	mov	r1, r4
 800344c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003450:	3b30      	subs	r3, #48	@ 0x30
 8003452:	2b09      	cmp	r3, #9
 8003454:	d94b      	bls.n	80034ee <_vfiprintf_r+0x1a2>
 8003456:	b1b0      	cbz	r0, 8003486 <_vfiprintf_r+0x13a>
 8003458:	9207      	str	r2, [sp, #28]
 800345a:	e014      	b.n	8003486 <_vfiprintf_r+0x13a>
 800345c:	eba0 0308 	sub.w	r3, r0, r8
 8003460:	fa09 f303 	lsl.w	r3, r9, r3
 8003464:	4313      	orrs	r3, r2
 8003466:	46a2      	mov	sl, r4
 8003468:	9304      	str	r3, [sp, #16]
 800346a:	e7d2      	b.n	8003412 <_vfiprintf_r+0xc6>
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	1d19      	adds	r1, r3, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	9103      	str	r1, [sp, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	bfbb      	ittet	lt
 8003478:	425b      	neglt	r3, r3
 800347a:	f042 0202 	orrlt.w	r2, r2, #2
 800347e:	9307      	strge	r3, [sp, #28]
 8003480:	9307      	strlt	r3, [sp, #28]
 8003482:	bfb8      	it	lt
 8003484:	9204      	strlt	r2, [sp, #16]
 8003486:	7823      	ldrb	r3, [r4, #0]
 8003488:	2b2e      	cmp	r3, #46	@ 0x2e
 800348a:	d10a      	bne.n	80034a2 <_vfiprintf_r+0x156>
 800348c:	7863      	ldrb	r3, [r4, #1]
 800348e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003490:	d132      	bne.n	80034f8 <_vfiprintf_r+0x1ac>
 8003492:	9b03      	ldr	r3, [sp, #12]
 8003494:	3402      	adds	r4, #2
 8003496:	1d1a      	adds	r2, r3, #4
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	9203      	str	r2, [sp, #12]
 800349c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034a0:	9305      	str	r3, [sp, #20]
 80034a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800356c <_vfiprintf_r+0x220>
 80034a6:	2203      	movs	r2, #3
 80034a8:	4650      	mov	r0, sl
 80034aa:	7821      	ldrb	r1, [r4, #0]
 80034ac:	f000 fb5e 	bl	8003b6c <memchr>
 80034b0:	b138      	cbz	r0, 80034c2 <_vfiprintf_r+0x176>
 80034b2:	2240      	movs	r2, #64	@ 0x40
 80034b4:	9b04      	ldr	r3, [sp, #16]
 80034b6:	eba0 000a 	sub.w	r0, r0, sl
 80034ba:	4082      	lsls	r2, r0
 80034bc:	4313      	orrs	r3, r2
 80034be:	3401      	adds	r4, #1
 80034c0:	9304      	str	r3, [sp, #16]
 80034c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c6:	2206      	movs	r2, #6
 80034c8:	4829      	ldr	r0, [pc, #164]	@ (8003570 <_vfiprintf_r+0x224>)
 80034ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034ce:	f000 fb4d 	bl	8003b6c <memchr>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d03f      	beq.n	8003556 <_vfiprintf_r+0x20a>
 80034d6:	4b27      	ldr	r3, [pc, #156]	@ (8003574 <_vfiprintf_r+0x228>)
 80034d8:	bb1b      	cbnz	r3, 8003522 <_vfiprintf_r+0x1d6>
 80034da:	9b03      	ldr	r3, [sp, #12]
 80034dc:	3307      	adds	r3, #7
 80034de:	f023 0307 	bic.w	r3, r3, #7
 80034e2:	3308      	adds	r3, #8
 80034e4:	9303      	str	r3, [sp, #12]
 80034e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034e8:	443b      	add	r3, r7
 80034ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ec:	e76a      	b.n	80033c4 <_vfiprintf_r+0x78>
 80034ee:	460c      	mov	r4, r1
 80034f0:	2001      	movs	r0, #1
 80034f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034f6:	e7a8      	b.n	800344a <_vfiprintf_r+0xfe>
 80034f8:	2300      	movs	r3, #0
 80034fa:	f04f 0c0a 	mov.w	ip, #10
 80034fe:	4619      	mov	r1, r3
 8003500:	3401      	adds	r4, #1
 8003502:	9305      	str	r3, [sp, #20]
 8003504:	4620      	mov	r0, r4
 8003506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800350a:	3a30      	subs	r2, #48	@ 0x30
 800350c:	2a09      	cmp	r2, #9
 800350e:	d903      	bls.n	8003518 <_vfiprintf_r+0x1cc>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0c6      	beq.n	80034a2 <_vfiprintf_r+0x156>
 8003514:	9105      	str	r1, [sp, #20]
 8003516:	e7c4      	b.n	80034a2 <_vfiprintf_r+0x156>
 8003518:	4604      	mov	r4, r0
 800351a:	2301      	movs	r3, #1
 800351c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003520:	e7f0      	b.n	8003504 <_vfiprintf_r+0x1b8>
 8003522:	ab03      	add	r3, sp, #12
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	462a      	mov	r2, r5
 8003528:	4630      	mov	r0, r6
 800352a:	4b13      	ldr	r3, [pc, #76]	@ (8003578 <_vfiprintf_r+0x22c>)
 800352c:	a904      	add	r1, sp, #16
 800352e:	f3af 8000 	nop.w
 8003532:	4607      	mov	r7, r0
 8003534:	1c78      	adds	r0, r7, #1
 8003536:	d1d6      	bne.n	80034e6 <_vfiprintf_r+0x19a>
 8003538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800353a:	07d9      	lsls	r1, r3, #31
 800353c:	d405      	bmi.n	800354a <_vfiprintf_r+0x1fe>
 800353e:	89ab      	ldrh	r3, [r5, #12]
 8003540:	059a      	lsls	r2, r3, #22
 8003542:	d402      	bmi.n	800354a <_vfiprintf_r+0x1fe>
 8003544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003546:	f7ff fc7b 	bl	8002e40 <__retarget_lock_release_recursive>
 800354a:	89ab      	ldrh	r3, [r5, #12]
 800354c:	065b      	lsls	r3, r3, #25
 800354e:	f53f af1f 	bmi.w	8003390 <_vfiprintf_r+0x44>
 8003552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003554:	e71e      	b.n	8003394 <_vfiprintf_r+0x48>
 8003556:	ab03      	add	r3, sp, #12
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	462a      	mov	r2, r5
 800355c:	4630      	mov	r0, r6
 800355e:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <_vfiprintf_r+0x22c>)
 8003560:	a904      	add	r1, sp, #16
 8003562:	f000 f87d 	bl	8003660 <_printf_i>
 8003566:	e7e4      	b.n	8003532 <_vfiprintf_r+0x1e6>
 8003568:	08003d86 	.word	0x08003d86
 800356c:	08003d8c 	.word	0x08003d8c
 8003570:	08003d90 	.word	0x08003d90
 8003574:	00000000 	.word	0x00000000
 8003578:	08003327 	.word	0x08003327

0800357c <_printf_common>:
 800357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003580:	4616      	mov	r6, r2
 8003582:	4698      	mov	r8, r3
 8003584:	688a      	ldr	r2, [r1, #8]
 8003586:	690b      	ldr	r3, [r1, #16]
 8003588:	4607      	mov	r7, r0
 800358a:	4293      	cmp	r3, r2
 800358c:	bfb8      	it	lt
 800358e:	4613      	movlt	r3, r2
 8003590:	6033      	str	r3, [r6, #0]
 8003592:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003596:	460c      	mov	r4, r1
 8003598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800359c:	b10a      	cbz	r2, 80035a2 <_printf_common+0x26>
 800359e:	3301      	adds	r3, #1
 80035a0:	6033      	str	r3, [r6, #0]
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	0699      	lsls	r1, r3, #26
 80035a6:	bf42      	ittt	mi
 80035a8:	6833      	ldrmi	r3, [r6, #0]
 80035aa:	3302      	addmi	r3, #2
 80035ac:	6033      	strmi	r3, [r6, #0]
 80035ae:	6825      	ldr	r5, [r4, #0]
 80035b0:	f015 0506 	ands.w	r5, r5, #6
 80035b4:	d106      	bne.n	80035c4 <_printf_common+0x48>
 80035b6:	f104 0a19 	add.w	sl, r4, #25
 80035ba:	68e3      	ldr	r3, [r4, #12]
 80035bc:	6832      	ldr	r2, [r6, #0]
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	42ab      	cmp	r3, r5
 80035c2:	dc2b      	bgt.n	800361c <_printf_common+0xa0>
 80035c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035c8:	6822      	ldr	r2, [r4, #0]
 80035ca:	3b00      	subs	r3, #0
 80035cc:	bf18      	it	ne
 80035ce:	2301      	movne	r3, #1
 80035d0:	0692      	lsls	r2, r2, #26
 80035d2:	d430      	bmi.n	8003636 <_printf_common+0xba>
 80035d4:	4641      	mov	r1, r8
 80035d6:	4638      	mov	r0, r7
 80035d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035dc:	47c8      	blx	r9
 80035de:	3001      	adds	r0, #1
 80035e0:	d023      	beq.n	800362a <_printf_common+0xae>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	6922      	ldr	r2, [r4, #16]
 80035e6:	f003 0306 	and.w	r3, r3, #6
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf14      	ite	ne
 80035ee:	2500      	movne	r5, #0
 80035f0:	6833      	ldreq	r3, [r6, #0]
 80035f2:	f04f 0600 	mov.w	r6, #0
 80035f6:	bf08      	it	eq
 80035f8:	68e5      	ldreq	r5, [r4, #12]
 80035fa:	f104 041a 	add.w	r4, r4, #26
 80035fe:	bf08      	it	eq
 8003600:	1aed      	subeq	r5, r5, r3
 8003602:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003606:	bf08      	it	eq
 8003608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800360c:	4293      	cmp	r3, r2
 800360e:	bfc4      	itt	gt
 8003610:	1a9b      	subgt	r3, r3, r2
 8003612:	18ed      	addgt	r5, r5, r3
 8003614:	42b5      	cmp	r5, r6
 8003616:	d11a      	bne.n	800364e <_printf_common+0xd2>
 8003618:	2000      	movs	r0, #0
 800361a:	e008      	b.n	800362e <_printf_common+0xb2>
 800361c:	2301      	movs	r3, #1
 800361e:	4652      	mov	r2, sl
 8003620:	4641      	mov	r1, r8
 8003622:	4638      	mov	r0, r7
 8003624:	47c8      	blx	r9
 8003626:	3001      	adds	r0, #1
 8003628:	d103      	bne.n	8003632 <_printf_common+0xb6>
 800362a:	f04f 30ff 	mov.w	r0, #4294967295
 800362e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003632:	3501      	adds	r5, #1
 8003634:	e7c1      	b.n	80035ba <_printf_common+0x3e>
 8003636:	2030      	movs	r0, #48	@ 0x30
 8003638:	18e1      	adds	r1, r4, r3
 800363a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003644:	4422      	add	r2, r4
 8003646:	3302      	adds	r3, #2
 8003648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800364c:	e7c2      	b.n	80035d4 <_printf_common+0x58>
 800364e:	2301      	movs	r3, #1
 8003650:	4622      	mov	r2, r4
 8003652:	4641      	mov	r1, r8
 8003654:	4638      	mov	r0, r7
 8003656:	47c8      	blx	r9
 8003658:	3001      	adds	r0, #1
 800365a:	d0e6      	beq.n	800362a <_printf_common+0xae>
 800365c:	3601      	adds	r6, #1
 800365e:	e7d9      	b.n	8003614 <_printf_common+0x98>

08003660 <_printf_i>:
 8003660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003664:	7e0f      	ldrb	r7, [r1, #24]
 8003666:	4691      	mov	r9, r2
 8003668:	2f78      	cmp	r7, #120	@ 0x78
 800366a:	4680      	mov	r8, r0
 800366c:	460c      	mov	r4, r1
 800366e:	469a      	mov	sl, r3
 8003670:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003672:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003676:	d807      	bhi.n	8003688 <_printf_i+0x28>
 8003678:	2f62      	cmp	r7, #98	@ 0x62
 800367a:	d80a      	bhi.n	8003692 <_printf_i+0x32>
 800367c:	2f00      	cmp	r7, #0
 800367e:	f000 80d3 	beq.w	8003828 <_printf_i+0x1c8>
 8003682:	2f58      	cmp	r7, #88	@ 0x58
 8003684:	f000 80ba 	beq.w	80037fc <_printf_i+0x19c>
 8003688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800368c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003690:	e03a      	b.n	8003708 <_printf_i+0xa8>
 8003692:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003696:	2b15      	cmp	r3, #21
 8003698:	d8f6      	bhi.n	8003688 <_printf_i+0x28>
 800369a:	a101      	add	r1, pc, #4	@ (adr r1, 80036a0 <_printf_i+0x40>)
 800369c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036a0:	080036f9 	.word	0x080036f9
 80036a4:	0800370d 	.word	0x0800370d
 80036a8:	08003689 	.word	0x08003689
 80036ac:	08003689 	.word	0x08003689
 80036b0:	08003689 	.word	0x08003689
 80036b4:	08003689 	.word	0x08003689
 80036b8:	0800370d 	.word	0x0800370d
 80036bc:	08003689 	.word	0x08003689
 80036c0:	08003689 	.word	0x08003689
 80036c4:	08003689 	.word	0x08003689
 80036c8:	08003689 	.word	0x08003689
 80036cc:	0800380f 	.word	0x0800380f
 80036d0:	08003737 	.word	0x08003737
 80036d4:	080037c9 	.word	0x080037c9
 80036d8:	08003689 	.word	0x08003689
 80036dc:	08003689 	.word	0x08003689
 80036e0:	08003831 	.word	0x08003831
 80036e4:	08003689 	.word	0x08003689
 80036e8:	08003737 	.word	0x08003737
 80036ec:	08003689 	.word	0x08003689
 80036f0:	08003689 	.word	0x08003689
 80036f4:	080037d1 	.word	0x080037d1
 80036f8:	6833      	ldr	r3, [r6, #0]
 80036fa:	1d1a      	adds	r2, r3, #4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6032      	str	r2, [r6, #0]
 8003700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003708:	2301      	movs	r3, #1
 800370a:	e09e      	b.n	800384a <_printf_i+0x1ea>
 800370c:	6833      	ldr	r3, [r6, #0]
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	1d19      	adds	r1, r3, #4
 8003712:	6031      	str	r1, [r6, #0]
 8003714:	0606      	lsls	r6, r0, #24
 8003716:	d501      	bpl.n	800371c <_printf_i+0xbc>
 8003718:	681d      	ldr	r5, [r3, #0]
 800371a:	e003      	b.n	8003724 <_printf_i+0xc4>
 800371c:	0645      	lsls	r5, r0, #25
 800371e:	d5fb      	bpl.n	8003718 <_printf_i+0xb8>
 8003720:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003724:	2d00      	cmp	r5, #0
 8003726:	da03      	bge.n	8003730 <_printf_i+0xd0>
 8003728:	232d      	movs	r3, #45	@ 0x2d
 800372a:	426d      	negs	r5, r5
 800372c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003730:	230a      	movs	r3, #10
 8003732:	4859      	ldr	r0, [pc, #356]	@ (8003898 <_printf_i+0x238>)
 8003734:	e011      	b.n	800375a <_printf_i+0xfa>
 8003736:	6821      	ldr	r1, [r4, #0]
 8003738:	6833      	ldr	r3, [r6, #0]
 800373a:	0608      	lsls	r0, r1, #24
 800373c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003740:	d402      	bmi.n	8003748 <_printf_i+0xe8>
 8003742:	0649      	lsls	r1, r1, #25
 8003744:	bf48      	it	mi
 8003746:	b2ad      	uxthmi	r5, r5
 8003748:	2f6f      	cmp	r7, #111	@ 0x6f
 800374a:	6033      	str	r3, [r6, #0]
 800374c:	bf14      	ite	ne
 800374e:	230a      	movne	r3, #10
 8003750:	2308      	moveq	r3, #8
 8003752:	4851      	ldr	r0, [pc, #324]	@ (8003898 <_printf_i+0x238>)
 8003754:	2100      	movs	r1, #0
 8003756:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800375a:	6866      	ldr	r6, [r4, #4]
 800375c:	2e00      	cmp	r6, #0
 800375e:	bfa8      	it	ge
 8003760:	6821      	ldrge	r1, [r4, #0]
 8003762:	60a6      	str	r6, [r4, #8]
 8003764:	bfa4      	itt	ge
 8003766:	f021 0104 	bicge.w	r1, r1, #4
 800376a:	6021      	strge	r1, [r4, #0]
 800376c:	b90d      	cbnz	r5, 8003772 <_printf_i+0x112>
 800376e:	2e00      	cmp	r6, #0
 8003770:	d04b      	beq.n	800380a <_printf_i+0x1aa>
 8003772:	4616      	mov	r6, r2
 8003774:	fbb5 f1f3 	udiv	r1, r5, r3
 8003778:	fb03 5711 	mls	r7, r3, r1, r5
 800377c:	5dc7      	ldrb	r7, [r0, r7]
 800377e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003782:	462f      	mov	r7, r5
 8003784:	42bb      	cmp	r3, r7
 8003786:	460d      	mov	r5, r1
 8003788:	d9f4      	bls.n	8003774 <_printf_i+0x114>
 800378a:	2b08      	cmp	r3, #8
 800378c:	d10b      	bne.n	80037a6 <_printf_i+0x146>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	07df      	lsls	r7, r3, #31
 8003792:	d508      	bpl.n	80037a6 <_printf_i+0x146>
 8003794:	6923      	ldr	r3, [r4, #16]
 8003796:	6861      	ldr	r1, [r4, #4]
 8003798:	4299      	cmp	r1, r3
 800379a:	bfde      	ittt	le
 800379c:	2330      	movle	r3, #48	@ 0x30
 800379e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037a6:	1b92      	subs	r2, r2, r6
 80037a8:	6122      	str	r2, [r4, #16]
 80037aa:	464b      	mov	r3, r9
 80037ac:	4621      	mov	r1, r4
 80037ae:	4640      	mov	r0, r8
 80037b0:	f8cd a000 	str.w	sl, [sp]
 80037b4:	aa03      	add	r2, sp, #12
 80037b6:	f7ff fee1 	bl	800357c <_printf_common>
 80037ba:	3001      	adds	r0, #1
 80037bc:	d14a      	bne.n	8003854 <_printf_i+0x1f4>
 80037be:	f04f 30ff 	mov.w	r0, #4294967295
 80037c2:	b004      	add	sp, #16
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	f043 0320 	orr.w	r3, r3, #32
 80037ce:	6023      	str	r3, [r4, #0]
 80037d0:	2778      	movs	r7, #120	@ 0x78
 80037d2:	4832      	ldr	r0, [pc, #200]	@ (800389c <_printf_i+0x23c>)
 80037d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	6831      	ldr	r1, [r6, #0]
 80037dc:	061f      	lsls	r7, r3, #24
 80037de:	f851 5b04 	ldr.w	r5, [r1], #4
 80037e2:	d402      	bmi.n	80037ea <_printf_i+0x18a>
 80037e4:	065f      	lsls	r7, r3, #25
 80037e6:	bf48      	it	mi
 80037e8:	b2ad      	uxthmi	r5, r5
 80037ea:	6031      	str	r1, [r6, #0]
 80037ec:	07d9      	lsls	r1, r3, #31
 80037ee:	bf44      	itt	mi
 80037f0:	f043 0320 	orrmi.w	r3, r3, #32
 80037f4:	6023      	strmi	r3, [r4, #0]
 80037f6:	b11d      	cbz	r5, 8003800 <_printf_i+0x1a0>
 80037f8:	2310      	movs	r3, #16
 80037fa:	e7ab      	b.n	8003754 <_printf_i+0xf4>
 80037fc:	4826      	ldr	r0, [pc, #152]	@ (8003898 <_printf_i+0x238>)
 80037fe:	e7e9      	b.n	80037d4 <_printf_i+0x174>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	f023 0320 	bic.w	r3, r3, #32
 8003806:	6023      	str	r3, [r4, #0]
 8003808:	e7f6      	b.n	80037f8 <_printf_i+0x198>
 800380a:	4616      	mov	r6, r2
 800380c:	e7bd      	b.n	800378a <_printf_i+0x12a>
 800380e:	6833      	ldr	r3, [r6, #0]
 8003810:	6825      	ldr	r5, [r4, #0]
 8003812:	1d18      	adds	r0, r3, #4
 8003814:	6961      	ldr	r1, [r4, #20]
 8003816:	6030      	str	r0, [r6, #0]
 8003818:	062e      	lsls	r6, r5, #24
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	d501      	bpl.n	8003822 <_printf_i+0x1c2>
 800381e:	6019      	str	r1, [r3, #0]
 8003820:	e002      	b.n	8003828 <_printf_i+0x1c8>
 8003822:	0668      	lsls	r0, r5, #25
 8003824:	d5fb      	bpl.n	800381e <_printf_i+0x1be>
 8003826:	8019      	strh	r1, [r3, #0]
 8003828:	2300      	movs	r3, #0
 800382a:	4616      	mov	r6, r2
 800382c:	6123      	str	r3, [r4, #16]
 800382e:	e7bc      	b.n	80037aa <_printf_i+0x14a>
 8003830:	6833      	ldr	r3, [r6, #0]
 8003832:	2100      	movs	r1, #0
 8003834:	1d1a      	adds	r2, r3, #4
 8003836:	6032      	str	r2, [r6, #0]
 8003838:	681e      	ldr	r6, [r3, #0]
 800383a:	6862      	ldr	r2, [r4, #4]
 800383c:	4630      	mov	r0, r6
 800383e:	f000 f995 	bl	8003b6c <memchr>
 8003842:	b108      	cbz	r0, 8003848 <_printf_i+0x1e8>
 8003844:	1b80      	subs	r0, r0, r6
 8003846:	6060      	str	r0, [r4, #4]
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	6123      	str	r3, [r4, #16]
 800384c:	2300      	movs	r3, #0
 800384e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003852:	e7aa      	b.n	80037aa <_printf_i+0x14a>
 8003854:	4632      	mov	r2, r6
 8003856:	4649      	mov	r1, r9
 8003858:	4640      	mov	r0, r8
 800385a:	6923      	ldr	r3, [r4, #16]
 800385c:	47d0      	blx	sl
 800385e:	3001      	adds	r0, #1
 8003860:	d0ad      	beq.n	80037be <_printf_i+0x15e>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	079b      	lsls	r3, r3, #30
 8003866:	d413      	bmi.n	8003890 <_printf_i+0x230>
 8003868:	68e0      	ldr	r0, [r4, #12]
 800386a:	9b03      	ldr	r3, [sp, #12]
 800386c:	4298      	cmp	r0, r3
 800386e:	bfb8      	it	lt
 8003870:	4618      	movlt	r0, r3
 8003872:	e7a6      	b.n	80037c2 <_printf_i+0x162>
 8003874:	2301      	movs	r3, #1
 8003876:	4632      	mov	r2, r6
 8003878:	4649      	mov	r1, r9
 800387a:	4640      	mov	r0, r8
 800387c:	47d0      	blx	sl
 800387e:	3001      	adds	r0, #1
 8003880:	d09d      	beq.n	80037be <_printf_i+0x15e>
 8003882:	3501      	adds	r5, #1
 8003884:	68e3      	ldr	r3, [r4, #12]
 8003886:	9903      	ldr	r1, [sp, #12]
 8003888:	1a5b      	subs	r3, r3, r1
 800388a:	42ab      	cmp	r3, r5
 800388c:	dcf2      	bgt.n	8003874 <_printf_i+0x214>
 800388e:	e7eb      	b.n	8003868 <_printf_i+0x208>
 8003890:	2500      	movs	r5, #0
 8003892:	f104 0619 	add.w	r6, r4, #25
 8003896:	e7f5      	b.n	8003884 <_printf_i+0x224>
 8003898:	08003d97 	.word	0x08003d97
 800389c:	08003da8 	.word	0x08003da8

080038a0 <__sflush_r>:
 80038a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	0716      	lsls	r6, r2, #28
 80038a8:	4605      	mov	r5, r0
 80038aa:	460c      	mov	r4, r1
 80038ac:	d454      	bmi.n	8003958 <__sflush_r+0xb8>
 80038ae:	684b      	ldr	r3, [r1, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	dc02      	bgt.n	80038ba <__sflush_r+0x1a>
 80038b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	dd48      	ble.n	800394c <__sflush_r+0xac>
 80038ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038bc:	2e00      	cmp	r6, #0
 80038be:	d045      	beq.n	800394c <__sflush_r+0xac>
 80038c0:	2300      	movs	r3, #0
 80038c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038c6:	682f      	ldr	r7, [r5, #0]
 80038c8:	6a21      	ldr	r1, [r4, #32]
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	d030      	beq.n	8003930 <__sflush_r+0x90>
 80038ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	0759      	lsls	r1, r3, #29
 80038d4:	d505      	bpl.n	80038e2 <__sflush_r+0x42>
 80038d6:	6863      	ldr	r3, [r4, #4]
 80038d8:	1ad2      	subs	r2, r2, r3
 80038da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038dc:	b10b      	cbz	r3, 80038e2 <__sflush_r+0x42>
 80038de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038e0:	1ad2      	subs	r2, r2, r3
 80038e2:	2300      	movs	r3, #0
 80038e4:	4628      	mov	r0, r5
 80038e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038e8:	6a21      	ldr	r1, [r4, #32]
 80038ea:	47b0      	blx	r6
 80038ec:	1c43      	adds	r3, r0, #1
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	d106      	bne.n	8003900 <__sflush_r+0x60>
 80038f2:	6829      	ldr	r1, [r5, #0]
 80038f4:	291d      	cmp	r1, #29
 80038f6:	d82b      	bhi.n	8003950 <__sflush_r+0xb0>
 80038f8:	4a28      	ldr	r2, [pc, #160]	@ (800399c <__sflush_r+0xfc>)
 80038fa:	410a      	asrs	r2, r1
 80038fc:	07d6      	lsls	r6, r2, #31
 80038fe:	d427      	bmi.n	8003950 <__sflush_r+0xb0>
 8003900:	2200      	movs	r2, #0
 8003902:	6062      	str	r2, [r4, #4]
 8003904:	6922      	ldr	r2, [r4, #16]
 8003906:	04d9      	lsls	r1, r3, #19
 8003908:	6022      	str	r2, [r4, #0]
 800390a:	d504      	bpl.n	8003916 <__sflush_r+0x76>
 800390c:	1c42      	adds	r2, r0, #1
 800390e:	d101      	bne.n	8003914 <__sflush_r+0x74>
 8003910:	682b      	ldr	r3, [r5, #0]
 8003912:	b903      	cbnz	r3, 8003916 <__sflush_r+0x76>
 8003914:	6560      	str	r0, [r4, #84]	@ 0x54
 8003916:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003918:	602f      	str	r7, [r5, #0]
 800391a:	b1b9      	cbz	r1, 800394c <__sflush_r+0xac>
 800391c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003920:	4299      	cmp	r1, r3
 8003922:	d002      	beq.n	800392a <__sflush_r+0x8a>
 8003924:	4628      	mov	r0, r5
 8003926:	f7ff fa9b 	bl	8002e60 <_free_r>
 800392a:	2300      	movs	r3, #0
 800392c:	6363      	str	r3, [r4, #52]	@ 0x34
 800392e:	e00d      	b.n	800394c <__sflush_r+0xac>
 8003930:	2301      	movs	r3, #1
 8003932:	4628      	mov	r0, r5
 8003934:	47b0      	blx	r6
 8003936:	4602      	mov	r2, r0
 8003938:	1c50      	adds	r0, r2, #1
 800393a:	d1c9      	bne.n	80038d0 <__sflush_r+0x30>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0c6      	beq.n	80038d0 <__sflush_r+0x30>
 8003942:	2b1d      	cmp	r3, #29
 8003944:	d001      	beq.n	800394a <__sflush_r+0xaa>
 8003946:	2b16      	cmp	r3, #22
 8003948:	d11d      	bne.n	8003986 <__sflush_r+0xe6>
 800394a:	602f      	str	r7, [r5, #0]
 800394c:	2000      	movs	r0, #0
 800394e:	e021      	b.n	8003994 <__sflush_r+0xf4>
 8003950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003954:	b21b      	sxth	r3, r3
 8003956:	e01a      	b.n	800398e <__sflush_r+0xee>
 8003958:	690f      	ldr	r7, [r1, #16]
 800395a:	2f00      	cmp	r7, #0
 800395c:	d0f6      	beq.n	800394c <__sflush_r+0xac>
 800395e:	0793      	lsls	r3, r2, #30
 8003960:	bf18      	it	ne
 8003962:	2300      	movne	r3, #0
 8003964:	680e      	ldr	r6, [r1, #0]
 8003966:	bf08      	it	eq
 8003968:	694b      	ldreq	r3, [r1, #20]
 800396a:	1bf6      	subs	r6, r6, r7
 800396c:	600f      	str	r7, [r1, #0]
 800396e:	608b      	str	r3, [r1, #8]
 8003970:	2e00      	cmp	r6, #0
 8003972:	ddeb      	ble.n	800394c <__sflush_r+0xac>
 8003974:	4633      	mov	r3, r6
 8003976:	463a      	mov	r2, r7
 8003978:	4628      	mov	r0, r5
 800397a:	6a21      	ldr	r1, [r4, #32]
 800397c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003980:	47e0      	blx	ip
 8003982:	2800      	cmp	r0, #0
 8003984:	dc07      	bgt.n	8003996 <__sflush_r+0xf6>
 8003986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800398a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800398e:	f04f 30ff 	mov.w	r0, #4294967295
 8003992:	81a3      	strh	r3, [r4, #12]
 8003994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003996:	4407      	add	r7, r0
 8003998:	1a36      	subs	r6, r6, r0
 800399a:	e7e9      	b.n	8003970 <__sflush_r+0xd0>
 800399c:	dfbffffe 	.word	0xdfbffffe

080039a0 <_fflush_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	690b      	ldr	r3, [r1, #16]
 80039a4:	4605      	mov	r5, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	b913      	cbnz	r3, 80039b0 <_fflush_r+0x10>
 80039aa:	2500      	movs	r5, #0
 80039ac:	4628      	mov	r0, r5
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	b118      	cbz	r0, 80039ba <_fflush_r+0x1a>
 80039b2:	6a03      	ldr	r3, [r0, #32]
 80039b4:	b90b      	cbnz	r3, 80039ba <_fflush_r+0x1a>
 80039b6:	f7ff f91d 	bl	8002bf4 <__sinit>
 80039ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f3      	beq.n	80039aa <_fflush_r+0xa>
 80039c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039c4:	07d0      	lsls	r0, r2, #31
 80039c6:	d404      	bmi.n	80039d2 <_fflush_r+0x32>
 80039c8:	0599      	lsls	r1, r3, #22
 80039ca:	d402      	bmi.n	80039d2 <_fflush_r+0x32>
 80039cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ce:	f7ff fa36 	bl	8002e3e <__retarget_lock_acquire_recursive>
 80039d2:	4628      	mov	r0, r5
 80039d4:	4621      	mov	r1, r4
 80039d6:	f7ff ff63 	bl	80038a0 <__sflush_r>
 80039da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039dc:	4605      	mov	r5, r0
 80039de:	07da      	lsls	r2, r3, #31
 80039e0:	d4e4      	bmi.n	80039ac <_fflush_r+0xc>
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	059b      	lsls	r3, r3, #22
 80039e6:	d4e1      	bmi.n	80039ac <_fflush_r+0xc>
 80039e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ea:	f7ff fa29 	bl	8002e40 <__retarget_lock_release_recursive>
 80039ee:	e7dd      	b.n	80039ac <_fflush_r+0xc>

080039f0 <__swbuf_r>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	460e      	mov	r6, r1
 80039f4:	4614      	mov	r4, r2
 80039f6:	4605      	mov	r5, r0
 80039f8:	b118      	cbz	r0, 8003a02 <__swbuf_r+0x12>
 80039fa:	6a03      	ldr	r3, [r0, #32]
 80039fc:	b90b      	cbnz	r3, 8003a02 <__swbuf_r+0x12>
 80039fe:	f7ff f8f9 	bl	8002bf4 <__sinit>
 8003a02:	69a3      	ldr	r3, [r4, #24]
 8003a04:	60a3      	str	r3, [r4, #8]
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	071a      	lsls	r2, r3, #28
 8003a0a:	d501      	bpl.n	8003a10 <__swbuf_r+0x20>
 8003a0c:	6923      	ldr	r3, [r4, #16]
 8003a0e:	b943      	cbnz	r3, 8003a22 <__swbuf_r+0x32>
 8003a10:	4621      	mov	r1, r4
 8003a12:	4628      	mov	r0, r5
 8003a14:	f000 f82a 	bl	8003a6c <__swsetup_r>
 8003a18:	b118      	cbz	r0, 8003a22 <__swbuf_r+0x32>
 8003a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8003a1e:	4638      	mov	r0, r7
 8003a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	6922      	ldr	r2, [r4, #16]
 8003a26:	b2f6      	uxtb	r6, r6
 8003a28:	1a98      	subs	r0, r3, r2
 8003a2a:	6963      	ldr	r3, [r4, #20]
 8003a2c:	4637      	mov	r7, r6
 8003a2e:	4283      	cmp	r3, r0
 8003a30:	dc05      	bgt.n	8003a3e <__swbuf_r+0x4e>
 8003a32:	4621      	mov	r1, r4
 8003a34:	4628      	mov	r0, r5
 8003a36:	f7ff ffb3 	bl	80039a0 <_fflush_r>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d1ed      	bne.n	8003a1a <__swbuf_r+0x2a>
 8003a3e:	68a3      	ldr	r3, [r4, #8]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	60a3      	str	r3, [r4, #8]
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	6022      	str	r2, [r4, #0]
 8003a4a:	701e      	strb	r6, [r3, #0]
 8003a4c:	6962      	ldr	r2, [r4, #20]
 8003a4e:	1c43      	adds	r3, r0, #1
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d004      	beq.n	8003a5e <__swbuf_r+0x6e>
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	07db      	lsls	r3, r3, #31
 8003a58:	d5e1      	bpl.n	8003a1e <__swbuf_r+0x2e>
 8003a5a:	2e0a      	cmp	r6, #10
 8003a5c:	d1df      	bne.n	8003a1e <__swbuf_r+0x2e>
 8003a5e:	4621      	mov	r1, r4
 8003a60:	4628      	mov	r0, r5
 8003a62:	f7ff ff9d 	bl	80039a0 <_fflush_r>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d0d9      	beq.n	8003a1e <__swbuf_r+0x2e>
 8003a6a:	e7d6      	b.n	8003a1a <__swbuf_r+0x2a>

08003a6c <__swsetup_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4b29      	ldr	r3, [pc, #164]	@ (8003b14 <__swsetup_r+0xa8>)
 8003a70:	4605      	mov	r5, r0
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	460c      	mov	r4, r1
 8003a76:	b118      	cbz	r0, 8003a80 <__swsetup_r+0x14>
 8003a78:	6a03      	ldr	r3, [r0, #32]
 8003a7a:	b90b      	cbnz	r3, 8003a80 <__swsetup_r+0x14>
 8003a7c:	f7ff f8ba 	bl	8002bf4 <__sinit>
 8003a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a84:	0719      	lsls	r1, r3, #28
 8003a86:	d422      	bmi.n	8003ace <__swsetup_r+0x62>
 8003a88:	06da      	lsls	r2, r3, #27
 8003a8a:	d407      	bmi.n	8003a9c <__swsetup_r+0x30>
 8003a8c:	2209      	movs	r2, #9
 8003a8e:	602a      	str	r2, [r5, #0]
 8003a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a94:	f04f 30ff 	mov.w	r0, #4294967295
 8003a98:	81a3      	strh	r3, [r4, #12]
 8003a9a:	e033      	b.n	8003b04 <__swsetup_r+0x98>
 8003a9c:	0758      	lsls	r0, r3, #29
 8003a9e:	d512      	bpl.n	8003ac6 <__swsetup_r+0x5a>
 8003aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003aa2:	b141      	cbz	r1, 8003ab6 <__swsetup_r+0x4a>
 8003aa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003aa8:	4299      	cmp	r1, r3
 8003aaa:	d002      	beq.n	8003ab2 <__swsetup_r+0x46>
 8003aac:	4628      	mov	r0, r5
 8003aae:	f7ff f9d7 	bl	8002e60 <_free_r>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ab6:	89a3      	ldrh	r3, [r4, #12]
 8003ab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003abc:	81a3      	strh	r3, [r4, #12]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6063      	str	r3, [r4, #4]
 8003ac2:	6923      	ldr	r3, [r4, #16]
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	f043 0308 	orr.w	r3, r3, #8
 8003acc:	81a3      	strh	r3, [r4, #12]
 8003ace:	6923      	ldr	r3, [r4, #16]
 8003ad0:	b94b      	cbnz	r3, 8003ae6 <__swsetup_r+0x7a>
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003adc:	d003      	beq.n	8003ae6 <__swsetup_r+0x7a>
 8003ade:	4621      	mov	r1, r4
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	f000 f8a4 	bl	8003c2e <__smakebuf_r>
 8003ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aea:	f013 0201 	ands.w	r2, r3, #1
 8003aee:	d00a      	beq.n	8003b06 <__swsetup_r+0x9a>
 8003af0:	2200      	movs	r2, #0
 8003af2:	60a2      	str	r2, [r4, #8]
 8003af4:	6962      	ldr	r2, [r4, #20]
 8003af6:	4252      	negs	r2, r2
 8003af8:	61a2      	str	r2, [r4, #24]
 8003afa:	6922      	ldr	r2, [r4, #16]
 8003afc:	b942      	cbnz	r2, 8003b10 <__swsetup_r+0xa4>
 8003afe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b02:	d1c5      	bne.n	8003a90 <__swsetup_r+0x24>
 8003b04:	bd38      	pop	{r3, r4, r5, pc}
 8003b06:	0799      	lsls	r1, r3, #30
 8003b08:	bf58      	it	pl
 8003b0a:	6962      	ldrpl	r2, [r4, #20]
 8003b0c:	60a2      	str	r2, [r4, #8]
 8003b0e:	e7f4      	b.n	8003afa <__swsetup_r+0x8e>
 8003b10:	2000      	movs	r0, #0
 8003b12:	e7f7      	b.n	8003b04 <__swsetup_r+0x98>
 8003b14:	20000018 	.word	0x20000018

08003b18 <memmove>:
 8003b18:	4288      	cmp	r0, r1
 8003b1a:	b510      	push	{r4, lr}
 8003b1c:	eb01 0402 	add.w	r4, r1, r2
 8003b20:	d902      	bls.n	8003b28 <memmove+0x10>
 8003b22:	4284      	cmp	r4, r0
 8003b24:	4623      	mov	r3, r4
 8003b26:	d807      	bhi.n	8003b38 <memmove+0x20>
 8003b28:	1e43      	subs	r3, r0, #1
 8003b2a:	42a1      	cmp	r1, r4
 8003b2c:	d008      	beq.n	8003b40 <memmove+0x28>
 8003b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b36:	e7f8      	b.n	8003b2a <memmove+0x12>
 8003b38:	4601      	mov	r1, r0
 8003b3a:	4402      	add	r2, r0
 8003b3c:	428a      	cmp	r2, r1
 8003b3e:	d100      	bne.n	8003b42 <memmove+0x2a>
 8003b40:	bd10      	pop	{r4, pc}
 8003b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b4a:	e7f7      	b.n	8003b3c <memmove+0x24>

08003b4c <_sbrk_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	2300      	movs	r3, #0
 8003b50:	4d05      	ldr	r5, [pc, #20]	@ (8003b68 <_sbrk_r+0x1c>)
 8003b52:	4604      	mov	r4, r0
 8003b54:	4608      	mov	r0, r1
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	f7fd fbde 	bl	8001318 <_sbrk>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d102      	bne.n	8003b66 <_sbrk_r+0x1a>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	b103      	cbz	r3, 8003b66 <_sbrk_r+0x1a>
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
 8003b68:	20000568 	.word	0x20000568

08003b6c <memchr>:
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	b510      	push	{r4, lr}
 8003b70:	b2c9      	uxtb	r1, r1
 8003b72:	4402      	add	r2, r0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	d101      	bne.n	8003b7e <memchr+0x12>
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	e003      	b.n	8003b86 <memchr+0x1a>
 8003b7e:	7804      	ldrb	r4, [r0, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	428c      	cmp	r4, r1
 8003b84:	d1f6      	bne.n	8003b74 <memchr+0x8>
 8003b86:	bd10      	pop	{r4, pc}

08003b88 <_realloc_r>:
 8003b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8c:	4680      	mov	r8, r0
 8003b8e:	4615      	mov	r5, r2
 8003b90:	460c      	mov	r4, r1
 8003b92:	b921      	cbnz	r1, 8003b9e <_realloc_r+0x16>
 8003b94:	4611      	mov	r1, r2
 8003b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9a:	f7ff b9cb 	b.w	8002f34 <_malloc_r>
 8003b9e:	b92a      	cbnz	r2, 8003bac <_realloc_r+0x24>
 8003ba0:	f7ff f95e 	bl	8002e60 <_free_r>
 8003ba4:	2400      	movs	r4, #0
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bac:	f000 f89e 	bl	8003cec <_malloc_usable_size_r>
 8003bb0:	4285      	cmp	r5, r0
 8003bb2:	4606      	mov	r6, r0
 8003bb4:	d802      	bhi.n	8003bbc <_realloc_r+0x34>
 8003bb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003bba:	d8f4      	bhi.n	8003ba6 <_realloc_r+0x1e>
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	f7ff f9b8 	bl	8002f34 <_malloc_r>
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d0ec      	beq.n	8003ba4 <_realloc_r+0x1c>
 8003bca:	42b5      	cmp	r5, r6
 8003bcc:	462a      	mov	r2, r5
 8003bce:	4621      	mov	r1, r4
 8003bd0:	bf28      	it	cs
 8003bd2:	4632      	movcs	r2, r6
 8003bd4:	f7ff f935 	bl	8002e42 <memcpy>
 8003bd8:	4621      	mov	r1, r4
 8003bda:	4640      	mov	r0, r8
 8003bdc:	f7ff f940 	bl	8002e60 <_free_r>
 8003be0:	463c      	mov	r4, r7
 8003be2:	e7e0      	b.n	8003ba6 <_realloc_r+0x1e>

08003be4 <__swhatbuf_r>:
 8003be4:	b570      	push	{r4, r5, r6, lr}
 8003be6:	460c      	mov	r4, r1
 8003be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bec:	4615      	mov	r5, r2
 8003bee:	2900      	cmp	r1, #0
 8003bf0:	461e      	mov	r6, r3
 8003bf2:	b096      	sub	sp, #88	@ 0x58
 8003bf4:	da0c      	bge.n	8003c10 <__swhatbuf_r+0x2c>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003bfe:	bf14      	ite	ne
 8003c00:	2340      	movne	r3, #64	@ 0x40
 8003c02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c06:	2000      	movs	r0, #0
 8003c08:	6031      	str	r1, [r6, #0]
 8003c0a:	602b      	str	r3, [r5, #0]
 8003c0c:	b016      	add	sp, #88	@ 0x58
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	466a      	mov	r2, sp
 8003c12:	f000 f849 	bl	8003ca8 <_fstat_r>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	dbed      	blt.n	8003bf6 <__swhatbuf_r+0x12>
 8003c1a:	9901      	ldr	r1, [sp, #4]
 8003c1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003c20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003c24:	4259      	negs	r1, r3
 8003c26:	4159      	adcs	r1, r3
 8003c28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c2c:	e7eb      	b.n	8003c06 <__swhatbuf_r+0x22>

08003c2e <__smakebuf_r>:
 8003c2e:	898b      	ldrh	r3, [r1, #12]
 8003c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c32:	079d      	lsls	r5, r3, #30
 8003c34:	4606      	mov	r6, r0
 8003c36:	460c      	mov	r4, r1
 8003c38:	d507      	bpl.n	8003c4a <__smakebuf_r+0x1c>
 8003c3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003c3e:	6023      	str	r3, [r4, #0]
 8003c40:	6123      	str	r3, [r4, #16]
 8003c42:	2301      	movs	r3, #1
 8003c44:	6163      	str	r3, [r4, #20]
 8003c46:	b003      	add	sp, #12
 8003c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c4a:	466a      	mov	r2, sp
 8003c4c:	ab01      	add	r3, sp, #4
 8003c4e:	f7ff ffc9 	bl	8003be4 <__swhatbuf_r>
 8003c52:	9f00      	ldr	r7, [sp, #0]
 8003c54:	4605      	mov	r5, r0
 8003c56:	4639      	mov	r1, r7
 8003c58:	4630      	mov	r0, r6
 8003c5a:	f7ff f96b 	bl	8002f34 <_malloc_r>
 8003c5e:	b948      	cbnz	r0, 8003c74 <__smakebuf_r+0x46>
 8003c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c64:	059a      	lsls	r2, r3, #22
 8003c66:	d4ee      	bmi.n	8003c46 <__smakebuf_r+0x18>
 8003c68:	f023 0303 	bic.w	r3, r3, #3
 8003c6c:	f043 0302 	orr.w	r3, r3, #2
 8003c70:	81a3      	strh	r3, [r4, #12]
 8003c72:	e7e2      	b.n	8003c3a <__smakebuf_r+0xc>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	9b01      	ldr	r3, [sp, #4]
 8003c82:	6020      	str	r0, [r4, #0]
 8003c84:	b15b      	cbz	r3, 8003c9e <__smakebuf_r+0x70>
 8003c86:	4630      	mov	r0, r6
 8003c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c8c:	f000 f81e 	bl	8003ccc <_isatty_r>
 8003c90:	b128      	cbz	r0, 8003c9e <__smakebuf_r+0x70>
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	f023 0303 	bic.w	r3, r3, #3
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	81a3      	strh	r3, [r4, #12]
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	431d      	orrs	r5, r3
 8003ca2:	81a5      	strh	r5, [r4, #12]
 8003ca4:	e7cf      	b.n	8003c46 <__smakebuf_r+0x18>
	...

08003ca8 <_fstat_r>:
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	2300      	movs	r3, #0
 8003cac:	4d06      	ldr	r5, [pc, #24]	@ (8003cc8 <_fstat_r+0x20>)
 8003cae:	4604      	mov	r4, r0
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	602b      	str	r3, [r5, #0]
 8003cb6:	f7fd fb0a 	bl	80012ce <_fstat>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	d102      	bne.n	8003cc4 <_fstat_r+0x1c>
 8003cbe:	682b      	ldr	r3, [r5, #0]
 8003cc0:	b103      	cbz	r3, 8003cc4 <_fstat_r+0x1c>
 8003cc2:	6023      	str	r3, [r4, #0]
 8003cc4:	bd38      	pop	{r3, r4, r5, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000568 	.word	0x20000568

08003ccc <_isatty_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	2300      	movs	r3, #0
 8003cd0:	4d05      	ldr	r5, [pc, #20]	@ (8003ce8 <_isatty_r+0x1c>)
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	602b      	str	r3, [r5, #0]
 8003cd8:	f7fd fb08 	bl	80012ec <_isatty>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d102      	bne.n	8003ce6 <_isatty_r+0x1a>
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	b103      	cbz	r3, 8003ce6 <_isatty_r+0x1a>
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	20000568 	.word	0x20000568

08003cec <_malloc_usable_size_r>:
 8003cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cf0:	1f18      	subs	r0, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bfbc      	itt	lt
 8003cf6:	580b      	ldrlt	r3, [r1, r0]
 8003cf8:	18c0      	addlt	r0, r0, r3
 8003cfa:	4770      	bx	lr

08003cfc <_init>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	bf00      	nop
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr

08003d08 <_fini>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr
