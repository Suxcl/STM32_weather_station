
Sensor_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b70  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08007c80  08007c80  00008c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008050  08008050  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008050  08008050  00009050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008058  08008058  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008058  08008058  00009058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800805c  0800805c  0000905c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008060  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  200001d8  08008234  0000a1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08008234  0000a94c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f5c  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002023  00000000  00000000  00014159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00016180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000821  00000000  00000000  00016c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a20  00000000  00000000  00017461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddba  00000000  00000000  0002fe81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cda  00000000  00000000  0003dc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4915  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb4  00000000  00000000  000c4958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000c860c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007c68 	.word	0x08007c68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08007c68 	.word	0x08007c68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_f2iz>:
 8000b28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b30:	d30f      	bcc.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b32:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_f2iz+0x30>
 8000b3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b44:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b48:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4c:	bf18      	it	ne
 8000b4e:	4240      	negne	r0, r0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr
 8000b58:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b5c:	d101      	bne.n	8000b62 <__aeabi_f2iz+0x3a>
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	d105      	bne.n	8000b6e <__aeabi_f2iz+0x46>
 8000b62:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b66:	bf08      	it	eq
 8000b68:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b968 	b.w	8000e5c <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	460c      	mov	r4, r1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d14e      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb0:	4694      	mov	ip, r2
 8000bb2:	458c      	cmp	ip, r1
 8000bb4:	4686      	mov	lr, r0
 8000bb6:	fab2 f282 	clz	r2, r2
 8000bba:	d962      	bls.n	8000c82 <__udivmoddi4+0xde>
 8000bbc:	b14a      	cbz	r2, 8000bd2 <__udivmoddi4+0x2e>
 8000bbe:	f1c2 0320 	rsb	r3, r2, #32
 8000bc2:	4091      	lsls	r1, r2
 8000bc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bcc:	4319      	orrs	r1, r3
 8000bce:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	fb04 f106 	mul.w	r1, r4, r6
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bfa:	f080 8110 	bcs.w	8000e1e <__udivmoddi4+0x27a>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 810d 	bls.w	8000e1e <__udivmoddi4+0x27a>
 8000c04:	3c02      	subs	r4, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a59      	subs	r1, r3, r1
 8000c0a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	fa1f f38e 	uxth.w	r3, lr
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x94>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2a:	f080 80fa 	bcs.w	8000e22 <__udivmoddi4+0x27e>
 8000c2e:	429e      	cmp	r6, r3
 8000c30:	f240 80f7 	bls.w	8000e22 <__udivmoddi4+0x27e>
 8000c34:	4463      	add	r3, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	2100      	movs	r1, #0
 8000c3a:	1b9b      	subs	r3, r3, r6
 8000c3c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c40:	b11d      	cbz	r5, 8000c4a <__udivmoddi4+0xa6>
 8000c42:	40d3      	lsrs	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	e9c5 3200 	strd	r3, r2, [r5]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d905      	bls.n	8000c5e <__udivmoddi4+0xba>
 8000c52:	b10d      	cbz	r5, 8000c58 <__udivmoddi4+0xb4>
 8000c54:	e9c5 0100 	strd	r0, r1, [r5]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e7f5      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000c5e:	fab3 f183 	clz	r1, r3
 8000c62:	2900      	cmp	r1, #0
 8000c64:	d146      	bne.n	8000cf4 <__udivmoddi4+0x150>
 8000c66:	42a3      	cmp	r3, r4
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xcc>
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	f0c0 80ee 	bcc.w	8000e4c <__udivmoddi4+0x2a8>
 8000c70:	1a86      	subs	r6, r0, r2
 8000c72:	eb64 0303 	sbc.w	r3, r4, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	d0e6      	beq.n	8000c4a <__udivmoddi4+0xa6>
 8000c7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c80:	e7e3      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	f040 808f 	bne.w	8000da6 <__udivmoddi4+0x202>
 8000c88:	eba1 040c 	sub.w	r4, r1, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c9a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	4298      	cmp	r0, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x11c>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x11a>
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2b0>
 8000cbe:	4626      	mov	r6, r4
 8000cc0:	1a1c      	subs	r4, r3, r0
 8000cc2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	429f      	cmp	r7, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x148>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x146>
 8000ce4:	429f      	cmp	r7, r3
 8000ce6:	f200 80ae 	bhi.w	8000e46 <__udivmoddi4+0x2a2>
 8000cea:	4620      	mov	r0, r4
 8000cec:	1bdb      	subs	r3, r3, r7
 8000cee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf2:	e7a5      	b.n	8000c40 <__udivmoddi4+0x9c>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa24 f607 	lsr.w	r6, r4, r7
 8000d06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d0a:	fbb6 f8f9 	udiv	r8, r6, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 6618 	mls	r6, r9, r8, r6
 8000d16:	fa20 f307 	lsr.w	r3, r0, r7
 8000d1a:	408c      	lsls	r4, r1
 8000d1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d20:	fb08 f00e 	mul.w	r0, r8, lr
 8000d24:	431c      	orrs	r4, r3
 8000d26:	0c23      	lsrs	r3, r4, #16
 8000d28:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x1a6>
 8000d34:	eb1c 0303 	adds.w	r3, ip, r3
 8000d38:	f108 36ff 	add.w	r6, r8, #4294967295
 8000d3c:	f080 8081 	bcs.w	8000e42 <__udivmoddi4+0x29e>
 8000d40:	4298      	cmp	r0, r3
 8000d42:	d97e      	bls.n	8000e42 <__udivmoddi4+0x29e>
 8000d44:	f1a8 0802 	sub.w	r8, r8, #2
 8000d48:	4463      	add	r3, ip
 8000d4a:	1a1e      	subs	r6, r3, r0
 8000d4c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d50:	fb09 6613 	mls	r6, r9, r3, r6
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x1d0>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d6a:	d266      	bcs.n	8000e3a <__udivmoddi4+0x296>
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d964      	bls.n	8000e3a <__udivmoddi4+0x296>
 8000d70:	3b02      	subs	r3, #2
 8000d72:	4464      	add	r4, ip
 8000d74:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d78:	fba0 8302 	umull	r8, r3, r0, r2
 8000d7c:	eba4 040e 	sub.w	r4, r4, lr
 8000d80:	429c      	cmp	r4, r3
 8000d82:	46c6      	mov	lr, r8
 8000d84:	461e      	mov	r6, r3
 8000d86:	d350      	bcc.n	8000e2a <__udivmoddi4+0x286>
 8000d88:	d04d      	beq.n	8000e26 <__udivmoddi4+0x282>
 8000d8a:	b155      	cbz	r5, 8000da2 <__udivmoddi4+0x1fe>
 8000d8c:	ebba 030e 	subs.w	r3, sl, lr
 8000d90:	eb64 0406 	sbc.w	r4, r4, r6
 8000d94:	fa04 f707 	lsl.w	r7, r4, r7
 8000d98:	40cb      	lsrs	r3, r1
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	40cc      	lsrs	r4, r1
 8000d9e:	e9c5 7400 	strd	r7, r4, [r5]
 8000da2:	2100      	movs	r1, #0
 8000da4:	e751      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000da6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000daa:	f1c2 0320 	rsb	r3, r2, #32
 8000dae:	40d9      	lsrs	r1, r3
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fbb1 f0f8 	udiv	r0, r1, r8
 8000dc0:	fb08 1110 	mls	r1, r8, r0, r1
 8000dc4:	4094      	lsls	r4, r2
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	fa1f f78c 	uxth.w	r7, ip
 8000dcc:	0c23      	lsrs	r3, r4, #16
 8000dce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd2:	fb00 f107 	mul.w	r1, r0, r7
 8000dd6:	4299      	cmp	r1, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x248>
 8000dda:	eb1c 0303 	adds.w	r3, ip, r3
 8000dde:	f100 36ff 	add.w	r6, r0, #4294967295
 8000de2:	d22c      	bcs.n	8000e3e <__udivmoddi4+0x29a>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d92a      	bls.n	8000e3e <__udivmoddi4+0x29a>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df2:	fb08 3311 	mls	r3, r8, r1, r3
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dfc:	fb01 f307 	mul.w	r3, r1, r7
 8000e00:	42a3      	cmp	r3, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x272>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e0c:	d213      	bcs.n	8000e36 <__udivmoddi4+0x292>
 8000e0e:	42a3      	cmp	r3, r4
 8000e10:	d911      	bls.n	8000e36 <__udivmoddi4+0x292>
 8000e12:	3902      	subs	r1, #2
 8000e14:	4464      	add	r4, ip
 8000e16:	1ae4      	subs	r4, r4, r3
 8000e18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e1c:	e73b      	b.n	8000c96 <__udivmoddi4+0xf2>
 8000e1e:	4604      	mov	r4, r0
 8000e20:	e6f2      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e22:	4608      	mov	r0, r1
 8000e24:	e708      	b.n	8000c38 <__udivmoddi4+0x94>
 8000e26:	45c2      	cmp	sl, r8
 8000e28:	d2af      	bcs.n	8000d8a <__udivmoddi4+0x1e6>
 8000e2a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2e:	eb63 060c 	sbc.w	r6, r3, ip
 8000e32:	3801      	subs	r0, #1
 8000e34:	e7a9      	b.n	8000d8a <__udivmoddi4+0x1e6>
 8000e36:	4631      	mov	r1, r6
 8000e38:	e7ed      	b.n	8000e16 <__udivmoddi4+0x272>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	e79a      	b.n	8000d74 <__udivmoddi4+0x1d0>
 8000e3e:	4630      	mov	r0, r6
 8000e40:	e7d4      	b.n	8000dec <__udivmoddi4+0x248>
 8000e42:	46b0      	mov	r8, r6
 8000e44:	e781      	b.n	8000d4a <__udivmoddi4+0x1a6>
 8000e46:	4463      	add	r3, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e74f      	b.n	8000cec <__udivmoddi4+0x148>
 8000e4c:	4606      	mov	r6, r0
 8000e4e:	4623      	mov	r3, r4
 8000e50:	4608      	mov	r0, r1
 8000e52:	e711      	b.n	8000c78 <__udivmoddi4+0xd4>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x11c>
 8000e5a:	bf00      	nop

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	78fa      	ldrb	r2, [r7, #3]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fbd0 	bl	800161a <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fbeb 	bl	800165a <SX1278_hw_SPIReadByte>
 8000e84:	4603      	mov	r3, r0
 8000e86:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fb88 	bl	80015a4 <SX1278_hw_SetNSS>
	return tmp;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	70fb      	strb	r3, [r7, #3]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fb75 	bl	80015a4 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f000 fba6 	bl	800161a <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	78ba      	ldrb	r2, [r7, #2]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fb9f 	bl	800161a <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fb5e 	bl	80015a4 <SX1278_hw_SetNSS>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	461a      	mov	r2, r3
 8000efc:	460b      	mov	r3, r1
 8000efe:	72fb      	strb	r3, [r7, #11]
 8000f00:	4613      	mov	r3, r2
 8000f02:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000f04:	7abb      	ldrb	r3, [r7, #10]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d927      	bls.n	8000f5a <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fb47 	bl	80015a4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	7afa      	ldrb	r2, [r7, #11]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fb7b 	bl	800161a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e00c      	b.n	8000f44 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	18d4      	adds	r4, r2, r3
 8000f34:	4608      	mov	r0, r1
 8000f36:	f000 fb90 	bl	800165a <SX1278_hw_SPIReadByte>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	3301      	adds	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
 8000f44:	7dfa      	ldrb	r2, [r7, #23]
 8000f46:	7abb      	ldrb	r3, [r7, #10]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d3ee      	bcc.n	8000f2a <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fb26 	bl	80015a4 <SX1278_hw_SetNSS>
 8000f58:	e000      	b.n	8000f5c <SX1278_SPIBurstRead+0x6c>
		return;
 8000f5a:	bf00      	nop
	}
}
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}

08000f62 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	460b      	mov	r3, r1
 8000f70:	72fb      	strb	r3, [r7, #11]
 8000f72:	4613      	mov	r3, r2
 8000f74:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000f76:	7abb      	ldrb	r3, [r7, #10]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d929      	bls.n	8000fd0 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fb0e 	bl	80015a4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	7afb      	ldrb	r3, [r7, #11]
 8000f8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	4610      	mov	r0, r2
 8000f98:	f000 fb3f 	bl	800161a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	75fb      	strb	r3, [r7, #23]
 8000fa0:	e00b      	b.n	8000fba <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f000 fb33 	bl	800161a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	75fb      	strb	r3, [r7, #23]
 8000fba:	7dfa      	ldrb	r2, [r7, #23]
 8000fbc:	7abb      	ldrb	r3, [r7, #10]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3ef      	bcc.n	8000fa2 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 faeb 	bl	80015a4 <SX1278_hw_SetNSS>
 8000fce:	e000      	b.n	8000fd2 <SX1278_SPIBurstWrite+0x70>
		return;
 8000fd0:	bf00      	nop
	}
}
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f90d 	bl	8001200 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f000 fb5d 	bl	80016a6 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f917 	bl	8001220 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	f04f 0100 	mov.w	r1, #0
 8001000:	04d9      	lsls	r1, r3, #19
 8001002:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001006:	04d0      	lsls	r0, r2, #19
 8001008:	4a6f      	ldr	r2, [pc, #444]	@ (80011c8 <SX1278_config+0x1f0>)
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	f7ff fdb1 	bl	8000b74 <__aeabi_uldivmod>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800101a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	0c02      	lsrs	r2, r0, #16
 8001028:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800102c:	0c0b      	lsrs	r3, r1, #16
 800102e:	b2d3      	uxtb	r3, r2
 8001030:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8001032:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	0a02      	lsrs	r2, r0, #8
 8001040:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001044:	0a0b      	lsrs	r3, r1, #8
 8001046:	b2d3      	uxtb	r3, r2
 8001048:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800104a:	7c3b      	ldrb	r3, [r7, #16]
 800104c:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800104e:	f107 020c 	add.w	r2, r7, #12
 8001052:	2303      	movs	r3, #3
 8001054:	2106      	movs	r1, #6
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff83 	bl	8000f62 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800105c:	2234      	movs	r2, #52	@ 0x34
 800105e:	2139      	movs	r1, #57	@ 0x39
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff1c 	bl	8000e9e <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7c1b      	ldrb	r3, [r3, #16]
 800106a:	461a      	mov	r2, r3
 800106c:	4b57      	ldr	r3, [pc, #348]	@ (80011cc <SX1278_config+0x1f4>)
 800106e:	5c9b      	ldrb	r3, [r3, r2]
 8001070:	461a      	mov	r2, r3
 8001072:	2109      	movs	r1, #9
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff12 	bl	8000e9e <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800107a:	220b      	movs	r2, #11
 800107c:	210b      	movs	r1, #11
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff0d 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001084:	2223      	movs	r2, #35	@ 0x23
 8001086:	210c      	movs	r1, #12
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff08 	bl	8000e9e <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7c5b      	ldrb	r3, [r3, #17]
 8001092:	461a      	mov	r2, r3
 8001094:	4b4e      	ldr	r3, [pc, #312]	@ (80011d0 <SX1278_config+0x1f8>)
 8001096:	5c9b      	ldrb	r3, [r3, r2]
 8001098:	2b06      	cmp	r3, #6
 800109a:	d147      	bne.n	800112c <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7c9b      	ldrb	r3, [r3, #18]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b4c      	ldr	r3, [pc, #304]	@ (80011d4 <SX1278_config+0x1fc>)
 80010a4:	5c9b      	ldrb	r3, [r3, r2]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7cdb      	ldrb	r3, [r3, #19]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4b49      	ldr	r3, [pc, #292]	@ (80011d8 <SX1278_config+0x200>)
 80010b2:	5c5b      	ldrb	r3, [r3, r1]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4413      	add	r3, r2
 80010ba:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80010bc:	3301      	adds	r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	211d      	movs	r1, #29
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff feea 	bl	8000e9e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7c5b      	ldrb	r3, [r3, #17]
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b3f      	ldr	r3, [pc, #252]	@ (80011d0 <SX1278_config+0x1f8>)
 80010d2:	5c9b      	ldrb	r3, [r3, r2]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7d1b      	ldrb	r3, [r3, #20]
 80010dc:	4619      	mov	r1, r3
 80010de:	4b3f      	ldr	r3, [pc, #252]	@ (80011dc <SX1278_config+0x204>)
 80010e0:	5c5b      	ldrb	r3, [r3, r1]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80010ea:	3303      	adds	r3, #3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	211e      	movs	r1, #30
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fed3 	bl	8000e9e <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80010f8:	2131      	movs	r1, #49	@ 0x31
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff feb0 	bl	8000e60 <SX1278_SPIRead>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	f023 0307 	bic.w	r3, r3, #7
 800110a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	f043 0305 	orr.w	r3, r3, #5
 8001112:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	461a      	mov	r2, r3
 8001118:	2131      	movs	r1, #49	@ 0x31
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff febf 	bl	8000e9e <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8001120:	220c      	movs	r2, #12
 8001122:	2137      	movs	r1, #55	@ 0x37
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff feba 	bl	8000e9e <SX1278_SPIWrite>
 800112a:	e029      	b.n	8001180 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7c9b      	ldrb	r3, [r3, #18]
 8001130:	461a      	mov	r2, r3
 8001132:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <SX1278_config+0x1fc>)
 8001134:	5c9b      	ldrb	r3, [r3, r2]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7cdb      	ldrb	r3, [r3, #19]
 800113e:	4619      	mov	r1, r3
 8001140:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <SX1278_config+0x200>)
 8001142:	5c5b      	ldrb	r3, [r3, r1]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001148:	4413      	add	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	211d      	movs	r1, #29
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fea4 	bl	8000e9e <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7c5b      	ldrb	r3, [r3, #17]
 800115a:	461a      	mov	r2, r3
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <SX1278_config+0x1f8>)
 800115e:	5c9b      	ldrb	r3, [r3, r2]
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7d1b      	ldrb	r3, [r3, #20]
 8001168:	4619      	mov	r1, r3
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <SX1278_config+0x204>)
 800116c:	5c5b      	ldrb	r3, [r3, r1]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001172:	4413      	add	r3, r2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	211e      	movs	r1, #30
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff fe8f 	bl	8000e9e <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8001180:	2204      	movs	r2, #4
 8001182:	2126      	movs	r1, #38	@ 0x26
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fe8a 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800118a:	2208      	movs	r2, #8
 800118c:	211f      	movs	r1, #31
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fe85 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001194:	2200      	movs	r2, #0
 8001196:	2120      	movs	r1, #32
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff fe80 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800119e:	2208      	movs	r2, #8
 80011a0:	2121      	movs	r1, #33	@ 0x21
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fe7b 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80011a8:	2201      	movs	r2, #1
 80011aa:	2141      	movs	r1, #65	@ 0x41
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fe76 	bl	8000e9e <SX1278_SPIWrite>
	module->readBytes = 0;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f810 	bl	80011e0 <SX1278_standby>
}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	01e84800 	.word	0x01e84800
 80011cc:	08007c94 	.word	0x08007c94
 80011d0:	08007c98 	.word	0x08007c98
 80011d4:	08007ca0 	.word	0x08007ca0
 80011d8:	08007cac 	.word	0x08007cac
 80011dc:	08007cb0 	.word	0x08007cb0

080011e0 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80011e8:	2209      	movs	r2, #9
 80011ea:	2101      	movs	r1, #1
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fe56 	bl	8000e9e <SX1278_SPIWrite>
	module->status = STANDBY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	759a      	strb	r2, [r3, #22]
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001208:	2208      	movs	r2, #8
 800120a:	2101      	movs	r1, #1
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fe46 	bl	8000e9e <SX1278_SPIWrite>
	module->status = SLEEP;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	759a      	strb	r2, [r3, #22]
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001228:	2288      	movs	r2, #136	@ 0x88
 800122a:	2101      	movs	r1, #1
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff fe36 	bl	8000e9e <SX1278_SPIWrite>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8001242:	22ff      	movs	r2, #255	@ 0xff
 8001244:	2112      	movs	r1, #18
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fe29 	bl	8000e9e <SX1278_SPIWrite>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	460b      	mov	r3, r1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	7afa      	ldrb	r2, [r7, #11]
 8001266:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff feb5 	bl	8000fd8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800126e:	2284      	movs	r2, #132	@ 0x84
 8001270:	214d      	movs	r1, #77	@ 0x4d
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f7ff fe13 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001278:	22ff      	movs	r2, #255	@ 0xff
 800127a:	2124      	movs	r1, #36	@ 0x24
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff fe0e 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001282:	2201      	movs	r2, #1
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff fe09 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800128c:	223f      	movs	r2, #63	@ 0x3f
 800128e:	2111      	movs	r1, #17
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff fe04 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff ffcf 	bl	800123a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800129c:	7afb      	ldrb	r3, [r7, #11]
 800129e:	461a      	mov	r2, r3
 80012a0:	2122      	movs	r1, #34	@ 0x22
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff fdfb 	bl	8000e9e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80012a8:	210f      	movs	r1, #15
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fdd8 	bl	8000e60 <SX1278_SPIRead>
 80012b0:	4603      	mov	r3, r0
 80012b2:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	461a      	mov	r2, r3
 80012b8:	210d      	movs	r1, #13
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff fdef 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80012c0:	228d      	movs	r2, #141	@ 0x8d
 80012c2:	2101      	movs	r1, #1
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f7ff fdea 	bl	8000e9e <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80012d2:	2118      	movs	r1, #24
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff fdc3 	bl	8000e60 <SX1278_SPIRead>
 80012da:	4603      	mov	r3, r0
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d104      	bne.n	80012ee <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2203      	movs	r2, #3
 80012e8:	759a      	strb	r2, [r3, #22]
			return 1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e013      	b.n	8001316 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f967 	bl	80015d2 <SX1278_hw_Reset>
			SX1278_config(module);
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f7ff fe67 	bl	8000fd8 <SX1278_config>
			return 0;
 800130a:	2300      	movs	r3, #0
 800130c:	e003      	b.n	8001316 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800130e:	2001      	movs	r0, #1
 8001310:	f000 f9c9 	bl	80016a6 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001314:	e7dd      	b.n	80012d2 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f9c6 	bl	80016bc <SX1278_hw_GetDIO0>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d030      	beq.n	8001398 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3317      	adds	r3, #23
 800133a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f004 fbaa 	bl	8005a9a <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8001346:	2110      	movs	r1, #16
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fd89 	bl	8000e60 <SX1278_SPIRead>
 800134e:	4603      	mov	r3, r0
 8001350:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	461a      	mov	r2, r3
 8001356:	210d      	movs	r1, #13
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fda0 	bl	8000e9e <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7c5b      	ldrb	r3, [r3, #17]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d103      	bne.n	800136e <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7d5b      	ldrb	r3, [r3, #21]
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e005      	b.n	800137a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800136e:	2113      	movs	r1, #19
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fd75 	bl	8000e60 <SX1278_SPIRead>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f103 0217 	add.w	r2, r3, #23
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2100      	movs	r1, #0
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fdb3 	bl	8000ef0 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff51 	bl	800123a <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	460b      	mov	r3, r1
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	7afa      	ldrb	r2, [r7, #11]
 80013b8:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff fe0c 	bl	8000fd8 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80013c0:	2287      	movs	r2, #135	@ 0x87
 80013c2:	214d      	movs	r1, #77	@ 0x4d
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff fd6a 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80013ca:	2200      	movs	r2, #0
 80013cc:	2124      	movs	r1, #36	@ 0x24
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f7ff fd65 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80013d4:	2241      	movs	r2, #65	@ 0x41
 80013d6:	2140      	movs	r1, #64	@ 0x40
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f7ff fd60 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f7ff ff2b 	bl	800123a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80013e4:	22f7      	movs	r2, #247	@ 0xf7
 80013e6:	2111      	movs	r1, #17
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f7ff fd58 	bl	8000e9e <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80013ee:	7afb      	ldrb	r3, [r7, #11]
 80013f0:	461a      	mov	r2, r3
 80013f2:	2122      	movs	r1, #34	@ 0x22
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f7ff fd52 	bl	8000e9e <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80013fa:	210e      	movs	r1, #14
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f7ff fd2f 	bl	8000e60 <SX1278_SPIRead>
 8001402:	4603      	mov	r3, r0
 8001404:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	461a      	mov	r2, r3
 800140a:	210d      	movs	r1, #13
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f7ff fd46 	bl	8000e9e <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8001412:	2122      	movs	r1, #34	@ 0x22
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff fd23 	bl	8000e60 <SX1278_SPIRead>
 800141a:	4603      	mov	r3, r0
 800141c:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 800141e:	7dba      	ldrb	r2, [r7, #22]
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	429a      	cmp	r2, r3
 8001424:	d104      	bne.n	8001430 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2202      	movs	r2, #2
 800142a:	759a      	strb	r2, [r3, #22]
			return 1;
 800142c:	2301      	movs	r3, #1
 800142e:	e00e      	b.n	800144e <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ea      	bne.n	8001412 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f8c6 	bl	80015d2 <SX1278_hw_Reset>
			SX1278_config(module);
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff fdc6 	bl	8000fd8 <SX1278_config>
			return 0;
 800144c:	2300      	movs	r3, #0
		}
	}
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4613      	mov	r3, r2
 8001464:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	2100      	movs	r1, #0
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff fd78 	bl	8000f62 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001472:	228b      	movs	r2, #139	@ 0x8b
 8001474:	2101      	movs	r1, #1
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f7ff fd11 	bl	8000e9e <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f91b 	bl	80016bc <SX1278_hw_GetDIO0>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00b      	beq.n	80014a4 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800148c:	2112      	movs	r1, #18
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f7ff fce6 	bl	8000e60 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff fed0 	bl	800123a <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff fea0 	bl	80011e0 <SX1278_standby>
			return 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e013      	b.n	80014cc <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d109      	bne.n	80014c4 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f88c 	bl	80015d2 <SX1278_hw_Reset>
			SX1278_config(module);
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7ff fd8c 	bl	8000fd8 <SX1278_config>
			return 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e003      	b.n	80014cc <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f000 f8ee 	bl	80016a6 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80014ca:	e7d7      	b.n	800147c <SX1278_LoRaTxPacket+0x26>
	}
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 f848 	bl	800157a <SX1278_hw_init>
	module->frequency = frequency;
 80014ea:	68f9      	ldr	r1, [r7, #12]
 80014ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	7e3a      	ldrb	r2, [r7, #24]
 80014f8:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	7f3a      	ldrb	r2, [r7, #28]
 80014fe:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001506:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800150e:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001516:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800151e:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f7ff fd59 	bl	8000fd8 <SX1278_config>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	4613      	mov	r3, r2
 800153a:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8001542:	79fa      	ldrb	r2, [r7, #7]
 8001544:	429a      	cmp	r2, r3
 8001546:	d003      	beq.n	8001550 <SX1278_read+0x22>
		length = module->readBytes;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 800154e:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3317      	adds	r3, #23
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	4619      	mov	r1, r3
 8001558:	68b8      	ldr	r0, [r7, #8]
 800155a:	f004 fb42 	bl	8005be2 <memcpy>
	rxBuf[length] = '\0';
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8001570:	79fb      	ldrb	r3, [r7, #7]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001582:	2101      	movs	r1, #1
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f80d 	bl	80015a4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6858      	ldr	r0, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	b29b      	uxth	r3, r3
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	f001 f8ff 	bl	800279a <HAL_GPIO_WritePin>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6958      	ldr	r0, [r3, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	b299      	uxth	r1, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	bf0c      	ite	eq
 80015be:	2301      	moveq	r3, #1
 80015c0:	2300      	movne	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	f001 f8e8 	bl	800279a <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80015da:	2101      	movs	r1, #1
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffe1 	bl	80015a4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6858      	ldr	r0, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	f001 f8d3 	bl	800279a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f000 f856 	bl	80016a6 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6858      	ldr	r0, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	2201      	movs	r2, #1
 8001606:	4619      	mov	r1, r3
 8001608:	f001 f8c7 	bl	800279a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800160c:	2064      	movs	r0, #100	@ 0x64
 800160e:	f000 f84a 	bl	80016a6 <SX1278_hw_DelayMs>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001626:	2100      	movs	r1, #0
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ffbb 	bl	80015a4 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6998      	ldr	r0, [r3, #24]
 8001632:	1cf9      	adds	r1, r7, #3
 8001634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001638:	2201      	movs	r2, #1
 800163a:	f003 f8f9 	bl	8004830 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800163e:	bf00      	nop
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fbe0 	bl	8004e0a <HAL_SPI_GetState>
 800164a:	4603      	mov	r3, r0
 800164c:	2b01      	cmp	r3, #1
 800164e:	d1f7      	bne.n	8001640 <SX1278_hw_SPICommand+0x26>
		;
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af02      	add	r7, sp, #8
 8001660:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001666:	2300      	movs	r3, #0
 8001668:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800166a:	2100      	movs	r1, #0
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff99 	bl	80015a4 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6998      	ldr	r0, [r3, #24]
 8001676:	f107 020e 	add.w	r2, r7, #14
 800167a:	f107 010f 	add.w	r1, r7, #15
 800167e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2301      	movs	r3, #1
 8001686:	f003 fa17 	bl	8004ab8 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800168a:	bf00      	nop
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fbba 	bl	8004e0a <HAL_SPI_GetState>
 8001696:	4603      	mov	r3, r0
 8001698:	2b01      	cmp	r3, #1
 800169a:	d1f7      	bne.n	800168c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800169c:	7bbb      	ldrb	r3, [r7, #14]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fda6 	bl	8002200 <HAL_Delay>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	f001 f84b 	bl	800276c <HAL_GPIO_ReadPin>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b01      	cmp	r3, #1
 80016da:	bf0c      	ite	eq
 80016dc:	2301      	moveq	r3, #1
 80016de:	2300      	movne	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001700:	4b41      	ldr	r3, [pc, #260]	@ (8001808 <MX_GPIO_Init+0x11c>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a40      	ldr	r2, [pc, #256]	@ (8001808 <MX_GPIO_Init+0x11c>)
 8001706:	f043 0310 	orr.w	r3, r3, #16
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b3e      	ldr	r3, [pc, #248]	@ (8001808 <MX_GPIO_Init+0x11c>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001718:	4b3b      	ldr	r3, [pc, #236]	@ (8001808 <MX_GPIO_Init+0x11c>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a3a      	ldr	r2, [pc, #232]	@ (8001808 <MX_GPIO_Init+0x11c>)
 800171e:	f043 0320 	orr.w	r3, r3, #32
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b38      	ldr	r3, [pc, #224]	@ (8001808 <MX_GPIO_Init+0x11c>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0320 	and.w	r3, r3, #32
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	4b35      	ldr	r3, [pc, #212]	@ (8001808 <MX_GPIO_Init+0x11c>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a34      	ldr	r2, [pc, #208]	@ (8001808 <MX_GPIO_Init+0x11c>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <MX_GPIO_Init+0x11c>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <MX_GPIO_Init+0x11c>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a2e      	ldr	r2, [pc, #184]	@ (8001808 <MX_GPIO_Init+0x11c>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b2c      	ldr	r3, [pc, #176]	@ (8001808 <MX_GPIO_Init+0x11c>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001766:	4829      	ldr	r0, [pc, #164]	@ (800180c <MX_GPIO_Init+0x120>)
 8001768:	f001 f817 	bl	800279a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2110      	movs	r1, #16
 8001770:	4827      	ldr	r0, [pc, #156]	@ (8001810 <MX_GPIO_Init+0x124>)
 8001772:	f001 f812 	bl	800279a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001776:	2201      	movs	r2, #1
 8001778:	2101      	movs	r1, #1
 800177a:	4826      	ldr	r0, [pc, #152]	@ (8001814 <MX_GPIO_Init+0x128>)
 800177c:	f001 f80d 	bl	800279a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2302      	movs	r3, #2
 8001790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	4619      	mov	r1, r3
 8001798:	481c      	ldr	r0, [pc, #112]	@ (800180c <MX_GPIO_Init+0x120>)
 800179a:	f000 fe63 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800179e:	2310      	movs	r3, #16
 80017a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4619      	mov	r1, r3
 80017b4:	4816      	ldr	r0, [pc, #88]	@ (8001810 <MX_GPIO_Init+0x124>)
 80017b6:	f000 fe55 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80017ba:	2301      	movs	r3, #1
 80017bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4619      	mov	r1, r3
 80017d0:	4810      	ldr	r0, [pc, #64]	@ (8001814 <MX_GPIO_Init+0x128>)
 80017d2:	f000 fe47 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80017d6:	2302      	movs	r3, #2
 80017d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017da:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <MX_GPIO_Init+0x12c>)
 80017dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	480a      	ldr	r0, [pc, #40]	@ (8001814 <MX_GPIO_Init+0x128>)
 80017ea:	f000 fe3b 	bl	8002464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2007      	movs	r0, #7
 80017f4:	f000 fdff 	bl	80023f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017f8:	2007      	movs	r0, #7
 80017fa:	f000 fe18 	bl	800242e <HAL_NVIC_EnableIRQ>

}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	40011000 	.word	0x40011000
 8001810:	40010800 	.word	0x40010800
 8001814:	40010c00 	.word	0x40010c00
 8001818:	10110000 	.word	0x10110000

0800181c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_I2C1_Init+0x50>)
 8001822:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <MX_I2C1_Init+0x54>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_I2C1_Init+0x50>)
 8001828:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <MX_I2C1_Init+0x58>)
 800182a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_I2C1_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_I2C1_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_I2C1_Init+0x50>)
 800183a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800183e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <MX_I2C1_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_I2C1_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	@ (800186c <MX_I2C1_Init+0x50>)
 800185a:	f000 ffd9 	bl	8002810 <HAL_I2C_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001864:	f000 fa91 	bl	8001d8a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200001f4 	.word	0x200001f4
 8001870:	40005400 	.word	0x40005400
 8001874:	000186a0 	.word	0x000186a0

08001878 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a15      	ldr	r2, [pc, #84]	@ (80018e8 <HAL_I2C_MspInit+0x70>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d123      	bne.n	80018e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <HAL_I2C_MspInit+0x74>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a13      	ldr	r2, [pc, #76]	@ (80018ec <HAL_I2C_MspInit+0x74>)
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <HAL_I2C_MspInit+0x74>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018b0:	23c0      	movs	r3, #192	@ 0xc0
 80018b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b4:	2312      	movs	r3, #18
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4619      	mov	r1, r3
 80018c2:	480b      	ldr	r0, [pc, #44]	@ (80018f0 <HAL_I2C_MspInit+0x78>)
 80018c4:	f000 fdce 	bl	8002464 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_I2C_MspInit+0x74>)
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <HAL_I2C_MspInit+0x74>)
 80018ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018d2:	61d3      	str	r3, [r2, #28]
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_I2C_MspInit+0x74>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40005400 	.word	0x40005400
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	00000000 	.word	0x00000000

080018f8 <AHT20_Read>:

#define AHT_ADDR	0x38<<1
#define HI2C      hi2c1

void AHT20_Read(float* Temp, float* Humid)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
	uint8_t dum[6];
	HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 8001902:	2364      	movs	r3, #100	@ 0x64
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	2301      	movs	r3, #1
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	2271      	movs	r2, #113	@ 0x71
 8001914:	2170      	movs	r1, #112	@ 0x70
 8001916:	484c      	ldr	r0, [pc, #304]	@ (8001a48 <AHT20_Read+0x150>)
 8001918:	f001 fc28 	bl	800316c <HAL_I2C_Mem_Read>

	if(!(dum[0]&(1<<3)))
 800191c:	7a3b      	ldrb	r3, [r7, #8]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d111      	bne.n	800194a <AHT20_Read+0x52>
	{
		dum[0] = 0xBE, dum[1] = 0x08, dum[2] = 0x00;
 8001926:	23be      	movs	r3, #190	@ 0xbe
 8001928:	723b      	strb	r3, [r7, #8]
 800192a:	2308      	movs	r3, #8
 800192c:	727b      	strb	r3, [r7, #9]
 800192e:	2300      	movs	r3, #0
 8001930:	72bb      	strb	r3, [r7, #10]
		HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 8001932:	f107 0208 	add.w	r2, r7, #8
 8001936:	2364      	movs	r3, #100	@ 0x64
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2303      	movs	r3, #3
 800193c:	2170      	movs	r1, #112	@ 0x70
 800193e:	4842      	ldr	r0, [pc, #264]	@ (8001a48 <AHT20_Read+0x150>)
 8001940:	f001 f8aa 	bl	8002a98 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8001944:	200a      	movs	r0, #10
 8001946:	f000 fc5b 	bl	8002200 <HAL_Delay>
	}

	dum[0] = 0xAC, dum[1] = 0x33, dum[2] = 0x00;
 800194a:	23ac      	movs	r3, #172	@ 0xac
 800194c:	723b      	strb	r3, [r7, #8]
 800194e:	2333      	movs	r3, #51	@ 0x33
 8001950:	727b      	strb	r3, [r7, #9]
 8001952:	2300      	movs	r3, #0
 8001954:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 8001956:	f107 0208 	add.w	r2, r7, #8
 800195a:	2364      	movs	r3, #100	@ 0x64
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2303      	movs	r3, #3
 8001960:	2170      	movs	r1, #112	@ 0x70
 8001962:	4839      	ldr	r0, [pc, #228]	@ (8001a48 <AHT20_Read+0x150>)
 8001964:	f001 f898 	bl	8002a98 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8001968:	2050      	movs	r0, #80	@ 0x50
 800196a:	f000 fc49 	bl	8002200 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 800196e:	2364      	movs	r3, #100	@ 0x64
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2301      	movs	r3, #1
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2301      	movs	r3, #1
 800197e:	2271      	movs	r2, #113	@ 0x71
 8001980:	2170      	movs	r1, #112	@ 0x70
 8001982:	4831      	ldr	r0, [pc, #196]	@ (8001a48 <AHT20_Read+0x150>)
 8001984:	f001 fbf2 	bl	800316c <HAL_I2C_Mem_Read>
		HAL_Delay(1);
 8001988:	2001      	movs	r0, #1
 800198a:	f000 fc39 	bl	8002200 <HAL_Delay>
	} while(dum[0]&(1<<7));
 800198e:	7a3b      	ldrb	r3, [r7, #8]
 8001990:	b25b      	sxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	dbeb      	blt.n	800196e <AHT20_Read+0x76>

	HAL_I2C_Master_Receive(&HI2C, AHT_ADDR, dum, 6, 100);
 8001996:	f107 0208 	add.w	r2, r7, #8
 800199a:	2364      	movs	r3, #100	@ 0x64
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2306      	movs	r3, #6
 80019a0:	2170      	movs	r1, #112	@ 0x70
 80019a2:	4829      	ldr	r0, [pc, #164]	@ (8001a48 <AHT20_Read+0x150>)
 80019a4:	f001 f976 	bl	8002c94 <HAL_I2C_Master_Receive>
	uint32_t h20 = (dum[1])<<12 | (dum[2])<<4 | (dum[3]>>4);
 80019a8:	7a7b      	ldrb	r3, [r7, #9]
 80019aa:	031a      	lsls	r2, r3, #12
 80019ac:	7abb      	ldrb	r3, [r7, #10]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4313      	orrs	r3, r2
 80019b2:	7afa      	ldrb	r2, [r7, #11]
 80019b4:	0912      	lsrs	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	4313      	orrs	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]
	uint32_t t20 = (dum[3]&0x0F)<<16 | (dum[4])<<8 | dum[5];
 80019bc:	7afb      	ldrb	r3, [r7, #11]
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	4313      	orrs	r3, r2
 80019ca:	7b7a      	ldrb	r2, [r7, #13]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
	*Temp = (t20 / 1048576.0)*200.0 - 50.0;
 80019d0:	6938      	ldr	r0, [r7, #16]
 80019d2:	f7fe fd07 	bl	80003e4 <__aeabi_ui2d>
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <AHT20_Read+0x154>)
 80019dc:	f7fe fea6 	bl	800072c <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <AHT20_Read+0x158>)
 80019ee:	f7fe fd73 	bl	80004d8 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <AHT20_Read+0x15c>)
 8001a00:	f7fe fbb2 	bl	8000168 <__aeabi_dsub>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f83c 	bl	8000a88 <__aeabi_d2f>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]
	*Humid = h20 / 10485.76;
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7fe fce4 	bl	80003e4 <__aeabi_ui2d>
 8001a1c:	a308      	add	r3, pc, #32	@ (adr r3, 8001a40 <AHT20_Read+0x148>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fe83 	bl	800072c <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f82b 	bl	8000a88 <__aeabi_d2f>
 8001a32:	4602      	mov	r2, r0
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	601a      	str	r2, [r3, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	47ae147b 	.word	0x47ae147b
 8001a44:	40c47ae1 	.word	0x40c47ae1
 8001a48:	200001f4 	.word	0x200001f4
 8001a4c:	41300000 	.word	0x41300000
 8001a50:	40690000 	.word	0x40690000
 8001a54:	40490000 	.word	0x40490000

08001a58 <clearTx>:

/*  ----------------------------------
 * 		LoRa Functions
 *  ----------------------------------
 */
void clearTx(){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	memset(LoRaTxBuffer,0,sizeof(LoRaTxBuffer));
 8001a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a60:	2100      	movs	r1, #0
 8001a62:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <clearTx+0x14>)
 8001a64:	f004 f819 	bl	8005a9a <memset>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000390 	.word	0x20000390

08001a70 <clearRx>:

void clearRx(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	memset(LoRaRxBuffer,0,sizeof(LoRaTxBuffer));
 8001a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <clearRx+0x14>)
 8001a7c:	f004 f80d 	bl	8005a9a <memset>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000590 	.word	0x20000590

08001a88 <LoRaSetRxMode>:
// Puts LoRa module in receive mode
// -- LED should be off --
void LoRaSetRxMode(){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	clearRx();
 8001a8c:	f7ff fff0 	bl	8001a70 <clearRx>
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8001a90:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a94:	2110      	movs	r1, #16
 8001a96:	4808      	ldr	r0, [pc, #32]	@ (8001ab8 <LoRaSetRxMode+0x30>)
 8001a98:	f7ff fbdc 	bl	8001254 <SX1278_LoRaEntryRx>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <LoRaSetRxMode+0x34>)
 8001aa0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aa8:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <LoRaSetRxMode+0x38>)
 8001aaa:	f000 fe76 	bl	800279a <HAL_GPIO_WritePin>
	master = 1;
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <LoRaSetRxMode+0x3c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000270 	.word	0x20000270
 8001abc:	2000038c 	.word	0x2000038c
 8001ac0:	40011000 	.word	0x40011000
 8001ac4:	20000388 	.word	0x20000388

08001ac8 <LoRaSetTxMode>:

// Puts LoRa module in transmit mode
// -- LED should be on --
void LoRaSetTxMode(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	clearTx();
 8001acc:	f7ff ffc4 	bl	8001a58 <clearTx>
	ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8001ad0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	4808      	ldr	r0, [pc, #32]	@ (8001af8 <LoRaSetTxMode+0x30>)
 8001ad8:	f7ff fc65 	bl	80013a6 <SX1278_LoRaEntryTx>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a07      	ldr	r2, [pc, #28]	@ (8001afc <LoRaSetTxMode+0x34>)
 8001ae0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ae8:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <LoRaSetTxMode+0x38>)
 8001aea:	f000 fe56 	bl	800279a <HAL_GPIO_WritePin>
	master = 0;
 8001aee:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <LoRaSetTxMode+0x3c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000270 	.word	0x20000270
 8001afc:	2000038c 	.word	0x2000038c
 8001b00:	40011000 	.word	0x40011000
 8001b04:	20000388 	.word	0x20000388

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0e:	f000 fb15 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b12:	f000 f8f5 	bl	8001d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b16:	f7ff fde9 	bl	80016ec <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b1a:	f000 f93d 	bl	8001d98 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001b1e:	f7ff fe7d 	bl	800181c <MX_I2C1_Init>
//  }
//  bool bme280p = bmp280.id == BME280_CHIP_ID;
//  size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");

// ===== LoRa setup =====
  master = 0;
 8001b22:	4b65      	ldr	r3, [pc, #404]	@ (8001cb8 <main+0x1b0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

  control_val++;
 8001b28:	4b64      	ldr	r3, [pc, #400]	@ (8001cbc <main+0x1b4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	4a63      	ldr	r2, [pc, #396]	@ (8001cbc <main+0x1b4>)
 8001b30:	6013      	str	r3, [r2, #0]
  	//initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001b32:	4b63      	ldr	r3, [pc, #396]	@ (8001cc0 <main+0x1b8>)
 8001b34:	4a63      	ldr	r2, [pc, #396]	@ (8001cc4 <main+0x1bc>)
 8001b36:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8001b38:	4b61      	ldr	r3, [pc, #388]	@ (8001cc0 <main+0x1b8>)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8001b3e:	4b60      	ldr	r3, [pc, #384]	@ (8001cc0 <main+0x1b8>)
 8001b40:	4a61      	ldr	r2, [pc, #388]	@ (8001cc8 <main+0x1c0>)
 8001b42:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8001b44:	4b5e      	ldr	r3, [pc, #376]	@ (8001cc0 <main+0x1b8>)
 8001b46:	2210      	movs	r2, #16
 8001b48:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RST_GPIO_Port;
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc0 <main+0x1b8>)
 8001b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc4 <main+0x1bc>)
 8001b4e:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RST_Pin;
 8001b50:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc0 <main+0x1b8>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8001b56:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc0 <main+0x1b8>)
 8001b58:	4a5c      	ldr	r2, [pc, #368]	@ (8001ccc <main+0x1c4>)
 8001b5a:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8001b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd0 <main+0x1c8>)
 8001b5e:	4a58      	ldr	r2, [pc, #352]	@ (8001cc0 <main+0x1b8>)
 8001b60:	601a      	str	r2, [r3, #0]

  control_val++;
 8001b62:	4b56      	ldr	r3, [pc, #344]	@ (8001cbc <main+0x1b4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a54      	ldr	r2, [pc, #336]	@ (8001cbc <main+0x1b4>)
 8001b6a:	6013      	str	r3, [r2, #0]
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	9305      	str	r3, [sp, #20]
 8001b70:	2300      	movs	r3, #0
 8001b72:	9304      	str	r3, [sp, #16]
 8001b74:	2300      	movs	r3, #0
 8001b76:	9303      	str	r3, [sp, #12]
 8001b78:	2307      	movs	r3, #7
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2301      	movs	r3, #1
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	a34a      	add	r3, pc, #296	@ (adr r3, 8001cb0 <main+0x1a8>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	4851      	ldr	r0, [pc, #324]	@ (8001cd0 <main+0x1c8>)
 8001b8c:	f7ff fca2 	bl	80014d4 <SX1278_init>
		  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  control_val++;
 8001b90:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <main+0x1b4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	4a49      	ldr	r2, [pc, #292]	@ (8001cbc <main+0x1b4>)
 8001b98:	6013      	str	r3, [r2, #0]


  LoRaSetRxMode();
 8001b9a:	f7ff ff75 	bl	8001a88 <LoRaSetRxMode>
  control_val++;
 8001b9e:	4b47      	ldr	r3, [pc, #284]	@ (8001cbc <main+0x1b4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a45      	ldr	r2, [pc, #276]	@ (8001cbc <main+0x1b4>)
 8001ba6:	6013      	str	r3, [r2, #0]
	   */
	  // === Sensors Test ===



	  control_val = 0;
 8001ba8:	4b44      	ldr	r3, [pc, #272]	@ (8001cbc <main+0x1b4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
	  ret = SX1278_LoRaRxPacket(&SX1278);
 8001bae:	4848      	ldr	r0, [pc, #288]	@ (8001cd0 <main+0x1c8>)
 8001bb0:	f7ff fbb5 	bl	800131e <SX1278_LoRaRxPacket>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b46      	ldr	r3, [pc, #280]	@ (8001cd4 <main+0x1cc>)
 8001bba:	601a      	str	r2, [r3, #0]
	  if (ret > 0) {
 8001bbc:	4b45      	ldr	r3, [pc, #276]	@ (8001cd4 <main+0x1cc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	dd6a      	ble.n	8001c9a <main+0x192>
		  // Setup Timers


		  // Read buffer
		  SX1278_read(&SX1278, (uint8_t*) LoRaRxBuffer, ret);
 8001bc4:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <main+0x1cc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4942      	ldr	r1, [pc, #264]	@ (8001cd8 <main+0x1d0>)
 8001bce:	4840      	ldr	r0, [pc, #256]	@ (8001cd0 <main+0x1c8>)
 8001bd0:	f7ff fcad 	bl	800152e <SX1278_read>
		  if(strstr((char *)LoRaRxBuffer,"S2")){
 8001bd4:	4941      	ldr	r1, [pc, #260]	@ (8001cdc <main+0x1d4>)
 8001bd6:	4840      	ldr	r0, [pc, #256]	@ (8001cd8 <main+0x1d0>)
 8001bd8:	f003 ff67 	bl	8005aaa <strstr>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <main+0xde>
			  return 0;  								// If bad sensor_id pass
 8001be2:	2300      	movs	r3, #0
 8001be4:	e05e      	b.n	8001ca4 <main+0x19c>
		  }else if(strstr((char *)LoRaRxBuffer,"S1")){	// 	If good sensor_id
 8001be6:	493e      	ldr	r1, [pc, #248]	@ (8001ce0 <main+0x1d8>)
 8001be8:	483b      	ldr	r0, [pc, #236]	@ (8001cd8 <main+0x1d0>)
 8001bea:	f003 ff5e 	bl	8005aaa <strstr>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d009      	beq.n	8001c08 <main+0x100>
			  LoRaSetTxMode();							// 	Go into TX mode
 8001bf4:	f7ff ff68 	bl	8001ac8 <LoRaSetTxMode>
			  AHT20_Read(&temp, &humi); 				// Read sensor data
 8001bf8:	493a      	ldr	r1, [pc, #232]	@ (8001ce4 <main+0x1dc>)
 8001bfa:	483b      	ldr	r0, [pc, #236]	@ (8001ce8 <main+0x1e0>)
 8001bfc:	f7ff fe7c 	bl	80018f8 <AHT20_Read>

			  HAL_Delay(2000);
 8001c00:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c04:	f000 fafc 	bl	8002200 <HAL_Delay>
		  }

		  // Set timers for TX mode

		  current_time = HAL_GetTick();
 8001c08:	f000 faf0 	bl	80021ec <HAL_GetTick>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a37      	ldr	r2, [pc, #220]	@ (8001cec <main+0x1e4>)
 8001c10:	6013      	str	r3, [r2, #0]
		  inside_counter = current_time + 5000;
 8001c12:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <main+0x1e4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001c1a:	3308      	adds	r3, #8
 8001c1c:	4a34      	ldr	r2, [pc, #208]	@ (8001cf0 <main+0x1e8>)
 8001c1e:	6013      	str	r3, [r2, #0]

		  while(HAL_GetTick()<=inside_counter){
 8001c20:	e032      	b.n	8001c88 <main+0x180>
			  tx_len = sprintf(LoRaTxBuffer, "S1,%d,%d,%d",(int)temp, (int)humi, 1001);
 8001c22:	4b31      	ldr	r3, [pc, #196]	@ (8001ce8 <main+0x1e0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe ff7e 	bl	8000b28 <__aeabi_f2iz>
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <main+0x1dc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe ff78 	bl	8000b28 <__aeabi_f2iz>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8001c3e:	9200      	str	r2, [sp, #0]
 8001c40:	4622      	mov	r2, r4
 8001c42:	492c      	ldr	r1, [pc, #176]	@ (8001cf4 <main+0x1ec>)
 8001c44:	482c      	ldr	r0, [pc, #176]	@ (8001cf8 <main+0x1f0>)
 8001c46:	f003 fec5 	bl	80059d4 <siprintf>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cfc <main+0x1f4>)
 8001c4e:	6013      	str	r3, [r2, #0]
			  ret = SX1278_LoRaEntryTx(&SX1278, tx_len, 1000);
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <main+0x1f4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	481c      	ldr	r0, [pc, #112]	@ (8001cd0 <main+0x1c8>)
 8001c5e:	f7ff fba2 	bl	80013a6 <SX1278_LoRaEntryTx>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <main+0x1cc>)
 8001c66:	6013      	str	r3, [r2, #0]
			  ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) LoRaTxBuffer,tx_len, 1000);
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <main+0x1f4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c72:	4921      	ldr	r1, [pc, #132]	@ (8001cf8 <main+0x1f0>)
 8001c74:	4816      	ldr	r0, [pc, #88]	@ (8001cd0 <main+0x1c8>)
 8001c76:	f7ff fbee 	bl	8001456 <SX1278_LoRaTxPacket>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4a15      	ldr	r2, [pc, #84]	@ (8001cd4 <main+0x1cc>)
 8001c7e:	6013      	str	r3, [r2, #0]
			  HAL_Delay(500);
 8001c80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c84:	f000 fabc 	bl	8002200 <HAL_Delay>
		  while(HAL_GetTick()<=inside_counter){
 8001c88:	f000 fab0 	bl	80021ec <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <main+0x1e8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d9c5      	bls.n	8001c22 <main+0x11a>
		  }

		  // Switch to RX mode
		  LoRaSetRxMode();
 8001c96:	f7ff fef7 	bl	8001a88 <LoRaSetRxMode>


	  }
	  control_val = -1;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <main+0x1b4>)
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	601a      	str	r2, [r3, #0]
	  control_val = 0;
 8001ca2:	e781      	b.n	8001ba8 <main+0xa0>
	   * End of Test 2
	   */

  }
  /* USER CODE END 3 */
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3704      	adds	r7, #4
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	f3af 8000 	nop.w
 8001cb0:	19de5080 	.word	0x19de5080
 8001cb4:	00000000 	.word	0x00000000
 8001cb8:	20000388 	.word	0x20000388
 8001cbc:	20000794 	.word	0x20000794
 8001cc0:	20000250 	.word	0x20000250
 8001cc4:	40010c00 	.word	0x40010c00
 8001cc8:	40010800 	.word	0x40010800
 8001ccc:	200007a0 	.word	0x200007a0
 8001cd0:	20000270 	.word	0x20000270
 8001cd4:	2000038c 	.word	0x2000038c
 8001cd8:	20000590 	.word	0x20000590
 8001cdc:	08007c80 	.word	0x08007c80
 8001ce0:	08007c84 	.word	0x08007c84
 8001ce4:	2000024c 	.word	0x2000024c
 8001ce8:	20000248 	.word	0x20000248
 8001cec:	20000798 	.word	0x20000798
 8001cf0:	2000079c 	.word	0x2000079c
 8001cf4:	08007c88 	.word	0x08007c88
 8001cf8:	20000390 	.word	0x20000390
 8001cfc:	20000790 	.word	0x20000790

08001d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b090      	sub	sp, #64	@ 0x40
 8001d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d06:	f107 0318 	add.w	r3, r7, #24
 8001d0a:	2228      	movs	r2, #40	@ 0x28
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fec3 	bl	8005a9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d30:	2301      	movs	r3, #1
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d34:	2302      	movs	r3, #2
 8001d36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d3e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d44:	f107 0318 	add.w	r3, r7, #24
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 f8f1 	bl	8003f30 <HAL_RCC_OscConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d54:	f000 f819 	bl	8001d8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d58:	230f      	movs	r3, #15
 8001d5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2102      	movs	r1, #2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f002 fb5e 	bl	8004434 <HAL_RCC_ClockConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d7e:	f000 f804 	bl	8001d8a <Error_Handler>
  }
}
 8001d82:	bf00      	nop
 8001d84:	3740      	adds	r7, #64	@ 0x40
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8e:	b672      	cpsid	i
}
 8001d90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d92:	bf00      	nop
 8001d94:	e7fd      	b.n	8001d92 <Error_Handler+0x8>
	...

08001d98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001d9e:	4a18      	ldr	r2, [pc, #96]	@ (8001e00 <MX_SPI1_Init+0x68>)
 8001da0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001da4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001da8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001daa:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db6:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001dcc:	2210      	movs	r2, #16
 8001dce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001de4:	220a      	movs	r2, #10
 8001de6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <MX_SPI1_Init+0x64>)
 8001dea:	f002 fc9d 	bl	8004728 <HAL_SPI_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001df4:	f7ff ffc9 	bl	8001d8a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200007a0 	.word	0x200007a0
 8001e00:	40013000 	.word	0x40013000

08001e04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e8c <HAL_SPI_MspInit+0x88>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d12f      	bne.n	8001e84 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <HAL_SPI_MspInit+0x8c>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a19      	ldr	r2, [pc, #100]	@ (8001e90 <HAL_SPI_MspInit+0x8c>)
 8001e2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <HAL_SPI_MspInit+0x8c>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <HAL_SPI_MspInit+0x8c>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4a13      	ldr	r2, [pc, #76]	@ (8001e90 <HAL_SPI_MspInit+0x8c>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6193      	str	r3, [r2, #24]
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <HAL_SPI_MspInit+0x8c>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e54:	23a0      	movs	r3, #160	@ 0xa0
 8001e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	4619      	mov	r1, r3
 8001e66:	480b      	ldr	r0, [pc, #44]	@ (8001e94 <HAL_SPI_MspInit+0x90>)
 8001e68:	f000 fafc 	bl	8002464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e6c:	2340      	movs	r3, #64	@ 0x40
 8001e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <HAL_SPI_MspInit+0x90>)
 8001e80:	f000 faf0 	bl	8002464 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e84:	bf00      	nop
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40013000 	.word	0x40013000
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010800 	.word	0x40010800

08001e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_MspInit+0x5c>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	4a14      	ldr	r2, [pc, #80]	@ (8001ef4 <HAL_MspInit+0x5c>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6193      	str	r3, [r2, #24]
 8001eaa:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <HAL_MspInit+0x5c>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <HAL_MspInit+0x5c>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <HAL_MspInit+0x5c>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <HAL_MspInit+0x5c>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_MspInit+0x60>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <HAL_MspInit+0x60>)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40010000 	.word	0x40010000

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <NMI_Handler+0x4>

08001f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <MemManage_Handler+0x4>

08001f14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4c:	f000 f93c 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f000 fc37 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  return 1;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <_kill>:

int _kill(int pid, int sig)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f7a:	f003 fdf7 	bl	8005b6c <__errno>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2216      	movs	r2, #22
 8001f82:	601a      	str	r2, [r3, #0]
  return -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_exit>:

void _exit (int status)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ffe7 	bl	8001f70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fa2:	bf00      	nop
 8001fa4:	e7fd      	b.n	8001fa2 <_exit+0x12>

08001fa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e00a      	b.n	8001fce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fb8:	f3af 8000 	nop.w
 8001fbc:	4601      	mov	r1, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	60ba      	str	r2, [r7, #8]
 8001fc4:	b2ca      	uxtb	r2, r1
 8001fc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dbf0      	blt.n	8001fb8 <_read+0x12>
  }

  return len;
 8001fd6:	687b      	ldr	r3, [r7, #4]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e009      	b.n	8002006 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	60ba      	str	r2, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	dbf1      	blt.n	8001ff2 <_write+0x12>
  }
  return len;
 800200e:	687b      	ldr	r3, [r7, #4]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_close>:

int _close(int file)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800203e:	605a      	str	r2, [r3, #4]
  return 0;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <_isatty>:

int _isatty(int file)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002054:	2301      	movs	r3, #1
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002080:	4a14      	ldr	r2, [pc, #80]	@ (80020d4 <_sbrk+0x5c>)
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <_sbrk+0x60>)
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800208c:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <_sbrk+0x64>)
 8002096:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <_sbrk+0x68>)
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d207      	bcs.n	80020b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a8:	f003 fd60 	bl	8005b6c <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	220c      	movs	r2, #12
 80020b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e009      	b.n	80020cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b8:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020be:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <_sbrk+0x64>)
 80020c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20005000 	.word	0x20005000
 80020d8:	00000400 	.word	0x00000400
 80020dc:	200007f8 	.word	0x200007f8
 80020e0:	20000950 	.word	0x20000950

080020e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f0:	f7ff fff8 	bl	80020e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f4:	480b      	ldr	r0, [pc, #44]	@ (8002124 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020f6:	490c      	ldr	r1, [pc, #48]	@ (8002128 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020f8:	4a0c      	ldr	r2, [pc, #48]	@ (800212c <LoopFillZerobss+0x16>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020fc:	e002      	b.n	8002104 <LoopCopyDataInit>

080020fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002102:	3304      	adds	r3, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002108:	d3f9      	bcc.n	80020fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210a:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800210c:	4c09      	ldr	r4, [pc, #36]	@ (8002134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002110:	e001      	b.n	8002116 <LoopFillZerobss>

08002112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002114:	3204      	adds	r2, #4

08002116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002118:	d3fb      	bcc.n	8002112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211a:	f003 fd2d 	bl	8005b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800211e:	f7ff fcf3 	bl	8001b08 <main>
  bx lr
 8002122:	4770      	bx	lr
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800212c:	08008060 	.word	0x08008060
  ldr r2, =_sbss
 8002130:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002134:	2000094c 	.word	0x2000094c

08002138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC1_2_IRQHandler>
	...

0800213c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <HAL_Init+0x28>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	@ (8002164 <HAL_Init+0x28>)
 8002146:	f043 0310 	orr.w	r3, r3, #16
 800214a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 f947 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002152:	200f      	movs	r0, #15
 8002154:	f000 f808 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002158:	f7ff fe9e 	bl	8001e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <HAL_InitTick+0x54>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_InitTick+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f95f 	bl	800244a <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00e      	b.n	80021b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d80a      	bhi.n	80021b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f000 f927 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a8:	4a06      	ldr	r2, [pc, #24]	@ (80021c4 <HAL_InitTick+0x5c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000008 	.word	0x20000008
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_IncTick+0x1c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_IncTick+0x20>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a03      	ldr	r2, [pc, #12]	@ (80021e8 <HAL_IncTick+0x20>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	20000008 	.word	0x20000008
 80021e8:	200007fc 	.word	0x200007fc

080021ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b02      	ldr	r3, [pc, #8]	@ (80021fc <HAL_GetTick+0x10>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	200007fc 	.word	0x200007fc

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff fff0 	bl	80021ec <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d005      	beq.n	8002226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_Delay+0x44>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002226:	bf00      	nop
 8002228:	f7ff ffe0 	bl	80021ec <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	d8f7      	bhi.n	8002228 <HAL_Delay+0x28>
  {
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000008 	.word	0x20000008

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	@ (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4906      	ldr	r1, [pc, #24]	@ (80022e0 <__NVIC_EnableIRQ+0x34>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	@ (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	@ (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	@ 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff90 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff2d 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff42 	bl	8002290 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff90 	bl	8002338 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5f 	bl	80022e4 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff35 	bl	80022ac <__NVIC_EnableIRQ>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa2 	bl	800239c <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b08b      	sub	sp, #44	@ 0x2c
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002476:	e169      	b.n	800274c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002478:	2201      	movs	r2, #1
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	429a      	cmp	r2, r3
 8002492:	f040 8158 	bne.w	8002746 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a9a      	ldr	r2, [pc, #616]	@ (8002704 <HAL_GPIO_Init+0x2a0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d05e      	beq.n	800255e <HAL_GPIO_Init+0xfa>
 80024a0:	4a98      	ldr	r2, [pc, #608]	@ (8002704 <HAL_GPIO_Init+0x2a0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d875      	bhi.n	8002592 <HAL_GPIO_Init+0x12e>
 80024a6:	4a98      	ldr	r2, [pc, #608]	@ (8002708 <HAL_GPIO_Init+0x2a4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d058      	beq.n	800255e <HAL_GPIO_Init+0xfa>
 80024ac:	4a96      	ldr	r2, [pc, #600]	@ (8002708 <HAL_GPIO_Init+0x2a4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d86f      	bhi.n	8002592 <HAL_GPIO_Init+0x12e>
 80024b2:	4a96      	ldr	r2, [pc, #600]	@ (800270c <HAL_GPIO_Init+0x2a8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d052      	beq.n	800255e <HAL_GPIO_Init+0xfa>
 80024b8:	4a94      	ldr	r2, [pc, #592]	@ (800270c <HAL_GPIO_Init+0x2a8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d869      	bhi.n	8002592 <HAL_GPIO_Init+0x12e>
 80024be:	4a94      	ldr	r2, [pc, #592]	@ (8002710 <HAL_GPIO_Init+0x2ac>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d04c      	beq.n	800255e <HAL_GPIO_Init+0xfa>
 80024c4:	4a92      	ldr	r2, [pc, #584]	@ (8002710 <HAL_GPIO_Init+0x2ac>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d863      	bhi.n	8002592 <HAL_GPIO_Init+0x12e>
 80024ca:	4a92      	ldr	r2, [pc, #584]	@ (8002714 <HAL_GPIO_Init+0x2b0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d046      	beq.n	800255e <HAL_GPIO_Init+0xfa>
 80024d0:	4a90      	ldr	r2, [pc, #576]	@ (8002714 <HAL_GPIO_Init+0x2b0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d85d      	bhi.n	8002592 <HAL_GPIO_Init+0x12e>
 80024d6:	2b12      	cmp	r3, #18
 80024d8:	d82a      	bhi.n	8002530 <HAL_GPIO_Init+0xcc>
 80024da:	2b12      	cmp	r3, #18
 80024dc:	d859      	bhi.n	8002592 <HAL_GPIO_Init+0x12e>
 80024de:	a201      	add	r2, pc, #4	@ (adr r2, 80024e4 <HAL_GPIO_Init+0x80>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	0800255f 	.word	0x0800255f
 80024e8:	08002539 	.word	0x08002539
 80024ec:	0800254b 	.word	0x0800254b
 80024f0:	0800258d 	.word	0x0800258d
 80024f4:	08002593 	.word	0x08002593
 80024f8:	08002593 	.word	0x08002593
 80024fc:	08002593 	.word	0x08002593
 8002500:	08002593 	.word	0x08002593
 8002504:	08002593 	.word	0x08002593
 8002508:	08002593 	.word	0x08002593
 800250c:	08002593 	.word	0x08002593
 8002510:	08002593 	.word	0x08002593
 8002514:	08002593 	.word	0x08002593
 8002518:	08002593 	.word	0x08002593
 800251c:	08002593 	.word	0x08002593
 8002520:	08002593 	.word	0x08002593
 8002524:	08002593 	.word	0x08002593
 8002528:	08002541 	.word	0x08002541
 800252c:	08002555 	.word	0x08002555
 8002530:	4a79      	ldr	r2, [pc, #484]	@ (8002718 <HAL_GPIO_Init+0x2b4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002536:	e02c      	b.n	8002592 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	623b      	str	r3, [r7, #32]
          break;
 800253e:	e029      	b.n	8002594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	3304      	adds	r3, #4
 8002546:	623b      	str	r3, [r7, #32]
          break;
 8002548:	e024      	b.n	8002594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	3308      	adds	r3, #8
 8002550:	623b      	str	r3, [r7, #32]
          break;
 8002552:	e01f      	b.n	8002594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	330c      	adds	r3, #12
 800255a:	623b      	str	r3, [r7, #32]
          break;
 800255c:	e01a      	b.n	8002594 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002566:	2304      	movs	r3, #4
 8002568:	623b      	str	r3, [r7, #32]
          break;
 800256a:	e013      	b.n	8002594 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002574:	2308      	movs	r3, #8
 8002576:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69fa      	ldr	r2, [r7, #28]
 800257c:	611a      	str	r2, [r3, #16]
          break;
 800257e:	e009      	b.n	8002594 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002580:	2308      	movs	r3, #8
 8002582:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	615a      	str	r2, [r3, #20]
          break;
 800258a:	e003      	b.n	8002594 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
          break;
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x130>
          break;
 8002592:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2bff      	cmp	r3, #255	@ 0xff
 8002598:	d801      	bhi.n	800259e <HAL_GPIO_Init+0x13a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	e001      	b.n	80025a2 <HAL_GPIO_Init+0x13e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3304      	adds	r3, #4
 80025a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2bff      	cmp	r3, #255	@ 0xff
 80025a8:	d802      	bhi.n	80025b0 <HAL_GPIO_Init+0x14c>
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	e002      	b.n	80025b6 <HAL_GPIO_Init+0x152>
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	3b08      	subs	r3, #8
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	210f      	movs	r1, #15
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	401a      	ands	r2, r3
 80025c8:	6a39      	ldr	r1, [r7, #32]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	431a      	orrs	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80b1 	beq.w	8002746 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025e4:	4b4d      	ldr	r3, [pc, #308]	@ (800271c <HAL_GPIO_Init+0x2b8>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a4c      	ldr	r2, [pc, #304]	@ (800271c <HAL_GPIO_Init+0x2b8>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b4a      	ldr	r3, [pc, #296]	@ (800271c <HAL_GPIO_Init+0x2b8>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025fc:	4a48      	ldr	r2, [pc, #288]	@ (8002720 <HAL_GPIO_Init+0x2bc>)
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002608:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a40      	ldr	r2, [pc, #256]	@ (8002724 <HAL_GPIO_Init+0x2c0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d013      	beq.n	8002650 <HAL_GPIO_Init+0x1ec>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a3f      	ldr	r2, [pc, #252]	@ (8002728 <HAL_GPIO_Init+0x2c4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d00d      	beq.n	800264c <HAL_GPIO_Init+0x1e8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a3e      	ldr	r2, [pc, #248]	@ (800272c <HAL_GPIO_Init+0x2c8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d007      	beq.n	8002648 <HAL_GPIO_Init+0x1e4>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a3d      	ldr	r2, [pc, #244]	@ (8002730 <HAL_GPIO_Init+0x2cc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_GPIO_Init+0x1e0>
 8002640:	2303      	movs	r3, #3
 8002642:	e006      	b.n	8002652 <HAL_GPIO_Init+0x1ee>
 8002644:	2304      	movs	r3, #4
 8002646:	e004      	b.n	8002652 <HAL_GPIO_Init+0x1ee>
 8002648:	2302      	movs	r3, #2
 800264a:	e002      	b.n	8002652 <HAL_GPIO_Init+0x1ee>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_GPIO_Init+0x1ee>
 8002650:	2300      	movs	r3, #0
 8002652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002654:	f002 0203 	and.w	r2, r2, #3
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	4093      	lsls	r3, r2
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002662:	492f      	ldr	r1, [pc, #188]	@ (8002720 <HAL_GPIO_Init+0x2bc>)
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800267c:	4b2d      	ldr	r3, [pc, #180]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	492c      	ldr	r1, [pc, #176]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	608b      	str	r3, [r1, #8]
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800268a:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	43db      	mvns	r3, r3
 8002692:	4928      	ldr	r1, [pc, #160]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 8002694:	4013      	ands	r3, r2
 8002696:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026a4:	4b23      	ldr	r3, [pc, #140]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	4922      	ldr	r1, [pc, #136]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60cb      	str	r3, [r1, #12]
 80026b0:	e006      	b.n	80026c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026b2:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	491e      	ldr	r1, [pc, #120]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 80026bc:	4013      	ands	r3, r2
 80026be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	4918      	ldr	r1, [pc, #96]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026da:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4914      	ldr	r1, [pc, #80]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d021      	beq.n	8002738 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	490e      	ldr	r1, [pc, #56]	@ (8002734 <HAL_GPIO_Init+0x2d0>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
 8002700:	e021      	b.n	8002746 <HAL_GPIO_Init+0x2e2>
 8002702:	bf00      	nop
 8002704:	10320000 	.word	0x10320000
 8002708:	10310000 	.word	0x10310000
 800270c:	10220000 	.word	0x10220000
 8002710:	10210000 	.word	0x10210000
 8002714:	10120000 	.word	0x10120000
 8002718:	10110000 	.word	0x10110000
 800271c:	40021000 	.word	0x40021000
 8002720:	40010000 	.word	0x40010000
 8002724:	40010800 	.word	0x40010800
 8002728:	40010c00 	.word	0x40010c00
 800272c:	40011000 	.word	0x40011000
 8002730:	40011400 	.word	0x40011400
 8002734:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_GPIO_Init+0x304>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	43db      	mvns	r3, r3
 8002740:	4909      	ldr	r1, [pc, #36]	@ (8002768 <HAL_GPIO_Init+0x304>)
 8002742:	4013      	ands	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	3301      	adds	r3, #1
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	f47f ae8e 	bne.w	8002478 <HAL_GPIO_Init+0x14>
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	372c      	adds	r7, #44	@ 0x2c
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	40010400 	.word	0x40010400

0800276c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e001      	b.n	800278e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	807b      	strh	r3, [r7, #2]
 80027a6:	4613      	mov	r3, r2
 80027a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027aa:	787b      	ldrb	r3, [r7, #1]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b0:	887a      	ldrh	r2, [r7, #2]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027b6:	e003      	b.n	80027c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	041a      	lsls	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	611a      	str	r2, [r3, #16]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027e2:	4a05      	ldr	r2, [pc, #20]	@ (80027f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f806 	bl	80027fc <HAL_GPIO_EXTI_Callback>
  }
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40010400 	.word	0x40010400

080027fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e12b      	b.n	8002a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff f81e 	bl	8001878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	@ 0x24
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002874:	f001 ff26 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8002878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4a81      	ldr	r2, [pc, #516]	@ (8002a84 <HAL_I2C_Init+0x274>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d807      	bhi.n	8002894 <HAL_I2C_Init+0x84>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a80      	ldr	r2, [pc, #512]	@ (8002a88 <HAL_I2C_Init+0x278>)
 8002888:	4293      	cmp	r3, r2
 800288a:	bf94      	ite	ls
 800288c:	2301      	movls	r3, #1
 800288e:	2300      	movhi	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	e006      	b.n	80028a2 <HAL_I2C_Init+0x92>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a7d      	ldr	r2, [pc, #500]	@ (8002a8c <HAL_I2C_Init+0x27c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	bf94      	ite	ls
 800289c:	2301      	movls	r3, #1
 800289e:	2300      	movhi	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0e7      	b.n	8002a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a78      	ldr	r2, [pc, #480]	@ (8002a90 <HAL_I2C_Init+0x280>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9b      	lsrs	r3, r3, #18
 80028b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a84 <HAL_I2C_Init+0x274>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d802      	bhi.n	80028e4 <HAL_I2C_Init+0xd4>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3301      	adds	r3, #1
 80028e2:	e009      	b.n	80028f8 <HAL_I2C_Init+0xe8>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	4a69      	ldr	r2, [pc, #420]	@ (8002a94 <HAL_I2C_Init+0x284>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	3301      	adds	r3, #1
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800290a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	495c      	ldr	r1, [pc, #368]	@ (8002a84 <HAL_I2C_Init+0x274>)
 8002914:	428b      	cmp	r3, r1
 8002916:	d819      	bhi.n	800294c <HAL_I2C_Init+0x13c>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e59      	subs	r1, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fbb1 f3f3 	udiv	r3, r1, r3
 8002926:	1c59      	adds	r1, r3, #1
 8002928:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800292c:	400b      	ands	r3, r1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_I2C_Init+0x138>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1e59      	subs	r1, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002940:	3301      	adds	r3, #1
 8002942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002946:	e051      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 8002948:	2304      	movs	r3, #4
 800294a:	e04f      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d111      	bne.n	8002978 <HAL_I2C_Init+0x168>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1e58      	subs	r0, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	440b      	add	r3, r1
 8002962:	fbb0 f3f3 	udiv	r3, r0, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e012      	b.n	800299e <HAL_I2C_Init+0x18e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e58      	subs	r0, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	0099      	lsls	r1, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Init+0x196>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e022      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10e      	bne.n	80029cc <HAL_I2C_Init+0x1bc>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e58      	subs	r0, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	440b      	add	r3, r1
 80029bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ca:	e00f      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e58      	subs	r0, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	0099      	lsls	r1, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	6809      	ldr	r1, [r1, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6911      	ldr	r1, [r2, #16]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	000186a0 	.word	0x000186a0
 8002a88:	001e847f 	.word	0x001e847f
 8002a8c:	003d08ff 	.word	0x003d08ff
 8002a90:	431bde83 	.word	0x431bde83
 8002a94:	10624dd3 	.word	0x10624dd3

08002a98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	817b      	strh	r3, [r7, #10]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff fb9e 	bl	80021ec <HAL_GetTick>
 8002ab0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	f040 80e0 	bne.w	8002c80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2319      	movs	r3, #25
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4970      	ldr	r1, [pc, #448]	@ (8002c8c <HAL_I2C_Master_Transmit+0x1f4>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fffa 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e0d3      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x50>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e0cc      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d007      	beq.n	8002b0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2221      	movs	r2, #33	@ 0x21
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2210      	movs	r2, #16
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	893a      	ldrh	r2, [r7, #8]
 8002b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a50      	ldr	r2, [pc, #320]	@ (8002c90 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b50:	8979      	ldrh	r1, [r7, #10]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fd7c 	bl	8003654 <I2C_MasterRequestWrite>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e08d      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b7c:	e066      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	6a39      	ldr	r1, [r7, #32]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f001 f8b8 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d107      	bne.n	8002ba6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06b      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d11b      	bne.n	8002c20 <HAL_I2C_Master_Transmit+0x188>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d017      	beq.n	8002c20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	6a39      	ldr	r1, [r7, #32]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f001 f8af 	bl	8003d88 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d107      	bne.n	8002c48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e01a      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d194      	bne.n	8002b7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	00100002 	.word	0x00100002
 8002c90:	ffff0000 	.word	0xffff0000

08002c94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08c      	sub	sp, #48	@ 0x30
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	817b      	strh	r3, [r7, #10]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff fa9e 	bl	80021ec <HAL_GetTick>
 8002cb0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	f040 824b 	bne.w	8003156 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2319      	movs	r3, #25
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	497f      	ldr	r1, [pc, #508]	@ (8002ec8 <HAL_I2C_Master_Receive+0x234>)
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fefa 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e23e      	b.n	8003158 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_I2C_Master_Receive+0x54>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e237      	b.n	8003158 <HAL_I2C_Master_Receive+0x4c4>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d007      	beq.n	8002d0e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2222      	movs	r2, #34	@ 0x22
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	893a      	ldrh	r2, [r7, #8]
 8002d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a5f      	ldr	r2, [pc, #380]	@ (8002ecc <HAL_I2C_Master_Receive+0x238>)
 8002d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d50:	8979      	ldrh	r1, [r7, #10]
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fcfe 	bl	8003758 <I2C_MasterRequestRead>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e1f8      	b.n	8003158 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d113      	bne.n	8002d96 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e1cc      	b.n	8003130 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d11e      	bne.n	8002ddc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dae:	b672      	cpsid	i
}
 8002db0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002dd8:	b662      	cpsie	i
}
 8002dda:	e035      	b.n	8002e48 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d11e      	bne.n	8002e22 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002df2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i
}
 8002df6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e1e:	b662      	cpsie	i
}
 8002e20:	e012      	b.n	8002e48 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e48:	e172      	b.n	8003130 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	f200 811f 	bhi.w	8003092 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d123      	bne.n	8002ea4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 ffd9 	bl	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e173      	b.n	8003158 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ea2:	e145      	b.n	8003130 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d152      	bne.n	8002f52 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	4906      	ldr	r1, [pc, #24]	@ (8002ed0 <HAL_I2C_Master_Receive+0x23c>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fe04 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e148      	b.n	8003158 <HAL_I2C_Master_Receive+0x4c4>
 8002ec6:	bf00      	nop
 8002ec8:	00100002 	.word	0x00100002
 8002ecc:	ffff0000 	.word	0xffff0000
 8002ed0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed4:	b672      	cpsid	i
}
 8002ed6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f1a:	b662      	cpsie	i
}
 8002f1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f50:	e0ee      	b.n	8003130 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	2200      	movs	r2, #0
 8002f5a:	4981      	ldr	r1, [pc, #516]	@ (8003160 <HAL_I2C_Master_Receive+0x4cc>)
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fdb1 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0f5      	b.n	8003158 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f7c:	b672      	cpsid	i
}
 8002f7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fb2:	4b6c      	ldr	r3, [pc, #432]	@ (8003164 <HAL_I2C_Master_Receive+0x4d0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	08db      	lsrs	r3, r3, #3
 8002fb8:	4a6b      	ldr	r2, [pc, #428]	@ (8003168 <HAL_I2C_Master_Receive+0x4d4>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0a1a      	lsrs	r2, r3, #8
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00da      	lsls	r2, r3, #3
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d118      	bne.n	800300a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f043 0220 	orr.w	r2, r3, #32
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ffa:	b662      	cpsie	i
}
 8002ffc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0a6      	b.n	8003158 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b04      	cmp	r3, #4
 8003016:	d1d9      	bne.n	8002fcc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800305a:	b662      	cpsie	i
}
 800305c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003090:	e04e      	b.n	8003130 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003094:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 febe 	bl	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e058      	b.n	8003158 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d124      	bne.n	8003130 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d107      	bne.n	80030fe <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030fc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f ae88 	bne.w	8002e4a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e000      	b.n	8003158 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3728      	adds	r7, #40	@ 0x28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	00010004 	.word	0x00010004
 8003164:	20000000 	.word	0x20000000
 8003168:	14f8b589 	.word	0x14f8b589

0800316c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08c      	sub	sp, #48	@ 0x30
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	4608      	mov	r0, r1
 8003176:	4611      	mov	r1, r2
 8003178:	461a      	mov	r2, r3
 800317a:	4603      	mov	r3, r0
 800317c:	817b      	strh	r3, [r7, #10]
 800317e:	460b      	mov	r3, r1
 8003180:	813b      	strh	r3, [r7, #8]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800318a:	f7ff f82f 	bl	80021ec <HAL_GetTick>
 800318e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b20      	cmp	r3, #32
 800319a:	f040 8250 	bne.w	800363e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2319      	movs	r3, #25
 80031a4:	2201      	movs	r2, #1
 80031a6:	4982      	ldr	r1, [pc, #520]	@ (80033b0 <HAL_I2C_Mem_Read+0x244>)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fc8b 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
 80031b6:	e243      	b.n	8003640 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_I2C_Mem_Read+0x5a>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e23c      	b.n	8003640 <HAL_I2C_Mem_Read+0x4d4>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d007      	beq.n	80031ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2222      	movs	r2, #34	@ 0x22
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2240      	movs	r2, #64	@ 0x40
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800321c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a62      	ldr	r2, [pc, #392]	@ (80033b4 <HAL_I2C_Mem_Read+0x248>)
 800322c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800322e:	88f8      	ldrh	r0, [r7, #6]
 8003230:	893a      	ldrh	r2, [r7, #8]
 8003232:	8979      	ldrh	r1, [r7, #10]
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	4603      	mov	r3, r0
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fb58 	bl	80038f4 <I2C_RequestMemoryRead>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1f8      	b.n	8003640 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d113      	bne.n	800327e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e1cc      	b.n	8003618 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003282:	2b01      	cmp	r3, #1
 8003284:	d11e      	bne.n	80032c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003294:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003296:	b672      	cpsid	i
}
 8003298:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032c0:	b662      	cpsie	i
}
 80032c2:	e035      	b.n	8003330 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d11e      	bne.n	800330a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032dc:	b672      	cpsid	i
}
 80032de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003304:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003306:	b662      	cpsie	i
}
 8003308:	e012      	b.n	8003330 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003318:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003330:	e172      	b.n	8003618 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003336:	2b03      	cmp	r3, #3
 8003338:	f200 811f 	bhi.w	800357a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003340:	2b01      	cmp	r3, #1
 8003342:	d123      	bne.n	800338c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003346:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fd65 	bl	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e173      	b.n	8003640 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800338a:	e145      	b.n	8003618 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003390:	2b02      	cmp	r3, #2
 8003392:	d152      	bne.n	800343a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339a:	2200      	movs	r2, #0
 800339c:	4906      	ldr	r1, [pc, #24]	@ (80033b8 <HAL_I2C_Mem_Read+0x24c>)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fb90 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e148      	b.n	8003640 <HAL_I2C_Mem_Read+0x4d4>
 80033ae:	bf00      	nop
 80033b0:	00100002 	.word	0x00100002
 80033b4:	ffff0000 	.word	0xffff0000
 80033b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033bc:	b672      	cpsid	i
}
 80033be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003402:	b662      	cpsie	i
}
 8003404:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003438:	e0ee      	b.n	8003618 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	2200      	movs	r2, #0
 8003442:	4981      	ldr	r1, [pc, #516]	@ (8003648 <HAL_I2C_Mem_Read+0x4dc>)
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fb3d 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0f5      	b.n	8003640 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003462:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003464:	b672      	cpsid	i
}
 8003466:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800349a:	4b6c      	ldr	r3, [pc, #432]	@ (800364c <HAL_I2C_Mem_Read+0x4e0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	08db      	lsrs	r3, r3, #3
 80034a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003650 <HAL_I2C_Mem_Read+0x4e4>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	0a1a      	lsrs	r2, r3, #8
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00da      	lsls	r2, r3, #3
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d118      	bne.n	80034f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034e2:	b662      	cpsie	i
}
 80034e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0a6      	b.n	8003640 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d1d9      	bne.n	80034b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003542:	b662      	cpsie	i
}
 8003544:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003578:	e04e      	b.n	8003618 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fc4a 	bl	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e058      	b.n	8003640 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d124      	bne.n	8003618 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d107      	bne.n	80035e6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	f47f ae88 	bne.w	8003332 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
  }
}
 8003640:	4618      	mov	r0, r3
 8003642:	3728      	adds	r7, #40	@ 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	00010004 	.word	0x00010004
 800364c:	20000000 	.word	0x20000000
 8003650:	14f8b589 	.word	0x14f8b589

08003654 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	460b      	mov	r3, r1
 8003662:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d006      	beq.n	800367e <I2C_MasterRequestWrite+0x2a>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d003      	beq.n	800367e <I2C_MasterRequestWrite+0x2a>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800367c:	d108      	bne.n	8003690 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e00b      	b.n	80036a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	2b12      	cmp	r3, #18
 8003696:	d107      	bne.n	80036a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fa05 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ce:	d103      	bne.n	80036d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e035      	b.n	8003748 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036e4:	d108      	bne.n	80036f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036e6:	897b      	ldrh	r3, [r7, #10]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036f4:	611a      	str	r2, [r3, #16]
 80036f6:	e01b      	b.n	8003730 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036f8:	897b      	ldrh	r3, [r7, #10]
 80036fa:	11db      	asrs	r3, r3, #7
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f003 0306 	and.w	r3, r3, #6
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f063 030f 	orn	r3, r3, #15
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	490e      	ldr	r1, [pc, #56]	@ (8003750 <I2C_MasterRequestWrite+0xfc>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fa4e 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e010      	b.n	8003748 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003726:	897b      	ldrh	r3, [r7, #10]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	4907      	ldr	r1, [pc, #28]	@ (8003754 <I2C_MasterRequestWrite+0x100>)
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fa3e 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	00010008 	.word	0x00010008
 8003754:	00010002 	.word	0x00010002

08003758 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	460b      	mov	r3, r1
 8003766:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800377c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d006      	beq.n	8003792 <I2C_MasterRequestRead+0x3a>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d003      	beq.n	8003792 <I2C_MasterRequestRead+0x3a>
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003790:	d108      	bne.n	80037a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e00b      	b.n	80037bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	2b11      	cmp	r3, #17
 80037aa:	d107      	bne.n	80037bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f97b 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00d      	beq.n	80037f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e2:	d103      	bne.n	80037ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e079      	b.n	80038e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037f8:	d108      	bne.n	800380c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037fa:	897b      	ldrh	r3, [r7, #10]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	b2da      	uxtb	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]
 800380a:	e05f      	b.n	80038cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800380c:	897b      	ldrh	r3, [r7, #10]
 800380e:	11db      	asrs	r3, r3, #7
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 0306 	and.w	r3, r3, #6
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f063 030f 	orn	r3, r3, #15
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4930      	ldr	r1, [pc, #192]	@ (80038ec <I2C_MasterRequestRead+0x194>)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f9c4 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e054      	b.n	80038e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800383a:	897b      	ldrh	r3, [r7, #10]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4929      	ldr	r1, [pc, #164]	@ (80038f0 <I2C_MasterRequestRead+0x198>)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f9b4 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e044      	b.n	80038e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800387e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f919 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00d      	beq.n	80038b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a6:	d103      	bne.n	80038b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e017      	b.n	80038e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038b4:	897b      	ldrh	r3, [r7, #10]
 80038b6:	11db      	asrs	r3, r3, #7
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f003 0306 	and.w	r3, r3, #6
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f063 030e 	orn	r3, r3, #14
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4907      	ldr	r1, [pc, #28]	@ (80038f0 <I2C_MasterRequestRead+0x198>)
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f970 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	00010008 	.word	0x00010008
 80038f0:	00010002 	.word	0x00010002

080038f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	4608      	mov	r0, r1
 80038fe:	4611      	mov	r1, r2
 8003900:	461a      	mov	r2, r3
 8003902:	4603      	mov	r3, r0
 8003904:	817b      	strh	r3, [r7, #10]
 8003906:	460b      	mov	r3, r1
 8003908:	813b      	strh	r3, [r7, #8]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800391c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800392c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2200      	movs	r2, #0
 8003936:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f8c2 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00d      	beq.n	8003962 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003954:	d103      	bne.n	800395e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e0aa      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003962:	897b      	ldrh	r3, [r7, #10]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003970:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	6a3a      	ldr	r2, [r7, #32]
 8003976:	4952      	ldr	r1, [pc, #328]	@ (8003ac0 <I2C_RequestMemoryRead+0x1cc>)
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f91d 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e097      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a0:	6a39      	ldr	r1, [r7, #32]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f9a8 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d107      	bne.n	80039c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e076      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	611a      	str	r2, [r3, #16]
 80039da:	e021      	b.n	8003a20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039dc:	893b      	ldrh	r3, [r7, #8]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ec:	6a39      	ldr	r1, [r7, #32]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f982 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d107      	bne.n	8003a12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e050      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a16:	893b      	ldrh	r3, [r7, #8]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a22:	6a39      	ldr	r1, [r7, #32]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f967 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00d      	beq.n	8003a4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d107      	bne.n	8003a48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e035      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f82b 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00d      	beq.n	8003a90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a82:	d103      	bne.n	8003a8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e013      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a90:	897b      	ldrh	r3, [r7, #10]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	4906      	ldr	r1, [pc, #24]	@ (8003ac0 <I2C_RequestMemoryRead+0x1cc>)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f886 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	00010002 	.word	0x00010002

08003ac4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad4:	e048      	b.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d044      	beq.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fe fb85 	bl	80021ec <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d139      	bne.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d10d      	bne.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	43da      	mvns	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	e00c      	b.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	43da      	mvns	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d116      	bne.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e023      	b.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	0c1b      	lsrs	r3, r3, #16
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d10d      	bne.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	43da      	mvns	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	e00c      	b.n	8003ba8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	43da      	mvns	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d093      	beq.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc6:	e071      	b.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd6:	d123      	bne.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e067      	b.n	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d041      	beq.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fe fae0 	bl	80021ec <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d136      	bne.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d10c      	bne.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bf14      	ite	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	2300      	moveq	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	e00b      	b.n	8003c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	43da      	mvns	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e021      	b.n	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10c      	bne.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e00b      	b.n	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bf14      	ite	ne
 8003ce2:	2301      	movne	r3, #1
 8003ce4:	2300      	moveq	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f47f af6d 	bne.w	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d04:	e034      	b.n	8003d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f8e3 	bl	8003ed2 <I2C_IsAcknowledgeFailed>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e034      	b.n	8003d80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d028      	beq.n	8003d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fe fa65 	bl	80021ec <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11d      	bne.n	8003d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3e:	2b80      	cmp	r3, #128	@ 0x80
 8003d40:	d016      	beq.n	8003d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e007      	b.n	8003d80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7a:	2b80      	cmp	r3, #128	@ 0x80
 8003d7c:	d1c3      	bne.n	8003d06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d94:	e034      	b.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f89b 	bl	8003ed2 <I2C_IsAcknowledgeFailed>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e034      	b.n	8003e10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d028      	beq.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fe fa1d 	bl	80021ec <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d11d      	bne.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d016      	beq.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e007      	b.n	8003e10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d1c3      	bne.n	8003d96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e24:	e049      	b.n	8003eba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d119      	bne.n	8003e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0210 	mvn.w	r2, #16
 8003e3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e030      	b.n	8003eca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e68:	f7fe f9c0 	bl	80021ec <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d11d      	bne.n	8003eba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e88:	2b40      	cmp	r3, #64	@ 0x40
 8003e8a:	d016      	beq.n	8003eba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	f043 0220 	orr.w	r2, r3, #32
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e007      	b.n	8003eca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec4:	2b40      	cmp	r3, #64	@ 0x40
 8003ec6:	d1ae      	bne.n	8003e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ee8:	d11b      	bne.n	8003f22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ef2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f043 0204 	orr.w	r2, r3, #4
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e272      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8087 	beq.w	800405e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f50:	4b92      	ldr	r3, [pc, #584]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d00c      	beq.n	8003f76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d112      	bne.n	8003f8e <HAL_RCC_OscConfig+0x5e>
 8003f68:	4b8c      	ldr	r3, [pc, #560]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f74:	d10b      	bne.n	8003f8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f76:	4b89      	ldr	r3, [pc, #548]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d06c      	beq.n	800405c <HAL_RCC_OscConfig+0x12c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d168      	bne.n	800405c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e24c      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f96:	d106      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x76>
 8003f98:	4b80      	ldr	r3, [pc, #512]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a7f      	ldr	r2, [pc, #508]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e02e      	b.n	8004004 <HAL_RCC_OscConfig+0xd4>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x98>
 8003fae:	4b7b      	ldr	r3, [pc, #492]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a7a      	ldr	r2, [pc, #488]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b78      	ldr	r3, [pc, #480]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a77      	ldr	r2, [pc, #476]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e01d      	b.n	8004004 <HAL_RCC_OscConfig+0xd4>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0xbc>
 8003fd2:	4b72      	ldr	r3, [pc, #456]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a71      	ldr	r2, [pc, #452]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b6f      	ldr	r3, [pc, #444]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0xd4>
 8003fec:	4b6b      	ldr	r3, [pc, #428]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a6a      	ldr	r2, [pc, #424]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b68      	ldr	r3, [pc, #416]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a67      	ldr	r2, [pc, #412]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004002:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fe f8ee 	bl	80021ec <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004014:	f7fe f8ea 	bl	80021ec <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	@ 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e200      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b5d      	ldr	r3, [pc, #372]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0xe4>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fe f8da 	bl	80021ec <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800403c:	f7fe f8d6 	bl	80021ec <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	@ 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e1ec      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	4b53      	ldr	r3, [pc, #332]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x10c>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d063      	beq.n	8004132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800406a:	4b4c      	ldr	r3, [pc, #304]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004076:	4b49      	ldr	r3, [pc, #292]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b08      	cmp	r3, #8
 8004080:	d11c      	bne.n	80040bc <HAL_RCC_OscConfig+0x18c>
 8004082:	4b46      	ldr	r3, [pc, #280]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d116      	bne.n	80040bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	4b43      	ldr	r3, [pc, #268]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_RCC_OscConfig+0x176>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e1c0      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a6:	4b3d      	ldr	r3, [pc, #244]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4939      	ldr	r1, [pc, #228]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	e03a      	b.n	8004132 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c4:	4b36      	ldr	r3, [pc, #216]	@ (80041a0 <HAL_RCC_OscConfig+0x270>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fe f88f 	bl	80021ec <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d2:	f7fe f88b 	bl	80021ec <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e1a1      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e4:	4b2d      	ldr	r3, [pc, #180]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f0:	4b2a      	ldr	r3, [pc, #168]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4927      	ldr	r1, [pc, #156]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8004100:	4313      	orrs	r3, r2
 8004102:	600b      	str	r3, [r1, #0]
 8004104:	e015      	b.n	8004132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004106:	4b26      	ldr	r3, [pc, #152]	@ (80041a0 <HAL_RCC_OscConfig+0x270>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fe f86e 	bl	80021ec <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004114:	f7fe f86a 	bl	80021ec <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e180      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	4b1d      	ldr	r3, [pc, #116]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03a      	beq.n	80041b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d019      	beq.n	800417a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004146:	4b17      	ldr	r3, [pc, #92]	@ (80041a4 <HAL_RCC_OscConfig+0x274>)
 8004148:	2201      	movs	r2, #1
 800414a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414c:	f7fe f84e 	bl	80021ec <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004154:	f7fe f84a 	bl	80021ec <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e160      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <HAL_RCC_OscConfig+0x26c>)
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004172:	2001      	movs	r0, #1
 8004174:	f000 faba 	bl	80046ec <RCC_Delay>
 8004178:	e01c      	b.n	80041b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800417a:	4b0a      	ldr	r3, [pc, #40]	@ (80041a4 <HAL_RCC_OscConfig+0x274>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004180:	f7fe f834 	bl	80021ec <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004186:	e00f      	b.n	80041a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004188:	f7fe f830 	bl	80021ec <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d908      	bls.n	80041a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e146      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
 80041a0:	42420000 	.word	0x42420000
 80041a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a8:	4b92      	ldr	r3, [pc, #584]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e9      	bne.n	8004188 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80a6 	beq.w	800430e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c6:	4b8b      	ldr	r3, [pc, #556]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10d      	bne.n	80041ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	4b88      	ldr	r3, [pc, #544]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	4a87      	ldr	r2, [pc, #540]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	61d3      	str	r3, [r2, #28]
 80041de:	4b85      	ldr	r3, [pc, #532]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ee:	4b82      	ldr	r3, [pc, #520]	@ (80043f8 <HAL_RCC_OscConfig+0x4c8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d118      	bne.n	800422c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041fa:	4b7f      	ldr	r3, [pc, #508]	@ (80043f8 <HAL_RCC_OscConfig+0x4c8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a7e      	ldr	r2, [pc, #504]	@ (80043f8 <HAL_RCC_OscConfig+0x4c8>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004206:	f7fd fff1 	bl	80021ec <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fd ffed 	bl	80021ec <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b64      	cmp	r3, #100	@ 0x64
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e103      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	4b75      	ldr	r3, [pc, #468]	@ (80043f8 <HAL_RCC_OscConfig+0x4c8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d106      	bne.n	8004242 <HAL_RCC_OscConfig+0x312>
 8004234:	4b6f      	ldr	r3, [pc, #444]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	4a6e      	ldr	r2, [pc, #440]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	6213      	str	r3, [r2, #32]
 8004240:	e02d      	b.n	800429e <HAL_RCC_OscConfig+0x36e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x334>
 800424a:	4b6a      	ldr	r3, [pc, #424]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	4a69      	ldr	r2, [pc, #420]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	6213      	str	r3, [r2, #32]
 8004256:	4b67      	ldr	r3, [pc, #412]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	4a66      	ldr	r2, [pc, #408]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 800425c:	f023 0304 	bic.w	r3, r3, #4
 8004260:	6213      	str	r3, [r2, #32]
 8004262:	e01c      	b.n	800429e <HAL_RCC_OscConfig+0x36e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b05      	cmp	r3, #5
 800426a:	d10c      	bne.n	8004286 <HAL_RCC_OscConfig+0x356>
 800426c:	4b61      	ldr	r3, [pc, #388]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	4a60      	ldr	r2, [pc, #384]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	6213      	str	r3, [r2, #32]
 8004278:	4b5e      	ldr	r3, [pc, #376]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	4a5d      	ldr	r2, [pc, #372]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6213      	str	r3, [r2, #32]
 8004284:	e00b      	b.n	800429e <HAL_RCC_OscConfig+0x36e>
 8004286:	4b5b      	ldr	r3, [pc, #364]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	4a5a      	ldr	r2, [pc, #360]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	6213      	str	r3, [r2, #32]
 8004292:	4b58      	ldr	r3, [pc, #352]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	4a57      	ldr	r2, [pc, #348]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004298:	f023 0304 	bic.w	r3, r3, #4
 800429c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d015      	beq.n	80042d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a6:	f7fd ffa1 	bl	80021ec <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ac:	e00a      	b.n	80042c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7fd ff9d 	bl	80021ec <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0b1      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c4:	4b4b      	ldr	r3, [pc, #300]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ee      	beq.n	80042ae <HAL_RCC_OscConfig+0x37e>
 80042d0:	e014      	b.n	80042fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d2:	f7fd ff8b 	bl	80021ec <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042da:	f7fd ff87 	bl	80021ec <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e09b      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f0:	4b40      	ldr	r3, [pc, #256]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ee      	bne.n	80042da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004302:	4b3c      	ldr	r3, [pc, #240]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	4a3b      	ldr	r2, [pc, #236]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800430c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8087 	beq.w	8004426 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004318:	4b36      	ldr	r3, [pc, #216]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	d061      	beq.n	80043e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d146      	bne.n	80043ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432c:	4b33      	ldr	r3, [pc, #204]	@ (80043fc <HAL_RCC_OscConfig+0x4cc>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fd ff5b 	bl	80021ec <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fd ff57 	bl	80021ec <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e06d      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434c:	4b29      	ldr	r3, [pc, #164]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004360:	d108      	bne.n	8004374 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004362:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4921      	ldr	r1, [pc, #132]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004374:	4b1f      	ldr	r3, [pc, #124]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a19      	ldr	r1, [r3, #32]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	430b      	orrs	r3, r1
 8004386:	491b      	ldr	r1, [pc, #108]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438c:	4b1b      	ldr	r3, [pc, #108]	@ (80043fc <HAL_RCC_OscConfig+0x4cc>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fd ff2b 	bl	80021ec <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439a:	f7fd ff27 	bl	80021ec <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e03d      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043ac:	4b11      	ldr	r3, [pc, #68]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x46a>
 80043b8:	e035      	b.n	8004426 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ba:	4b10      	ldr	r3, [pc, #64]	@ (80043fc <HAL_RCC_OscConfig+0x4cc>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fd ff14 	bl	80021ec <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fd ff10 	bl	80021ec <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e026      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043da:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <HAL_RCC_OscConfig+0x4c4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x498>
 80043e6:	e01e      	b.n	8004426 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e019      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40007000 	.word	0x40007000
 80043fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_RCC_OscConfig+0x500>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	429a      	cmp	r2, r3
 8004412:	d106      	bne.n	8004422 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d001      	beq.n	8004426 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40021000 	.word	0x40021000

08004434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0d0      	b.n	80045ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b6a      	ldr	r3, [pc, #424]	@ (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d910      	bls.n	8004478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b67      	ldr	r3, [pc, #412]	@ (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 0207 	bic.w	r2, r3, #7
 800445e:	4965      	ldr	r1, [pc, #404]	@ (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b63      	ldr	r3, [pc, #396]	@ (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0b8      	b.n	80045ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004490:	4b59      	ldr	r3, [pc, #356]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4a58      	ldr	r2, [pc, #352]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800449a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a8:	4b53      	ldr	r3, [pc, #332]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4a52      	ldr	r2, [pc, #328]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80044b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b4:	4b50      	ldr	r3, [pc, #320]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	494d      	ldr	r1, [pc, #308]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d040      	beq.n	8004554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	4b47      	ldr	r3, [pc, #284]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d115      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e07f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	4b41      	ldr	r3, [pc, #260]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e073      	b.n	80045ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004502:	4b3d      	ldr	r3, [pc, #244]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06b      	b.n	80045ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004512:	4b39      	ldr	r3, [pc, #228]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f023 0203 	bic.w	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4936      	ldr	r1, [pc, #216]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004520:	4313      	orrs	r3, r2
 8004522:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004524:	f7fd fe62 	bl	80021ec <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452a:	e00a      	b.n	8004542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452c:	f7fd fe5e 	bl	80021ec <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e053      	b.n	80045ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	4b2d      	ldr	r3, [pc, #180]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 020c 	and.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	429a      	cmp	r2, r3
 8004552:	d1eb      	bne.n	800452c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004554:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d210      	bcs.n	8004584 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b24      	ldr	r3, [pc, #144]	@ (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 0207 	bic.w	r2, r3, #7
 800456a:	4922      	ldr	r1, [pc, #136]	@ (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e032      	b.n	80045ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004590:	4b19      	ldr	r3, [pc, #100]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4916      	ldr	r1, [pc, #88]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045ae:	4b12      	ldr	r3, [pc, #72]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	490e      	ldr	r1, [pc, #56]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045c2:	f000 f821 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4b0b      	ldr	r3, [pc, #44]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	490a      	ldr	r1, [pc, #40]	@ (80045fc <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	5ccb      	ldrb	r3, [r1, r3]
 80045d6:	fa22 f303 	lsr.w	r3, r2, r3
 80045da:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <HAL_RCC_ClockConfig+0x1cc>)
 80045dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045de:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <HAL_RCC_ClockConfig+0x1d0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fd fdc0 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40022000 	.word	0x40022000
 80045f8:	40021000 	.word	0x40021000
 80045fc:	08007cb4 	.word	0x08007cb4
 8004600:	20000000 	.word	0x20000000
 8004604:	20000004 	.word	0x20000004

08004608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004622:	4b1e      	ldr	r3, [pc, #120]	@ (800469c <HAL_RCC_GetSysClockFreq+0x94>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	2b04      	cmp	r3, #4
 8004630:	d002      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0x30>
 8004632:	2b08      	cmp	r3, #8
 8004634:	d003      	beq.n	800463e <HAL_RCC_GetSysClockFreq+0x36>
 8004636:	e027      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004638:	4b19      	ldr	r3, [pc, #100]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800463a:	613b      	str	r3, [r7, #16]
      break;
 800463c:	e027      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	0c9b      	lsrs	r3, r3, #18
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	4a17      	ldr	r2, [pc, #92]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004648:	5cd3      	ldrb	r3, [r2, r3]
 800464a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d010      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004656:	4b11      	ldr	r3, [pc, #68]	@ (800469c <HAL_RCC_GetSysClockFreq+0x94>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	0c5b      	lsrs	r3, r3, #17
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	4a11      	ldr	r2, [pc, #68]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004662:	5cd3      	ldrb	r3, [r2, r3]
 8004664:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a0d      	ldr	r2, [pc, #52]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800466a:	fb03 f202 	mul.w	r2, r3, r2
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e004      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a0c      	ldr	r2, [pc, #48]	@ (80046ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800467c:	fb02 f303 	mul.w	r3, r2, r3
 8004680:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	613b      	str	r3, [r7, #16]
      break;
 8004686:	e002      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800468a:	613b      	str	r3, [r7, #16]
      break;
 800468c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468e:	693b      	ldr	r3, [r7, #16]
}
 8004690:	4618      	mov	r0, r3
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	007a1200 	.word	0x007a1200
 80046a4:	08007ccc 	.word	0x08007ccc
 80046a8:	08007cdc 	.word	0x08007cdc
 80046ac:	003d0900 	.word	0x003d0900

080046b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b4:	4b02      	ldr	r3, [pc, #8]	@ (80046c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr
 80046c0:	20000000 	.word	0x20000000

080046c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046c8:	f7ff fff2 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4903      	ldr	r1, [pc, #12]	@ (80046e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000
 80046e8:	08007cc4 	.word	0x08007cc4

080046ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004720 <RCC_Delay+0x34>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004724 <RCC_Delay+0x38>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	0a5b      	lsrs	r3, r3, #9
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004708:	bf00      	nop
  }
  while (Delay --);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1e5a      	subs	r2, r3, #1
 800470e:	60fa      	str	r2, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f9      	bne.n	8004708 <RCC_Delay+0x1c>
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	20000000 	.word	0x20000000
 8004724:	10624dd3 	.word	0x10624dd3

08004728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e076      	b.n	8004828 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800474a:	d009      	beq.n	8004760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	61da      	str	r2, [r3, #28]
 8004752:	e005      	b.n	8004760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fd fb42 	bl	8001e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	0c1a      	lsrs	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f002 0204 	and.w	r2, r2, #4
 8004806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004840:	f7fd fcd4 	bl	80021ec <HAL_GetTick>
 8004844:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b01      	cmp	r3, #1
 8004854:	d001      	beq.n	800485a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
 8004858:	e12a      	b.n	8004ab0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_SPI_Transmit+0x36>
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e122      	b.n	8004ab0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_SPI_Transmit+0x48>
 8004874:	2302      	movs	r3, #2
 8004876:	e11b      	b.n	8004ab0 <HAL_SPI_Transmit+0x280>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2203      	movs	r2, #3
 8004884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	88fa      	ldrh	r2, [r7, #6]
 800489e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048c6:	d10f      	bne.n	80048e8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f2:	2b40      	cmp	r3, #64	@ 0x40
 80048f4:	d007      	beq.n	8004906 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800490e:	d152      	bne.n	80049b6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_SPI_Transmit+0xee>
 8004918:	8b7b      	ldrh	r3, [r7, #26]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d145      	bne.n	80049aa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	881a      	ldrh	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492e:	1c9a      	adds	r2, r3, #2
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004942:	e032      	b.n	80049aa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b02      	cmp	r3, #2
 8004950:	d112      	bne.n	8004978 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	881a      	ldrh	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004962:	1c9a      	adds	r2, r3, #2
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004976:	e018      	b.n	80049aa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004978:	f7fd fc38 	bl	80021ec <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d803      	bhi.n	8004990 <HAL_SPI_Transmit+0x160>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d102      	bne.n	8004996 <HAL_SPI_Transmit+0x166>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e082      	b.n	8004ab0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1c7      	bne.n	8004944 <HAL_SPI_Transmit+0x114>
 80049b4:	e053      	b.n	8004a5e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_SPI_Transmit+0x194>
 80049be:	8b7b      	ldrh	r3, [r7, #26]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d147      	bne.n	8004a54 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049ea:	e033      	b.n	8004a54 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d113      	bne.n	8004a22 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a20:	e018      	b.n	8004a54 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a22:	f7fd fbe3 	bl	80021ec <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d803      	bhi.n	8004a3a <HAL_SPI_Transmit+0x20a>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d102      	bne.n	8004a40 <HAL_SPI_Transmit+0x210>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e02d      	b.n	8004ab0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1c6      	bne.n	80049ec <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fa66 	bl	8004f34 <SPI_EndRxTxTransaction>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004aae:	2300      	movs	r3, #0
  }
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3720      	adds	r7, #32
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	@ 0x28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aca:	f7fd fb8f 	bl	80021ec <HAL_GetTick>
 8004ace:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ad6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ae2:	7ffb      	ldrb	r3, [r7, #31]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d00c      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x4a>
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aee:	d106      	bne.n	8004afe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <HAL_SPI_TransmitReceive+0x46>
 8004af8:	7ffb      	ldrb	r3, [r7, #31]
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d001      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004afe:	2302      	movs	r3, #2
 8004b00:	e17f      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x5c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x5c>
 8004b0e:	887b      	ldrh	r3, [r7, #2]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e174      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x6e>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e16d      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x34a>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d003      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	887a      	ldrh	r2, [r7, #2]
 8004b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	887a      	ldrh	r2, [r7, #2]
 8004b64:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	887a      	ldrh	r2, [r7, #2]
 8004b6a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b82:	2b40      	cmp	r3, #64	@ 0x40
 8004b84:	d007      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b9e:	d17e      	bne.n	8004c9e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_SPI_TransmitReceive+0xf6>
 8004ba8:	8afb      	ldrh	r3, [r7, #22]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d16c      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	881a      	ldrh	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd2:	e059      	b.n	8004c88 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d11b      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x162>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d016      	beq.n	8004c1a <HAL_SPI_TransmitReceive+0x162>
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d113      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf6:	881a      	ldrh	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	1c9a      	adds	r2, r3, #2
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d119      	bne.n	8004c5c <HAL_SPI_TransmitReceive+0x1a4>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d014      	beq.n	8004c5c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	b292      	uxth	r2, r2
 8004c3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c5c:	f7fd fac6 	bl	80021ec <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d80d      	bhi.n	8004c88 <HAL_SPI_TransmitReceive+0x1d0>
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c72:	d009      	beq.n	8004c88 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0bc      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1a0      	bne.n	8004bd4 <HAL_SPI_TransmitReceive+0x11c>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d19b      	bne.n	8004bd4 <HAL_SPI_TransmitReceive+0x11c>
 8004c9c:	e082      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x1f4>
 8004ca6:	8afb      	ldrh	r3, [r7, #22]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d171      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	7812      	ldrb	r2, [r2, #0]
 8004cb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd2:	e05d      	b.n	8004d90 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d11c      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x264>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d017      	beq.n	8004d1c <HAL_SPI_TransmitReceive+0x264>
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d114      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d119      	bne.n	8004d5e <HAL_SPI_TransmitReceive+0x2a6>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d014      	beq.n	8004d5e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d5e:	f7fd fa45 	bl	80021ec <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d803      	bhi.n	8004d76 <HAL_SPI_TransmitReceive+0x2be>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d102      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x2c4>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e038      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d19c      	bne.n	8004cd4 <HAL_SPI_TransmitReceive+0x21c>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d197      	bne.n	8004cd4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f8c3 	bl	8004f34 <SPI_EndRxTxTransaction>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e01d      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004e00:	2300      	movs	r3, #0
  }
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3728      	adds	r7, #40	@ 0x28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e18:	b2db      	uxtb	r3, r3
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e34:	f7fd f9da 	bl	80021ec <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3c:	1a9b      	subs	r3, r3, r2
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	4413      	add	r3, r2
 8004e42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e44:	f7fd f9d2 	bl	80021ec <HAL_GetTick>
 8004e48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e4a:	4b39      	ldr	r3, [pc, #228]	@ (8004f30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	015b      	lsls	r3, r3, #5
 8004e50:	0d1b      	lsrs	r3, r3, #20
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	fb02 f303 	mul.w	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e5a:	e054      	b.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d050      	beq.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e64:	f7fd f9c2 	bl	80021ec <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d902      	bls.n	8004e7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d13d      	bne.n	8004ef6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e92:	d111      	bne.n	8004eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e9c:	d004      	beq.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea6:	d107      	bne.n	8004eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec0:	d10f      	bne.n	8004ee2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ee0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e017      	b.n	8004f26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	bf0c      	ite	eq
 8004f16:	2301      	moveq	r3, #1
 8004f18:	2300      	movne	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d19b      	bne.n	8004e5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3720      	adds	r7, #32
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000000 	.word	0x20000000

08004f34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2201      	movs	r2, #1
 8004f48:	2102      	movs	r1, #2
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff ff6a 	bl	8004e24 <SPI_WaitFlagStateUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e013      	b.n	8004f8e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2180      	movs	r1, #128	@ 0x80
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff ff57 	bl	8004e24 <SPI_WaitFlagStateUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e000      	b.n	8004f8e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <__cvt>:
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9c:	461d      	mov	r5, r3
 8004f9e:	bfbb      	ittet	lt
 8004fa0:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004fa4:	461d      	movlt	r5, r3
 8004fa6:	2300      	movge	r3, #0
 8004fa8:	232d      	movlt	r3, #45	@ 0x2d
 8004faa:	b088      	sub	sp, #32
 8004fac:	4614      	mov	r4, r2
 8004fae:	bfb8      	it	lt
 8004fb0:	4614      	movlt	r4, r2
 8004fb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004fb4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004fb6:	7013      	strb	r3, [r2, #0]
 8004fb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fba:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004fbe:	f023 0820 	bic.w	r8, r3, #32
 8004fc2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fc6:	d005      	beq.n	8004fd4 <__cvt+0x3e>
 8004fc8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004fcc:	d100      	bne.n	8004fd0 <__cvt+0x3a>
 8004fce:	3601      	adds	r6, #1
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e000      	b.n	8004fd6 <__cvt+0x40>
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	aa07      	add	r2, sp, #28
 8004fd8:	9204      	str	r2, [sp, #16]
 8004fda:	aa06      	add	r2, sp, #24
 8004fdc:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004fe0:	e9cd 3600 	strd	r3, r6, [sp]
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	462b      	mov	r3, r5
 8004fe8:	f000 fe92 	bl	8005d10 <_dtoa_r>
 8004fec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	d119      	bne.n	8005028 <__cvt+0x92>
 8004ff4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004ff6:	07db      	lsls	r3, r3, #31
 8004ff8:	d50e      	bpl.n	8005018 <__cvt+0x82>
 8004ffa:	eb00 0906 	add.w	r9, r0, r6
 8004ffe:	2200      	movs	r2, #0
 8005000:	2300      	movs	r3, #0
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb fccf 	bl	80009a8 <__aeabi_dcmpeq>
 800500a:	b108      	cbz	r0, 8005010 <__cvt+0x7a>
 800500c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005010:	2230      	movs	r2, #48	@ 0x30
 8005012:	9b07      	ldr	r3, [sp, #28]
 8005014:	454b      	cmp	r3, r9
 8005016:	d31e      	bcc.n	8005056 <__cvt+0xc0>
 8005018:	4638      	mov	r0, r7
 800501a:	9b07      	ldr	r3, [sp, #28]
 800501c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800501e:	1bdb      	subs	r3, r3, r7
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	b008      	add	sp, #32
 8005024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005028:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800502c:	eb00 0906 	add.w	r9, r0, r6
 8005030:	d1e5      	bne.n	8004ffe <__cvt+0x68>
 8005032:	7803      	ldrb	r3, [r0, #0]
 8005034:	2b30      	cmp	r3, #48	@ 0x30
 8005036:	d10a      	bne.n	800504e <__cvt+0xb8>
 8005038:	2200      	movs	r2, #0
 800503a:	2300      	movs	r3, #0
 800503c:	4620      	mov	r0, r4
 800503e:	4629      	mov	r1, r5
 8005040:	f7fb fcb2 	bl	80009a8 <__aeabi_dcmpeq>
 8005044:	b918      	cbnz	r0, 800504e <__cvt+0xb8>
 8005046:	f1c6 0601 	rsb	r6, r6, #1
 800504a:	f8ca 6000 	str.w	r6, [sl]
 800504e:	f8da 3000 	ldr.w	r3, [sl]
 8005052:	4499      	add	r9, r3
 8005054:	e7d3      	b.n	8004ffe <__cvt+0x68>
 8005056:	1c59      	adds	r1, r3, #1
 8005058:	9107      	str	r1, [sp, #28]
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	e7d9      	b.n	8005012 <__cvt+0x7c>

0800505e <__exponent>:
 800505e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005060:	2900      	cmp	r1, #0
 8005062:	bfb6      	itet	lt
 8005064:	232d      	movlt	r3, #45	@ 0x2d
 8005066:	232b      	movge	r3, #43	@ 0x2b
 8005068:	4249      	neglt	r1, r1
 800506a:	2909      	cmp	r1, #9
 800506c:	7002      	strb	r2, [r0, #0]
 800506e:	7043      	strb	r3, [r0, #1]
 8005070:	dd29      	ble.n	80050c6 <__exponent+0x68>
 8005072:	f10d 0307 	add.w	r3, sp, #7
 8005076:	461d      	mov	r5, r3
 8005078:	270a      	movs	r7, #10
 800507a:	fbb1 f6f7 	udiv	r6, r1, r7
 800507e:	461a      	mov	r2, r3
 8005080:	fb07 1416 	mls	r4, r7, r6, r1
 8005084:	3430      	adds	r4, #48	@ 0x30
 8005086:	f802 4c01 	strb.w	r4, [r2, #-1]
 800508a:	460c      	mov	r4, r1
 800508c:	2c63      	cmp	r4, #99	@ 0x63
 800508e:	4631      	mov	r1, r6
 8005090:	f103 33ff 	add.w	r3, r3, #4294967295
 8005094:	dcf1      	bgt.n	800507a <__exponent+0x1c>
 8005096:	3130      	adds	r1, #48	@ 0x30
 8005098:	1e94      	subs	r4, r2, #2
 800509a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800509e:	4623      	mov	r3, r4
 80050a0:	1c41      	adds	r1, r0, #1
 80050a2:	42ab      	cmp	r3, r5
 80050a4:	d30a      	bcc.n	80050bc <__exponent+0x5e>
 80050a6:	f10d 0309 	add.w	r3, sp, #9
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	42ac      	cmp	r4, r5
 80050ae:	bf88      	it	hi
 80050b0:	2300      	movhi	r3, #0
 80050b2:	3302      	adds	r3, #2
 80050b4:	4403      	add	r3, r0
 80050b6:	1a18      	subs	r0, r3, r0
 80050b8:	b003      	add	sp, #12
 80050ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80050c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80050c4:	e7ed      	b.n	80050a2 <__exponent+0x44>
 80050c6:	2330      	movs	r3, #48	@ 0x30
 80050c8:	3130      	adds	r1, #48	@ 0x30
 80050ca:	7083      	strb	r3, [r0, #2]
 80050cc:	70c1      	strb	r1, [r0, #3]
 80050ce:	1d03      	adds	r3, r0, #4
 80050d0:	e7f1      	b.n	80050b6 <__exponent+0x58>
	...

080050d4 <_printf_float>:
 80050d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d8:	b091      	sub	sp, #68	@ 0x44
 80050da:	460c      	mov	r4, r1
 80050dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80050e0:	4616      	mov	r6, r2
 80050e2:	461f      	mov	r7, r3
 80050e4:	4605      	mov	r5, r0
 80050e6:	f000 fcf7 	bl	8005ad8 <_localeconv_r>
 80050ea:	6803      	ldr	r3, [r0, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	9308      	str	r3, [sp, #32]
 80050f0:	f7fb f82e 	bl	8000150 <strlen>
 80050f4:	2300      	movs	r3, #0
 80050f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80050f8:	f8d8 3000 	ldr.w	r3, [r8]
 80050fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80050fe:	3307      	adds	r3, #7
 8005100:	f023 0307 	bic.w	r3, r3, #7
 8005104:	f103 0208 	add.w	r2, r3, #8
 8005108:	f894 a018 	ldrb.w	sl, [r4, #24]
 800510c:	f8d4 b000 	ldr.w	fp, [r4]
 8005110:	f8c8 2000 	str.w	r2, [r8]
 8005114:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005118:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800511c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800511e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005122:	f04f 32ff 	mov.w	r2, #4294967295
 8005126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800512a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800512e:	4b9c      	ldr	r3, [pc, #624]	@ (80053a0 <_printf_float+0x2cc>)
 8005130:	f7fb fc6c 	bl	8000a0c <__aeabi_dcmpun>
 8005134:	bb70      	cbnz	r0, 8005194 <_printf_float+0xc0>
 8005136:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800513a:	f04f 32ff 	mov.w	r2, #4294967295
 800513e:	4b98      	ldr	r3, [pc, #608]	@ (80053a0 <_printf_float+0x2cc>)
 8005140:	f7fb fc46 	bl	80009d0 <__aeabi_dcmple>
 8005144:	bb30      	cbnz	r0, 8005194 <_printf_float+0xc0>
 8005146:	2200      	movs	r2, #0
 8005148:	2300      	movs	r3, #0
 800514a:	4640      	mov	r0, r8
 800514c:	4649      	mov	r1, r9
 800514e:	f7fb fc35 	bl	80009bc <__aeabi_dcmplt>
 8005152:	b110      	cbz	r0, 800515a <_printf_float+0x86>
 8005154:	232d      	movs	r3, #45	@ 0x2d
 8005156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800515a:	4a92      	ldr	r2, [pc, #584]	@ (80053a4 <_printf_float+0x2d0>)
 800515c:	4b92      	ldr	r3, [pc, #584]	@ (80053a8 <_printf_float+0x2d4>)
 800515e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005162:	bf94      	ite	ls
 8005164:	4690      	movls	r8, r2
 8005166:	4698      	movhi	r8, r3
 8005168:	2303      	movs	r3, #3
 800516a:	f04f 0900 	mov.w	r9, #0
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	f02b 0304 	bic.w	r3, fp, #4
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	4633      	mov	r3, r6
 8005178:	4621      	mov	r1, r4
 800517a:	4628      	mov	r0, r5
 800517c:	9700      	str	r7, [sp, #0]
 800517e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005180:	f000 f9d4 	bl	800552c <_printf_common>
 8005184:	3001      	adds	r0, #1
 8005186:	f040 8090 	bne.w	80052aa <_printf_float+0x1d6>
 800518a:	f04f 30ff 	mov.w	r0, #4294967295
 800518e:	b011      	add	sp, #68	@ 0x44
 8005190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	4640      	mov	r0, r8
 800519a:	4649      	mov	r1, r9
 800519c:	f7fb fc36 	bl	8000a0c <__aeabi_dcmpun>
 80051a0:	b148      	cbz	r0, 80051b6 <_printf_float+0xe2>
 80051a2:	464b      	mov	r3, r9
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bfb8      	it	lt
 80051a8:	232d      	movlt	r3, #45	@ 0x2d
 80051aa:	4a80      	ldr	r2, [pc, #512]	@ (80053ac <_printf_float+0x2d8>)
 80051ac:	bfb8      	it	lt
 80051ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80051b2:	4b7f      	ldr	r3, [pc, #508]	@ (80053b0 <_printf_float+0x2dc>)
 80051b4:	e7d3      	b.n	800515e <_printf_float+0x8a>
 80051b6:	6863      	ldr	r3, [r4, #4]
 80051b8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	d13f      	bne.n	8005240 <_printf_float+0x16c>
 80051c0:	2306      	movs	r3, #6
 80051c2:	6063      	str	r3, [r4, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80051ca:	6023      	str	r3, [r4, #0]
 80051cc:	9206      	str	r2, [sp, #24]
 80051ce:	aa0e      	add	r2, sp, #56	@ 0x38
 80051d0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80051d4:	aa0d      	add	r2, sp, #52	@ 0x34
 80051d6:	9203      	str	r2, [sp, #12]
 80051d8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80051dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80051e0:	6863      	ldr	r3, [r4, #4]
 80051e2:	4642      	mov	r2, r8
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	4628      	mov	r0, r5
 80051e8:	464b      	mov	r3, r9
 80051ea:	910a      	str	r1, [sp, #40]	@ 0x28
 80051ec:	f7ff fed3 	bl	8004f96 <__cvt>
 80051f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80051f2:	4680      	mov	r8, r0
 80051f4:	2947      	cmp	r1, #71	@ 0x47
 80051f6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80051f8:	d128      	bne.n	800524c <_printf_float+0x178>
 80051fa:	1cc8      	adds	r0, r1, #3
 80051fc:	db02      	blt.n	8005204 <_printf_float+0x130>
 80051fe:	6863      	ldr	r3, [r4, #4]
 8005200:	4299      	cmp	r1, r3
 8005202:	dd40      	ble.n	8005286 <_printf_float+0x1b2>
 8005204:	f1aa 0a02 	sub.w	sl, sl, #2
 8005208:	fa5f fa8a 	uxtb.w	sl, sl
 800520c:	4652      	mov	r2, sl
 800520e:	3901      	subs	r1, #1
 8005210:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005214:	910d      	str	r1, [sp, #52]	@ 0x34
 8005216:	f7ff ff22 	bl	800505e <__exponent>
 800521a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800521c:	4681      	mov	r9, r0
 800521e:	1813      	adds	r3, r2, r0
 8005220:	2a01      	cmp	r2, #1
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	dc02      	bgt.n	800522c <_printf_float+0x158>
 8005226:	6822      	ldr	r2, [r4, #0]
 8005228:	07d2      	lsls	r2, r2, #31
 800522a:	d501      	bpl.n	8005230 <_printf_float+0x15c>
 800522c:	3301      	adds	r3, #1
 800522e:	6123      	str	r3, [r4, #16]
 8005230:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005234:	2b00      	cmp	r3, #0
 8005236:	d09e      	beq.n	8005176 <_printf_float+0xa2>
 8005238:	232d      	movs	r3, #45	@ 0x2d
 800523a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800523e:	e79a      	b.n	8005176 <_printf_float+0xa2>
 8005240:	2947      	cmp	r1, #71	@ 0x47
 8005242:	d1bf      	bne.n	80051c4 <_printf_float+0xf0>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1bd      	bne.n	80051c4 <_printf_float+0xf0>
 8005248:	2301      	movs	r3, #1
 800524a:	e7ba      	b.n	80051c2 <_printf_float+0xee>
 800524c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005250:	d9dc      	bls.n	800520c <_printf_float+0x138>
 8005252:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005256:	d118      	bne.n	800528a <_printf_float+0x1b6>
 8005258:	2900      	cmp	r1, #0
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	dd0b      	ble.n	8005276 <_printf_float+0x1a2>
 800525e:	6121      	str	r1, [r4, #16]
 8005260:	b913      	cbnz	r3, 8005268 <_printf_float+0x194>
 8005262:	6822      	ldr	r2, [r4, #0]
 8005264:	07d0      	lsls	r0, r2, #31
 8005266:	d502      	bpl.n	800526e <_printf_float+0x19a>
 8005268:	3301      	adds	r3, #1
 800526a:	440b      	add	r3, r1
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	f04f 0900 	mov.w	r9, #0
 8005272:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005274:	e7dc      	b.n	8005230 <_printf_float+0x15c>
 8005276:	b913      	cbnz	r3, 800527e <_printf_float+0x1aa>
 8005278:	6822      	ldr	r2, [r4, #0]
 800527a:	07d2      	lsls	r2, r2, #31
 800527c:	d501      	bpl.n	8005282 <_printf_float+0x1ae>
 800527e:	3302      	adds	r3, #2
 8005280:	e7f4      	b.n	800526c <_printf_float+0x198>
 8005282:	2301      	movs	r3, #1
 8005284:	e7f2      	b.n	800526c <_printf_float+0x198>
 8005286:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800528a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800528c:	4299      	cmp	r1, r3
 800528e:	db05      	blt.n	800529c <_printf_float+0x1c8>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	6121      	str	r1, [r4, #16]
 8005294:	07d8      	lsls	r0, r3, #31
 8005296:	d5ea      	bpl.n	800526e <_printf_float+0x19a>
 8005298:	1c4b      	adds	r3, r1, #1
 800529a:	e7e7      	b.n	800526c <_printf_float+0x198>
 800529c:	2900      	cmp	r1, #0
 800529e:	bfcc      	ite	gt
 80052a0:	2201      	movgt	r2, #1
 80052a2:	f1c1 0202 	rsble	r2, r1, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	e7e0      	b.n	800526c <_printf_float+0x198>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	055a      	lsls	r2, r3, #21
 80052ae:	d407      	bmi.n	80052c0 <_printf_float+0x1ec>
 80052b0:	6923      	ldr	r3, [r4, #16]
 80052b2:	4642      	mov	r2, r8
 80052b4:	4631      	mov	r1, r6
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b8      	blx	r7
 80052ba:	3001      	adds	r0, #1
 80052bc:	d12b      	bne.n	8005316 <_printf_float+0x242>
 80052be:	e764      	b.n	800518a <_printf_float+0xb6>
 80052c0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052c4:	f240 80dc 	bls.w	8005480 <_printf_float+0x3ac>
 80052c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80052cc:	2200      	movs	r2, #0
 80052ce:	2300      	movs	r3, #0
 80052d0:	f7fb fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d033      	beq.n	8005340 <_printf_float+0x26c>
 80052d8:	2301      	movs	r3, #1
 80052da:	4631      	mov	r1, r6
 80052dc:	4628      	mov	r0, r5
 80052de:	4a35      	ldr	r2, [pc, #212]	@ (80053b4 <_printf_float+0x2e0>)
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	f43f af51 	beq.w	800518a <_printf_float+0xb6>
 80052e8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80052ec:	4543      	cmp	r3, r8
 80052ee:	db02      	blt.n	80052f6 <_printf_float+0x222>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	07d8      	lsls	r0, r3, #31
 80052f4:	d50f      	bpl.n	8005316 <_printf_float+0x242>
 80052f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	f43f af42 	beq.w	800518a <_printf_float+0xb6>
 8005306:	f04f 0900 	mov.w	r9, #0
 800530a:	f108 38ff 	add.w	r8, r8, #4294967295
 800530e:	f104 0a1a 	add.w	sl, r4, #26
 8005312:	45c8      	cmp	r8, r9
 8005314:	dc09      	bgt.n	800532a <_printf_float+0x256>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	079b      	lsls	r3, r3, #30
 800531a:	f100 8102 	bmi.w	8005522 <_printf_float+0x44e>
 800531e:	68e0      	ldr	r0, [r4, #12]
 8005320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005322:	4298      	cmp	r0, r3
 8005324:	bfb8      	it	lt
 8005326:	4618      	movlt	r0, r3
 8005328:	e731      	b.n	800518e <_printf_float+0xba>
 800532a:	2301      	movs	r3, #1
 800532c:	4652      	mov	r2, sl
 800532e:	4631      	mov	r1, r6
 8005330:	4628      	mov	r0, r5
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	f43f af28 	beq.w	800518a <_printf_float+0xb6>
 800533a:	f109 0901 	add.w	r9, r9, #1
 800533e:	e7e8      	b.n	8005312 <_printf_float+0x23e>
 8005340:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005342:	2b00      	cmp	r3, #0
 8005344:	dc38      	bgt.n	80053b8 <_printf_float+0x2e4>
 8005346:	2301      	movs	r3, #1
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	4a19      	ldr	r2, [pc, #100]	@ (80053b4 <_printf_float+0x2e0>)
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	f43f af1a 	beq.w	800518a <_printf_float+0xb6>
 8005356:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800535a:	ea59 0303 	orrs.w	r3, r9, r3
 800535e:	d102      	bne.n	8005366 <_printf_float+0x292>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07d9      	lsls	r1, r3, #31
 8005364:	d5d7      	bpl.n	8005316 <_printf_float+0x242>
 8005366:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800536a:	4631      	mov	r1, r6
 800536c:	4628      	mov	r0, r5
 800536e:	47b8      	blx	r7
 8005370:	3001      	adds	r0, #1
 8005372:	f43f af0a 	beq.w	800518a <_printf_float+0xb6>
 8005376:	f04f 0a00 	mov.w	sl, #0
 800537a:	f104 0b1a 	add.w	fp, r4, #26
 800537e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005380:	425b      	negs	r3, r3
 8005382:	4553      	cmp	r3, sl
 8005384:	dc01      	bgt.n	800538a <_printf_float+0x2b6>
 8005386:	464b      	mov	r3, r9
 8005388:	e793      	b.n	80052b2 <_printf_float+0x1de>
 800538a:	2301      	movs	r3, #1
 800538c:	465a      	mov	r2, fp
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	47b8      	blx	r7
 8005394:	3001      	adds	r0, #1
 8005396:	f43f aef8 	beq.w	800518a <_printf_float+0xb6>
 800539a:	f10a 0a01 	add.w	sl, sl, #1
 800539e:	e7ee      	b.n	800537e <_printf_float+0x2aa>
 80053a0:	7fefffff 	.word	0x7fefffff
 80053a4:	08007cde 	.word	0x08007cde
 80053a8:	08007ce2 	.word	0x08007ce2
 80053ac:	08007ce6 	.word	0x08007ce6
 80053b0:	08007cea 	.word	0x08007cea
 80053b4:	08007cee 	.word	0x08007cee
 80053b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053ba:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80053be:	4553      	cmp	r3, sl
 80053c0:	bfa8      	it	ge
 80053c2:	4653      	movge	r3, sl
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	4699      	mov	r9, r3
 80053c8:	dc36      	bgt.n	8005438 <_printf_float+0x364>
 80053ca:	f04f 0b00 	mov.w	fp, #0
 80053ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053d2:	f104 021a 	add.w	r2, r4, #26
 80053d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80053da:	eba3 0309 	sub.w	r3, r3, r9
 80053de:	455b      	cmp	r3, fp
 80053e0:	dc31      	bgt.n	8005446 <_printf_float+0x372>
 80053e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053e4:	459a      	cmp	sl, r3
 80053e6:	dc3a      	bgt.n	800545e <_printf_float+0x38a>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	07da      	lsls	r2, r3, #31
 80053ec:	d437      	bmi.n	800545e <_printf_float+0x38a>
 80053ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053f0:	ebaa 0903 	sub.w	r9, sl, r3
 80053f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053f6:	ebaa 0303 	sub.w	r3, sl, r3
 80053fa:	4599      	cmp	r9, r3
 80053fc:	bfa8      	it	ge
 80053fe:	4699      	movge	r9, r3
 8005400:	f1b9 0f00 	cmp.w	r9, #0
 8005404:	dc33      	bgt.n	800546e <_printf_float+0x39a>
 8005406:	f04f 0800 	mov.w	r8, #0
 800540a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800540e:	f104 0b1a 	add.w	fp, r4, #26
 8005412:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005414:	ebaa 0303 	sub.w	r3, sl, r3
 8005418:	eba3 0309 	sub.w	r3, r3, r9
 800541c:	4543      	cmp	r3, r8
 800541e:	f77f af7a 	ble.w	8005316 <_printf_float+0x242>
 8005422:	2301      	movs	r3, #1
 8005424:	465a      	mov	r2, fp
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	47b8      	blx	r7
 800542c:	3001      	adds	r0, #1
 800542e:	f43f aeac 	beq.w	800518a <_printf_float+0xb6>
 8005432:	f108 0801 	add.w	r8, r8, #1
 8005436:	e7ec      	b.n	8005412 <_printf_float+0x33e>
 8005438:	4642      	mov	r2, r8
 800543a:	4631      	mov	r1, r6
 800543c:	4628      	mov	r0, r5
 800543e:	47b8      	blx	r7
 8005440:	3001      	adds	r0, #1
 8005442:	d1c2      	bne.n	80053ca <_printf_float+0x2f6>
 8005444:	e6a1      	b.n	800518a <_printf_float+0xb6>
 8005446:	2301      	movs	r3, #1
 8005448:	4631      	mov	r1, r6
 800544a:	4628      	mov	r0, r5
 800544c:	920a      	str	r2, [sp, #40]	@ 0x28
 800544e:	47b8      	blx	r7
 8005450:	3001      	adds	r0, #1
 8005452:	f43f ae9a 	beq.w	800518a <_printf_float+0xb6>
 8005456:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005458:	f10b 0b01 	add.w	fp, fp, #1
 800545c:	e7bb      	b.n	80053d6 <_printf_float+0x302>
 800545e:	4631      	mov	r1, r6
 8005460:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005464:	4628      	mov	r0, r5
 8005466:	47b8      	blx	r7
 8005468:	3001      	adds	r0, #1
 800546a:	d1c0      	bne.n	80053ee <_printf_float+0x31a>
 800546c:	e68d      	b.n	800518a <_printf_float+0xb6>
 800546e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005470:	464b      	mov	r3, r9
 8005472:	4631      	mov	r1, r6
 8005474:	4628      	mov	r0, r5
 8005476:	4442      	add	r2, r8
 8005478:	47b8      	blx	r7
 800547a:	3001      	adds	r0, #1
 800547c:	d1c3      	bne.n	8005406 <_printf_float+0x332>
 800547e:	e684      	b.n	800518a <_printf_float+0xb6>
 8005480:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005484:	f1ba 0f01 	cmp.w	sl, #1
 8005488:	dc01      	bgt.n	800548e <_printf_float+0x3ba>
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d536      	bpl.n	80054fc <_printf_float+0x428>
 800548e:	2301      	movs	r3, #1
 8005490:	4642      	mov	r2, r8
 8005492:	4631      	mov	r1, r6
 8005494:	4628      	mov	r0, r5
 8005496:	47b8      	blx	r7
 8005498:	3001      	adds	r0, #1
 800549a:	f43f ae76 	beq.w	800518a <_printf_float+0xb6>
 800549e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054a2:	4631      	mov	r1, r6
 80054a4:	4628      	mov	r0, r5
 80054a6:	47b8      	blx	r7
 80054a8:	3001      	adds	r0, #1
 80054aa:	f43f ae6e 	beq.w	800518a <_printf_float+0xb6>
 80054ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054b2:	2200      	movs	r2, #0
 80054b4:	2300      	movs	r3, #0
 80054b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054ba:	f7fb fa75 	bl	80009a8 <__aeabi_dcmpeq>
 80054be:	b9c0      	cbnz	r0, 80054f2 <_printf_float+0x41e>
 80054c0:	4653      	mov	r3, sl
 80054c2:	f108 0201 	add.w	r2, r8, #1
 80054c6:	4631      	mov	r1, r6
 80054c8:	4628      	mov	r0, r5
 80054ca:	47b8      	blx	r7
 80054cc:	3001      	adds	r0, #1
 80054ce:	d10c      	bne.n	80054ea <_printf_float+0x416>
 80054d0:	e65b      	b.n	800518a <_printf_float+0xb6>
 80054d2:	2301      	movs	r3, #1
 80054d4:	465a      	mov	r2, fp
 80054d6:	4631      	mov	r1, r6
 80054d8:	4628      	mov	r0, r5
 80054da:	47b8      	blx	r7
 80054dc:	3001      	adds	r0, #1
 80054de:	f43f ae54 	beq.w	800518a <_printf_float+0xb6>
 80054e2:	f108 0801 	add.w	r8, r8, #1
 80054e6:	45d0      	cmp	r8, sl
 80054e8:	dbf3      	blt.n	80054d2 <_printf_float+0x3fe>
 80054ea:	464b      	mov	r3, r9
 80054ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80054f0:	e6e0      	b.n	80052b4 <_printf_float+0x1e0>
 80054f2:	f04f 0800 	mov.w	r8, #0
 80054f6:	f104 0b1a 	add.w	fp, r4, #26
 80054fa:	e7f4      	b.n	80054e6 <_printf_float+0x412>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4642      	mov	r2, r8
 8005500:	e7e1      	b.n	80054c6 <_printf_float+0x3f2>
 8005502:	2301      	movs	r3, #1
 8005504:	464a      	mov	r2, r9
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	f43f ae3c 	beq.w	800518a <_printf_float+0xb6>
 8005512:	f108 0801 	add.w	r8, r8, #1
 8005516:	68e3      	ldr	r3, [r4, #12]
 8005518:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800551a:	1a5b      	subs	r3, r3, r1
 800551c:	4543      	cmp	r3, r8
 800551e:	dcf0      	bgt.n	8005502 <_printf_float+0x42e>
 8005520:	e6fd      	b.n	800531e <_printf_float+0x24a>
 8005522:	f04f 0800 	mov.w	r8, #0
 8005526:	f104 0919 	add.w	r9, r4, #25
 800552a:	e7f4      	b.n	8005516 <_printf_float+0x442>

0800552c <_printf_common>:
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	4616      	mov	r6, r2
 8005532:	4698      	mov	r8, r3
 8005534:	688a      	ldr	r2, [r1, #8]
 8005536:	690b      	ldr	r3, [r1, #16]
 8005538:	4607      	mov	r7, r0
 800553a:	4293      	cmp	r3, r2
 800553c:	bfb8      	it	lt
 800553e:	4613      	movlt	r3, r2
 8005540:	6033      	str	r3, [r6, #0]
 8005542:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005546:	460c      	mov	r4, r1
 8005548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800554c:	b10a      	cbz	r2, 8005552 <_printf_common+0x26>
 800554e:	3301      	adds	r3, #1
 8005550:	6033      	str	r3, [r6, #0]
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	0699      	lsls	r1, r3, #26
 8005556:	bf42      	ittt	mi
 8005558:	6833      	ldrmi	r3, [r6, #0]
 800555a:	3302      	addmi	r3, #2
 800555c:	6033      	strmi	r3, [r6, #0]
 800555e:	6825      	ldr	r5, [r4, #0]
 8005560:	f015 0506 	ands.w	r5, r5, #6
 8005564:	d106      	bne.n	8005574 <_printf_common+0x48>
 8005566:	f104 0a19 	add.w	sl, r4, #25
 800556a:	68e3      	ldr	r3, [r4, #12]
 800556c:	6832      	ldr	r2, [r6, #0]
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	42ab      	cmp	r3, r5
 8005572:	dc2b      	bgt.n	80055cc <_printf_common+0xa0>
 8005574:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	3b00      	subs	r3, #0
 800557c:	bf18      	it	ne
 800557e:	2301      	movne	r3, #1
 8005580:	0692      	lsls	r2, r2, #26
 8005582:	d430      	bmi.n	80055e6 <_printf_common+0xba>
 8005584:	4641      	mov	r1, r8
 8005586:	4638      	mov	r0, r7
 8005588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800558c:	47c8      	blx	r9
 800558e:	3001      	adds	r0, #1
 8005590:	d023      	beq.n	80055da <_printf_common+0xae>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	6922      	ldr	r2, [r4, #16]
 8005596:	f003 0306 	and.w	r3, r3, #6
 800559a:	2b04      	cmp	r3, #4
 800559c:	bf14      	ite	ne
 800559e:	2500      	movne	r5, #0
 80055a0:	6833      	ldreq	r3, [r6, #0]
 80055a2:	f04f 0600 	mov.w	r6, #0
 80055a6:	bf08      	it	eq
 80055a8:	68e5      	ldreq	r5, [r4, #12]
 80055aa:	f104 041a 	add.w	r4, r4, #26
 80055ae:	bf08      	it	eq
 80055b0:	1aed      	subeq	r5, r5, r3
 80055b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055b6:	bf08      	it	eq
 80055b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055bc:	4293      	cmp	r3, r2
 80055be:	bfc4      	itt	gt
 80055c0:	1a9b      	subgt	r3, r3, r2
 80055c2:	18ed      	addgt	r5, r5, r3
 80055c4:	42b5      	cmp	r5, r6
 80055c6:	d11a      	bne.n	80055fe <_printf_common+0xd2>
 80055c8:	2000      	movs	r0, #0
 80055ca:	e008      	b.n	80055de <_printf_common+0xb2>
 80055cc:	2301      	movs	r3, #1
 80055ce:	4652      	mov	r2, sl
 80055d0:	4641      	mov	r1, r8
 80055d2:	4638      	mov	r0, r7
 80055d4:	47c8      	blx	r9
 80055d6:	3001      	adds	r0, #1
 80055d8:	d103      	bne.n	80055e2 <_printf_common+0xb6>
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e2:	3501      	adds	r5, #1
 80055e4:	e7c1      	b.n	800556a <_printf_common+0x3e>
 80055e6:	2030      	movs	r0, #48	@ 0x30
 80055e8:	18e1      	adds	r1, r4, r3
 80055ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055f4:	4422      	add	r2, r4
 80055f6:	3302      	adds	r3, #2
 80055f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055fc:	e7c2      	b.n	8005584 <_printf_common+0x58>
 80055fe:	2301      	movs	r3, #1
 8005600:	4622      	mov	r2, r4
 8005602:	4641      	mov	r1, r8
 8005604:	4638      	mov	r0, r7
 8005606:	47c8      	blx	r9
 8005608:	3001      	adds	r0, #1
 800560a:	d0e6      	beq.n	80055da <_printf_common+0xae>
 800560c:	3601      	adds	r6, #1
 800560e:	e7d9      	b.n	80055c4 <_printf_common+0x98>

08005610 <_printf_i>:
 8005610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	7e0f      	ldrb	r7, [r1, #24]
 8005616:	4691      	mov	r9, r2
 8005618:	2f78      	cmp	r7, #120	@ 0x78
 800561a:	4680      	mov	r8, r0
 800561c:	460c      	mov	r4, r1
 800561e:	469a      	mov	sl, r3
 8005620:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005626:	d807      	bhi.n	8005638 <_printf_i+0x28>
 8005628:	2f62      	cmp	r7, #98	@ 0x62
 800562a:	d80a      	bhi.n	8005642 <_printf_i+0x32>
 800562c:	2f00      	cmp	r7, #0
 800562e:	f000 80d3 	beq.w	80057d8 <_printf_i+0x1c8>
 8005632:	2f58      	cmp	r7, #88	@ 0x58
 8005634:	f000 80ba 	beq.w	80057ac <_printf_i+0x19c>
 8005638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800563c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005640:	e03a      	b.n	80056b8 <_printf_i+0xa8>
 8005642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005646:	2b15      	cmp	r3, #21
 8005648:	d8f6      	bhi.n	8005638 <_printf_i+0x28>
 800564a:	a101      	add	r1, pc, #4	@ (adr r1, 8005650 <_printf_i+0x40>)
 800564c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056bd 	.word	0x080056bd
 8005658:	08005639 	.word	0x08005639
 800565c:	08005639 	.word	0x08005639
 8005660:	08005639 	.word	0x08005639
 8005664:	08005639 	.word	0x08005639
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005639 	.word	0x08005639
 8005670:	08005639 	.word	0x08005639
 8005674:	08005639 	.word	0x08005639
 8005678:	08005639 	.word	0x08005639
 800567c:	080057bf 	.word	0x080057bf
 8005680:	080056e7 	.word	0x080056e7
 8005684:	08005779 	.word	0x08005779
 8005688:	08005639 	.word	0x08005639
 800568c:	08005639 	.word	0x08005639
 8005690:	080057e1 	.word	0x080057e1
 8005694:	08005639 	.word	0x08005639
 8005698:	080056e7 	.word	0x080056e7
 800569c:	08005639 	.word	0x08005639
 80056a0:	08005639 	.word	0x08005639
 80056a4:	08005781 	.word	0x08005781
 80056a8:	6833      	ldr	r3, [r6, #0]
 80056aa:	1d1a      	adds	r2, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6032      	str	r2, [r6, #0]
 80056b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056b8:	2301      	movs	r3, #1
 80056ba:	e09e      	b.n	80057fa <_printf_i+0x1ea>
 80056bc:	6833      	ldr	r3, [r6, #0]
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	1d19      	adds	r1, r3, #4
 80056c2:	6031      	str	r1, [r6, #0]
 80056c4:	0606      	lsls	r6, r0, #24
 80056c6:	d501      	bpl.n	80056cc <_printf_i+0xbc>
 80056c8:	681d      	ldr	r5, [r3, #0]
 80056ca:	e003      	b.n	80056d4 <_printf_i+0xc4>
 80056cc:	0645      	lsls	r5, r0, #25
 80056ce:	d5fb      	bpl.n	80056c8 <_printf_i+0xb8>
 80056d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056d4:	2d00      	cmp	r5, #0
 80056d6:	da03      	bge.n	80056e0 <_printf_i+0xd0>
 80056d8:	232d      	movs	r3, #45	@ 0x2d
 80056da:	426d      	negs	r5, r5
 80056dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056e0:	230a      	movs	r3, #10
 80056e2:	4859      	ldr	r0, [pc, #356]	@ (8005848 <_printf_i+0x238>)
 80056e4:	e011      	b.n	800570a <_printf_i+0xfa>
 80056e6:	6821      	ldr	r1, [r4, #0]
 80056e8:	6833      	ldr	r3, [r6, #0]
 80056ea:	0608      	lsls	r0, r1, #24
 80056ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80056f0:	d402      	bmi.n	80056f8 <_printf_i+0xe8>
 80056f2:	0649      	lsls	r1, r1, #25
 80056f4:	bf48      	it	mi
 80056f6:	b2ad      	uxthmi	r5, r5
 80056f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80056fa:	6033      	str	r3, [r6, #0]
 80056fc:	bf14      	ite	ne
 80056fe:	230a      	movne	r3, #10
 8005700:	2308      	moveq	r3, #8
 8005702:	4851      	ldr	r0, [pc, #324]	@ (8005848 <_printf_i+0x238>)
 8005704:	2100      	movs	r1, #0
 8005706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800570a:	6866      	ldr	r6, [r4, #4]
 800570c:	2e00      	cmp	r6, #0
 800570e:	bfa8      	it	ge
 8005710:	6821      	ldrge	r1, [r4, #0]
 8005712:	60a6      	str	r6, [r4, #8]
 8005714:	bfa4      	itt	ge
 8005716:	f021 0104 	bicge.w	r1, r1, #4
 800571a:	6021      	strge	r1, [r4, #0]
 800571c:	b90d      	cbnz	r5, 8005722 <_printf_i+0x112>
 800571e:	2e00      	cmp	r6, #0
 8005720:	d04b      	beq.n	80057ba <_printf_i+0x1aa>
 8005722:	4616      	mov	r6, r2
 8005724:	fbb5 f1f3 	udiv	r1, r5, r3
 8005728:	fb03 5711 	mls	r7, r3, r1, r5
 800572c:	5dc7      	ldrb	r7, [r0, r7]
 800572e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005732:	462f      	mov	r7, r5
 8005734:	42bb      	cmp	r3, r7
 8005736:	460d      	mov	r5, r1
 8005738:	d9f4      	bls.n	8005724 <_printf_i+0x114>
 800573a:	2b08      	cmp	r3, #8
 800573c:	d10b      	bne.n	8005756 <_printf_i+0x146>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	07df      	lsls	r7, r3, #31
 8005742:	d508      	bpl.n	8005756 <_printf_i+0x146>
 8005744:	6923      	ldr	r3, [r4, #16]
 8005746:	6861      	ldr	r1, [r4, #4]
 8005748:	4299      	cmp	r1, r3
 800574a:	bfde      	ittt	le
 800574c:	2330      	movle	r3, #48	@ 0x30
 800574e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005752:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005756:	1b92      	subs	r2, r2, r6
 8005758:	6122      	str	r2, [r4, #16]
 800575a:	464b      	mov	r3, r9
 800575c:	4621      	mov	r1, r4
 800575e:	4640      	mov	r0, r8
 8005760:	f8cd a000 	str.w	sl, [sp]
 8005764:	aa03      	add	r2, sp, #12
 8005766:	f7ff fee1 	bl	800552c <_printf_common>
 800576a:	3001      	adds	r0, #1
 800576c:	d14a      	bne.n	8005804 <_printf_i+0x1f4>
 800576e:	f04f 30ff 	mov.w	r0, #4294967295
 8005772:	b004      	add	sp, #16
 8005774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	f043 0320 	orr.w	r3, r3, #32
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	2778      	movs	r7, #120	@ 0x78
 8005782:	4832      	ldr	r0, [pc, #200]	@ (800584c <_printf_i+0x23c>)
 8005784:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	6831      	ldr	r1, [r6, #0]
 800578c:	061f      	lsls	r7, r3, #24
 800578e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005792:	d402      	bmi.n	800579a <_printf_i+0x18a>
 8005794:	065f      	lsls	r7, r3, #25
 8005796:	bf48      	it	mi
 8005798:	b2ad      	uxthmi	r5, r5
 800579a:	6031      	str	r1, [r6, #0]
 800579c:	07d9      	lsls	r1, r3, #31
 800579e:	bf44      	itt	mi
 80057a0:	f043 0320 	orrmi.w	r3, r3, #32
 80057a4:	6023      	strmi	r3, [r4, #0]
 80057a6:	b11d      	cbz	r5, 80057b0 <_printf_i+0x1a0>
 80057a8:	2310      	movs	r3, #16
 80057aa:	e7ab      	b.n	8005704 <_printf_i+0xf4>
 80057ac:	4826      	ldr	r0, [pc, #152]	@ (8005848 <_printf_i+0x238>)
 80057ae:	e7e9      	b.n	8005784 <_printf_i+0x174>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	f023 0320 	bic.w	r3, r3, #32
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	e7f6      	b.n	80057a8 <_printf_i+0x198>
 80057ba:	4616      	mov	r6, r2
 80057bc:	e7bd      	b.n	800573a <_printf_i+0x12a>
 80057be:	6833      	ldr	r3, [r6, #0]
 80057c0:	6825      	ldr	r5, [r4, #0]
 80057c2:	1d18      	adds	r0, r3, #4
 80057c4:	6961      	ldr	r1, [r4, #20]
 80057c6:	6030      	str	r0, [r6, #0]
 80057c8:	062e      	lsls	r6, r5, #24
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	d501      	bpl.n	80057d2 <_printf_i+0x1c2>
 80057ce:	6019      	str	r1, [r3, #0]
 80057d0:	e002      	b.n	80057d8 <_printf_i+0x1c8>
 80057d2:	0668      	lsls	r0, r5, #25
 80057d4:	d5fb      	bpl.n	80057ce <_printf_i+0x1be>
 80057d6:	8019      	strh	r1, [r3, #0]
 80057d8:	2300      	movs	r3, #0
 80057da:	4616      	mov	r6, r2
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	e7bc      	b.n	800575a <_printf_i+0x14a>
 80057e0:	6833      	ldr	r3, [r6, #0]
 80057e2:	2100      	movs	r1, #0
 80057e4:	1d1a      	adds	r2, r3, #4
 80057e6:	6032      	str	r2, [r6, #0]
 80057e8:	681e      	ldr	r6, [r3, #0]
 80057ea:	6862      	ldr	r2, [r4, #4]
 80057ec:	4630      	mov	r0, r6
 80057ee:	f000 f9ea 	bl	8005bc6 <memchr>
 80057f2:	b108      	cbz	r0, 80057f8 <_printf_i+0x1e8>
 80057f4:	1b80      	subs	r0, r0, r6
 80057f6:	6060      	str	r0, [r4, #4]
 80057f8:	6863      	ldr	r3, [r4, #4]
 80057fa:	6123      	str	r3, [r4, #16]
 80057fc:	2300      	movs	r3, #0
 80057fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005802:	e7aa      	b.n	800575a <_printf_i+0x14a>
 8005804:	4632      	mov	r2, r6
 8005806:	4649      	mov	r1, r9
 8005808:	4640      	mov	r0, r8
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	47d0      	blx	sl
 800580e:	3001      	adds	r0, #1
 8005810:	d0ad      	beq.n	800576e <_printf_i+0x15e>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	079b      	lsls	r3, r3, #30
 8005816:	d413      	bmi.n	8005840 <_printf_i+0x230>
 8005818:	68e0      	ldr	r0, [r4, #12]
 800581a:	9b03      	ldr	r3, [sp, #12]
 800581c:	4298      	cmp	r0, r3
 800581e:	bfb8      	it	lt
 8005820:	4618      	movlt	r0, r3
 8005822:	e7a6      	b.n	8005772 <_printf_i+0x162>
 8005824:	2301      	movs	r3, #1
 8005826:	4632      	mov	r2, r6
 8005828:	4649      	mov	r1, r9
 800582a:	4640      	mov	r0, r8
 800582c:	47d0      	blx	sl
 800582e:	3001      	adds	r0, #1
 8005830:	d09d      	beq.n	800576e <_printf_i+0x15e>
 8005832:	3501      	adds	r5, #1
 8005834:	68e3      	ldr	r3, [r4, #12]
 8005836:	9903      	ldr	r1, [sp, #12]
 8005838:	1a5b      	subs	r3, r3, r1
 800583a:	42ab      	cmp	r3, r5
 800583c:	dcf2      	bgt.n	8005824 <_printf_i+0x214>
 800583e:	e7eb      	b.n	8005818 <_printf_i+0x208>
 8005840:	2500      	movs	r5, #0
 8005842:	f104 0619 	add.w	r6, r4, #25
 8005846:	e7f5      	b.n	8005834 <_printf_i+0x224>
 8005848:	08007cf0 	.word	0x08007cf0
 800584c:	08007d01 	.word	0x08007d01

08005850 <std>:
 8005850:	2300      	movs	r3, #0
 8005852:	b510      	push	{r4, lr}
 8005854:	4604      	mov	r4, r0
 8005856:	e9c0 3300 	strd	r3, r3, [r0]
 800585a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800585e:	6083      	str	r3, [r0, #8]
 8005860:	8181      	strh	r1, [r0, #12]
 8005862:	6643      	str	r3, [r0, #100]	@ 0x64
 8005864:	81c2      	strh	r2, [r0, #14]
 8005866:	6183      	str	r3, [r0, #24]
 8005868:	4619      	mov	r1, r3
 800586a:	2208      	movs	r2, #8
 800586c:	305c      	adds	r0, #92	@ 0x5c
 800586e:	f000 f914 	bl	8005a9a <memset>
 8005872:	4b0d      	ldr	r3, [pc, #52]	@ (80058a8 <std+0x58>)
 8005874:	6224      	str	r4, [r4, #32]
 8005876:	6263      	str	r3, [r4, #36]	@ 0x24
 8005878:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <std+0x5c>)
 800587a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800587c:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <std+0x60>)
 800587e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005880:	4b0c      	ldr	r3, [pc, #48]	@ (80058b4 <std+0x64>)
 8005882:	6323      	str	r3, [r4, #48]	@ 0x30
 8005884:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <std+0x68>)
 8005886:	429c      	cmp	r4, r3
 8005888:	d006      	beq.n	8005898 <std+0x48>
 800588a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800588e:	4294      	cmp	r4, r2
 8005890:	d002      	beq.n	8005898 <std+0x48>
 8005892:	33d0      	adds	r3, #208	@ 0xd0
 8005894:	429c      	cmp	r4, r3
 8005896:	d105      	bne.n	80058a4 <std+0x54>
 8005898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800589c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a0:	f000 b98e 	b.w	8005bc0 <__retarget_lock_init_recursive>
 80058a4:	bd10      	pop	{r4, pc}
 80058a6:	bf00      	nop
 80058a8:	08005a15 	.word	0x08005a15
 80058ac:	08005a37 	.word	0x08005a37
 80058b0:	08005a6f 	.word	0x08005a6f
 80058b4:	08005a93 	.word	0x08005a93
 80058b8:	20000800 	.word	0x20000800

080058bc <stdio_exit_handler>:
 80058bc:	4a02      	ldr	r2, [pc, #8]	@ (80058c8 <stdio_exit_handler+0xc>)
 80058be:	4903      	ldr	r1, [pc, #12]	@ (80058cc <stdio_exit_handler+0x10>)
 80058c0:	4803      	ldr	r0, [pc, #12]	@ (80058d0 <stdio_exit_handler+0x14>)
 80058c2:	f000 b869 	b.w	8005998 <_fwalk_sglue>
 80058c6:	bf00      	nop
 80058c8:	2000000c 	.word	0x2000000c
 80058cc:	0800754d 	.word	0x0800754d
 80058d0:	2000001c 	.word	0x2000001c

080058d4 <cleanup_stdio>:
 80058d4:	6841      	ldr	r1, [r0, #4]
 80058d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005908 <cleanup_stdio+0x34>)
 80058d8:	b510      	push	{r4, lr}
 80058da:	4299      	cmp	r1, r3
 80058dc:	4604      	mov	r4, r0
 80058de:	d001      	beq.n	80058e4 <cleanup_stdio+0x10>
 80058e0:	f001 fe34 	bl	800754c <_fflush_r>
 80058e4:	68a1      	ldr	r1, [r4, #8]
 80058e6:	4b09      	ldr	r3, [pc, #36]	@ (800590c <cleanup_stdio+0x38>)
 80058e8:	4299      	cmp	r1, r3
 80058ea:	d002      	beq.n	80058f2 <cleanup_stdio+0x1e>
 80058ec:	4620      	mov	r0, r4
 80058ee:	f001 fe2d 	bl	800754c <_fflush_r>
 80058f2:	68e1      	ldr	r1, [r4, #12]
 80058f4:	4b06      	ldr	r3, [pc, #24]	@ (8005910 <cleanup_stdio+0x3c>)
 80058f6:	4299      	cmp	r1, r3
 80058f8:	d004      	beq.n	8005904 <cleanup_stdio+0x30>
 80058fa:	4620      	mov	r0, r4
 80058fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005900:	f001 be24 	b.w	800754c <_fflush_r>
 8005904:	bd10      	pop	{r4, pc}
 8005906:	bf00      	nop
 8005908:	20000800 	.word	0x20000800
 800590c:	20000868 	.word	0x20000868
 8005910:	200008d0 	.word	0x200008d0

08005914 <global_stdio_init.part.0>:
 8005914:	b510      	push	{r4, lr}
 8005916:	4b0b      	ldr	r3, [pc, #44]	@ (8005944 <global_stdio_init.part.0+0x30>)
 8005918:	4c0b      	ldr	r4, [pc, #44]	@ (8005948 <global_stdio_init.part.0+0x34>)
 800591a:	4a0c      	ldr	r2, [pc, #48]	@ (800594c <global_stdio_init.part.0+0x38>)
 800591c:	4620      	mov	r0, r4
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	2104      	movs	r1, #4
 8005922:	2200      	movs	r2, #0
 8005924:	f7ff ff94 	bl	8005850 <std>
 8005928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800592c:	2201      	movs	r2, #1
 800592e:	2109      	movs	r1, #9
 8005930:	f7ff ff8e 	bl	8005850 <std>
 8005934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005938:	2202      	movs	r2, #2
 800593a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800593e:	2112      	movs	r1, #18
 8005940:	f7ff bf86 	b.w	8005850 <std>
 8005944:	20000938 	.word	0x20000938
 8005948:	20000800 	.word	0x20000800
 800594c:	080058bd 	.word	0x080058bd

08005950 <__sfp_lock_acquire>:
 8005950:	4801      	ldr	r0, [pc, #4]	@ (8005958 <__sfp_lock_acquire+0x8>)
 8005952:	f000 b936 	b.w	8005bc2 <__retarget_lock_acquire_recursive>
 8005956:	bf00      	nop
 8005958:	20000941 	.word	0x20000941

0800595c <__sfp_lock_release>:
 800595c:	4801      	ldr	r0, [pc, #4]	@ (8005964 <__sfp_lock_release+0x8>)
 800595e:	f000 b931 	b.w	8005bc4 <__retarget_lock_release_recursive>
 8005962:	bf00      	nop
 8005964:	20000941 	.word	0x20000941

08005968 <__sinit>:
 8005968:	b510      	push	{r4, lr}
 800596a:	4604      	mov	r4, r0
 800596c:	f7ff fff0 	bl	8005950 <__sfp_lock_acquire>
 8005970:	6a23      	ldr	r3, [r4, #32]
 8005972:	b11b      	cbz	r3, 800597c <__sinit+0x14>
 8005974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005978:	f7ff bff0 	b.w	800595c <__sfp_lock_release>
 800597c:	4b04      	ldr	r3, [pc, #16]	@ (8005990 <__sinit+0x28>)
 800597e:	6223      	str	r3, [r4, #32]
 8005980:	4b04      	ldr	r3, [pc, #16]	@ (8005994 <__sinit+0x2c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f5      	bne.n	8005974 <__sinit+0xc>
 8005988:	f7ff ffc4 	bl	8005914 <global_stdio_init.part.0>
 800598c:	e7f2      	b.n	8005974 <__sinit+0xc>
 800598e:	bf00      	nop
 8005990:	080058d5 	.word	0x080058d5
 8005994:	20000938 	.word	0x20000938

08005998 <_fwalk_sglue>:
 8005998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800599c:	4607      	mov	r7, r0
 800599e:	4688      	mov	r8, r1
 80059a0:	4614      	mov	r4, r2
 80059a2:	2600      	movs	r6, #0
 80059a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059a8:	f1b9 0901 	subs.w	r9, r9, #1
 80059ac:	d505      	bpl.n	80059ba <_fwalk_sglue+0x22>
 80059ae:	6824      	ldr	r4, [r4, #0]
 80059b0:	2c00      	cmp	r4, #0
 80059b2:	d1f7      	bne.n	80059a4 <_fwalk_sglue+0xc>
 80059b4:	4630      	mov	r0, r6
 80059b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ba:	89ab      	ldrh	r3, [r5, #12]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d907      	bls.n	80059d0 <_fwalk_sglue+0x38>
 80059c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059c4:	3301      	adds	r3, #1
 80059c6:	d003      	beq.n	80059d0 <_fwalk_sglue+0x38>
 80059c8:	4629      	mov	r1, r5
 80059ca:	4638      	mov	r0, r7
 80059cc:	47c0      	blx	r8
 80059ce:	4306      	orrs	r6, r0
 80059d0:	3568      	adds	r5, #104	@ 0x68
 80059d2:	e7e9      	b.n	80059a8 <_fwalk_sglue+0x10>

080059d4 <siprintf>:
 80059d4:	b40e      	push	{r1, r2, r3}
 80059d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059da:	b500      	push	{lr}
 80059dc:	b09c      	sub	sp, #112	@ 0x70
 80059de:	ab1d      	add	r3, sp, #116	@ 0x74
 80059e0:	9002      	str	r0, [sp, #8]
 80059e2:	9006      	str	r0, [sp, #24]
 80059e4:	9107      	str	r1, [sp, #28]
 80059e6:	9104      	str	r1, [sp, #16]
 80059e8:	4808      	ldr	r0, [pc, #32]	@ (8005a0c <siprintf+0x38>)
 80059ea:	4909      	ldr	r1, [pc, #36]	@ (8005a10 <siprintf+0x3c>)
 80059ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f0:	9105      	str	r1, [sp, #20]
 80059f2:	6800      	ldr	r0, [r0, #0]
 80059f4:	a902      	add	r1, sp, #8
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	f001 fc2c 	bl	8007254 <_svfiprintf_r>
 80059fc:	2200      	movs	r2, #0
 80059fe:	9b02      	ldr	r3, [sp, #8]
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	b01c      	add	sp, #112	@ 0x70
 8005a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a08:	b003      	add	sp, #12
 8005a0a:	4770      	bx	lr
 8005a0c:	20000018 	.word	0x20000018
 8005a10:	ffff0208 	.word	0xffff0208

08005a14 <__sread>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	460c      	mov	r4, r1
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	f000 f882 	bl	8005b24 <_read_r>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	bfab      	itete	ge
 8005a24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a26:	89a3      	ldrhlt	r3, [r4, #12]
 8005a28:	181b      	addge	r3, r3, r0
 8005a2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a2e:	bfac      	ite	ge
 8005a30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a32:	81a3      	strhlt	r3, [r4, #12]
 8005a34:	bd10      	pop	{r4, pc}

08005a36 <__swrite>:
 8005a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	461f      	mov	r7, r3
 8005a3c:	898b      	ldrh	r3, [r1, #12]
 8005a3e:	4605      	mov	r5, r0
 8005a40:	05db      	lsls	r3, r3, #23
 8005a42:	460c      	mov	r4, r1
 8005a44:	4616      	mov	r6, r2
 8005a46:	d505      	bpl.n	8005a54 <__swrite+0x1e>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a50:	f000 f856 	bl	8005b00 <_lseek_r>
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	4632      	mov	r2, r6
 8005a58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	4628      	mov	r0, r5
 8005a60:	463b      	mov	r3, r7
 8005a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6a:	f000 b86d 	b.w	8005b48 <_write_r>

08005a6e <__sseek>:
 8005a6e:	b510      	push	{r4, lr}
 8005a70:	460c      	mov	r4, r1
 8005a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a76:	f000 f843 	bl	8005b00 <_lseek_r>
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	bf15      	itete	ne
 8005a80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a8a:	81a3      	strheq	r3, [r4, #12]
 8005a8c:	bf18      	it	ne
 8005a8e:	81a3      	strhne	r3, [r4, #12]
 8005a90:	bd10      	pop	{r4, pc}

08005a92 <__sclose>:
 8005a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a96:	f000 b823 	b.w	8005ae0 <_close_r>

08005a9a <memset>:
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d100      	bne.n	8005aa4 <memset+0xa>
 8005aa2:	4770      	bx	lr
 8005aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa8:	e7f9      	b.n	8005a9e <memset+0x4>

08005aaa <strstr>:
 8005aaa:	780a      	ldrb	r2, [r1, #0]
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	b96a      	cbnz	r2, 8005acc <strstr+0x22>
 8005ab0:	bd70      	pop	{r4, r5, r6, pc}
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d109      	bne.n	8005aca <strstr+0x20>
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	4605      	mov	r5, r0
 8005aba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f6      	beq.n	8005ab0 <strstr+0x6>
 8005ac2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005ac6:	429e      	cmp	r6, r3
 8005ac8:	d0f7      	beq.n	8005aba <strstr+0x10>
 8005aca:	3001      	adds	r0, #1
 8005acc:	7803      	ldrb	r3, [r0, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1ef      	bne.n	8005ab2 <strstr+0x8>
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	e7ec      	b.n	8005ab0 <strstr+0x6>
	...

08005ad8 <_localeconv_r>:
 8005ad8:	4800      	ldr	r0, [pc, #0]	@ (8005adc <_localeconv_r+0x4>)
 8005ada:	4770      	bx	lr
 8005adc:	20000158 	.word	0x20000158

08005ae0 <_close_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4d05      	ldr	r5, [pc, #20]	@ (8005afc <_close_r+0x1c>)
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	602b      	str	r3, [r5, #0]
 8005aec:	f7fc fa94 	bl	8002018 <_close>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_close_r+0x1a>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_close_r+0x1a>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	2000093c 	.word	0x2000093c

08005b00 <_lseek_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4604      	mov	r4, r0
 8005b04:	4608      	mov	r0, r1
 8005b06:	4611      	mov	r1, r2
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4d05      	ldr	r5, [pc, #20]	@ (8005b20 <_lseek_r+0x20>)
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7fc faa6 	bl	8002060 <_lseek>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_lseek_r+0x1e>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_lseek_r+0x1e>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	2000093c 	.word	0x2000093c

08005b24 <_read_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4604      	mov	r4, r0
 8005b28:	4608      	mov	r0, r1
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	4d05      	ldr	r5, [pc, #20]	@ (8005b44 <_read_r+0x20>)
 8005b30:	602a      	str	r2, [r5, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f7fc fa37 	bl	8001fa6 <_read>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_read_r+0x1e>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_read_r+0x1e>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	2000093c 	.word	0x2000093c

08005b48 <_write_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	4608      	mov	r0, r1
 8005b4e:	4611      	mov	r1, r2
 8005b50:	2200      	movs	r2, #0
 8005b52:	4d05      	ldr	r5, [pc, #20]	@ (8005b68 <_write_r+0x20>)
 8005b54:	602a      	str	r2, [r5, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f7fc fa42 	bl	8001fe0 <_write>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_write_r+0x1e>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_write_r+0x1e>
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	2000093c 	.word	0x2000093c

08005b6c <__errno>:
 8005b6c:	4b01      	ldr	r3, [pc, #4]	@ (8005b74 <__errno+0x8>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000018 	.word	0x20000018

08005b78 <__libc_init_array>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	2600      	movs	r6, #0
 8005b7c:	4d0c      	ldr	r5, [pc, #48]	@ (8005bb0 <__libc_init_array+0x38>)
 8005b7e:	4c0d      	ldr	r4, [pc, #52]	@ (8005bb4 <__libc_init_array+0x3c>)
 8005b80:	1b64      	subs	r4, r4, r5
 8005b82:	10a4      	asrs	r4, r4, #2
 8005b84:	42a6      	cmp	r6, r4
 8005b86:	d109      	bne.n	8005b9c <__libc_init_array+0x24>
 8005b88:	f002 f86e 	bl	8007c68 <_init>
 8005b8c:	2600      	movs	r6, #0
 8005b8e:	4d0a      	ldr	r5, [pc, #40]	@ (8005bb8 <__libc_init_array+0x40>)
 8005b90:	4c0a      	ldr	r4, [pc, #40]	@ (8005bbc <__libc_init_array+0x44>)
 8005b92:	1b64      	subs	r4, r4, r5
 8005b94:	10a4      	asrs	r4, r4, #2
 8005b96:	42a6      	cmp	r6, r4
 8005b98:	d105      	bne.n	8005ba6 <__libc_init_array+0x2e>
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba0:	4798      	blx	r3
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	e7ee      	b.n	8005b84 <__libc_init_array+0xc>
 8005ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005baa:	4798      	blx	r3
 8005bac:	3601      	adds	r6, #1
 8005bae:	e7f2      	b.n	8005b96 <__libc_init_array+0x1e>
 8005bb0:	08008058 	.word	0x08008058
 8005bb4:	08008058 	.word	0x08008058
 8005bb8:	08008058 	.word	0x08008058
 8005bbc:	0800805c 	.word	0x0800805c

08005bc0 <__retarget_lock_init_recursive>:
 8005bc0:	4770      	bx	lr

08005bc2 <__retarget_lock_acquire_recursive>:
 8005bc2:	4770      	bx	lr

08005bc4 <__retarget_lock_release_recursive>:
 8005bc4:	4770      	bx	lr

08005bc6 <memchr>:
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	b2c9      	uxtb	r1, r1
 8005bcc:	4402      	add	r2, r0
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	d101      	bne.n	8005bd8 <memchr+0x12>
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	e003      	b.n	8005be0 <memchr+0x1a>
 8005bd8:	7804      	ldrb	r4, [r0, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	428c      	cmp	r4, r1
 8005bde:	d1f6      	bne.n	8005bce <memchr+0x8>
 8005be0:	bd10      	pop	{r4, pc}

08005be2 <memcpy>:
 8005be2:	440a      	add	r2, r1
 8005be4:	4291      	cmp	r1, r2
 8005be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bea:	d100      	bne.n	8005bee <memcpy+0xc>
 8005bec:	4770      	bx	lr
 8005bee:	b510      	push	{r4, lr}
 8005bf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bf4:	4291      	cmp	r1, r2
 8005bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bfa:	d1f9      	bne.n	8005bf0 <memcpy+0xe>
 8005bfc:	bd10      	pop	{r4, pc}

08005bfe <quorem>:
 8005bfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c02:	6903      	ldr	r3, [r0, #16]
 8005c04:	690c      	ldr	r4, [r1, #16]
 8005c06:	4607      	mov	r7, r0
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	db7e      	blt.n	8005d0a <quorem+0x10c>
 8005c0c:	3c01      	subs	r4, #1
 8005c0e:	00a3      	lsls	r3, r4, #2
 8005c10:	f100 0514 	add.w	r5, r0, #20
 8005c14:	f101 0814 	add.w	r8, r1, #20
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c34:	d32e      	bcc.n	8005c94 <quorem+0x96>
 8005c36:	f04f 0a00 	mov.w	sl, #0
 8005c3a:	46c4      	mov	ip, r8
 8005c3c:	46ae      	mov	lr, r5
 8005c3e:	46d3      	mov	fp, sl
 8005c40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c44:	b298      	uxth	r0, r3
 8005c46:	fb06 a000 	mla	r0, r6, r0, sl
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	0c02      	lsrs	r2, r0, #16
 8005c4e:	fb06 2303 	mla	r3, r6, r3, r2
 8005c52:	f8de 2000 	ldr.w	r2, [lr]
 8005c56:	b280      	uxth	r0, r0
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	1a12      	subs	r2, r2, r0
 8005c5c:	445a      	add	r2, fp
 8005c5e:	f8de 0000 	ldr.w	r0, [lr]
 8005c62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005c70:	b292      	uxth	r2, r2
 8005c72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c76:	45e1      	cmp	r9, ip
 8005c78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c7c:	f84e 2b04 	str.w	r2, [lr], #4
 8005c80:	d2de      	bcs.n	8005c40 <quorem+0x42>
 8005c82:	9b00      	ldr	r3, [sp, #0]
 8005c84:	58eb      	ldr	r3, [r5, r3]
 8005c86:	b92b      	cbnz	r3, 8005c94 <quorem+0x96>
 8005c88:	9b01      	ldr	r3, [sp, #4]
 8005c8a:	3b04      	subs	r3, #4
 8005c8c:	429d      	cmp	r5, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	d32f      	bcc.n	8005cf2 <quorem+0xf4>
 8005c92:	613c      	str	r4, [r7, #16]
 8005c94:	4638      	mov	r0, r7
 8005c96:	f001 f979 	bl	8006f8c <__mcmp>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	db25      	blt.n	8005cea <quorem+0xec>
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ca6:	f8d1 c000 	ldr.w	ip, [r1]
 8005caa:	fa1f fe82 	uxth.w	lr, r2
 8005cae:	fa1f f38c 	uxth.w	r3, ip
 8005cb2:	eba3 030e 	sub.w	r3, r3, lr
 8005cb6:	4403      	add	r3, r0
 8005cb8:	0c12      	lsrs	r2, r2, #16
 8005cba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005cbe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cc8:	45c1      	cmp	r9, r8
 8005cca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cce:	f841 3b04 	str.w	r3, [r1], #4
 8005cd2:	d2e6      	bcs.n	8005ca2 <quorem+0xa4>
 8005cd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cdc:	b922      	cbnz	r2, 8005ce8 <quorem+0xea>
 8005cde:	3b04      	subs	r3, #4
 8005ce0:	429d      	cmp	r5, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	d30b      	bcc.n	8005cfe <quorem+0x100>
 8005ce6:	613c      	str	r4, [r7, #16]
 8005ce8:	3601      	adds	r6, #1
 8005cea:	4630      	mov	r0, r6
 8005cec:	b003      	add	sp, #12
 8005cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	3b04      	subs	r3, #4
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	d1cb      	bne.n	8005c92 <quorem+0x94>
 8005cfa:	3c01      	subs	r4, #1
 8005cfc:	e7c6      	b.n	8005c8c <quorem+0x8e>
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	3b04      	subs	r3, #4
 8005d02:	2a00      	cmp	r2, #0
 8005d04:	d1ef      	bne.n	8005ce6 <quorem+0xe8>
 8005d06:	3c01      	subs	r4, #1
 8005d08:	e7ea      	b.n	8005ce0 <quorem+0xe2>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e7ee      	b.n	8005cec <quorem+0xee>
	...

08005d10 <_dtoa_r>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	4614      	mov	r4, r2
 8005d16:	461d      	mov	r5, r3
 8005d18:	69c7      	ldr	r7, [r0, #28]
 8005d1a:	b097      	sub	sp, #92	@ 0x5c
 8005d1c:	4683      	mov	fp, r0
 8005d1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d22:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005d24:	b97f      	cbnz	r7, 8005d46 <_dtoa_r+0x36>
 8005d26:	2010      	movs	r0, #16
 8005d28:	f000 fe02 	bl	8006930 <malloc>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005d32:	b920      	cbnz	r0, 8005d3e <_dtoa_r+0x2e>
 8005d34:	21ef      	movs	r1, #239	@ 0xef
 8005d36:	4ba8      	ldr	r3, [pc, #672]	@ (8005fd8 <_dtoa_r+0x2c8>)
 8005d38:	48a8      	ldr	r0, [pc, #672]	@ (8005fdc <_dtoa_r+0x2cc>)
 8005d3a:	f001 fc59 	bl	80075f0 <__assert_func>
 8005d3e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d42:	6007      	str	r7, [r0, #0]
 8005d44:	60c7      	str	r7, [r0, #12]
 8005d46:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d4a:	6819      	ldr	r1, [r3, #0]
 8005d4c:	b159      	cbz	r1, 8005d66 <_dtoa_r+0x56>
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	2301      	movs	r3, #1
 8005d52:	4093      	lsls	r3, r2
 8005d54:	604a      	str	r2, [r1, #4]
 8005d56:	608b      	str	r3, [r1, #8]
 8005d58:	4658      	mov	r0, fp
 8005d5a:	f000 fedf 	bl	8006b1c <_Bfree>
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	1e2b      	subs	r3, r5, #0
 8005d68:	bfaf      	iteee	ge
 8005d6a:	2300      	movge	r3, #0
 8005d6c:	2201      	movlt	r2, #1
 8005d6e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d72:	9303      	strlt	r3, [sp, #12]
 8005d74:	bfa8      	it	ge
 8005d76:	6033      	strge	r3, [r6, #0]
 8005d78:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d7c:	4b98      	ldr	r3, [pc, #608]	@ (8005fe0 <_dtoa_r+0x2d0>)
 8005d7e:	bfb8      	it	lt
 8005d80:	6032      	strlt	r2, [r6, #0]
 8005d82:	ea33 0308 	bics.w	r3, r3, r8
 8005d86:	d112      	bne.n	8005dae <_dtoa_r+0x9e>
 8005d88:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005d8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005d94:	4323      	orrs	r3, r4
 8005d96:	f000 8550 	beq.w	800683a <_dtoa_r+0xb2a>
 8005d9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d9c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005fe4 <_dtoa_r+0x2d4>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8552 	beq.w	800684a <_dtoa_r+0xb3a>
 8005da6:	f10a 0303 	add.w	r3, sl, #3
 8005daa:	f000 bd4c 	b.w	8006846 <_dtoa_r+0xb36>
 8005dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005db2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f7fa fdf3 	bl	80009a8 <__aeabi_dcmpeq>
 8005dc2:	4607      	mov	r7, r0
 8005dc4:	b158      	cbz	r0, 8005dde <_dtoa_r+0xce>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005dce:	b113      	cbz	r3, 8005dd6 <_dtoa_r+0xc6>
 8005dd0:	4b85      	ldr	r3, [pc, #532]	@ (8005fe8 <_dtoa_r+0x2d8>)
 8005dd2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005fec <_dtoa_r+0x2dc>
 8005dda:	f000 bd36 	b.w	800684a <_dtoa_r+0xb3a>
 8005dde:	ab14      	add	r3, sp, #80	@ 0x50
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	ab15      	add	r3, sp, #84	@ 0x54
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	4658      	mov	r0, fp
 8005de8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005dec:	f001 f97e 	bl	80070ec <__d2b>
 8005df0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005df4:	4681      	mov	r9, r0
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	d077      	beq.n	8005eea <_dtoa_r+0x1da>
 8005dfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e10:	9712      	str	r7, [sp, #72]	@ 0x48
 8005e12:	4619      	mov	r1, r3
 8005e14:	2200      	movs	r2, #0
 8005e16:	4b76      	ldr	r3, [pc, #472]	@ (8005ff0 <_dtoa_r+0x2e0>)
 8005e18:	f7fa f9a6 	bl	8000168 <__aeabi_dsub>
 8005e1c:	a368      	add	r3, pc, #416	@ (adr r3, 8005fc0 <_dtoa_r+0x2b0>)
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f7fa fb59 	bl	80004d8 <__aeabi_dmul>
 8005e26:	a368      	add	r3, pc, #416	@ (adr r3, 8005fc8 <_dtoa_r+0x2b8>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f7fa f99e 	bl	800016c <__adddf3>
 8005e30:	4604      	mov	r4, r0
 8005e32:	4630      	mov	r0, r6
 8005e34:	460d      	mov	r5, r1
 8005e36:	f7fa fae5 	bl	8000404 <__aeabi_i2d>
 8005e3a:	a365      	add	r3, pc, #404	@ (adr r3, 8005fd0 <_dtoa_r+0x2c0>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f7fa fb4a 	bl	80004d8 <__aeabi_dmul>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4620      	mov	r0, r4
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	f7fa f98e 	bl	800016c <__adddf3>
 8005e50:	4604      	mov	r4, r0
 8005e52:	460d      	mov	r5, r1
 8005e54:	f7fa fdf0 	bl	8000a38 <__aeabi_d2iz>
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4607      	mov	r7, r0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4620      	mov	r0, r4
 8005e60:	4629      	mov	r1, r5
 8005e62:	f7fa fdab 	bl	80009bc <__aeabi_dcmplt>
 8005e66:	b140      	cbz	r0, 8005e7a <_dtoa_r+0x16a>
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f7fa facb 	bl	8000404 <__aeabi_i2d>
 8005e6e:	4622      	mov	r2, r4
 8005e70:	462b      	mov	r3, r5
 8005e72:	f7fa fd99 	bl	80009a8 <__aeabi_dcmpeq>
 8005e76:	b900      	cbnz	r0, 8005e7a <_dtoa_r+0x16a>
 8005e78:	3f01      	subs	r7, #1
 8005e7a:	2f16      	cmp	r7, #22
 8005e7c:	d853      	bhi.n	8005f26 <_dtoa_r+0x216>
 8005e7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e82:	4b5c      	ldr	r3, [pc, #368]	@ (8005ff4 <_dtoa_r+0x2e4>)
 8005e84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa fd96 	bl	80009bc <__aeabi_dcmplt>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d04a      	beq.n	8005f2a <_dtoa_r+0x21a>
 8005e94:	2300      	movs	r3, #0
 8005e96:	3f01      	subs	r7, #1
 8005e98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e9c:	1b9b      	subs	r3, r3, r6
 8005e9e:	1e5a      	subs	r2, r3, #1
 8005ea0:	bf46      	itte	mi
 8005ea2:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ea6:	2300      	movmi	r3, #0
 8005ea8:	f04f 0800 	movpl.w	r8, #0
 8005eac:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eae:	bf48      	it	mi
 8005eb0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005eb2:	2f00      	cmp	r7, #0
 8005eb4:	db3b      	blt.n	8005f2e <_dtoa_r+0x21e>
 8005eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005eba:	443b      	add	r3, r7
 8005ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ec2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ec4:	2b09      	cmp	r3, #9
 8005ec6:	d866      	bhi.n	8005f96 <_dtoa_r+0x286>
 8005ec8:	2b05      	cmp	r3, #5
 8005eca:	bfc4      	itt	gt
 8005ecc:	3b04      	subgt	r3, #4
 8005ece:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005ed0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ed2:	bfc8      	it	gt
 8005ed4:	2400      	movgt	r4, #0
 8005ed6:	f1a3 0302 	sub.w	r3, r3, #2
 8005eda:	bfd8      	it	le
 8005edc:	2401      	movle	r4, #1
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d864      	bhi.n	8005fac <_dtoa_r+0x29c>
 8005ee2:	e8df f003 	tbb	[pc, r3]
 8005ee6:	382b      	.short	0x382b
 8005ee8:	5636      	.short	0x5636
 8005eea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005eee:	441e      	add	r6, r3
 8005ef0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	bfc1      	itttt	gt
 8005ef8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005efc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005f00:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f04:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f08:	bfd6      	itet	le
 8005f0a:	f1c3 0320 	rsble	r3, r3, #32
 8005f0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f12:	fa04 f003 	lslle.w	r0, r4, r3
 8005f16:	f7fa fa65 	bl	80003e4 <__aeabi_ui2d>
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f20:	3e01      	subs	r6, #1
 8005f22:	9212      	str	r2, [sp, #72]	@ 0x48
 8005f24:	e775      	b.n	8005e12 <_dtoa_r+0x102>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e7b6      	b.n	8005e98 <_dtoa_r+0x188>
 8005f2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005f2c:	e7b5      	b.n	8005e9a <_dtoa_r+0x18a>
 8005f2e:	427b      	negs	r3, r7
 8005f30:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f32:	2300      	movs	r3, #0
 8005f34:	eba8 0807 	sub.w	r8, r8, r7
 8005f38:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f3a:	e7c2      	b.n	8005ec2 <_dtoa_r+0x1b2>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	dc35      	bgt.n	8005fb2 <_dtoa_r+0x2a2>
 8005f46:	2301      	movs	r3, #1
 8005f48:	461a      	mov	r2, r3
 8005f4a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005f4e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005f50:	e00b      	b.n	8005f6a <_dtoa_r+0x25a>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e7f3      	b.n	8005f3e <_dtoa_r+0x22e>
 8005f56:	2300      	movs	r3, #0
 8005f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	9308      	str	r3, [sp, #32]
 8005f60:	3301      	adds	r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	9307      	str	r3, [sp, #28]
 8005f66:	bfb8      	it	lt
 8005f68:	2301      	movlt	r3, #1
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005f72:	f102 0514 	add.w	r5, r2, #20
 8005f76:	429d      	cmp	r5, r3
 8005f78:	d91f      	bls.n	8005fba <_dtoa_r+0x2aa>
 8005f7a:	6041      	str	r1, [r0, #4]
 8005f7c:	4658      	mov	r0, fp
 8005f7e:	f000 fd8d 	bl	8006a9c <_Balloc>
 8005f82:	4682      	mov	sl, r0
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d139      	bne.n	8005ffc <_dtoa_r+0x2ec>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff8 <_dtoa_r+0x2e8>)
 8005f90:	e6d2      	b.n	8005d38 <_dtoa_r+0x28>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e7e0      	b.n	8005f58 <_dtoa_r+0x248>
 8005f96:	2401      	movs	r4, #1
 8005f98:	2300      	movs	r3, #0
 8005f9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005f9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005fa8:	2312      	movs	r3, #18
 8005faa:	e7d0      	b.n	8005f4e <_dtoa_r+0x23e>
 8005fac:	2301      	movs	r3, #1
 8005fae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fb0:	e7f5      	b.n	8005f9e <_dtoa_r+0x28e>
 8005fb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005fb8:	e7d7      	b.n	8005f6a <_dtoa_r+0x25a>
 8005fba:	3101      	adds	r1, #1
 8005fbc:	0052      	lsls	r2, r2, #1
 8005fbe:	e7d8      	b.n	8005f72 <_dtoa_r+0x262>
 8005fc0:	636f4361 	.word	0x636f4361
 8005fc4:	3fd287a7 	.word	0x3fd287a7
 8005fc8:	8b60c8b3 	.word	0x8b60c8b3
 8005fcc:	3fc68a28 	.word	0x3fc68a28
 8005fd0:	509f79fb 	.word	0x509f79fb
 8005fd4:	3fd34413 	.word	0x3fd34413
 8005fd8:	08007d1f 	.word	0x08007d1f
 8005fdc:	08007d36 	.word	0x08007d36
 8005fe0:	7ff00000 	.word	0x7ff00000
 8005fe4:	08007d1b 	.word	0x08007d1b
 8005fe8:	08007cef 	.word	0x08007cef
 8005fec:	08007cee 	.word	0x08007cee
 8005ff0:	3ff80000 	.word	0x3ff80000
 8005ff4:	08007e30 	.word	0x08007e30
 8005ff8:	08007d8e 	.word	0x08007d8e
 8005ffc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006000:	6018      	str	r0, [r3, #0]
 8006002:	9b07      	ldr	r3, [sp, #28]
 8006004:	2b0e      	cmp	r3, #14
 8006006:	f200 80a4 	bhi.w	8006152 <_dtoa_r+0x442>
 800600a:	2c00      	cmp	r4, #0
 800600c:	f000 80a1 	beq.w	8006152 <_dtoa_r+0x442>
 8006010:	2f00      	cmp	r7, #0
 8006012:	dd33      	ble.n	800607c <_dtoa_r+0x36c>
 8006014:	4b86      	ldr	r3, [pc, #536]	@ (8006230 <_dtoa_r+0x520>)
 8006016:	f007 020f 	and.w	r2, r7, #15
 800601a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800601e:	05f8      	lsls	r0, r7, #23
 8006020:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006024:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006028:	ea4f 1427 	mov.w	r4, r7, asr #4
 800602c:	d516      	bpl.n	800605c <_dtoa_r+0x34c>
 800602e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006032:	4b80      	ldr	r3, [pc, #512]	@ (8006234 <_dtoa_r+0x524>)
 8006034:	2603      	movs	r6, #3
 8006036:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800603a:	f7fa fb77 	bl	800072c <__aeabi_ddiv>
 800603e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006042:	f004 040f 	and.w	r4, r4, #15
 8006046:	4d7b      	ldr	r5, [pc, #492]	@ (8006234 <_dtoa_r+0x524>)
 8006048:	b954      	cbnz	r4, 8006060 <_dtoa_r+0x350>
 800604a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800604e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006052:	f7fa fb6b 	bl	800072c <__aeabi_ddiv>
 8006056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800605a:	e028      	b.n	80060ae <_dtoa_r+0x39e>
 800605c:	2602      	movs	r6, #2
 800605e:	e7f2      	b.n	8006046 <_dtoa_r+0x336>
 8006060:	07e1      	lsls	r1, r4, #31
 8006062:	d508      	bpl.n	8006076 <_dtoa_r+0x366>
 8006064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006068:	e9d5 2300 	ldrd	r2, r3, [r5]
 800606c:	f7fa fa34 	bl	80004d8 <__aeabi_dmul>
 8006070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006074:	3601      	adds	r6, #1
 8006076:	1064      	asrs	r4, r4, #1
 8006078:	3508      	adds	r5, #8
 800607a:	e7e5      	b.n	8006048 <_dtoa_r+0x338>
 800607c:	f000 80d2 	beq.w	8006224 <_dtoa_r+0x514>
 8006080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006084:	427c      	negs	r4, r7
 8006086:	4b6a      	ldr	r3, [pc, #424]	@ (8006230 <_dtoa_r+0x520>)
 8006088:	f004 020f 	and.w	r2, r4, #15
 800608c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f7fa fa20 	bl	80004d8 <__aeabi_dmul>
 8006098:	2602      	movs	r6, #2
 800609a:	2300      	movs	r3, #0
 800609c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060a0:	4d64      	ldr	r5, [pc, #400]	@ (8006234 <_dtoa_r+0x524>)
 80060a2:	1124      	asrs	r4, r4, #4
 80060a4:	2c00      	cmp	r4, #0
 80060a6:	f040 80b2 	bne.w	800620e <_dtoa_r+0x4fe>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1d3      	bne.n	8006056 <_dtoa_r+0x346>
 80060ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80b7 	beq.w	8006228 <_dtoa_r+0x518>
 80060ba:	2200      	movs	r2, #0
 80060bc:	4620      	mov	r0, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	4b5d      	ldr	r3, [pc, #372]	@ (8006238 <_dtoa_r+0x528>)
 80060c2:	f7fa fc7b 	bl	80009bc <__aeabi_dcmplt>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f000 80ae 	beq.w	8006228 <_dtoa_r+0x518>
 80060cc:	9b07      	ldr	r3, [sp, #28]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 80aa 	beq.w	8006228 <_dtoa_r+0x518>
 80060d4:	9b08      	ldr	r3, [sp, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	dd37      	ble.n	800614a <_dtoa_r+0x43a>
 80060da:	1e7b      	subs	r3, r7, #1
 80060dc:	4620      	mov	r0, r4
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	2200      	movs	r2, #0
 80060e2:	4629      	mov	r1, r5
 80060e4:	4b55      	ldr	r3, [pc, #340]	@ (800623c <_dtoa_r+0x52c>)
 80060e6:	f7fa f9f7 	bl	80004d8 <__aeabi_dmul>
 80060ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060ee:	9c08      	ldr	r4, [sp, #32]
 80060f0:	3601      	adds	r6, #1
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7fa f986 	bl	8000404 <__aeabi_i2d>
 80060f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060fc:	f7fa f9ec 	bl	80004d8 <__aeabi_dmul>
 8006100:	2200      	movs	r2, #0
 8006102:	4b4f      	ldr	r3, [pc, #316]	@ (8006240 <_dtoa_r+0x530>)
 8006104:	f7fa f832 	bl	800016c <__adddf3>
 8006108:	4605      	mov	r5, r0
 800610a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800610e:	2c00      	cmp	r4, #0
 8006110:	f040 809a 	bne.w	8006248 <_dtoa_r+0x538>
 8006114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006118:	2200      	movs	r2, #0
 800611a:	4b4a      	ldr	r3, [pc, #296]	@ (8006244 <_dtoa_r+0x534>)
 800611c:	f7fa f824 	bl	8000168 <__aeabi_dsub>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006128:	462a      	mov	r2, r5
 800612a:	4633      	mov	r3, r6
 800612c:	f7fa fc64 	bl	80009f8 <__aeabi_dcmpgt>
 8006130:	2800      	cmp	r0, #0
 8006132:	f040 828e 	bne.w	8006652 <_dtoa_r+0x942>
 8006136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800613a:	462a      	mov	r2, r5
 800613c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006140:	f7fa fc3c 	bl	80009bc <__aeabi_dcmplt>
 8006144:	2800      	cmp	r0, #0
 8006146:	f040 8127 	bne.w	8006398 <_dtoa_r+0x688>
 800614a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800614e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006152:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006154:	2b00      	cmp	r3, #0
 8006156:	f2c0 8163 	blt.w	8006420 <_dtoa_r+0x710>
 800615a:	2f0e      	cmp	r7, #14
 800615c:	f300 8160 	bgt.w	8006420 <_dtoa_r+0x710>
 8006160:	4b33      	ldr	r3, [pc, #204]	@ (8006230 <_dtoa_r+0x520>)
 8006162:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006166:	e9d3 3400 	ldrd	r3, r4, [r3]
 800616a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800616e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006170:	2b00      	cmp	r3, #0
 8006172:	da03      	bge.n	800617c <_dtoa_r+0x46c>
 8006174:	9b07      	ldr	r3, [sp, #28]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f340 8100 	ble.w	800637c <_dtoa_r+0x66c>
 800617c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006180:	4656      	mov	r6, sl
 8006182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa facf 	bl	800072c <__aeabi_ddiv>
 800618e:	f7fa fc53 	bl	8000a38 <__aeabi_d2iz>
 8006192:	4680      	mov	r8, r0
 8006194:	f7fa f936 	bl	8000404 <__aeabi_i2d>
 8006198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800619c:	f7fa f99c 	bl	80004d8 <__aeabi_dmul>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4620      	mov	r0, r4
 80061a6:	4629      	mov	r1, r5
 80061a8:	f7f9 ffde 	bl	8000168 <__aeabi_dsub>
 80061ac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80061b0:	9d07      	ldr	r5, [sp, #28]
 80061b2:	f806 4b01 	strb.w	r4, [r6], #1
 80061b6:	eba6 040a 	sub.w	r4, r6, sl
 80061ba:	42a5      	cmp	r5, r4
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	f040 8116 	bne.w	80063f0 <_dtoa_r+0x6e0>
 80061c4:	f7f9 ffd2 	bl	800016c <__adddf3>
 80061c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061cc:	4604      	mov	r4, r0
 80061ce:	460d      	mov	r5, r1
 80061d0:	f7fa fc12 	bl	80009f8 <__aeabi_dcmpgt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f040 80f8 	bne.w	80063ca <_dtoa_r+0x6ba>
 80061da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061de:	4620      	mov	r0, r4
 80061e0:	4629      	mov	r1, r5
 80061e2:	f7fa fbe1 	bl	80009a8 <__aeabi_dcmpeq>
 80061e6:	b118      	cbz	r0, 80061f0 <_dtoa_r+0x4e0>
 80061e8:	f018 0f01 	tst.w	r8, #1
 80061ec:	f040 80ed 	bne.w	80063ca <_dtoa_r+0x6ba>
 80061f0:	4649      	mov	r1, r9
 80061f2:	4658      	mov	r0, fp
 80061f4:	f000 fc92 	bl	8006b1c <_Bfree>
 80061f8:	2300      	movs	r3, #0
 80061fa:	7033      	strb	r3, [r6, #0]
 80061fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80061fe:	3701      	adds	r7, #1
 8006200:	601f      	str	r7, [r3, #0]
 8006202:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8320 	beq.w	800684a <_dtoa_r+0xb3a>
 800620a:	601e      	str	r6, [r3, #0]
 800620c:	e31d      	b.n	800684a <_dtoa_r+0xb3a>
 800620e:	07e2      	lsls	r2, r4, #31
 8006210:	d505      	bpl.n	800621e <_dtoa_r+0x50e>
 8006212:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006216:	f7fa f95f 	bl	80004d8 <__aeabi_dmul>
 800621a:	2301      	movs	r3, #1
 800621c:	3601      	adds	r6, #1
 800621e:	1064      	asrs	r4, r4, #1
 8006220:	3508      	adds	r5, #8
 8006222:	e73f      	b.n	80060a4 <_dtoa_r+0x394>
 8006224:	2602      	movs	r6, #2
 8006226:	e742      	b.n	80060ae <_dtoa_r+0x39e>
 8006228:	9c07      	ldr	r4, [sp, #28]
 800622a:	9704      	str	r7, [sp, #16]
 800622c:	e761      	b.n	80060f2 <_dtoa_r+0x3e2>
 800622e:	bf00      	nop
 8006230:	08007e30 	.word	0x08007e30
 8006234:	08007e08 	.word	0x08007e08
 8006238:	3ff00000 	.word	0x3ff00000
 800623c:	40240000 	.word	0x40240000
 8006240:	401c0000 	.word	0x401c0000
 8006244:	40140000 	.word	0x40140000
 8006248:	4b70      	ldr	r3, [pc, #448]	@ (800640c <_dtoa_r+0x6fc>)
 800624a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800624c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006250:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006254:	4454      	add	r4, sl
 8006256:	2900      	cmp	r1, #0
 8006258:	d045      	beq.n	80062e6 <_dtoa_r+0x5d6>
 800625a:	2000      	movs	r0, #0
 800625c:	496c      	ldr	r1, [pc, #432]	@ (8006410 <_dtoa_r+0x700>)
 800625e:	f7fa fa65 	bl	800072c <__aeabi_ddiv>
 8006262:	4633      	mov	r3, r6
 8006264:	462a      	mov	r2, r5
 8006266:	f7f9 ff7f 	bl	8000168 <__aeabi_dsub>
 800626a:	4656      	mov	r6, sl
 800626c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006274:	f7fa fbe0 	bl	8000a38 <__aeabi_d2iz>
 8006278:	4605      	mov	r5, r0
 800627a:	f7fa f8c3 	bl	8000404 <__aeabi_i2d>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006286:	f7f9 ff6f 	bl	8000168 <__aeabi_dsub>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	3530      	adds	r5, #48	@ 0x30
 8006290:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006294:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006298:	f806 5b01 	strb.w	r5, [r6], #1
 800629c:	f7fa fb8e 	bl	80009bc <__aeabi_dcmplt>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d163      	bne.n	800636c <_dtoa_r+0x65c>
 80062a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062a8:	2000      	movs	r0, #0
 80062aa:	495a      	ldr	r1, [pc, #360]	@ (8006414 <_dtoa_r+0x704>)
 80062ac:	f7f9 ff5c 	bl	8000168 <__aeabi_dsub>
 80062b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062b4:	f7fa fb82 	bl	80009bc <__aeabi_dcmplt>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	f040 8087 	bne.w	80063cc <_dtoa_r+0x6bc>
 80062be:	42a6      	cmp	r6, r4
 80062c0:	f43f af43 	beq.w	800614a <_dtoa_r+0x43a>
 80062c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80062c8:	2200      	movs	r2, #0
 80062ca:	4b53      	ldr	r3, [pc, #332]	@ (8006418 <_dtoa_r+0x708>)
 80062cc:	f7fa f904 	bl	80004d8 <__aeabi_dmul>
 80062d0:	2200      	movs	r2, #0
 80062d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062da:	4b4f      	ldr	r3, [pc, #316]	@ (8006418 <_dtoa_r+0x708>)
 80062dc:	f7fa f8fc 	bl	80004d8 <__aeabi_dmul>
 80062e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e4:	e7c4      	b.n	8006270 <_dtoa_r+0x560>
 80062e6:	4631      	mov	r1, r6
 80062e8:	4628      	mov	r0, r5
 80062ea:	f7fa f8f5 	bl	80004d8 <__aeabi_dmul>
 80062ee:	4656      	mov	r6, sl
 80062f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062f4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80062f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062fa:	f7fa fb9d 	bl	8000a38 <__aeabi_d2iz>
 80062fe:	4605      	mov	r5, r0
 8006300:	f7fa f880 	bl	8000404 <__aeabi_i2d>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800630c:	f7f9 ff2c 	bl	8000168 <__aeabi_dsub>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	3530      	adds	r5, #48	@ 0x30
 8006316:	f806 5b01 	strb.w	r5, [r6], #1
 800631a:	42a6      	cmp	r6, r4
 800631c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	d124      	bne.n	8006370 <_dtoa_r+0x660>
 8006326:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800632a:	4b39      	ldr	r3, [pc, #228]	@ (8006410 <_dtoa_r+0x700>)
 800632c:	f7f9 ff1e 	bl	800016c <__adddf3>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006338:	f7fa fb5e 	bl	80009f8 <__aeabi_dcmpgt>
 800633c:	2800      	cmp	r0, #0
 800633e:	d145      	bne.n	80063cc <_dtoa_r+0x6bc>
 8006340:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006344:	2000      	movs	r0, #0
 8006346:	4932      	ldr	r1, [pc, #200]	@ (8006410 <_dtoa_r+0x700>)
 8006348:	f7f9 ff0e 	bl	8000168 <__aeabi_dsub>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006354:	f7fa fb32 	bl	80009bc <__aeabi_dcmplt>
 8006358:	2800      	cmp	r0, #0
 800635a:	f43f aef6 	beq.w	800614a <_dtoa_r+0x43a>
 800635e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006360:	1e73      	subs	r3, r6, #1
 8006362:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006364:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006368:	2b30      	cmp	r3, #48	@ 0x30
 800636a:	d0f8      	beq.n	800635e <_dtoa_r+0x64e>
 800636c:	9f04      	ldr	r7, [sp, #16]
 800636e:	e73f      	b.n	80061f0 <_dtoa_r+0x4e0>
 8006370:	4b29      	ldr	r3, [pc, #164]	@ (8006418 <_dtoa_r+0x708>)
 8006372:	f7fa f8b1 	bl	80004d8 <__aeabi_dmul>
 8006376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800637a:	e7bc      	b.n	80062f6 <_dtoa_r+0x5e6>
 800637c:	d10c      	bne.n	8006398 <_dtoa_r+0x688>
 800637e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006382:	2200      	movs	r2, #0
 8006384:	4b25      	ldr	r3, [pc, #148]	@ (800641c <_dtoa_r+0x70c>)
 8006386:	f7fa f8a7 	bl	80004d8 <__aeabi_dmul>
 800638a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800638e:	f7fa fb29 	bl	80009e4 <__aeabi_dcmpge>
 8006392:	2800      	cmp	r0, #0
 8006394:	f000 815b 	beq.w	800664e <_dtoa_r+0x93e>
 8006398:	2400      	movs	r4, #0
 800639a:	4625      	mov	r5, r4
 800639c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800639e:	4656      	mov	r6, sl
 80063a0:	43db      	mvns	r3, r3
 80063a2:	9304      	str	r3, [sp, #16]
 80063a4:	2700      	movs	r7, #0
 80063a6:	4621      	mov	r1, r4
 80063a8:	4658      	mov	r0, fp
 80063aa:	f000 fbb7 	bl	8006b1c <_Bfree>
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	d0dc      	beq.n	800636c <_dtoa_r+0x65c>
 80063b2:	b12f      	cbz	r7, 80063c0 <_dtoa_r+0x6b0>
 80063b4:	42af      	cmp	r7, r5
 80063b6:	d003      	beq.n	80063c0 <_dtoa_r+0x6b0>
 80063b8:	4639      	mov	r1, r7
 80063ba:	4658      	mov	r0, fp
 80063bc:	f000 fbae 	bl	8006b1c <_Bfree>
 80063c0:	4629      	mov	r1, r5
 80063c2:	4658      	mov	r0, fp
 80063c4:	f000 fbaa 	bl	8006b1c <_Bfree>
 80063c8:	e7d0      	b.n	800636c <_dtoa_r+0x65c>
 80063ca:	9704      	str	r7, [sp, #16]
 80063cc:	4633      	mov	r3, r6
 80063ce:	461e      	mov	r6, r3
 80063d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063d4:	2a39      	cmp	r2, #57	@ 0x39
 80063d6:	d107      	bne.n	80063e8 <_dtoa_r+0x6d8>
 80063d8:	459a      	cmp	sl, r3
 80063da:	d1f8      	bne.n	80063ce <_dtoa_r+0x6be>
 80063dc:	9a04      	ldr	r2, [sp, #16]
 80063de:	3201      	adds	r2, #1
 80063e0:	9204      	str	r2, [sp, #16]
 80063e2:	2230      	movs	r2, #48	@ 0x30
 80063e4:	f88a 2000 	strb.w	r2, [sl]
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	3201      	adds	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e7bd      	b.n	800636c <_dtoa_r+0x65c>
 80063f0:	2200      	movs	r2, #0
 80063f2:	4b09      	ldr	r3, [pc, #36]	@ (8006418 <_dtoa_r+0x708>)
 80063f4:	f7fa f870 	bl	80004d8 <__aeabi_dmul>
 80063f8:	2200      	movs	r2, #0
 80063fa:	2300      	movs	r3, #0
 80063fc:	4604      	mov	r4, r0
 80063fe:	460d      	mov	r5, r1
 8006400:	f7fa fad2 	bl	80009a8 <__aeabi_dcmpeq>
 8006404:	2800      	cmp	r0, #0
 8006406:	f43f aebc 	beq.w	8006182 <_dtoa_r+0x472>
 800640a:	e6f1      	b.n	80061f0 <_dtoa_r+0x4e0>
 800640c:	08007e30 	.word	0x08007e30
 8006410:	3fe00000 	.word	0x3fe00000
 8006414:	3ff00000 	.word	0x3ff00000
 8006418:	40240000 	.word	0x40240000
 800641c:	40140000 	.word	0x40140000
 8006420:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006422:	2a00      	cmp	r2, #0
 8006424:	f000 80db 	beq.w	80065de <_dtoa_r+0x8ce>
 8006428:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800642a:	2a01      	cmp	r2, #1
 800642c:	f300 80bf 	bgt.w	80065ae <_dtoa_r+0x89e>
 8006430:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006432:	2a00      	cmp	r2, #0
 8006434:	f000 80b7 	beq.w	80065a6 <_dtoa_r+0x896>
 8006438:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800643c:	4646      	mov	r6, r8
 800643e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006440:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006442:	2101      	movs	r1, #1
 8006444:	441a      	add	r2, r3
 8006446:	4658      	mov	r0, fp
 8006448:	4498      	add	r8, r3
 800644a:	9209      	str	r2, [sp, #36]	@ 0x24
 800644c:	f000 fc1a 	bl	8006c84 <__i2b>
 8006450:	4605      	mov	r5, r0
 8006452:	b15e      	cbz	r6, 800646c <_dtoa_r+0x75c>
 8006454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	dd08      	ble.n	800646c <_dtoa_r+0x75c>
 800645a:	42b3      	cmp	r3, r6
 800645c:	bfa8      	it	ge
 800645e:	4633      	movge	r3, r6
 8006460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006462:	eba8 0803 	sub.w	r8, r8, r3
 8006466:	1af6      	subs	r6, r6, r3
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	9309      	str	r3, [sp, #36]	@ 0x24
 800646c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800646e:	b1f3      	cbz	r3, 80064ae <_dtoa_r+0x79e>
 8006470:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 80b7 	beq.w	80065e6 <_dtoa_r+0x8d6>
 8006478:	b18c      	cbz	r4, 800649e <_dtoa_r+0x78e>
 800647a:	4629      	mov	r1, r5
 800647c:	4622      	mov	r2, r4
 800647e:	4658      	mov	r0, fp
 8006480:	f000 fcbe 	bl	8006e00 <__pow5mult>
 8006484:	464a      	mov	r2, r9
 8006486:	4601      	mov	r1, r0
 8006488:	4605      	mov	r5, r0
 800648a:	4658      	mov	r0, fp
 800648c:	f000 fc10 	bl	8006cb0 <__multiply>
 8006490:	4649      	mov	r1, r9
 8006492:	9004      	str	r0, [sp, #16]
 8006494:	4658      	mov	r0, fp
 8006496:	f000 fb41 	bl	8006b1c <_Bfree>
 800649a:	9b04      	ldr	r3, [sp, #16]
 800649c:	4699      	mov	r9, r3
 800649e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064a0:	1b1a      	subs	r2, r3, r4
 80064a2:	d004      	beq.n	80064ae <_dtoa_r+0x79e>
 80064a4:	4649      	mov	r1, r9
 80064a6:	4658      	mov	r0, fp
 80064a8:	f000 fcaa 	bl	8006e00 <__pow5mult>
 80064ac:	4681      	mov	r9, r0
 80064ae:	2101      	movs	r1, #1
 80064b0:	4658      	mov	r0, fp
 80064b2:	f000 fbe7 	bl	8006c84 <__i2b>
 80064b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064b8:	4604      	mov	r4, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 81c9 	beq.w	8006852 <_dtoa_r+0xb42>
 80064c0:	461a      	mov	r2, r3
 80064c2:	4601      	mov	r1, r0
 80064c4:	4658      	mov	r0, fp
 80064c6:	f000 fc9b 	bl	8006e00 <__pow5mult>
 80064ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064cc:	4604      	mov	r4, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	f300 808f 	bgt.w	80065f2 <_dtoa_r+0x8e2>
 80064d4:	9b02      	ldr	r3, [sp, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f040 8087 	bne.w	80065ea <_dtoa_r+0x8da>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 8083 	bne.w	80065ee <_dtoa_r+0x8de>
 80064e8:	9b03      	ldr	r3, [sp, #12]
 80064ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064ee:	0d1b      	lsrs	r3, r3, #20
 80064f0:	051b      	lsls	r3, r3, #20
 80064f2:	b12b      	cbz	r3, 8006500 <_dtoa_r+0x7f0>
 80064f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f6:	f108 0801 	add.w	r8, r8, #1
 80064fa:	3301      	adds	r3, #1
 80064fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80064fe:	2301      	movs	r3, #1
 8006500:	930a      	str	r3, [sp, #40]	@ 0x28
 8006502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 81aa 	beq.w	800685e <_dtoa_r+0xb4e>
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006510:	6918      	ldr	r0, [r3, #16]
 8006512:	f000 fb6b 	bl	8006bec <__hi0bits>
 8006516:	f1c0 0020 	rsb	r0, r0, #32
 800651a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800651c:	4418      	add	r0, r3
 800651e:	f010 001f 	ands.w	r0, r0, #31
 8006522:	d071      	beq.n	8006608 <_dtoa_r+0x8f8>
 8006524:	f1c0 0320 	rsb	r3, r0, #32
 8006528:	2b04      	cmp	r3, #4
 800652a:	dd65      	ble.n	80065f8 <_dtoa_r+0x8e8>
 800652c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800652e:	f1c0 001c 	rsb	r0, r0, #28
 8006532:	4403      	add	r3, r0
 8006534:	4480      	add	r8, r0
 8006536:	4406      	add	r6, r0
 8006538:	9309      	str	r3, [sp, #36]	@ 0x24
 800653a:	f1b8 0f00 	cmp.w	r8, #0
 800653e:	dd05      	ble.n	800654c <_dtoa_r+0x83c>
 8006540:	4649      	mov	r1, r9
 8006542:	4642      	mov	r2, r8
 8006544:	4658      	mov	r0, fp
 8006546:	f000 fcb5 	bl	8006eb4 <__lshift>
 800654a:	4681      	mov	r9, r0
 800654c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	dd05      	ble.n	800655e <_dtoa_r+0x84e>
 8006552:	4621      	mov	r1, r4
 8006554:	461a      	mov	r2, r3
 8006556:	4658      	mov	r0, fp
 8006558:	f000 fcac 	bl	8006eb4 <__lshift>
 800655c:	4604      	mov	r4, r0
 800655e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d053      	beq.n	800660c <_dtoa_r+0x8fc>
 8006564:	4621      	mov	r1, r4
 8006566:	4648      	mov	r0, r9
 8006568:	f000 fd10 	bl	8006f8c <__mcmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	da4d      	bge.n	800660c <_dtoa_r+0x8fc>
 8006570:	1e7b      	subs	r3, r7, #1
 8006572:	4649      	mov	r1, r9
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	220a      	movs	r2, #10
 8006578:	2300      	movs	r3, #0
 800657a:	4658      	mov	r0, fp
 800657c:	f000 faf0 	bl	8006b60 <__multadd>
 8006580:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006582:	4681      	mov	r9, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 816c 	beq.w	8006862 <_dtoa_r+0xb52>
 800658a:	2300      	movs	r3, #0
 800658c:	4629      	mov	r1, r5
 800658e:	220a      	movs	r2, #10
 8006590:	4658      	mov	r0, fp
 8006592:	f000 fae5 	bl	8006b60 <__multadd>
 8006596:	9b08      	ldr	r3, [sp, #32]
 8006598:	4605      	mov	r5, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	dc61      	bgt.n	8006662 <_dtoa_r+0x952>
 800659e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	dc3b      	bgt.n	800661c <_dtoa_r+0x90c>
 80065a4:	e05d      	b.n	8006662 <_dtoa_r+0x952>
 80065a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80065ac:	e746      	b.n	800643c <_dtoa_r+0x72c>
 80065ae:	9b07      	ldr	r3, [sp, #28]
 80065b0:	1e5c      	subs	r4, r3, #1
 80065b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065b4:	42a3      	cmp	r3, r4
 80065b6:	bfbf      	itttt	lt
 80065b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80065ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80065bc:	1ae3      	sublt	r3, r4, r3
 80065be:	18d2      	addlt	r2, r2, r3
 80065c0:	bfa8      	it	ge
 80065c2:	1b1c      	subge	r4, r3, r4
 80065c4:	9b07      	ldr	r3, [sp, #28]
 80065c6:	bfbe      	ittt	lt
 80065c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80065ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80065cc:	2400      	movlt	r4, #0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	bfb5      	itete	lt
 80065d2:	eba8 0603 	sublt.w	r6, r8, r3
 80065d6:	4646      	movge	r6, r8
 80065d8:	2300      	movlt	r3, #0
 80065da:	9b07      	ldrge	r3, [sp, #28]
 80065dc:	e730      	b.n	8006440 <_dtoa_r+0x730>
 80065de:	4646      	mov	r6, r8
 80065e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80065e4:	e735      	b.n	8006452 <_dtoa_r+0x742>
 80065e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065e8:	e75c      	b.n	80064a4 <_dtoa_r+0x794>
 80065ea:	2300      	movs	r3, #0
 80065ec:	e788      	b.n	8006500 <_dtoa_r+0x7f0>
 80065ee:	9b02      	ldr	r3, [sp, #8]
 80065f0:	e786      	b.n	8006500 <_dtoa_r+0x7f0>
 80065f2:	2300      	movs	r3, #0
 80065f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80065f6:	e788      	b.n	800650a <_dtoa_r+0x7fa>
 80065f8:	d09f      	beq.n	800653a <_dtoa_r+0x82a>
 80065fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065fc:	331c      	adds	r3, #28
 80065fe:	441a      	add	r2, r3
 8006600:	4498      	add	r8, r3
 8006602:	441e      	add	r6, r3
 8006604:	9209      	str	r2, [sp, #36]	@ 0x24
 8006606:	e798      	b.n	800653a <_dtoa_r+0x82a>
 8006608:	4603      	mov	r3, r0
 800660a:	e7f6      	b.n	80065fa <_dtoa_r+0x8ea>
 800660c:	9b07      	ldr	r3, [sp, #28]
 800660e:	9704      	str	r7, [sp, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	dc20      	bgt.n	8006656 <_dtoa_r+0x946>
 8006614:	9308      	str	r3, [sp, #32]
 8006616:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006618:	2b02      	cmp	r3, #2
 800661a:	dd1e      	ble.n	800665a <_dtoa_r+0x94a>
 800661c:	9b08      	ldr	r3, [sp, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f47f aebc 	bne.w	800639c <_dtoa_r+0x68c>
 8006624:	4621      	mov	r1, r4
 8006626:	2205      	movs	r2, #5
 8006628:	4658      	mov	r0, fp
 800662a:	f000 fa99 	bl	8006b60 <__multadd>
 800662e:	4601      	mov	r1, r0
 8006630:	4604      	mov	r4, r0
 8006632:	4648      	mov	r0, r9
 8006634:	f000 fcaa 	bl	8006f8c <__mcmp>
 8006638:	2800      	cmp	r0, #0
 800663a:	f77f aeaf 	ble.w	800639c <_dtoa_r+0x68c>
 800663e:	2331      	movs	r3, #49	@ 0x31
 8006640:	4656      	mov	r6, sl
 8006642:	f806 3b01 	strb.w	r3, [r6], #1
 8006646:	9b04      	ldr	r3, [sp, #16]
 8006648:	3301      	adds	r3, #1
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	e6aa      	b.n	80063a4 <_dtoa_r+0x694>
 800664e:	9c07      	ldr	r4, [sp, #28]
 8006650:	9704      	str	r7, [sp, #16]
 8006652:	4625      	mov	r5, r4
 8006654:	e7f3      	b.n	800663e <_dtoa_r+0x92e>
 8006656:	9b07      	ldr	r3, [sp, #28]
 8006658:	9308      	str	r3, [sp, #32]
 800665a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8104 	beq.w	800686a <_dtoa_r+0xb5a>
 8006662:	2e00      	cmp	r6, #0
 8006664:	dd05      	ble.n	8006672 <_dtoa_r+0x962>
 8006666:	4629      	mov	r1, r5
 8006668:	4632      	mov	r2, r6
 800666a:	4658      	mov	r0, fp
 800666c:	f000 fc22 	bl	8006eb4 <__lshift>
 8006670:	4605      	mov	r5, r0
 8006672:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006674:	2b00      	cmp	r3, #0
 8006676:	d05a      	beq.n	800672e <_dtoa_r+0xa1e>
 8006678:	4658      	mov	r0, fp
 800667a:	6869      	ldr	r1, [r5, #4]
 800667c:	f000 fa0e 	bl	8006a9c <_Balloc>
 8006680:	4606      	mov	r6, r0
 8006682:	b928      	cbnz	r0, 8006690 <_dtoa_r+0x980>
 8006684:	4602      	mov	r2, r0
 8006686:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800668a:	4b83      	ldr	r3, [pc, #524]	@ (8006898 <_dtoa_r+0xb88>)
 800668c:	f7ff bb54 	b.w	8005d38 <_dtoa_r+0x28>
 8006690:	692a      	ldr	r2, [r5, #16]
 8006692:	f105 010c 	add.w	r1, r5, #12
 8006696:	3202      	adds	r2, #2
 8006698:	0092      	lsls	r2, r2, #2
 800669a:	300c      	adds	r0, #12
 800669c:	f7ff faa1 	bl	8005be2 <memcpy>
 80066a0:	2201      	movs	r2, #1
 80066a2:	4631      	mov	r1, r6
 80066a4:	4658      	mov	r0, fp
 80066a6:	f000 fc05 	bl	8006eb4 <__lshift>
 80066aa:	462f      	mov	r7, r5
 80066ac:	4605      	mov	r5, r0
 80066ae:	f10a 0301 	add.w	r3, sl, #1
 80066b2:	9307      	str	r3, [sp, #28]
 80066b4:	9b08      	ldr	r3, [sp, #32]
 80066b6:	4453      	add	r3, sl
 80066b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066ba:	9b02      	ldr	r3, [sp, #8]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066c2:	9b07      	ldr	r3, [sp, #28]
 80066c4:	4621      	mov	r1, r4
 80066c6:	3b01      	subs	r3, #1
 80066c8:	4648      	mov	r0, r9
 80066ca:	9302      	str	r3, [sp, #8]
 80066cc:	f7ff fa97 	bl	8005bfe <quorem>
 80066d0:	4639      	mov	r1, r7
 80066d2:	9008      	str	r0, [sp, #32]
 80066d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80066d8:	4648      	mov	r0, r9
 80066da:	f000 fc57 	bl	8006f8c <__mcmp>
 80066de:	462a      	mov	r2, r5
 80066e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80066e2:	4621      	mov	r1, r4
 80066e4:	4658      	mov	r0, fp
 80066e6:	f000 fc6d 	bl	8006fc4 <__mdiff>
 80066ea:	68c2      	ldr	r2, [r0, #12]
 80066ec:	4606      	mov	r6, r0
 80066ee:	bb02      	cbnz	r2, 8006732 <_dtoa_r+0xa22>
 80066f0:	4601      	mov	r1, r0
 80066f2:	4648      	mov	r0, r9
 80066f4:	f000 fc4a 	bl	8006f8c <__mcmp>
 80066f8:	4602      	mov	r2, r0
 80066fa:	4631      	mov	r1, r6
 80066fc:	4658      	mov	r0, fp
 80066fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8006700:	f000 fa0c 	bl	8006b1c <_Bfree>
 8006704:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006706:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006708:	9e07      	ldr	r6, [sp, #28]
 800670a:	ea43 0102 	orr.w	r1, r3, r2
 800670e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006710:	4319      	orrs	r1, r3
 8006712:	d110      	bne.n	8006736 <_dtoa_r+0xa26>
 8006714:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006718:	d029      	beq.n	800676e <_dtoa_r+0xa5e>
 800671a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800671c:	2b00      	cmp	r3, #0
 800671e:	dd02      	ble.n	8006726 <_dtoa_r+0xa16>
 8006720:	9b08      	ldr	r3, [sp, #32]
 8006722:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006726:	9b02      	ldr	r3, [sp, #8]
 8006728:	f883 8000 	strb.w	r8, [r3]
 800672c:	e63b      	b.n	80063a6 <_dtoa_r+0x696>
 800672e:	4628      	mov	r0, r5
 8006730:	e7bb      	b.n	80066aa <_dtoa_r+0x99a>
 8006732:	2201      	movs	r2, #1
 8006734:	e7e1      	b.n	80066fa <_dtoa_r+0x9ea>
 8006736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	db04      	blt.n	8006746 <_dtoa_r+0xa36>
 800673c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800673e:	430b      	orrs	r3, r1
 8006740:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006742:	430b      	orrs	r3, r1
 8006744:	d120      	bne.n	8006788 <_dtoa_r+0xa78>
 8006746:	2a00      	cmp	r2, #0
 8006748:	dded      	ble.n	8006726 <_dtoa_r+0xa16>
 800674a:	4649      	mov	r1, r9
 800674c:	2201      	movs	r2, #1
 800674e:	4658      	mov	r0, fp
 8006750:	f000 fbb0 	bl	8006eb4 <__lshift>
 8006754:	4621      	mov	r1, r4
 8006756:	4681      	mov	r9, r0
 8006758:	f000 fc18 	bl	8006f8c <__mcmp>
 800675c:	2800      	cmp	r0, #0
 800675e:	dc03      	bgt.n	8006768 <_dtoa_r+0xa58>
 8006760:	d1e1      	bne.n	8006726 <_dtoa_r+0xa16>
 8006762:	f018 0f01 	tst.w	r8, #1
 8006766:	d0de      	beq.n	8006726 <_dtoa_r+0xa16>
 8006768:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800676c:	d1d8      	bne.n	8006720 <_dtoa_r+0xa10>
 800676e:	2339      	movs	r3, #57	@ 0x39
 8006770:	9a02      	ldr	r2, [sp, #8]
 8006772:	7013      	strb	r3, [r2, #0]
 8006774:	4633      	mov	r3, r6
 8006776:	461e      	mov	r6, r3
 8006778:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800677c:	3b01      	subs	r3, #1
 800677e:	2a39      	cmp	r2, #57	@ 0x39
 8006780:	d052      	beq.n	8006828 <_dtoa_r+0xb18>
 8006782:	3201      	adds	r2, #1
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	e60e      	b.n	80063a6 <_dtoa_r+0x696>
 8006788:	2a00      	cmp	r2, #0
 800678a:	dd07      	ble.n	800679c <_dtoa_r+0xa8c>
 800678c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006790:	d0ed      	beq.n	800676e <_dtoa_r+0xa5e>
 8006792:	9a02      	ldr	r2, [sp, #8]
 8006794:	f108 0301 	add.w	r3, r8, #1
 8006798:	7013      	strb	r3, [r2, #0]
 800679a:	e604      	b.n	80063a6 <_dtoa_r+0x696>
 800679c:	9b07      	ldr	r3, [sp, #28]
 800679e:	9a07      	ldr	r2, [sp, #28]
 80067a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80067a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d028      	beq.n	80067fc <_dtoa_r+0xaec>
 80067aa:	4649      	mov	r1, r9
 80067ac:	2300      	movs	r3, #0
 80067ae:	220a      	movs	r2, #10
 80067b0:	4658      	mov	r0, fp
 80067b2:	f000 f9d5 	bl	8006b60 <__multadd>
 80067b6:	42af      	cmp	r7, r5
 80067b8:	4681      	mov	r9, r0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	f04f 020a 	mov.w	r2, #10
 80067c2:	4639      	mov	r1, r7
 80067c4:	4658      	mov	r0, fp
 80067c6:	d107      	bne.n	80067d8 <_dtoa_r+0xac8>
 80067c8:	f000 f9ca 	bl	8006b60 <__multadd>
 80067cc:	4607      	mov	r7, r0
 80067ce:	4605      	mov	r5, r0
 80067d0:	9b07      	ldr	r3, [sp, #28]
 80067d2:	3301      	adds	r3, #1
 80067d4:	9307      	str	r3, [sp, #28]
 80067d6:	e774      	b.n	80066c2 <_dtoa_r+0x9b2>
 80067d8:	f000 f9c2 	bl	8006b60 <__multadd>
 80067dc:	4629      	mov	r1, r5
 80067de:	4607      	mov	r7, r0
 80067e0:	2300      	movs	r3, #0
 80067e2:	220a      	movs	r2, #10
 80067e4:	4658      	mov	r0, fp
 80067e6:	f000 f9bb 	bl	8006b60 <__multadd>
 80067ea:	4605      	mov	r5, r0
 80067ec:	e7f0      	b.n	80067d0 <_dtoa_r+0xac0>
 80067ee:	9b08      	ldr	r3, [sp, #32]
 80067f0:	2700      	movs	r7, #0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	bfcc      	ite	gt
 80067f6:	461e      	movgt	r6, r3
 80067f8:	2601      	movle	r6, #1
 80067fa:	4456      	add	r6, sl
 80067fc:	4649      	mov	r1, r9
 80067fe:	2201      	movs	r2, #1
 8006800:	4658      	mov	r0, fp
 8006802:	f000 fb57 	bl	8006eb4 <__lshift>
 8006806:	4621      	mov	r1, r4
 8006808:	4681      	mov	r9, r0
 800680a:	f000 fbbf 	bl	8006f8c <__mcmp>
 800680e:	2800      	cmp	r0, #0
 8006810:	dcb0      	bgt.n	8006774 <_dtoa_r+0xa64>
 8006812:	d102      	bne.n	800681a <_dtoa_r+0xb0a>
 8006814:	f018 0f01 	tst.w	r8, #1
 8006818:	d1ac      	bne.n	8006774 <_dtoa_r+0xa64>
 800681a:	4633      	mov	r3, r6
 800681c:	461e      	mov	r6, r3
 800681e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006822:	2a30      	cmp	r2, #48	@ 0x30
 8006824:	d0fa      	beq.n	800681c <_dtoa_r+0xb0c>
 8006826:	e5be      	b.n	80063a6 <_dtoa_r+0x696>
 8006828:	459a      	cmp	sl, r3
 800682a:	d1a4      	bne.n	8006776 <_dtoa_r+0xa66>
 800682c:	9b04      	ldr	r3, [sp, #16]
 800682e:	3301      	adds	r3, #1
 8006830:	9304      	str	r3, [sp, #16]
 8006832:	2331      	movs	r3, #49	@ 0x31
 8006834:	f88a 3000 	strb.w	r3, [sl]
 8006838:	e5b5      	b.n	80063a6 <_dtoa_r+0x696>
 800683a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800683c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800689c <_dtoa_r+0xb8c>
 8006840:	b11b      	cbz	r3, 800684a <_dtoa_r+0xb3a>
 8006842:	f10a 0308 	add.w	r3, sl, #8
 8006846:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	4650      	mov	r0, sl
 800684c:	b017      	add	sp, #92	@ 0x5c
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006852:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006854:	2b01      	cmp	r3, #1
 8006856:	f77f ae3d 	ble.w	80064d4 <_dtoa_r+0x7c4>
 800685a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800685c:	930a      	str	r3, [sp, #40]	@ 0x28
 800685e:	2001      	movs	r0, #1
 8006860:	e65b      	b.n	800651a <_dtoa_r+0x80a>
 8006862:	9b08      	ldr	r3, [sp, #32]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f77f aed6 	ble.w	8006616 <_dtoa_r+0x906>
 800686a:	4656      	mov	r6, sl
 800686c:	4621      	mov	r1, r4
 800686e:	4648      	mov	r0, r9
 8006870:	f7ff f9c5 	bl	8005bfe <quorem>
 8006874:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006878:	9b08      	ldr	r3, [sp, #32]
 800687a:	f806 8b01 	strb.w	r8, [r6], #1
 800687e:	eba6 020a 	sub.w	r2, r6, sl
 8006882:	4293      	cmp	r3, r2
 8006884:	ddb3      	ble.n	80067ee <_dtoa_r+0xade>
 8006886:	4649      	mov	r1, r9
 8006888:	2300      	movs	r3, #0
 800688a:	220a      	movs	r2, #10
 800688c:	4658      	mov	r0, fp
 800688e:	f000 f967 	bl	8006b60 <__multadd>
 8006892:	4681      	mov	r9, r0
 8006894:	e7ea      	b.n	800686c <_dtoa_r+0xb5c>
 8006896:	bf00      	nop
 8006898:	08007d8e 	.word	0x08007d8e
 800689c:	08007d12 	.word	0x08007d12

080068a0 <_free_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4605      	mov	r5, r0
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d040      	beq.n	800692a <_free_r+0x8a>
 80068a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ac:	1f0c      	subs	r4, r1, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bfb8      	it	lt
 80068b2:	18e4      	addlt	r4, r4, r3
 80068b4:	f000 f8e6 	bl	8006a84 <__malloc_lock>
 80068b8:	4a1c      	ldr	r2, [pc, #112]	@ (800692c <_free_r+0x8c>)
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	b933      	cbnz	r3, 80068cc <_free_r+0x2c>
 80068be:	6063      	str	r3, [r4, #4]
 80068c0:	6014      	str	r4, [r2, #0]
 80068c2:	4628      	mov	r0, r5
 80068c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068c8:	f000 b8e2 	b.w	8006a90 <__malloc_unlock>
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	d908      	bls.n	80068e2 <_free_r+0x42>
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	1821      	adds	r1, r4, r0
 80068d4:	428b      	cmp	r3, r1
 80068d6:	bf01      	itttt	eq
 80068d8:	6819      	ldreq	r1, [r3, #0]
 80068da:	685b      	ldreq	r3, [r3, #4]
 80068dc:	1809      	addeq	r1, r1, r0
 80068de:	6021      	streq	r1, [r4, #0]
 80068e0:	e7ed      	b.n	80068be <_free_r+0x1e>
 80068e2:	461a      	mov	r2, r3
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	b10b      	cbz	r3, 80068ec <_free_r+0x4c>
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	d9fa      	bls.n	80068e2 <_free_r+0x42>
 80068ec:	6811      	ldr	r1, [r2, #0]
 80068ee:	1850      	adds	r0, r2, r1
 80068f0:	42a0      	cmp	r0, r4
 80068f2:	d10b      	bne.n	800690c <_free_r+0x6c>
 80068f4:	6820      	ldr	r0, [r4, #0]
 80068f6:	4401      	add	r1, r0
 80068f8:	1850      	adds	r0, r2, r1
 80068fa:	4283      	cmp	r3, r0
 80068fc:	6011      	str	r1, [r2, #0]
 80068fe:	d1e0      	bne.n	80068c2 <_free_r+0x22>
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4408      	add	r0, r1
 8006906:	6010      	str	r0, [r2, #0]
 8006908:	6053      	str	r3, [r2, #4]
 800690a:	e7da      	b.n	80068c2 <_free_r+0x22>
 800690c:	d902      	bls.n	8006914 <_free_r+0x74>
 800690e:	230c      	movs	r3, #12
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	e7d6      	b.n	80068c2 <_free_r+0x22>
 8006914:	6820      	ldr	r0, [r4, #0]
 8006916:	1821      	adds	r1, r4, r0
 8006918:	428b      	cmp	r3, r1
 800691a:	bf01      	itttt	eq
 800691c:	6819      	ldreq	r1, [r3, #0]
 800691e:	685b      	ldreq	r3, [r3, #4]
 8006920:	1809      	addeq	r1, r1, r0
 8006922:	6021      	streq	r1, [r4, #0]
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	6054      	str	r4, [r2, #4]
 8006928:	e7cb      	b.n	80068c2 <_free_r+0x22>
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	20000948 	.word	0x20000948

08006930 <malloc>:
 8006930:	4b02      	ldr	r3, [pc, #8]	@ (800693c <malloc+0xc>)
 8006932:	4601      	mov	r1, r0
 8006934:	6818      	ldr	r0, [r3, #0]
 8006936:	f000 b825 	b.w	8006984 <_malloc_r>
 800693a:	bf00      	nop
 800693c:	20000018 	.word	0x20000018

08006940 <sbrk_aligned>:
 8006940:	b570      	push	{r4, r5, r6, lr}
 8006942:	4e0f      	ldr	r6, [pc, #60]	@ (8006980 <sbrk_aligned+0x40>)
 8006944:	460c      	mov	r4, r1
 8006946:	6831      	ldr	r1, [r6, #0]
 8006948:	4605      	mov	r5, r0
 800694a:	b911      	cbnz	r1, 8006952 <sbrk_aligned+0x12>
 800694c:	f000 fe40 	bl	80075d0 <_sbrk_r>
 8006950:	6030      	str	r0, [r6, #0]
 8006952:	4621      	mov	r1, r4
 8006954:	4628      	mov	r0, r5
 8006956:	f000 fe3b 	bl	80075d0 <_sbrk_r>
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	d103      	bne.n	8006966 <sbrk_aligned+0x26>
 800695e:	f04f 34ff 	mov.w	r4, #4294967295
 8006962:	4620      	mov	r0, r4
 8006964:	bd70      	pop	{r4, r5, r6, pc}
 8006966:	1cc4      	adds	r4, r0, #3
 8006968:	f024 0403 	bic.w	r4, r4, #3
 800696c:	42a0      	cmp	r0, r4
 800696e:	d0f8      	beq.n	8006962 <sbrk_aligned+0x22>
 8006970:	1a21      	subs	r1, r4, r0
 8006972:	4628      	mov	r0, r5
 8006974:	f000 fe2c 	bl	80075d0 <_sbrk_r>
 8006978:	3001      	adds	r0, #1
 800697a:	d1f2      	bne.n	8006962 <sbrk_aligned+0x22>
 800697c:	e7ef      	b.n	800695e <sbrk_aligned+0x1e>
 800697e:	bf00      	nop
 8006980:	20000944 	.word	0x20000944

08006984 <_malloc_r>:
 8006984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006988:	1ccd      	adds	r5, r1, #3
 800698a:	f025 0503 	bic.w	r5, r5, #3
 800698e:	3508      	adds	r5, #8
 8006990:	2d0c      	cmp	r5, #12
 8006992:	bf38      	it	cc
 8006994:	250c      	movcc	r5, #12
 8006996:	2d00      	cmp	r5, #0
 8006998:	4606      	mov	r6, r0
 800699a:	db01      	blt.n	80069a0 <_malloc_r+0x1c>
 800699c:	42a9      	cmp	r1, r5
 800699e:	d904      	bls.n	80069aa <_malloc_r+0x26>
 80069a0:	230c      	movs	r3, #12
 80069a2:	6033      	str	r3, [r6, #0]
 80069a4:	2000      	movs	r0, #0
 80069a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a80 <_malloc_r+0xfc>
 80069ae:	f000 f869 	bl	8006a84 <__malloc_lock>
 80069b2:	f8d8 3000 	ldr.w	r3, [r8]
 80069b6:	461c      	mov	r4, r3
 80069b8:	bb44      	cbnz	r4, 8006a0c <_malloc_r+0x88>
 80069ba:	4629      	mov	r1, r5
 80069bc:	4630      	mov	r0, r6
 80069be:	f7ff ffbf 	bl	8006940 <sbrk_aligned>
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	4604      	mov	r4, r0
 80069c6:	d158      	bne.n	8006a7a <_malloc_r+0xf6>
 80069c8:	f8d8 4000 	ldr.w	r4, [r8]
 80069cc:	4627      	mov	r7, r4
 80069ce:	2f00      	cmp	r7, #0
 80069d0:	d143      	bne.n	8006a5a <_malloc_r+0xd6>
 80069d2:	2c00      	cmp	r4, #0
 80069d4:	d04b      	beq.n	8006a6e <_malloc_r+0xea>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	4639      	mov	r1, r7
 80069da:	4630      	mov	r0, r6
 80069dc:	eb04 0903 	add.w	r9, r4, r3
 80069e0:	f000 fdf6 	bl	80075d0 <_sbrk_r>
 80069e4:	4581      	cmp	r9, r0
 80069e6:	d142      	bne.n	8006a6e <_malloc_r+0xea>
 80069e8:	6821      	ldr	r1, [r4, #0]
 80069ea:	4630      	mov	r0, r6
 80069ec:	1a6d      	subs	r5, r5, r1
 80069ee:	4629      	mov	r1, r5
 80069f0:	f7ff ffa6 	bl	8006940 <sbrk_aligned>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d03a      	beq.n	8006a6e <_malloc_r+0xea>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	442b      	add	r3, r5
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	bb62      	cbnz	r2, 8006a60 <_malloc_r+0xdc>
 8006a06:	f8c8 7000 	str.w	r7, [r8]
 8006a0a:	e00f      	b.n	8006a2c <_malloc_r+0xa8>
 8006a0c:	6822      	ldr	r2, [r4, #0]
 8006a0e:	1b52      	subs	r2, r2, r5
 8006a10:	d420      	bmi.n	8006a54 <_malloc_r+0xd0>
 8006a12:	2a0b      	cmp	r2, #11
 8006a14:	d917      	bls.n	8006a46 <_malloc_r+0xc2>
 8006a16:	1961      	adds	r1, r4, r5
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	6025      	str	r5, [r4, #0]
 8006a1c:	bf18      	it	ne
 8006a1e:	6059      	strne	r1, [r3, #4]
 8006a20:	6863      	ldr	r3, [r4, #4]
 8006a22:	bf08      	it	eq
 8006a24:	f8c8 1000 	streq.w	r1, [r8]
 8006a28:	5162      	str	r2, [r4, r5]
 8006a2a:	604b      	str	r3, [r1, #4]
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f000 f82f 	bl	8006a90 <__malloc_unlock>
 8006a32:	f104 000b 	add.w	r0, r4, #11
 8006a36:	1d23      	adds	r3, r4, #4
 8006a38:	f020 0007 	bic.w	r0, r0, #7
 8006a3c:	1ac2      	subs	r2, r0, r3
 8006a3e:	bf1c      	itt	ne
 8006a40:	1a1b      	subne	r3, r3, r0
 8006a42:	50a3      	strne	r3, [r4, r2]
 8006a44:	e7af      	b.n	80069a6 <_malloc_r+0x22>
 8006a46:	6862      	ldr	r2, [r4, #4]
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	bf0c      	ite	eq
 8006a4c:	f8c8 2000 	streq.w	r2, [r8]
 8006a50:	605a      	strne	r2, [r3, #4]
 8006a52:	e7eb      	b.n	8006a2c <_malloc_r+0xa8>
 8006a54:	4623      	mov	r3, r4
 8006a56:	6864      	ldr	r4, [r4, #4]
 8006a58:	e7ae      	b.n	80069b8 <_malloc_r+0x34>
 8006a5a:	463c      	mov	r4, r7
 8006a5c:	687f      	ldr	r7, [r7, #4]
 8006a5e:	e7b6      	b.n	80069ce <_malloc_r+0x4a>
 8006a60:	461a      	mov	r2, r3
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	d1fb      	bne.n	8006a60 <_malloc_r+0xdc>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	6053      	str	r3, [r2, #4]
 8006a6c:	e7de      	b.n	8006a2c <_malloc_r+0xa8>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	4630      	mov	r0, r6
 8006a72:	6033      	str	r3, [r6, #0]
 8006a74:	f000 f80c 	bl	8006a90 <__malloc_unlock>
 8006a78:	e794      	b.n	80069a4 <_malloc_r+0x20>
 8006a7a:	6005      	str	r5, [r0, #0]
 8006a7c:	e7d6      	b.n	8006a2c <_malloc_r+0xa8>
 8006a7e:	bf00      	nop
 8006a80:	20000948 	.word	0x20000948

08006a84 <__malloc_lock>:
 8006a84:	4801      	ldr	r0, [pc, #4]	@ (8006a8c <__malloc_lock+0x8>)
 8006a86:	f7ff b89c 	b.w	8005bc2 <__retarget_lock_acquire_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	20000940 	.word	0x20000940

08006a90 <__malloc_unlock>:
 8006a90:	4801      	ldr	r0, [pc, #4]	@ (8006a98 <__malloc_unlock+0x8>)
 8006a92:	f7ff b897 	b.w	8005bc4 <__retarget_lock_release_recursive>
 8006a96:	bf00      	nop
 8006a98:	20000940 	.word	0x20000940

08006a9c <_Balloc>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	69c6      	ldr	r6, [r0, #28]
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	460d      	mov	r5, r1
 8006aa4:	b976      	cbnz	r6, 8006ac4 <_Balloc+0x28>
 8006aa6:	2010      	movs	r0, #16
 8006aa8:	f7ff ff42 	bl	8006930 <malloc>
 8006aac:	4602      	mov	r2, r0
 8006aae:	61e0      	str	r0, [r4, #28]
 8006ab0:	b920      	cbnz	r0, 8006abc <_Balloc+0x20>
 8006ab2:	216b      	movs	r1, #107	@ 0x6b
 8006ab4:	4b17      	ldr	r3, [pc, #92]	@ (8006b14 <_Balloc+0x78>)
 8006ab6:	4818      	ldr	r0, [pc, #96]	@ (8006b18 <_Balloc+0x7c>)
 8006ab8:	f000 fd9a 	bl	80075f0 <__assert_func>
 8006abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ac0:	6006      	str	r6, [r0, #0]
 8006ac2:	60c6      	str	r6, [r0, #12]
 8006ac4:	69e6      	ldr	r6, [r4, #28]
 8006ac6:	68f3      	ldr	r3, [r6, #12]
 8006ac8:	b183      	cbz	r3, 8006aec <_Balloc+0x50>
 8006aca:	69e3      	ldr	r3, [r4, #28]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ad2:	b9b8      	cbnz	r0, 8006b04 <_Balloc+0x68>
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	fa01 f605 	lsl.w	r6, r1, r5
 8006ada:	1d72      	adds	r2, r6, #5
 8006adc:	4620      	mov	r0, r4
 8006ade:	0092      	lsls	r2, r2, #2
 8006ae0:	f000 fda4 	bl	800762c <_calloc_r>
 8006ae4:	b160      	cbz	r0, 8006b00 <_Balloc+0x64>
 8006ae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006aea:	e00e      	b.n	8006b0a <_Balloc+0x6e>
 8006aec:	2221      	movs	r2, #33	@ 0x21
 8006aee:	2104      	movs	r1, #4
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 fd9b 	bl	800762c <_calloc_r>
 8006af6:	69e3      	ldr	r3, [r4, #28]
 8006af8:	60f0      	str	r0, [r6, #12]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e4      	bne.n	8006aca <_Balloc+0x2e>
 8006b00:	2000      	movs	r0, #0
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	6802      	ldr	r2, [r0, #0]
 8006b06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b10:	e7f7      	b.n	8006b02 <_Balloc+0x66>
 8006b12:	bf00      	nop
 8006b14:	08007d1f 	.word	0x08007d1f
 8006b18:	08007d9f 	.word	0x08007d9f

08006b1c <_Bfree>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	69c6      	ldr	r6, [r0, #28]
 8006b20:	4605      	mov	r5, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	b976      	cbnz	r6, 8006b44 <_Bfree+0x28>
 8006b26:	2010      	movs	r0, #16
 8006b28:	f7ff ff02 	bl	8006930 <malloc>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	61e8      	str	r0, [r5, #28]
 8006b30:	b920      	cbnz	r0, 8006b3c <_Bfree+0x20>
 8006b32:	218f      	movs	r1, #143	@ 0x8f
 8006b34:	4b08      	ldr	r3, [pc, #32]	@ (8006b58 <_Bfree+0x3c>)
 8006b36:	4809      	ldr	r0, [pc, #36]	@ (8006b5c <_Bfree+0x40>)
 8006b38:	f000 fd5a 	bl	80075f0 <__assert_func>
 8006b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b40:	6006      	str	r6, [r0, #0]
 8006b42:	60c6      	str	r6, [r0, #12]
 8006b44:	b13c      	cbz	r4, 8006b56 <_Bfree+0x3a>
 8006b46:	69eb      	ldr	r3, [r5, #28]
 8006b48:	6862      	ldr	r2, [r4, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b50:	6021      	str	r1, [r4, #0]
 8006b52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
 8006b58:	08007d1f 	.word	0x08007d1f
 8006b5c:	08007d9f 	.word	0x08007d9f

08006b60 <__multadd>:
 8006b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b64:	4607      	mov	r7, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	461e      	mov	r6, r3
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	690d      	ldr	r5, [r1, #16]
 8006b6e:	f101 0c14 	add.w	ip, r1, #20
 8006b72:	f8dc 3000 	ldr.w	r3, [ip]
 8006b76:	3001      	adds	r0, #1
 8006b78:	b299      	uxth	r1, r3
 8006b7a:	fb02 6101 	mla	r1, r2, r1, r6
 8006b7e:	0c1e      	lsrs	r6, r3, #16
 8006b80:	0c0b      	lsrs	r3, r1, #16
 8006b82:	fb02 3306 	mla	r3, r2, r6, r3
 8006b86:	b289      	uxth	r1, r1
 8006b88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b8c:	4285      	cmp	r5, r0
 8006b8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b92:	f84c 1b04 	str.w	r1, [ip], #4
 8006b96:	dcec      	bgt.n	8006b72 <__multadd+0x12>
 8006b98:	b30e      	cbz	r6, 8006bde <__multadd+0x7e>
 8006b9a:	68a3      	ldr	r3, [r4, #8]
 8006b9c:	42ab      	cmp	r3, r5
 8006b9e:	dc19      	bgt.n	8006bd4 <__multadd+0x74>
 8006ba0:	6861      	ldr	r1, [r4, #4]
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	3101      	adds	r1, #1
 8006ba6:	f7ff ff79 	bl	8006a9c <_Balloc>
 8006baa:	4680      	mov	r8, r0
 8006bac:	b928      	cbnz	r0, 8006bba <__multadd+0x5a>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	21ba      	movs	r1, #186	@ 0xba
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006be4 <__multadd+0x84>)
 8006bb4:	480c      	ldr	r0, [pc, #48]	@ (8006be8 <__multadd+0x88>)
 8006bb6:	f000 fd1b 	bl	80075f0 <__assert_func>
 8006bba:	6922      	ldr	r2, [r4, #16]
 8006bbc:	f104 010c 	add.w	r1, r4, #12
 8006bc0:	3202      	adds	r2, #2
 8006bc2:	0092      	lsls	r2, r2, #2
 8006bc4:	300c      	adds	r0, #12
 8006bc6:	f7ff f80c 	bl	8005be2 <memcpy>
 8006bca:	4621      	mov	r1, r4
 8006bcc:	4638      	mov	r0, r7
 8006bce:	f7ff ffa5 	bl	8006b1c <_Bfree>
 8006bd2:	4644      	mov	r4, r8
 8006bd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bd8:	3501      	adds	r5, #1
 8006bda:	615e      	str	r6, [r3, #20]
 8006bdc:	6125      	str	r5, [r4, #16]
 8006bde:	4620      	mov	r0, r4
 8006be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be4:	08007d8e 	.word	0x08007d8e
 8006be8:	08007d9f 	.word	0x08007d9f

08006bec <__hi0bits>:
 8006bec:	4603      	mov	r3, r0
 8006bee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006bf2:	bf3a      	itte	cc
 8006bf4:	0403      	lslcc	r3, r0, #16
 8006bf6:	2010      	movcc	r0, #16
 8006bf8:	2000      	movcs	r0, #0
 8006bfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bfe:	bf3c      	itt	cc
 8006c00:	021b      	lslcc	r3, r3, #8
 8006c02:	3008      	addcc	r0, #8
 8006c04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c08:	bf3c      	itt	cc
 8006c0a:	011b      	lslcc	r3, r3, #4
 8006c0c:	3004      	addcc	r0, #4
 8006c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c12:	bf3c      	itt	cc
 8006c14:	009b      	lslcc	r3, r3, #2
 8006c16:	3002      	addcc	r0, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	db05      	blt.n	8006c28 <__hi0bits+0x3c>
 8006c1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006c20:	f100 0001 	add.w	r0, r0, #1
 8006c24:	bf08      	it	eq
 8006c26:	2020      	moveq	r0, #32
 8006c28:	4770      	bx	lr

08006c2a <__lo0bits>:
 8006c2a:	6803      	ldr	r3, [r0, #0]
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	f013 0007 	ands.w	r0, r3, #7
 8006c32:	d00b      	beq.n	8006c4c <__lo0bits+0x22>
 8006c34:	07d9      	lsls	r1, r3, #31
 8006c36:	d421      	bmi.n	8006c7c <__lo0bits+0x52>
 8006c38:	0798      	lsls	r0, r3, #30
 8006c3a:	bf49      	itett	mi
 8006c3c:	085b      	lsrmi	r3, r3, #1
 8006c3e:	089b      	lsrpl	r3, r3, #2
 8006c40:	2001      	movmi	r0, #1
 8006c42:	6013      	strmi	r3, [r2, #0]
 8006c44:	bf5c      	itt	pl
 8006c46:	2002      	movpl	r0, #2
 8006c48:	6013      	strpl	r3, [r2, #0]
 8006c4a:	4770      	bx	lr
 8006c4c:	b299      	uxth	r1, r3
 8006c4e:	b909      	cbnz	r1, 8006c54 <__lo0bits+0x2a>
 8006c50:	2010      	movs	r0, #16
 8006c52:	0c1b      	lsrs	r3, r3, #16
 8006c54:	b2d9      	uxtb	r1, r3
 8006c56:	b909      	cbnz	r1, 8006c5c <__lo0bits+0x32>
 8006c58:	3008      	adds	r0, #8
 8006c5a:	0a1b      	lsrs	r3, r3, #8
 8006c5c:	0719      	lsls	r1, r3, #28
 8006c5e:	bf04      	itt	eq
 8006c60:	091b      	lsreq	r3, r3, #4
 8006c62:	3004      	addeq	r0, #4
 8006c64:	0799      	lsls	r1, r3, #30
 8006c66:	bf04      	itt	eq
 8006c68:	089b      	lsreq	r3, r3, #2
 8006c6a:	3002      	addeq	r0, #2
 8006c6c:	07d9      	lsls	r1, r3, #31
 8006c6e:	d403      	bmi.n	8006c78 <__lo0bits+0x4e>
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	f100 0001 	add.w	r0, r0, #1
 8006c76:	d003      	beq.n	8006c80 <__lo0bits+0x56>
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	4770      	bx	lr
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	4770      	bx	lr
 8006c80:	2020      	movs	r0, #32
 8006c82:	4770      	bx	lr

08006c84 <__i2b>:
 8006c84:	b510      	push	{r4, lr}
 8006c86:	460c      	mov	r4, r1
 8006c88:	2101      	movs	r1, #1
 8006c8a:	f7ff ff07 	bl	8006a9c <_Balloc>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	b928      	cbnz	r0, 8006c9e <__i2b+0x1a>
 8006c92:	f240 1145 	movw	r1, #325	@ 0x145
 8006c96:	4b04      	ldr	r3, [pc, #16]	@ (8006ca8 <__i2b+0x24>)
 8006c98:	4804      	ldr	r0, [pc, #16]	@ (8006cac <__i2b+0x28>)
 8006c9a:	f000 fca9 	bl	80075f0 <__assert_func>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	6144      	str	r4, [r0, #20]
 8006ca2:	6103      	str	r3, [r0, #16]
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	bf00      	nop
 8006ca8:	08007d8e 	.word	0x08007d8e
 8006cac:	08007d9f 	.word	0x08007d9f

08006cb0 <__multiply>:
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	690a      	ldr	r2, [r1, #16]
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	460f      	mov	r7, r1
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	bfa2      	ittt	ge
 8006cc0:	4623      	movge	r3, r4
 8006cc2:	460c      	movge	r4, r1
 8006cc4:	461f      	movge	r7, r3
 8006cc6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006cca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006cce:	68a3      	ldr	r3, [r4, #8]
 8006cd0:	6861      	ldr	r1, [r4, #4]
 8006cd2:	eb0a 0609 	add.w	r6, sl, r9
 8006cd6:	42b3      	cmp	r3, r6
 8006cd8:	b085      	sub	sp, #20
 8006cda:	bfb8      	it	lt
 8006cdc:	3101      	addlt	r1, #1
 8006cde:	f7ff fedd 	bl	8006a9c <_Balloc>
 8006ce2:	b930      	cbnz	r0, 8006cf2 <__multiply+0x42>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006cea:	4b43      	ldr	r3, [pc, #268]	@ (8006df8 <__multiply+0x148>)
 8006cec:	4843      	ldr	r0, [pc, #268]	@ (8006dfc <__multiply+0x14c>)
 8006cee:	f000 fc7f 	bl	80075f0 <__assert_func>
 8006cf2:	f100 0514 	add.w	r5, r0, #20
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cfe:	4543      	cmp	r3, r8
 8006d00:	d321      	bcc.n	8006d46 <__multiply+0x96>
 8006d02:	f107 0114 	add.w	r1, r7, #20
 8006d06:	f104 0214 	add.w	r2, r4, #20
 8006d0a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006d0e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006d12:	9302      	str	r3, [sp, #8]
 8006d14:	1b13      	subs	r3, r2, r4
 8006d16:	3b15      	subs	r3, #21
 8006d18:	f023 0303 	bic.w	r3, r3, #3
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	f104 0715 	add.w	r7, r4, #21
 8006d22:	42ba      	cmp	r2, r7
 8006d24:	bf38      	it	cc
 8006d26:	2304      	movcc	r3, #4
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	9b02      	ldr	r3, [sp, #8]
 8006d2c:	9103      	str	r1, [sp, #12]
 8006d2e:	428b      	cmp	r3, r1
 8006d30:	d80c      	bhi.n	8006d4c <__multiply+0x9c>
 8006d32:	2e00      	cmp	r6, #0
 8006d34:	dd03      	ble.n	8006d3e <__multiply+0x8e>
 8006d36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d05a      	beq.n	8006df4 <__multiply+0x144>
 8006d3e:	6106      	str	r6, [r0, #16]
 8006d40:	b005      	add	sp, #20
 8006d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d46:	f843 2b04 	str.w	r2, [r3], #4
 8006d4a:	e7d8      	b.n	8006cfe <__multiply+0x4e>
 8006d4c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d50:	f1ba 0f00 	cmp.w	sl, #0
 8006d54:	d023      	beq.n	8006d9e <__multiply+0xee>
 8006d56:	46a9      	mov	r9, r5
 8006d58:	f04f 0c00 	mov.w	ip, #0
 8006d5c:	f104 0e14 	add.w	lr, r4, #20
 8006d60:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d64:	f8d9 3000 	ldr.w	r3, [r9]
 8006d68:	fa1f fb87 	uxth.w	fp, r7
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d72:	4463      	add	r3, ip
 8006d74:	f8d9 c000 	ldr.w	ip, [r9]
 8006d78:	0c3f      	lsrs	r7, r7, #16
 8006d7a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d7e:	fb0a c707 	mla	r7, sl, r7, ip
 8006d82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d8c:	4572      	cmp	r2, lr
 8006d8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d92:	f849 3b04 	str.w	r3, [r9], #4
 8006d96:	d8e3      	bhi.n	8006d60 <__multiply+0xb0>
 8006d98:	9b01      	ldr	r3, [sp, #4]
 8006d9a:	f845 c003 	str.w	ip, [r5, r3]
 8006d9e:	9b03      	ldr	r3, [sp, #12]
 8006da0:	3104      	adds	r1, #4
 8006da2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006da6:	f1b9 0f00 	cmp.w	r9, #0
 8006daa:	d021      	beq.n	8006df0 <__multiply+0x140>
 8006dac:	46ae      	mov	lr, r5
 8006dae:	f04f 0a00 	mov.w	sl, #0
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	f104 0c14 	add.w	ip, r4, #20
 8006db8:	f8bc b000 	ldrh.w	fp, [ip]
 8006dbc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	fb09 770b 	mla	r7, r9, fp, r7
 8006dc6:	4457      	add	r7, sl
 8006dc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006dcc:	f84e 3b04 	str.w	r3, [lr], #4
 8006dd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006dd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dd8:	f8be 3000 	ldrh.w	r3, [lr]
 8006ddc:	4562      	cmp	r2, ip
 8006dde:	fb09 330a 	mla	r3, r9, sl, r3
 8006de2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006de6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dea:	d8e5      	bhi.n	8006db8 <__multiply+0x108>
 8006dec:	9f01      	ldr	r7, [sp, #4]
 8006dee:	51eb      	str	r3, [r5, r7]
 8006df0:	3504      	adds	r5, #4
 8006df2:	e79a      	b.n	8006d2a <__multiply+0x7a>
 8006df4:	3e01      	subs	r6, #1
 8006df6:	e79c      	b.n	8006d32 <__multiply+0x82>
 8006df8:	08007d8e 	.word	0x08007d8e
 8006dfc:	08007d9f 	.word	0x08007d9f

08006e00 <__pow5mult>:
 8006e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e04:	4615      	mov	r5, r2
 8006e06:	f012 0203 	ands.w	r2, r2, #3
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	460e      	mov	r6, r1
 8006e0e:	d007      	beq.n	8006e20 <__pow5mult+0x20>
 8006e10:	4c25      	ldr	r4, [pc, #148]	@ (8006ea8 <__pow5mult+0xa8>)
 8006e12:	3a01      	subs	r2, #1
 8006e14:	2300      	movs	r3, #0
 8006e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e1a:	f7ff fea1 	bl	8006b60 <__multadd>
 8006e1e:	4606      	mov	r6, r0
 8006e20:	10ad      	asrs	r5, r5, #2
 8006e22:	d03d      	beq.n	8006ea0 <__pow5mult+0xa0>
 8006e24:	69fc      	ldr	r4, [r7, #28]
 8006e26:	b97c      	cbnz	r4, 8006e48 <__pow5mult+0x48>
 8006e28:	2010      	movs	r0, #16
 8006e2a:	f7ff fd81 	bl	8006930 <malloc>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	61f8      	str	r0, [r7, #28]
 8006e32:	b928      	cbnz	r0, 8006e40 <__pow5mult+0x40>
 8006e34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e38:	4b1c      	ldr	r3, [pc, #112]	@ (8006eac <__pow5mult+0xac>)
 8006e3a:	481d      	ldr	r0, [pc, #116]	@ (8006eb0 <__pow5mult+0xb0>)
 8006e3c:	f000 fbd8 	bl	80075f0 <__assert_func>
 8006e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e44:	6004      	str	r4, [r0, #0]
 8006e46:	60c4      	str	r4, [r0, #12]
 8006e48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e50:	b94c      	cbnz	r4, 8006e66 <__pow5mult+0x66>
 8006e52:	f240 2171 	movw	r1, #625	@ 0x271
 8006e56:	4638      	mov	r0, r7
 8006e58:	f7ff ff14 	bl	8006c84 <__i2b>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4604      	mov	r4, r0
 8006e60:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e64:	6003      	str	r3, [r0, #0]
 8006e66:	f04f 0900 	mov.w	r9, #0
 8006e6a:	07eb      	lsls	r3, r5, #31
 8006e6c:	d50a      	bpl.n	8006e84 <__pow5mult+0x84>
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4622      	mov	r2, r4
 8006e72:	4638      	mov	r0, r7
 8006e74:	f7ff ff1c 	bl	8006cb0 <__multiply>
 8006e78:	4680      	mov	r8, r0
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	f7ff fe4d 	bl	8006b1c <_Bfree>
 8006e82:	4646      	mov	r6, r8
 8006e84:	106d      	asrs	r5, r5, #1
 8006e86:	d00b      	beq.n	8006ea0 <__pow5mult+0xa0>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	b938      	cbnz	r0, 8006e9c <__pow5mult+0x9c>
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4638      	mov	r0, r7
 8006e92:	f7ff ff0d 	bl	8006cb0 <__multiply>
 8006e96:	6020      	str	r0, [r4, #0]
 8006e98:	f8c0 9000 	str.w	r9, [r0]
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	e7e4      	b.n	8006e6a <__pow5mult+0x6a>
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ea6:	bf00      	nop
 8006ea8:	08007df8 	.word	0x08007df8
 8006eac:	08007d1f 	.word	0x08007d1f
 8006eb0:	08007d9f 	.word	0x08007d9f

08006eb4 <__lshift>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	460c      	mov	r4, r1
 8006eba:	4607      	mov	r7, r0
 8006ebc:	4691      	mov	r9, r2
 8006ebe:	6923      	ldr	r3, [r4, #16]
 8006ec0:	6849      	ldr	r1, [r1, #4]
 8006ec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ecc:	f108 0601 	add.w	r6, r8, #1
 8006ed0:	42b3      	cmp	r3, r6
 8006ed2:	db0b      	blt.n	8006eec <__lshift+0x38>
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff fde1 	bl	8006a9c <_Balloc>
 8006eda:	4605      	mov	r5, r0
 8006edc:	b948      	cbnz	r0, 8006ef2 <__lshift+0x3e>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ee4:	4b27      	ldr	r3, [pc, #156]	@ (8006f84 <__lshift+0xd0>)
 8006ee6:	4828      	ldr	r0, [pc, #160]	@ (8006f88 <__lshift+0xd4>)
 8006ee8:	f000 fb82 	bl	80075f0 <__assert_func>
 8006eec:	3101      	adds	r1, #1
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	e7ee      	b.n	8006ed0 <__lshift+0x1c>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f100 0114 	add.w	r1, r0, #20
 8006ef8:	f100 0210 	add.w	r2, r0, #16
 8006efc:	4618      	mov	r0, r3
 8006efe:	4553      	cmp	r3, sl
 8006f00:	db33      	blt.n	8006f6a <__lshift+0xb6>
 8006f02:	6920      	ldr	r0, [r4, #16]
 8006f04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f08:	f104 0314 	add.w	r3, r4, #20
 8006f0c:	f019 091f 	ands.w	r9, r9, #31
 8006f10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f18:	d02b      	beq.n	8006f72 <__lshift+0xbe>
 8006f1a:	468a      	mov	sl, r1
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f1c9 0e20 	rsb	lr, r9, #32
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	fa00 f009 	lsl.w	r0, r0, r9
 8006f28:	4310      	orrs	r0, r2
 8006f2a:	f84a 0b04 	str.w	r0, [sl], #4
 8006f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f32:	459c      	cmp	ip, r3
 8006f34:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f38:	d8f3      	bhi.n	8006f22 <__lshift+0x6e>
 8006f3a:	ebac 0304 	sub.w	r3, ip, r4
 8006f3e:	3b15      	subs	r3, #21
 8006f40:	f023 0303 	bic.w	r3, r3, #3
 8006f44:	3304      	adds	r3, #4
 8006f46:	f104 0015 	add.w	r0, r4, #21
 8006f4a:	4584      	cmp	ip, r0
 8006f4c:	bf38      	it	cc
 8006f4e:	2304      	movcc	r3, #4
 8006f50:	50ca      	str	r2, [r1, r3]
 8006f52:	b10a      	cbz	r2, 8006f58 <__lshift+0xa4>
 8006f54:	f108 0602 	add.w	r6, r8, #2
 8006f58:	3e01      	subs	r6, #1
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	612e      	str	r6, [r5, #16]
 8006f60:	f7ff fddc 	bl	8006b1c <_Bfree>
 8006f64:	4628      	mov	r0, r5
 8006f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f6e:	3301      	adds	r3, #1
 8006f70:	e7c5      	b.n	8006efe <__lshift+0x4a>
 8006f72:	3904      	subs	r1, #4
 8006f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f78:	459c      	cmp	ip, r3
 8006f7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f7e:	d8f9      	bhi.n	8006f74 <__lshift+0xc0>
 8006f80:	e7ea      	b.n	8006f58 <__lshift+0xa4>
 8006f82:	bf00      	nop
 8006f84:	08007d8e 	.word	0x08007d8e
 8006f88:	08007d9f 	.word	0x08007d9f

08006f8c <__mcmp>:
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	690a      	ldr	r2, [r1, #16]
 8006f90:	6900      	ldr	r0, [r0, #16]
 8006f92:	b530      	push	{r4, r5, lr}
 8006f94:	1a80      	subs	r0, r0, r2
 8006f96:	d10e      	bne.n	8006fb6 <__mcmp+0x2a>
 8006f98:	3314      	adds	r3, #20
 8006f9a:	3114      	adds	r1, #20
 8006f9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006fa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006fa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006fa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006fac:	4295      	cmp	r5, r2
 8006fae:	d003      	beq.n	8006fb8 <__mcmp+0x2c>
 8006fb0:	d205      	bcs.n	8006fbe <__mcmp+0x32>
 8006fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb6:	bd30      	pop	{r4, r5, pc}
 8006fb8:	42a3      	cmp	r3, r4
 8006fba:	d3f3      	bcc.n	8006fa4 <__mcmp+0x18>
 8006fbc:	e7fb      	b.n	8006fb6 <__mcmp+0x2a>
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	e7f9      	b.n	8006fb6 <__mcmp+0x2a>
	...

08006fc4 <__mdiff>:
 8006fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	4689      	mov	r9, r1
 8006fca:	4606      	mov	r6, r0
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4648      	mov	r0, r9
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	f7ff ffdb 	bl	8006f8c <__mcmp>
 8006fd6:	1e05      	subs	r5, r0, #0
 8006fd8:	d112      	bne.n	8007000 <__mdiff+0x3c>
 8006fda:	4629      	mov	r1, r5
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f7ff fd5d 	bl	8006a9c <_Balloc>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	b928      	cbnz	r0, 8006ff2 <__mdiff+0x2e>
 8006fe6:	f240 2137 	movw	r1, #567	@ 0x237
 8006fea:	4b3e      	ldr	r3, [pc, #248]	@ (80070e4 <__mdiff+0x120>)
 8006fec:	483e      	ldr	r0, [pc, #248]	@ (80070e8 <__mdiff+0x124>)
 8006fee:	f000 faff 	bl	80075f0 <__assert_func>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	b003      	add	sp, #12
 8006ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007000:	bfbc      	itt	lt
 8007002:	464b      	movlt	r3, r9
 8007004:	46a1      	movlt	r9, r4
 8007006:	4630      	mov	r0, r6
 8007008:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800700c:	bfba      	itte	lt
 800700e:	461c      	movlt	r4, r3
 8007010:	2501      	movlt	r5, #1
 8007012:	2500      	movge	r5, #0
 8007014:	f7ff fd42 	bl	8006a9c <_Balloc>
 8007018:	4602      	mov	r2, r0
 800701a:	b918      	cbnz	r0, 8007024 <__mdiff+0x60>
 800701c:	f240 2145 	movw	r1, #581	@ 0x245
 8007020:	4b30      	ldr	r3, [pc, #192]	@ (80070e4 <__mdiff+0x120>)
 8007022:	e7e3      	b.n	8006fec <__mdiff+0x28>
 8007024:	f100 0b14 	add.w	fp, r0, #20
 8007028:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800702c:	f109 0310 	add.w	r3, r9, #16
 8007030:	60c5      	str	r5, [r0, #12]
 8007032:	f04f 0c00 	mov.w	ip, #0
 8007036:	f109 0514 	add.w	r5, r9, #20
 800703a:	46d9      	mov	r9, fp
 800703c:	6926      	ldr	r6, [r4, #16]
 800703e:	f104 0e14 	add.w	lr, r4, #20
 8007042:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007046:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	9b01      	ldr	r3, [sp, #4]
 800704e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007052:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007056:	b281      	uxth	r1, r0
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	fa1f f38a 	uxth.w	r3, sl
 800705e:	1a5b      	subs	r3, r3, r1
 8007060:	0c00      	lsrs	r0, r0, #16
 8007062:	4463      	add	r3, ip
 8007064:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007068:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800706c:	b29b      	uxth	r3, r3
 800706e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007072:	4576      	cmp	r6, lr
 8007074:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007078:	f849 3b04 	str.w	r3, [r9], #4
 800707c:	d8e6      	bhi.n	800704c <__mdiff+0x88>
 800707e:	1b33      	subs	r3, r6, r4
 8007080:	3b15      	subs	r3, #21
 8007082:	f023 0303 	bic.w	r3, r3, #3
 8007086:	3415      	adds	r4, #21
 8007088:	3304      	adds	r3, #4
 800708a:	42a6      	cmp	r6, r4
 800708c:	bf38      	it	cc
 800708e:	2304      	movcc	r3, #4
 8007090:	441d      	add	r5, r3
 8007092:	445b      	add	r3, fp
 8007094:	461e      	mov	r6, r3
 8007096:	462c      	mov	r4, r5
 8007098:	4544      	cmp	r4, r8
 800709a:	d30e      	bcc.n	80070ba <__mdiff+0xf6>
 800709c:	f108 0103 	add.w	r1, r8, #3
 80070a0:	1b49      	subs	r1, r1, r5
 80070a2:	f021 0103 	bic.w	r1, r1, #3
 80070a6:	3d03      	subs	r5, #3
 80070a8:	45a8      	cmp	r8, r5
 80070aa:	bf38      	it	cc
 80070ac:	2100      	movcc	r1, #0
 80070ae:	440b      	add	r3, r1
 80070b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070b4:	b199      	cbz	r1, 80070de <__mdiff+0x11a>
 80070b6:	6117      	str	r7, [r2, #16]
 80070b8:	e79e      	b.n	8006ff8 <__mdiff+0x34>
 80070ba:	46e6      	mov	lr, ip
 80070bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80070c0:	fa1f fc81 	uxth.w	ip, r1
 80070c4:	44f4      	add	ip, lr
 80070c6:	0c08      	lsrs	r0, r1, #16
 80070c8:	4471      	add	r1, lr
 80070ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80070ce:	b289      	uxth	r1, r1
 80070d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80070d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070d8:	f846 1b04 	str.w	r1, [r6], #4
 80070dc:	e7dc      	b.n	8007098 <__mdiff+0xd4>
 80070de:	3f01      	subs	r7, #1
 80070e0:	e7e6      	b.n	80070b0 <__mdiff+0xec>
 80070e2:	bf00      	nop
 80070e4:	08007d8e 	.word	0x08007d8e
 80070e8:	08007d9f 	.word	0x08007d9f

080070ec <__d2b>:
 80070ec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80070f0:	2101      	movs	r1, #1
 80070f2:	4690      	mov	r8, r2
 80070f4:	4699      	mov	r9, r3
 80070f6:	9e08      	ldr	r6, [sp, #32]
 80070f8:	f7ff fcd0 	bl	8006a9c <_Balloc>
 80070fc:	4604      	mov	r4, r0
 80070fe:	b930      	cbnz	r0, 800710e <__d2b+0x22>
 8007100:	4602      	mov	r2, r0
 8007102:	f240 310f 	movw	r1, #783	@ 0x30f
 8007106:	4b23      	ldr	r3, [pc, #140]	@ (8007194 <__d2b+0xa8>)
 8007108:	4823      	ldr	r0, [pc, #140]	@ (8007198 <__d2b+0xac>)
 800710a:	f000 fa71 	bl	80075f0 <__assert_func>
 800710e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007112:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007116:	b10d      	cbz	r5, 800711c <__d2b+0x30>
 8007118:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	f1b8 0300 	subs.w	r3, r8, #0
 8007122:	d024      	beq.n	800716e <__d2b+0x82>
 8007124:	4668      	mov	r0, sp
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	f7ff fd7f 	bl	8006c2a <__lo0bits>
 800712c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007130:	b1d8      	cbz	r0, 800716a <__d2b+0x7e>
 8007132:	f1c0 0320 	rsb	r3, r0, #32
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	430b      	orrs	r3, r1
 800713c:	40c2      	lsrs	r2, r0
 800713e:	6163      	str	r3, [r4, #20]
 8007140:	9201      	str	r2, [sp, #4]
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	bf0c      	ite	eq
 8007148:	2201      	moveq	r2, #1
 800714a:	2202      	movne	r2, #2
 800714c:	61a3      	str	r3, [r4, #24]
 800714e:	6122      	str	r2, [r4, #16]
 8007150:	b1ad      	cbz	r5, 800717e <__d2b+0x92>
 8007152:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007156:	4405      	add	r5, r0
 8007158:	6035      	str	r5, [r6, #0]
 800715a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800715e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007160:	6018      	str	r0, [r3, #0]
 8007162:	4620      	mov	r0, r4
 8007164:	b002      	add	sp, #8
 8007166:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800716a:	6161      	str	r1, [r4, #20]
 800716c:	e7e9      	b.n	8007142 <__d2b+0x56>
 800716e:	a801      	add	r0, sp, #4
 8007170:	f7ff fd5b 	bl	8006c2a <__lo0bits>
 8007174:	9b01      	ldr	r3, [sp, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	6163      	str	r3, [r4, #20]
 800717a:	3020      	adds	r0, #32
 800717c:	e7e7      	b.n	800714e <__d2b+0x62>
 800717e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007182:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007186:	6030      	str	r0, [r6, #0]
 8007188:	6918      	ldr	r0, [r3, #16]
 800718a:	f7ff fd2f 	bl	8006bec <__hi0bits>
 800718e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007192:	e7e4      	b.n	800715e <__d2b+0x72>
 8007194:	08007d8e 	.word	0x08007d8e
 8007198:	08007d9f 	.word	0x08007d9f

0800719c <__ssputs_r>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	461f      	mov	r7, r3
 80071a2:	688e      	ldr	r6, [r1, #8]
 80071a4:	4682      	mov	sl, r0
 80071a6:	42be      	cmp	r6, r7
 80071a8:	460c      	mov	r4, r1
 80071aa:	4690      	mov	r8, r2
 80071ac:	680b      	ldr	r3, [r1, #0]
 80071ae:	d82d      	bhi.n	800720c <__ssputs_r+0x70>
 80071b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071b8:	d026      	beq.n	8007208 <__ssputs_r+0x6c>
 80071ba:	6965      	ldr	r5, [r4, #20]
 80071bc:	6909      	ldr	r1, [r1, #16]
 80071be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071c2:	eba3 0901 	sub.w	r9, r3, r1
 80071c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071ca:	1c7b      	adds	r3, r7, #1
 80071cc:	444b      	add	r3, r9
 80071ce:	106d      	asrs	r5, r5, #1
 80071d0:	429d      	cmp	r5, r3
 80071d2:	bf38      	it	cc
 80071d4:	461d      	movcc	r5, r3
 80071d6:	0553      	lsls	r3, r2, #21
 80071d8:	d527      	bpl.n	800722a <__ssputs_r+0x8e>
 80071da:	4629      	mov	r1, r5
 80071dc:	f7ff fbd2 	bl	8006984 <_malloc_r>
 80071e0:	4606      	mov	r6, r0
 80071e2:	b360      	cbz	r0, 800723e <__ssputs_r+0xa2>
 80071e4:	464a      	mov	r2, r9
 80071e6:	6921      	ldr	r1, [r4, #16]
 80071e8:	f7fe fcfb 	bl	8005be2 <memcpy>
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f6:	81a3      	strh	r3, [r4, #12]
 80071f8:	6126      	str	r6, [r4, #16]
 80071fa:	444e      	add	r6, r9
 80071fc:	6026      	str	r6, [r4, #0]
 80071fe:	463e      	mov	r6, r7
 8007200:	6165      	str	r5, [r4, #20]
 8007202:	eba5 0509 	sub.w	r5, r5, r9
 8007206:	60a5      	str	r5, [r4, #8]
 8007208:	42be      	cmp	r6, r7
 800720a:	d900      	bls.n	800720e <__ssputs_r+0x72>
 800720c:	463e      	mov	r6, r7
 800720e:	4632      	mov	r2, r6
 8007210:	4641      	mov	r1, r8
 8007212:	6820      	ldr	r0, [r4, #0]
 8007214:	f000 f9c2 	bl	800759c <memmove>
 8007218:	2000      	movs	r0, #0
 800721a:	68a3      	ldr	r3, [r4, #8]
 800721c:	1b9b      	subs	r3, r3, r6
 800721e:	60a3      	str	r3, [r4, #8]
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	4433      	add	r3, r6
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722a:	462a      	mov	r2, r5
 800722c:	f000 fa24 	bl	8007678 <_realloc_r>
 8007230:	4606      	mov	r6, r0
 8007232:	2800      	cmp	r0, #0
 8007234:	d1e0      	bne.n	80071f8 <__ssputs_r+0x5c>
 8007236:	4650      	mov	r0, sl
 8007238:	6921      	ldr	r1, [r4, #16]
 800723a:	f7ff fb31 	bl	80068a0 <_free_r>
 800723e:	230c      	movs	r3, #12
 8007240:	f8ca 3000 	str.w	r3, [sl]
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f04f 30ff 	mov.w	r0, #4294967295
 800724a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	e7e9      	b.n	8007226 <__ssputs_r+0x8a>
	...

08007254 <_svfiprintf_r>:
 8007254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	4698      	mov	r8, r3
 800725a:	898b      	ldrh	r3, [r1, #12]
 800725c:	4607      	mov	r7, r0
 800725e:	061b      	lsls	r3, r3, #24
 8007260:	460d      	mov	r5, r1
 8007262:	4614      	mov	r4, r2
 8007264:	b09d      	sub	sp, #116	@ 0x74
 8007266:	d510      	bpl.n	800728a <_svfiprintf_r+0x36>
 8007268:	690b      	ldr	r3, [r1, #16]
 800726a:	b973      	cbnz	r3, 800728a <_svfiprintf_r+0x36>
 800726c:	2140      	movs	r1, #64	@ 0x40
 800726e:	f7ff fb89 	bl	8006984 <_malloc_r>
 8007272:	6028      	str	r0, [r5, #0]
 8007274:	6128      	str	r0, [r5, #16]
 8007276:	b930      	cbnz	r0, 8007286 <_svfiprintf_r+0x32>
 8007278:	230c      	movs	r3, #12
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	b01d      	add	sp, #116	@ 0x74
 8007282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007286:	2340      	movs	r3, #64	@ 0x40
 8007288:	616b      	str	r3, [r5, #20]
 800728a:	2300      	movs	r3, #0
 800728c:	9309      	str	r3, [sp, #36]	@ 0x24
 800728e:	2320      	movs	r3, #32
 8007290:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007294:	2330      	movs	r3, #48	@ 0x30
 8007296:	f04f 0901 	mov.w	r9, #1
 800729a:	f8cd 800c 	str.w	r8, [sp, #12]
 800729e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007438 <_svfiprintf_r+0x1e4>
 80072a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072a6:	4623      	mov	r3, r4
 80072a8:	469a      	mov	sl, r3
 80072aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ae:	b10a      	cbz	r2, 80072b4 <_svfiprintf_r+0x60>
 80072b0:	2a25      	cmp	r2, #37	@ 0x25
 80072b2:	d1f9      	bne.n	80072a8 <_svfiprintf_r+0x54>
 80072b4:	ebba 0b04 	subs.w	fp, sl, r4
 80072b8:	d00b      	beq.n	80072d2 <_svfiprintf_r+0x7e>
 80072ba:	465b      	mov	r3, fp
 80072bc:	4622      	mov	r2, r4
 80072be:	4629      	mov	r1, r5
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7ff ff6b 	bl	800719c <__ssputs_r>
 80072c6:	3001      	adds	r0, #1
 80072c8:	f000 80a7 	beq.w	800741a <_svfiprintf_r+0x1c6>
 80072cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072ce:	445a      	add	r2, fp
 80072d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80072d2:	f89a 3000 	ldrb.w	r3, [sl]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 809f 	beq.w	800741a <_svfiprintf_r+0x1c6>
 80072dc:	2300      	movs	r3, #0
 80072de:	f04f 32ff 	mov.w	r2, #4294967295
 80072e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072e6:	f10a 0a01 	add.w	sl, sl, #1
 80072ea:	9304      	str	r3, [sp, #16]
 80072ec:	9307      	str	r3, [sp, #28]
 80072ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80072f4:	4654      	mov	r4, sl
 80072f6:	2205      	movs	r2, #5
 80072f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072fc:	484e      	ldr	r0, [pc, #312]	@ (8007438 <_svfiprintf_r+0x1e4>)
 80072fe:	f7fe fc62 	bl	8005bc6 <memchr>
 8007302:	9a04      	ldr	r2, [sp, #16]
 8007304:	b9d8      	cbnz	r0, 800733e <_svfiprintf_r+0xea>
 8007306:	06d0      	lsls	r0, r2, #27
 8007308:	bf44      	itt	mi
 800730a:	2320      	movmi	r3, #32
 800730c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007310:	0711      	lsls	r1, r2, #28
 8007312:	bf44      	itt	mi
 8007314:	232b      	movmi	r3, #43	@ 0x2b
 8007316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800731a:	f89a 3000 	ldrb.w	r3, [sl]
 800731e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007320:	d015      	beq.n	800734e <_svfiprintf_r+0xfa>
 8007322:	4654      	mov	r4, sl
 8007324:	2000      	movs	r0, #0
 8007326:	f04f 0c0a 	mov.w	ip, #10
 800732a:	9a07      	ldr	r2, [sp, #28]
 800732c:	4621      	mov	r1, r4
 800732e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007332:	3b30      	subs	r3, #48	@ 0x30
 8007334:	2b09      	cmp	r3, #9
 8007336:	d94b      	bls.n	80073d0 <_svfiprintf_r+0x17c>
 8007338:	b1b0      	cbz	r0, 8007368 <_svfiprintf_r+0x114>
 800733a:	9207      	str	r2, [sp, #28]
 800733c:	e014      	b.n	8007368 <_svfiprintf_r+0x114>
 800733e:	eba0 0308 	sub.w	r3, r0, r8
 8007342:	fa09 f303 	lsl.w	r3, r9, r3
 8007346:	4313      	orrs	r3, r2
 8007348:	46a2      	mov	sl, r4
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	e7d2      	b.n	80072f4 <_svfiprintf_r+0xa0>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	1d19      	adds	r1, r3, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	9103      	str	r1, [sp, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfbb      	ittet	lt
 800735a:	425b      	neglt	r3, r3
 800735c:	f042 0202 	orrlt.w	r2, r2, #2
 8007360:	9307      	strge	r3, [sp, #28]
 8007362:	9307      	strlt	r3, [sp, #28]
 8007364:	bfb8      	it	lt
 8007366:	9204      	strlt	r2, [sp, #16]
 8007368:	7823      	ldrb	r3, [r4, #0]
 800736a:	2b2e      	cmp	r3, #46	@ 0x2e
 800736c:	d10a      	bne.n	8007384 <_svfiprintf_r+0x130>
 800736e:	7863      	ldrb	r3, [r4, #1]
 8007370:	2b2a      	cmp	r3, #42	@ 0x2a
 8007372:	d132      	bne.n	80073da <_svfiprintf_r+0x186>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	3402      	adds	r4, #2
 8007378:	1d1a      	adds	r2, r3, #4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	9203      	str	r2, [sp, #12]
 800737e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007382:	9305      	str	r3, [sp, #20]
 8007384:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800743c <_svfiprintf_r+0x1e8>
 8007388:	2203      	movs	r2, #3
 800738a:	4650      	mov	r0, sl
 800738c:	7821      	ldrb	r1, [r4, #0]
 800738e:	f7fe fc1a 	bl	8005bc6 <memchr>
 8007392:	b138      	cbz	r0, 80073a4 <_svfiprintf_r+0x150>
 8007394:	2240      	movs	r2, #64	@ 0x40
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	eba0 000a 	sub.w	r0, r0, sl
 800739c:	4082      	lsls	r2, r0
 800739e:	4313      	orrs	r3, r2
 80073a0:	3401      	adds	r4, #1
 80073a2:	9304      	str	r3, [sp, #16]
 80073a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a8:	2206      	movs	r2, #6
 80073aa:	4825      	ldr	r0, [pc, #148]	@ (8007440 <_svfiprintf_r+0x1ec>)
 80073ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073b0:	f7fe fc09 	bl	8005bc6 <memchr>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d036      	beq.n	8007426 <_svfiprintf_r+0x1d2>
 80073b8:	4b22      	ldr	r3, [pc, #136]	@ (8007444 <_svfiprintf_r+0x1f0>)
 80073ba:	bb1b      	cbnz	r3, 8007404 <_svfiprintf_r+0x1b0>
 80073bc:	9b03      	ldr	r3, [sp, #12]
 80073be:	3307      	adds	r3, #7
 80073c0:	f023 0307 	bic.w	r3, r3, #7
 80073c4:	3308      	adds	r3, #8
 80073c6:	9303      	str	r3, [sp, #12]
 80073c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ca:	4433      	add	r3, r6
 80073cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ce:	e76a      	b.n	80072a6 <_svfiprintf_r+0x52>
 80073d0:	460c      	mov	r4, r1
 80073d2:	2001      	movs	r0, #1
 80073d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80073d8:	e7a8      	b.n	800732c <_svfiprintf_r+0xd8>
 80073da:	2300      	movs	r3, #0
 80073dc:	f04f 0c0a 	mov.w	ip, #10
 80073e0:	4619      	mov	r1, r3
 80073e2:	3401      	adds	r4, #1
 80073e4:	9305      	str	r3, [sp, #20]
 80073e6:	4620      	mov	r0, r4
 80073e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ec:	3a30      	subs	r2, #48	@ 0x30
 80073ee:	2a09      	cmp	r2, #9
 80073f0:	d903      	bls.n	80073fa <_svfiprintf_r+0x1a6>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0c6      	beq.n	8007384 <_svfiprintf_r+0x130>
 80073f6:	9105      	str	r1, [sp, #20]
 80073f8:	e7c4      	b.n	8007384 <_svfiprintf_r+0x130>
 80073fa:	4604      	mov	r4, r0
 80073fc:	2301      	movs	r3, #1
 80073fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007402:	e7f0      	b.n	80073e6 <_svfiprintf_r+0x192>
 8007404:	ab03      	add	r3, sp, #12
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	462a      	mov	r2, r5
 800740a:	4638      	mov	r0, r7
 800740c:	4b0e      	ldr	r3, [pc, #56]	@ (8007448 <_svfiprintf_r+0x1f4>)
 800740e:	a904      	add	r1, sp, #16
 8007410:	f7fd fe60 	bl	80050d4 <_printf_float>
 8007414:	1c42      	adds	r2, r0, #1
 8007416:	4606      	mov	r6, r0
 8007418:	d1d6      	bne.n	80073c8 <_svfiprintf_r+0x174>
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	065b      	lsls	r3, r3, #25
 800741e:	f53f af2d 	bmi.w	800727c <_svfiprintf_r+0x28>
 8007422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007424:	e72c      	b.n	8007280 <_svfiprintf_r+0x2c>
 8007426:	ab03      	add	r3, sp, #12
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	462a      	mov	r2, r5
 800742c:	4638      	mov	r0, r7
 800742e:	4b06      	ldr	r3, [pc, #24]	@ (8007448 <_svfiprintf_r+0x1f4>)
 8007430:	a904      	add	r1, sp, #16
 8007432:	f7fe f8ed 	bl	8005610 <_printf_i>
 8007436:	e7ed      	b.n	8007414 <_svfiprintf_r+0x1c0>
 8007438:	08007ef8 	.word	0x08007ef8
 800743c:	08007efe 	.word	0x08007efe
 8007440:	08007f02 	.word	0x08007f02
 8007444:	080050d5 	.word	0x080050d5
 8007448:	0800719d 	.word	0x0800719d

0800744c <__sflush_r>:
 800744c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	0716      	lsls	r6, r2, #28
 8007454:	4605      	mov	r5, r0
 8007456:	460c      	mov	r4, r1
 8007458:	d454      	bmi.n	8007504 <__sflush_r+0xb8>
 800745a:	684b      	ldr	r3, [r1, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	dc02      	bgt.n	8007466 <__sflush_r+0x1a>
 8007460:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	dd48      	ble.n	80074f8 <__sflush_r+0xac>
 8007466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007468:	2e00      	cmp	r6, #0
 800746a:	d045      	beq.n	80074f8 <__sflush_r+0xac>
 800746c:	2300      	movs	r3, #0
 800746e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007472:	682f      	ldr	r7, [r5, #0]
 8007474:	6a21      	ldr	r1, [r4, #32]
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	d030      	beq.n	80074dc <__sflush_r+0x90>
 800747a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	0759      	lsls	r1, r3, #29
 8007480:	d505      	bpl.n	800748e <__sflush_r+0x42>
 8007482:	6863      	ldr	r3, [r4, #4]
 8007484:	1ad2      	subs	r2, r2, r3
 8007486:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007488:	b10b      	cbz	r3, 800748e <__sflush_r+0x42>
 800748a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800748c:	1ad2      	subs	r2, r2, r3
 800748e:	2300      	movs	r3, #0
 8007490:	4628      	mov	r0, r5
 8007492:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007494:	6a21      	ldr	r1, [r4, #32]
 8007496:	47b0      	blx	r6
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	d106      	bne.n	80074ac <__sflush_r+0x60>
 800749e:	6829      	ldr	r1, [r5, #0]
 80074a0:	291d      	cmp	r1, #29
 80074a2:	d82b      	bhi.n	80074fc <__sflush_r+0xb0>
 80074a4:	4a28      	ldr	r2, [pc, #160]	@ (8007548 <__sflush_r+0xfc>)
 80074a6:	410a      	asrs	r2, r1
 80074a8:	07d6      	lsls	r6, r2, #31
 80074aa:	d427      	bmi.n	80074fc <__sflush_r+0xb0>
 80074ac:	2200      	movs	r2, #0
 80074ae:	6062      	str	r2, [r4, #4]
 80074b0:	6922      	ldr	r2, [r4, #16]
 80074b2:	04d9      	lsls	r1, r3, #19
 80074b4:	6022      	str	r2, [r4, #0]
 80074b6:	d504      	bpl.n	80074c2 <__sflush_r+0x76>
 80074b8:	1c42      	adds	r2, r0, #1
 80074ba:	d101      	bne.n	80074c0 <__sflush_r+0x74>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	b903      	cbnz	r3, 80074c2 <__sflush_r+0x76>
 80074c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80074c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074c4:	602f      	str	r7, [r5, #0]
 80074c6:	b1b9      	cbz	r1, 80074f8 <__sflush_r+0xac>
 80074c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074cc:	4299      	cmp	r1, r3
 80074ce:	d002      	beq.n	80074d6 <__sflush_r+0x8a>
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7ff f9e5 	bl	80068a0 <_free_r>
 80074d6:	2300      	movs	r3, #0
 80074d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80074da:	e00d      	b.n	80074f8 <__sflush_r+0xac>
 80074dc:	2301      	movs	r3, #1
 80074de:	4628      	mov	r0, r5
 80074e0:	47b0      	blx	r6
 80074e2:	4602      	mov	r2, r0
 80074e4:	1c50      	adds	r0, r2, #1
 80074e6:	d1c9      	bne.n	800747c <__sflush_r+0x30>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0c6      	beq.n	800747c <__sflush_r+0x30>
 80074ee:	2b1d      	cmp	r3, #29
 80074f0:	d001      	beq.n	80074f6 <__sflush_r+0xaa>
 80074f2:	2b16      	cmp	r3, #22
 80074f4:	d11d      	bne.n	8007532 <__sflush_r+0xe6>
 80074f6:	602f      	str	r7, [r5, #0]
 80074f8:	2000      	movs	r0, #0
 80074fa:	e021      	b.n	8007540 <__sflush_r+0xf4>
 80074fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007500:	b21b      	sxth	r3, r3
 8007502:	e01a      	b.n	800753a <__sflush_r+0xee>
 8007504:	690f      	ldr	r7, [r1, #16]
 8007506:	2f00      	cmp	r7, #0
 8007508:	d0f6      	beq.n	80074f8 <__sflush_r+0xac>
 800750a:	0793      	lsls	r3, r2, #30
 800750c:	bf18      	it	ne
 800750e:	2300      	movne	r3, #0
 8007510:	680e      	ldr	r6, [r1, #0]
 8007512:	bf08      	it	eq
 8007514:	694b      	ldreq	r3, [r1, #20]
 8007516:	1bf6      	subs	r6, r6, r7
 8007518:	600f      	str	r7, [r1, #0]
 800751a:	608b      	str	r3, [r1, #8]
 800751c:	2e00      	cmp	r6, #0
 800751e:	ddeb      	ble.n	80074f8 <__sflush_r+0xac>
 8007520:	4633      	mov	r3, r6
 8007522:	463a      	mov	r2, r7
 8007524:	4628      	mov	r0, r5
 8007526:	6a21      	ldr	r1, [r4, #32]
 8007528:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800752c:	47e0      	blx	ip
 800752e:	2800      	cmp	r0, #0
 8007530:	dc07      	bgt.n	8007542 <__sflush_r+0xf6>
 8007532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	81a3      	strh	r3, [r4, #12]
 8007540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007542:	4407      	add	r7, r0
 8007544:	1a36      	subs	r6, r6, r0
 8007546:	e7e9      	b.n	800751c <__sflush_r+0xd0>
 8007548:	dfbffffe 	.word	0xdfbffffe

0800754c <_fflush_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	690b      	ldr	r3, [r1, #16]
 8007550:	4605      	mov	r5, r0
 8007552:	460c      	mov	r4, r1
 8007554:	b913      	cbnz	r3, 800755c <_fflush_r+0x10>
 8007556:	2500      	movs	r5, #0
 8007558:	4628      	mov	r0, r5
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	b118      	cbz	r0, 8007566 <_fflush_r+0x1a>
 800755e:	6a03      	ldr	r3, [r0, #32]
 8007560:	b90b      	cbnz	r3, 8007566 <_fflush_r+0x1a>
 8007562:	f7fe fa01 	bl	8005968 <__sinit>
 8007566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0f3      	beq.n	8007556 <_fflush_r+0xa>
 800756e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007570:	07d0      	lsls	r0, r2, #31
 8007572:	d404      	bmi.n	800757e <_fflush_r+0x32>
 8007574:	0599      	lsls	r1, r3, #22
 8007576:	d402      	bmi.n	800757e <_fflush_r+0x32>
 8007578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800757a:	f7fe fb22 	bl	8005bc2 <__retarget_lock_acquire_recursive>
 800757e:	4628      	mov	r0, r5
 8007580:	4621      	mov	r1, r4
 8007582:	f7ff ff63 	bl	800744c <__sflush_r>
 8007586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007588:	4605      	mov	r5, r0
 800758a:	07da      	lsls	r2, r3, #31
 800758c:	d4e4      	bmi.n	8007558 <_fflush_r+0xc>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	059b      	lsls	r3, r3, #22
 8007592:	d4e1      	bmi.n	8007558 <_fflush_r+0xc>
 8007594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007596:	f7fe fb15 	bl	8005bc4 <__retarget_lock_release_recursive>
 800759a:	e7dd      	b.n	8007558 <_fflush_r+0xc>

0800759c <memmove>:
 800759c:	4288      	cmp	r0, r1
 800759e:	b510      	push	{r4, lr}
 80075a0:	eb01 0402 	add.w	r4, r1, r2
 80075a4:	d902      	bls.n	80075ac <memmove+0x10>
 80075a6:	4284      	cmp	r4, r0
 80075a8:	4623      	mov	r3, r4
 80075aa:	d807      	bhi.n	80075bc <memmove+0x20>
 80075ac:	1e43      	subs	r3, r0, #1
 80075ae:	42a1      	cmp	r1, r4
 80075b0:	d008      	beq.n	80075c4 <memmove+0x28>
 80075b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075ba:	e7f8      	b.n	80075ae <memmove+0x12>
 80075bc:	4601      	mov	r1, r0
 80075be:	4402      	add	r2, r0
 80075c0:	428a      	cmp	r2, r1
 80075c2:	d100      	bne.n	80075c6 <memmove+0x2a>
 80075c4:	bd10      	pop	{r4, pc}
 80075c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075ce:	e7f7      	b.n	80075c0 <memmove+0x24>

080075d0 <_sbrk_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	2300      	movs	r3, #0
 80075d4:	4d05      	ldr	r5, [pc, #20]	@ (80075ec <_sbrk_r+0x1c>)
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	602b      	str	r3, [r5, #0]
 80075dc:	f7fa fd4c 	bl	8002078 <_sbrk>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_sbrk_r+0x1a>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_sbrk_r+0x1a>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	2000093c 	.word	0x2000093c

080075f0 <__assert_func>:
 80075f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075f2:	4614      	mov	r4, r2
 80075f4:	461a      	mov	r2, r3
 80075f6:	4b09      	ldr	r3, [pc, #36]	@ (800761c <__assert_func+0x2c>)
 80075f8:	4605      	mov	r5, r0
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68d8      	ldr	r0, [r3, #12]
 80075fe:	b954      	cbnz	r4, 8007616 <__assert_func+0x26>
 8007600:	4b07      	ldr	r3, [pc, #28]	@ (8007620 <__assert_func+0x30>)
 8007602:	461c      	mov	r4, r3
 8007604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007608:	9100      	str	r1, [sp, #0]
 800760a:	462b      	mov	r3, r5
 800760c:	4905      	ldr	r1, [pc, #20]	@ (8007624 <__assert_func+0x34>)
 800760e:	f000 f86f 	bl	80076f0 <fiprintf>
 8007612:	f000 f87f 	bl	8007714 <abort>
 8007616:	4b04      	ldr	r3, [pc, #16]	@ (8007628 <__assert_func+0x38>)
 8007618:	e7f4      	b.n	8007604 <__assert_func+0x14>
 800761a:	bf00      	nop
 800761c:	20000018 	.word	0x20000018
 8007620:	08007f4e 	.word	0x08007f4e
 8007624:	08007f20 	.word	0x08007f20
 8007628:	08007f13 	.word	0x08007f13

0800762c <_calloc_r>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	fba1 5402 	umull	r5, r4, r1, r2
 8007632:	b93c      	cbnz	r4, 8007644 <_calloc_r+0x18>
 8007634:	4629      	mov	r1, r5
 8007636:	f7ff f9a5 	bl	8006984 <_malloc_r>
 800763a:	4606      	mov	r6, r0
 800763c:	b928      	cbnz	r0, 800764a <_calloc_r+0x1e>
 800763e:	2600      	movs	r6, #0
 8007640:	4630      	mov	r0, r6
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	220c      	movs	r2, #12
 8007646:	6002      	str	r2, [r0, #0]
 8007648:	e7f9      	b.n	800763e <_calloc_r+0x12>
 800764a:	462a      	mov	r2, r5
 800764c:	4621      	mov	r1, r4
 800764e:	f7fe fa24 	bl	8005a9a <memset>
 8007652:	e7f5      	b.n	8007640 <_calloc_r+0x14>

08007654 <__ascii_mbtowc>:
 8007654:	b082      	sub	sp, #8
 8007656:	b901      	cbnz	r1, 800765a <__ascii_mbtowc+0x6>
 8007658:	a901      	add	r1, sp, #4
 800765a:	b142      	cbz	r2, 800766e <__ascii_mbtowc+0x1a>
 800765c:	b14b      	cbz	r3, 8007672 <__ascii_mbtowc+0x1e>
 800765e:	7813      	ldrb	r3, [r2, #0]
 8007660:	600b      	str	r3, [r1, #0]
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	1e10      	subs	r0, r2, #0
 8007666:	bf18      	it	ne
 8007668:	2001      	movne	r0, #1
 800766a:	b002      	add	sp, #8
 800766c:	4770      	bx	lr
 800766e:	4610      	mov	r0, r2
 8007670:	e7fb      	b.n	800766a <__ascii_mbtowc+0x16>
 8007672:	f06f 0001 	mvn.w	r0, #1
 8007676:	e7f8      	b.n	800766a <__ascii_mbtowc+0x16>

08007678 <_realloc_r>:
 8007678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767c:	4680      	mov	r8, r0
 800767e:	4615      	mov	r5, r2
 8007680:	460c      	mov	r4, r1
 8007682:	b921      	cbnz	r1, 800768e <_realloc_r+0x16>
 8007684:	4611      	mov	r1, r2
 8007686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800768a:	f7ff b97b 	b.w	8006984 <_malloc_r>
 800768e:	b92a      	cbnz	r2, 800769c <_realloc_r+0x24>
 8007690:	f7ff f906 	bl	80068a0 <_free_r>
 8007694:	2400      	movs	r4, #0
 8007696:	4620      	mov	r0, r4
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	f000 f841 	bl	8007722 <_malloc_usable_size_r>
 80076a0:	4285      	cmp	r5, r0
 80076a2:	4606      	mov	r6, r0
 80076a4:	d802      	bhi.n	80076ac <_realloc_r+0x34>
 80076a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80076aa:	d8f4      	bhi.n	8007696 <_realloc_r+0x1e>
 80076ac:	4629      	mov	r1, r5
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7ff f968 	bl	8006984 <_malloc_r>
 80076b4:	4607      	mov	r7, r0
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d0ec      	beq.n	8007694 <_realloc_r+0x1c>
 80076ba:	42b5      	cmp	r5, r6
 80076bc:	462a      	mov	r2, r5
 80076be:	4621      	mov	r1, r4
 80076c0:	bf28      	it	cs
 80076c2:	4632      	movcs	r2, r6
 80076c4:	f7fe fa8d 	bl	8005be2 <memcpy>
 80076c8:	4621      	mov	r1, r4
 80076ca:	4640      	mov	r0, r8
 80076cc:	f7ff f8e8 	bl	80068a0 <_free_r>
 80076d0:	463c      	mov	r4, r7
 80076d2:	e7e0      	b.n	8007696 <_realloc_r+0x1e>

080076d4 <__ascii_wctomb>:
 80076d4:	4603      	mov	r3, r0
 80076d6:	4608      	mov	r0, r1
 80076d8:	b141      	cbz	r1, 80076ec <__ascii_wctomb+0x18>
 80076da:	2aff      	cmp	r2, #255	@ 0xff
 80076dc:	d904      	bls.n	80076e8 <__ascii_wctomb+0x14>
 80076de:	228a      	movs	r2, #138	@ 0x8a
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	4770      	bx	lr
 80076e8:	2001      	movs	r0, #1
 80076ea:	700a      	strb	r2, [r1, #0]
 80076ec:	4770      	bx	lr
	...

080076f0 <fiprintf>:
 80076f0:	b40e      	push	{r1, r2, r3}
 80076f2:	b503      	push	{r0, r1, lr}
 80076f4:	4601      	mov	r1, r0
 80076f6:	ab03      	add	r3, sp, #12
 80076f8:	4805      	ldr	r0, [pc, #20]	@ (8007710 <fiprintf+0x20>)
 80076fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80076fe:	6800      	ldr	r0, [r0, #0]
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	f000 f83d 	bl	8007780 <_vfiprintf_r>
 8007706:	b002      	add	sp, #8
 8007708:	f85d eb04 	ldr.w	lr, [sp], #4
 800770c:	b003      	add	sp, #12
 800770e:	4770      	bx	lr
 8007710:	20000018 	.word	0x20000018

08007714 <abort>:
 8007714:	2006      	movs	r0, #6
 8007716:	b508      	push	{r3, lr}
 8007718:	f000 fa06 	bl	8007b28 <raise>
 800771c:	2001      	movs	r0, #1
 800771e:	f7fa fc37 	bl	8001f90 <_exit>

08007722 <_malloc_usable_size_r>:
 8007722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007726:	1f18      	subs	r0, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	bfbc      	itt	lt
 800772c:	580b      	ldrlt	r3, [r1, r0]
 800772e:	18c0      	addlt	r0, r0, r3
 8007730:	4770      	bx	lr

08007732 <__sfputc_r>:
 8007732:	6893      	ldr	r3, [r2, #8]
 8007734:	b410      	push	{r4}
 8007736:	3b01      	subs	r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	6093      	str	r3, [r2, #8]
 800773c:	da07      	bge.n	800774e <__sfputc_r+0x1c>
 800773e:	6994      	ldr	r4, [r2, #24]
 8007740:	42a3      	cmp	r3, r4
 8007742:	db01      	blt.n	8007748 <__sfputc_r+0x16>
 8007744:	290a      	cmp	r1, #10
 8007746:	d102      	bne.n	800774e <__sfputc_r+0x1c>
 8007748:	bc10      	pop	{r4}
 800774a:	f000 b931 	b.w	80079b0 <__swbuf_r>
 800774e:	6813      	ldr	r3, [r2, #0]
 8007750:	1c58      	adds	r0, r3, #1
 8007752:	6010      	str	r0, [r2, #0]
 8007754:	7019      	strb	r1, [r3, #0]
 8007756:	4608      	mov	r0, r1
 8007758:	bc10      	pop	{r4}
 800775a:	4770      	bx	lr

0800775c <__sfputs_r>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	4606      	mov	r6, r0
 8007760:	460f      	mov	r7, r1
 8007762:	4614      	mov	r4, r2
 8007764:	18d5      	adds	r5, r2, r3
 8007766:	42ac      	cmp	r4, r5
 8007768:	d101      	bne.n	800776e <__sfputs_r+0x12>
 800776a:	2000      	movs	r0, #0
 800776c:	e007      	b.n	800777e <__sfputs_r+0x22>
 800776e:	463a      	mov	r2, r7
 8007770:	4630      	mov	r0, r6
 8007772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007776:	f7ff ffdc 	bl	8007732 <__sfputc_r>
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d1f3      	bne.n	8007766 <__sfputs_r+0xa>
 800777e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007780 <_vfiprintf_r>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	460d      	mov	r5, r1
 8007786:	4614      	mov	r4, r2
 8007788:	4698      	mov	r8, r3
 800778a:	4606      	mov	r6, r0
 800778c:	b09d      	sub	sp, #116	@ 0x74
 800778e:	b118      	cbz	r0, 8007798 <_vfiprintf_r+0x18>
 8007790:	6a03      	ldr	r3, [r0, #32]
 8007792:	b90b      	cbnz	r3, 8007798 <_vfiprintf_r+0x18>
 8007794:	f7fe f8e8 	bl	8005968 <__sinit>
 8007798:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800779a:	07d9      	lsls	r1, r3, #31
 800779c:	d405      	bmi.n	80077aa <_vfiprintf_r+0x2a>
 800779e:	89ab      	ldrh	r3, [r5, #12]
 80077a0:	059a      	lsls	r2, r3, #22
 80077a2:	d402      	bmi.n	80077aa <_vfiprintf_r+0x2a>
 80077a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077a6:	f7fe fa0c 	bl	8005bc2 <__retarget_lock_acquire_recursive>
 80077aa:	89ab      	ldrh	r3, [r5, #12]
 80077ac:	071b      	lsls	r3, r3, #28
 80077ae:	d501      	bpl.n	80077b4 <_vfiprintf_r+0x34>
 80077b0:	692b      	ldr	r3, [r5, #16]
 80077b2:	b99b      	cbnz	r3, 80077dc <_vfiprintf_r+0x5c>
 80077b4:	4629      	mov	r1, r5
 80077b6:	4630      	mov	r0, r6
 80077b8:	f000 f938 	bl	8007a2c <__swsetup_r>
 80077bc:	b170      	cbz	r0, 80077dc <_vfiprintf_r+0x5c>
 80077be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077c0:	07dc      	lsls	r4, r3, #31
 80077c2:	d504      	bpl.n	80077ce <_vfiprintf_r+0x4e>
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	b01d      	add	sp, #116	@ 0x74
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	89ab      	ldrh	r3, [r5, #12]
 80077d0:	0598      	lsls	r0, r3, #22
 80077d2:	d4f7      	bmi.n	80077c4 <_vfiprintf_r+0x44>
 80077d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077d6:	f7fe f9f5 	bl	8005bc4 <__retarget_lock_release_recursive>
 80077da:	e7f3      	b.n	80077c4 <_vfiprintf_r+0x44>
 80077dc:	2300      	movs	r3, #0
 80077de:	9309      	str	r3, [sp, #36]	@ 0x24
 80077e0:	2320      	movs	r3, #32
 80077e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077e6:	2330      	movs	r3, #48	@ 0x30
 80077e8:	f04f 0901 	mov.w	r9, #1
 80077ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80077f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800799c <_vfiprintf_r+0x21c>
 80077f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077f8:	4623      	mov	r3, r4
 80077fa:	469a      	mov	sl, r3
 80077fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007800:	b10a      	cbz	r2, 8007806 <_vfiprintf_r+0x86>
 8007802:	2a25      	cmp	r2, #37	@ 0x25
 8007804:	d1f9      	bne.n	80077fa <_vfiprintf_r+0x7a>
 8007806:	ebba 0b04 	subs.w	fp, sl, r4
 800780a:	d00b      	beq.n	8007824 <_vfiprintf_r+0xa4>
 800780c:	465b      	mov	r3, fp
 800780e:	4622      	mov	r2, r4
 8007810:	4629      	mov	r1, r5
 8007812:	4630      	mov	r0, r6
 8007814:	f7ff ffa2 	bl	800775c <__sfputs_r>
 8007818:	3001      	adds	r0, #1
 800781a:	f000 80a7 	beq.w	800796c <_vfiprintf_r+0x1ec>
 800781e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007820:	445a      	add	r2, fp
 8007822:	9209      	str	r2, [sp, #36]	@ 0x24
 8007824:	f89a 3000 	ldrb.w	r3, [sl]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 809f 	beq.w	800796c <_vfiprintf_r+0x1ec>
 800782e:	2300      	movs	r3, #0
 8007830:	f04f 32ff 	mov.w	r2, #4294967295
 8007834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007838:	f10a 0a01 	add.w	sl, sl, #1
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	9307      	str	r3, [sp, #28]
 8007840:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007844:	931a      	str	r3, [sp, #104]	@ 0x68
 8007846:	4654      	mov	r4, sl
 8007848:	2205      	movs	r2, #5
 800784a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784e:	4853      	ldr	r0, [pc, #332]	@ (800799c <_vfiprintf_r+0x21c>)
 8007850:	f7fe f9b9 	bl	8005bc6 <memchr>
 8007854:	9a04      	ldr	r2, [sp, #16]
 8007856:	b9d8      	cbnz	r0, 8007890 <_vfiprintf_r+0x110>
 8007858:	06d1      	lsls	r1, r2, #27
 800785a:	bf44      	itt	mi
 800785c:	2320      	movmi	r3, #32
 800785e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007862:	0713      	lsls	r3, r2, #28
 8007864:	bf44      	itt	mi
 8007866:	232b      	movmi	r3, #43	@ 0x2b
 8007868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800786c:	f89a 3000 	ldrb.w	r3, [sl]
 8007870:	2b2a      	cmp	r3, #42	@ 0x2a
 8007872:	d015      	beq.n	80078a0 <_vfiprintf_r+0x120>
 8007874:	4654      	mov	r4, sl
 8007876:	2000      	movs	r0, #0
 8007878:	f04f 0c0a 	mov.w	ip, #10
 800787c:	9a07      	ldr	r2, [sp, #28]
 800787e:	4621      	mov	r1, r4
 8007880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007884:	3b30      	subs	r3, #48	@ 0x30
 8007886:	2b09      	cmp	r3, #9
 8007888:	d94b      	bls.n	8007922 <_vfiprintf_r+0x1a2>
 800788a:	b1b0      	cbz	r0, 80078ba <_vfiprintf_r+0x13a>
 800788c:	9207      	str	r2, [sp, #28]
 800788e:	e014      	b.n	80078ba <_vfiprintf_r+0x13a>
 8007890:	eba0 0308 	sub.w	r3, r0, r8
 8007894:	fa09 f303 	lsl.w	r3, r9, r3
 8007898:	4313      	orrs	r3, r2
 800789a:	46a2      	mov	sl, r4
 800789c:	9304      	str	r3, [sp, #16]
 800789e:	e7d2      	b.n	8007846 <_vfiprintf_r+0xc6>
 80078a0:	9b03      	ldr	r3, [sp, #12]
 80078a2:	1d19      	adds	r1, r3, #4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	9103      	str	r1, [sp, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bfbb      	ittet	lt
 80078ac:	425b      	neglt	r3, r3
 80078ae:	f042 0202 	orrlt.w	r2, r2, #2
 80078b2:	9307      	strge	r3, [sp, #28]
 80078b4:	9307      	strlt	r3, [sp, #28]
 80078b6:	bfb8      	it	lt
 80078b8:	9204      	strlt	r2, [sp, #16]
 80078ba:	7823      	ldrb	r3, [r4, #0]
 80078bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80078be:	d10a      	bne.n	80078d6 <_vfiprintf_r+0x156>
 80078c0:	7863      	ldrb	r3, [r4, #1]
 80078c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80078c4:	d132      	bne.n	800792c <_vfiprintf_r+0x1ac>
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	3402      	adds	r4, #2
 80078ca:	1d1a      	adds	r2, r3, #4
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	9203      	str	r2, [sp, #12]
 80078d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078d4:	9305      	str	r3, [sp, #20]
 80078d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80079a0 <_vfiprintf_r+0x220>
 80078da:	2203      	movs	r2, #3
 80078dc:	4650      	mov	r0, sl
 80078de:	7821      	ldrb	r1, [r4, #0]
 80078e0:	f7fe f971 	bl	8005bc6 <memchr>
 80078e4:	b138      	cbz	r0, 80078f6 <_vfiprintf_r+0x176>
 80078e6:	2240      	movs	r2, #64	@ 0x40
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	eba0 000a 	sub.w	r0, r0, sl
 80078ee:	4082      	lsls	r2, r0
 80078f0:	4313      	orrs	r3, r2
 80078f2:	3401      	adds	r4, #1
 80078f4:	9304      	str	r3, [sp, #16]
 80078f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078fa:	2206      	movs	r2, #6
 80078fc:	4829      	ldr	r0, [pc, #164]	@ (80079a4 <_vfiprintf_r+0x224>)
 80078fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007902:	f7fe f960 	bl	8005bc6 <memchr>
 8007906:	2800      	cmp	r0, #0
 8007908:	d03f      	beq.n	800798a <_vfiprintf_r+0x20a>
 800790a:	4b27      	ldr	r3, [pc, #156]	@ (80079a8 <_vfiprintf_r+0x228>)
 800790c:	bb1b      	cbnz	r3, 8007956 <_vfiprintf_r+0x1d6>
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	3307      	adds	r3, #7
 8007912:	f023 0307 	bic.w	r3, r3, #7
 8007916:	3308      	adds	r3, #8
 8007918:	9303      	str	r3, [sp, #12]
 800791a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791c:	443b      	add	r3, r7
 800791e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007920:	e76a      	b.n	80077f8 <_vfiprintf_r+0x78>
 8007922:	460c      	mov	r4, r1
 8007924:	2001      	movs	r0, #1
 8007926:	fb0c 3202 	mla	r2, ip, r2, r3
 800792a:	e7a8      	b.n	800787e <_vfiprintf_r+0xfe>
 800792c:	2300      	movs	r3, #0
 800792e:	f04f 0c0a 	mov.w	ip, #10
 8007932:	4619      	mov	r1, r3
 8007934:	3401      	adds	r4, #1
 8007936:	9305      	str	r3, [sp, #20]
 8007938:	4620      	mov	r0, r4
 800793a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800793e:	3a30      	subs	r2, #48	@ 0x30
 8007940:	2a09      	cmp	r2, #9
 8007942:	d903      	bls.n	800794c <_vfiprintf_r+0x1cc>
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0c6      	beq.n	80078d6 <_vfiprintf_r+0x156>
 8007948:	9105      	str	r1, [sp, #20]
 800794a:	e7c4      	b.n	80078d6 <_vfiprintf_r+0x156>
 800794c:	4604      	mov	r4, r0
 800794e:	2301      	movs	r3, #1
 8007950:	fb0c 2101 	mla	r1, ip, r1, r2
 8007954:	e7f0      	b.n	8007938 <_vfiprintf_r+0x1b8>
 8007956:	ab03      	add	r3, sp, #12
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	462a      	mov	r2, r5
 800795c:	4630      	mov	r0, r6
 800795e:	4b13      	ldr	r3, [pc, #76]	@ (80079ac <_vfiprintf_r+0x22c>)
 8007960:	a904      	add	r1, sp, #16
 8007962:	f7fd fbb7 	bl	80050d4 <_printf_float>
 8007966:	4607      	mov	r7, r0
 8007968:	1c78      	adds	r0, r7, #1
 800796a:	d1d6      	bne.n	800791a <_vfiprintf_r+0x19a>
 800796c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800796e:	07d9      	lsls	r1, r3, #31
 8007970:	d405      	bmi.n	800797e <_vfiprintf_r+0x1fe>
 8007972:	89ab      	ldrh	r3, [r5, #12]
 8007974:	059a      	lsls	r2, r3, #22
 8007976:	d402      	bmi.n	800797e <_vfiprintf_r+0x1fe>
 8007978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800797a:	f7fe f923 	bl	8005bc4 <__retarget_lock_release_recursive>
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	065b      	lsls	r3, r3, #25
 8007982:	f53f af1f 	bmi.w	80077c4 <_vfiprintf_r+0x44>
 8007986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007988:	e71e      	b.n	80077c8 <_vfiprintf_r+0x48>
 800798a:	ab03      	add	r3, sp, #12
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	462a      	mov	r2, r5
 8007990:	4630      	mov	r0, r6
 8007992:	4b06      	ldr	r3, [pc, #24]	@ (80079ac <_vfiprintf_r+0x22c>)
 8007994:	a904      	add	r1, sp, #16
 8007996:	f7fd fe3b 	bl	8005610 <_printf_i>
 800799a:	e7e4      	b.n	8007966 <_vfiprintf_r+0x1e6>
 800799c:	08007ef8 	.word	0x08007ef8
 80079a0:	08007efe 	.word	0x08007efe
 80079a4:	08007f02 	.word	0x08007f02
 80079a8:	080050d5 	.word	0x080050d5
 80079ac:	0800775d 	.word	0x0800775d

080079b0 <__swbuf_r>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	460e      	mov	r6, r1
 80079b4:	4614      	mov	r4, r2
 80079b6:	4605      	mov	r5, r0
 80079b8:	b118      	cbz	r0, 80079c2 <__swbuf_r+0x12>
 80079ba:	6a03      	ldr	r3, [r0, #32]
 80079bc:	b90b      	cbnz	r3, 80079c2 <__swbuf_r+0x12>
 80079be:	f7fd ffd3 	bl	8005968 <__sinit>
 80079c2:	69a3      	ldr	r3, [r4, #24]
 80079c4:	60a3      	str	r3, [r4, #8]
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	071a      	lsls	r2, r3, #28
 80079ca:	d501      	bpl.n	80079d0 <__swbuf_r+0x20>
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	b943      	cbnz	r3, 80079e2 <__swbuf_r+0x32>
 80079d0:	4621      	mov	r1, r4
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 f82a 	bl	8007a2c <__swsetup_r>
 80079d8:	b118      	cbz	r0, 80079e2 <__swbuf_r+0x32>
 80079da:	f04f 37ff 	mov.w	r7, #4294967295
 80079de:	4638      	mov	r0, r7
 80079e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	6922      	ldr	r2, [r4, #16]
 80079e6:	b2f6      	uxtb	r6, r6
 80079e8:	1a98      	subs	r0, r3, r2
 80079ea:	6963      	ldr	r3, [r4, #20]
 80079ec:	4637      	mov	r7, r6
 80079ee:	4283      	cmp	r3, r0
 80079f0:	dc05      	bgt.n	80079fe <__swbuf_r+0x4e>
 80079f2:	4621      	mov	r1, r4
 80079f4:	4628      	mov	r0, r5
 80079f6:	f7ff fda9 	bl	800754c <_fflush_r>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d1ed      	bne.n	80079da <__swbuf_r+0x2a>
 80079fe:	68a3      	ldr	r3, [r4, #8]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	60a3      	str	r3, [r4, #8]
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	6022      	str	r2, [r4, #0]
 8007a0a:	701e      	strb	r6, [r3, #0]
 8007a0c:	6962      	ldr	r2, [r4, #20]
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d004      	beq.n	8007a1e <__swbuf_r+0x6e>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	07db      	lsls	r3, r3, #31
 8007a18:	d5e1      	bpl.n	80079de <__swbuf_r+0x2e>
 8007a1a:	2e0a      	cmp	r6, #10
 8007a1c:	d1df      	bne.n	80079de <__swbuf_r+0x2e>
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f7ff fd93 	bl	800754c <_fflush_r>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d0d9      	beq.n	80079de <__swbuf_r+0x2e>
 8007a2a:	e7d6      	b.n	80079da <__swbuf_r+0x2a>

08007a2c <__swsetup_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4b29      	ldr	r3, [pc, #164]	@ (8007ad4 <__swsetup_r+0xa8>)
 8007a30:	4605      	mov	r5, r0
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	460c      	mov	r4, r1
 8007a36:	b118      	cbz	r0, 8007a40 <__swsetup_r+0x14>
 8007a38:	6a03      	ldr	r3, [r0, #32]
 8007a3a:	b90b      	cbnz	r3, 8007a40 <__swsetup_r+0x14>
 8007a3c:	f7fd ff94 	bl	8005968 <__sinit>
 8007a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a44:	0719      	lsls	r1, r3, #28
 8007a46:	d422      	bmi.n	8007a8e <__swsetup_r+0x62>
 8007a48:	06da      	lsls	r2, r3, #27
 8007a4a:	d407      	bmi.n	8007a5c <__swsetup_r+0x30>
 8007a4c:	2209      	movs	r2, #9
 8007a4e:	602a      	str	r2, [r5, #0]
 8007a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	81a3      	strh	r3, [r4, #12]
 8007a5a:	e033      	b.n	8007ac4 <__swsetup_r+0x98>
 8007a5c:	0758      	lsls	r0, r3, #29
 8007a5e:	d512      	bpl.n	8007a86 <__swsetup_r+0x5a>
 8007a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a62:	b141      	cbz	r1, 8007a76 <__swsetup_r+0x4a>
 8007a64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	d002      	beq.n	8007a72 <__swsetup_r+0x46>
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f7fe ff17 	bl	80068a0 <_free_r>
 8007a72:	2300      	movs	r3, #0
 8007a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6063      	str	r3, [r4, #4]
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	f043 0308 	orr.w	r3, r3, #8
 8007a8c:	81a3      	strh	r3, [r4, #12]
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	b94b      	cbnz	r3, 8007aa6 <__swsetup_r+0x7a>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a9c:	d003      	beq.n	8007aa6 <__swsetup_r+0x7a>
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 f882 	bl	8007baa <__smakebuf_r>
 8007aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aaa:	f013 0201 	ands.w	r2, r3, #1
 8007aae:	d00a      	beq.n	8007ac6 <__swsetup_r+0x9a>
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	60a2      	str	r2, [r4, #8]
 8007ab4:	6962      	ldr	r2, [r4, #20]
 8007ab6:	4252      	negs	r2, r2
 8007ab8:	61a2      	str	r2, [r4, #24]
 8007aba:	6922      	ldr	r2, [r4, #16]
 8007abc:	b942      	cbnz	r2, 8007ad0 <__swsetup_r+0xa4>
 8007abe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ac2:	d1c5      	bne.n	8007a50 <__swsetup_r+0x24>
 8007ac4:	bd38      	pop	{r3, r4, r5, pc}
 8007ac6:	0799      	lsls	r1, r3, #30
 8007ac8:	bf58      	it	pl
 8007aca:	6962      	ldrpl	r2, [r4, #20]
 8007acc:	60a2      	str	r2, [r4, #8]
 8007ace:	e7f4      	b.n	8007aba <__swsetup_r+0x8e>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e7f7      	b.n	8007ac4 <__swsetup_r+0x98>
 8007ad4:	20000018 	.word	0x20000018

08007ad8 <_raise_r>:
 8007ad8:	291f      	cmp	r1, #31
 8007ada:	b538      	push	{r3, r4, r5, lr}
 8007adc:	4605      	mov	r5, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	d904      	bls.n	8007aec <_raise_r+0x14>
 8007ae2:	2316      	movs	r3, #22
 8007ae4:	6003      	str	r3, [r0, #0]
 8007ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007aee:	b112      	cbz	r2, 8007af6 <_raise_r+0x1e>
 8007af0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007af4:	b94b      	cbnz	r3, 8007b0a <_raise_r+0x32>
 8007af6:	4628      	mov	r0, r5
 8007af8:	f000 f830 	bl	8007b5c <_getpid_r>
 8007afc:	4622      	mov	r2, r4
 8007afe:	4601      	mov	r1, r0
 8007b00:	4628      	mov	r0, r5
 8007b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b06:	f000 b817 	b.w	8007b38 <_kill_r>
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d00a      	beq.n	8007b24 <_raise_r+0x4c>
 8007b0e:	1c59      	adds	r1, r3, #1
 8007b10:	d103      	bne.n	8007b1a <_raise_r+0x42>
 8007b12:	2316      	movs	r3, #22
 8007b14:	6003      	str	r3, [r0, #0]
 8007b16:	2001      	movs	r0, #1
 8007b18:	e7e7      	b.n	8007aea <_raise_r+0x12>
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b22:	4798      	blx	r3
 8007b24:	2000      	movs	r0, #0
 8007b26:	e7e0      	b.n	8007aea <_raise_r+0x12>

08007b28 <raise>:
 8007b28:	4b02      	ldr	r3, [pc, #8]	@ (8007b34 <raise+0xc>)
 8007b2a:	4601      	mov	r1, r0
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	f7ff bfd3 	b.w	8007ad8 <_raise_r>
 8007b32:	bf00      	nop
 8007b34:	20000018 	.word	0x20000018

08007b38 <_kill_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4d06      	ldr	r5, [pc, #24]	@ (8007b58 <_kill_r+0x20>)
 8007b3e:	4604      	mov	r4, r0
 8007b40:	4608      	mov	r0, r1
 8007b42:	4611      	mov	r1, r2
 8007b44:	602b      	str	r3, [r5, #0]
 8007b46:	f7fa fa13 	bl	8001f70 <_kill>
 8007b4a:	1c43      	adds	r3, r0, #1
 8007b4c:	d102      	bne.n	8007b54 <_kill_r+0x1c>
 8007b4e:	682b      	ldr	r3, [r5, #0]
 8007b50:	b103      	cbz	r3, 8007b54 <_kill_r+0x1c>
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	bd38      	pop	{r3, r4, r5, pc}
 8007b56:	bf00      	nop
 8007b58:	2000093c 	.word	0x2000093c

08007b5c <_getpid_r>:
 8007b5c:	f7fa ba01 	b.w	8001f62 <_getpid>

08007b60 <__swhatbuf_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	460c      	mov	r4, r1
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	4615      	mov	r5, r2
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	461e      	mov	r6, r3
 8007b6e:	b096      	sub	sp, #88	@ 0x58
 8007b70:	da0c      	bge.n	8007b8c <__swhatbuf_r+0x2c>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	2100      	movs	r1, #0
 8007b76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b7a:	bf14      	ite	ne
 8007b7c:	2340      	movne	r3, #64	@ 0x40
 8007b7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b82:	2000      	movs	r0, #0
 8007b84:	6031      	str	r1, [r6, #0]
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	b016      	add	sp, #88	@ 0x58
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	466a      	mov	r2, sp
 8007b8e:	f000 f849 	bl	8007c24 <_fstat_r>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	dbed      	blt.n	8007b72 <__swhatbuf_r+0x12>
 8007b96:	9901      	ldr	r1, [sp, #4]
 8007b98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ba0:	4259      	negs	r1, r3
 8007ba2:	4159      	adcs	r1, r3
 8007ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ba8:	e7eb      	b.n	8007b82 <__swhatbuf_r+0x22>

08007baa <__smakebuf_r>:
 8007baa:	898b      	ldrh	r3, [r1, #12]
 8007bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bae:	079d      	lsls	r5, r3, #30
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	d507      	bpl.n	8007bc6 <__smakebuf_r+0x1c>
 8007bb6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bba:	6023      	str	r3, [r4, #0]
 8007bbc:	6123      	str	r3, [r4, #16]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	6163      	str	r3, [r4, #20]
 8007bc2:	b003      	add	sp, #12
 8007bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc6:	466a      	mov	r2, sp
 8007bc8:	ab01      	add	r3, sp, #4
 8007bca:	f7ff ffc9 	bl	8007b60 <__swhatbuf_r>
 8007bce:	9f00      	ldr	r7, [sp, #0]
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7fe fed5 	bl	8006984 <_malloc_r>
 8007bda:	b948      	cbnz	r0, 8007bf0 <__smakebuf_r+0x46>
 8007bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be0:	059a      	lsls	r2, r3, #22
 8007be2:	d4ee      	bmi.n	8007bc2 <__smakebuf_r+0x18>
 8007be4:	f023 0303 	bic.w	r3, r3, #3
 8007be8:	f043 0302 	orr.w	r3, r3, #2
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	e7e2      	b.n	8007bb6 <__smakebuf_r+0xc>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	9b01      	ldr	r3, [sp, #4]
 8007bfe:	6020      	str	r0, [r4, #0]
 8007c00:	b15b      	cbz	r3, 8007c1a <__smakebuf_r+0x70>
 8007c02:	4630      	mov	r0, r6
 8007c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c08:	f000 f81e 	bl	8007c48 <_isatty_r>
 8007c0c:	b128      	cbz	r0, 8007c1a <__smakebuf_r+0x70>
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f023 0303 	bic.w	r3, r3, #3
 8007c14:	f043 0301 	orr.w	r3, r3, #1
 8007c18:	81a3      	strh	r3, [r4, #12]
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	431d      	orrs	r5, r3
 8007c1e:	81a5      	strh	r5, [r4, #12]
 8007c20:	e7cf      	b.n	8007bc2 <__smakebuf_r+0x18>
	...

08007c24 <_fstat_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	2300      	movs	r3, #0
 8007c28:	4d06      	ldr	r5, [pc, #24]	@ (8007c44 <_fstat_r+0x20>)
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	f7fa f9fc 	bl	800202e <_fstat>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d102      	bne.n	8007c40 <_fstat_r+0x1c>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	b103      	cbz	r3, 8007c40 <_fstat_r+0x1c>
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	bd38      	pop	{r3, r4, r5, pc}
 8007c42:	bf00      	nop
 8007c44:	2000093c 	.word	0x2000093c

08007c48 <_isatty_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4d05      	ldr	r5, [pc, #20]	@ (8007c64 <_isatty_r+0x1c>)
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	602b      	str	r3, [r5, #0]
 8007c54:	f7fa f9fa 	bl	800204c <_isatty>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_isatty_r+0x1a>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_isatty_r+0x1a>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	2000093c 	.word	0x2000093c

08007c68 <_init>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr

08007c74 <_fini>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr
