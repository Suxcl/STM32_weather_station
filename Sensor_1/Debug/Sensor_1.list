
Sensor_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003324  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003434  08003434  00004434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c4  080034c4  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080034c4  080034c4  000044c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034cc  080034cc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034cc  080034cc  000044cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080034d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  20000060  08003530  00005060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  08003530  00005770  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000657f  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ac  00000000  00000000  0000b604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0000cfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000546  00000000  00000000  0000d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001773e  00000000  00000000  0000dc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fd7  00000000  00000000  0002536c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082789  00000000  00000000  0002e343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0acc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002078  00000000  00000000  000b0b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000b2b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800341c 	.word	0x0800341c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800341c 	.word	0x0800341c

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b968 	b.w	8000438 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9d08      	ldr	r5, [sp, #32]
 8000186:	460c      	mov	r4, r1
 8000188:	2b00      	cmp	r3, #0
 800018a:	d14e      	bne.n	800022a <__udivmoddi4+0xaa>
 800018c:	4694      	mov	ip, r2
 800018e:	458c      	cmp	ip, r1
 8000190:	4686      	mov	lr, r0
 8000192:	fab2 f282 	clz	r2, r2
 8000196:	d962      	bls.n	800025e <__udivmoddi4+0xde>
 8000198:	b14a      	cbz	r2, 80001ae <__udivmoddi4+0x2e>
 800019a:	f1c2 0320 	rsb	r3, r2, #32
 800019e:	4091      	lsls	r1, r2
 80001a0:	fa20 f303 	lsr.w	r3, r0, r3
 80001a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001a8:	4319      	orrs	r1, r3
 80001aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001b6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ba:	fa1f f68c 	uxth.w	r6, ip
 80001be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001c6:	fb04 f106 	mul.w	r1, r4, r6
 80001ca:	4299      	cmp	r1, r3
 80001cc:	d90a      	bls.n	80001e4 <__udivmoddi4+0x64>
 80001ce:	eb1c 0303 	adds.w	r3, ip, r3
 80001d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80001d6:	f080 8110 	bcs.w	80003fa <__udivmoddi4+0x27a>
 80001da:	4299      	cmp	r1, r3
 80001dc:	f240 810d 	bls.w	80003fa <__udivmoddi4+0x27a>
 80001e0:	3c02      	subs	r4, #2
 80001e2:	4463      	add	r3, ip
 80001e4:	1a59      	subs	r1, r3, r1
 80001e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80001ea:	fb07 1110 	mls	r1, r7, r0, r1
 80001ee:	fb00 f606 	mul.w	r6, r0, r6
 80001f2:	fa1f f38e 	uxth.w	r3, lr
 80001f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fa:	429e      	cmp	r6, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f100 31ff 	add.w	r1, r0, #4294967295
 8000206:	f080 80fa 	bcs.w	80003fe <__udivmoddi4+0x27e>
 800020a:	429e      	cmp	r6, r3
 800020c:	f240 80f7 	bls.w	80003fe <__udivmoddi4+0x27e>
 8000210:	4463      	add	r3, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	1b9b      	subs	r3, r3, r6
 8000218:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800021c:	b11d      	cbz	r5, 8000226 <__udivmoddi4+0xa6>
 800021e:	40d3      	lsrs	r3, r2
 8000220:	2200      	movs	r2, #0
 8000222:	e9c5 3200 	strd	r3, r2, [r5]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d905      	bls.n	800023a <__udivmoddi4+0xba>
 800022e:	b10d      	cbz	r5, 8000234 <__udivmoddi4+0xb4>
 8000230:	e9c5 0100 	strd	r0, r1, [r5]
 8000234:	2100      	movs	r1, #0
 8000236:	4608      	mov	r0, r1
 8000238:	e7f5      	b.n	8000226 <__udivmoddi4+0xa6>
 800023a:	fab3 f183 	clz	r1, r3
 800023e:	2900      	cmp	r1, #0
 8000240:	d146      	bne.n	80002d0 <__udivmoddi4+0x150>
 8000242:	42a3      	cmp	r3, r4
 8000244:	d302      	bcc.n	800024c <__udivmoddi4+0xcc>
 8000246:	4290      	cmp	r0, r2
 8000248:	f0c0 80ee 	bcc.w	8000428 <__udivmoddi4+0x2a8>
 800024c:	1a86      	subs	r6, r0, r2
 800024e:	eb64 0303 	sbc.w	r3, r4, r3
 8000252:	2001      	movs	r0, #1
 8000254:	2d00      	cmp	r5, #0
 8000256:	d0e6      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000258:	e9c5 6300 	strd	r6, r3, [r5]
 800025c:	e7e3      	b.n	8000226 <__udivmoddi4+0xa6>
 800025e:	2a00      	cmp	r2, #0
 8000260:	f040 808f 	bne.w	8000382 <__udivmoddi4+0x202>
 8000264:	eba1 040c 	sub.w	r4, r1, ip
 8000268:	2101      	movs	r1, #1
 800026a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fbb4 f6f8 	udiv	r6, r4, r8
 8000276:	fb08 4416 	mls	r4, r8, r6, r4
 800027a:	fb07 f006 	mul.w	r0, r7, r6
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000286:	4298      	cmp	r0, r3
 8000288:	d908      	bls.n	800029c <__udivmoddi4+0x11c>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000292:	d202      	bcs.n	800029a <__udivmoddi4+0x11a>
 8000294:	4298      	cmp	r0, r3
 8000296:	f200 80cb 	bhi.w	8000430 <__udivmoddi4+0x2b0>
 800029a:	4626      	mov	r6, r4
 800029c:	1a1c      	subs	r4, r3, r0
 800029e:	fbb4 f0f8 	udiv	r0, r4, r8
 80002a2:	fb08 4410 	mls	r4, r8, r0, r4
 80002a6:	fb00 f707 	mul.w	r7, r0, r7
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	429f      	cmp	r7, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x148>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x146>
 80002c0:	429f      	cmp	r7, r3
 80002c2:	f200 80ae 	bhi.w	8000422 <__udivmoddi4+0x2a2>
 80002c6:	4620      	mov	r0, r4
 80002c8:	1bdb      	subs	r3, r3, r7
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	e7a5      	b.n	800021c <__udivmoddi4+0x9c>
 80002d0:	f1c1 0720 	rsb	r7, r1, #32
 80002d4:	408b      	lsls	r3, r1
 80002d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002da:	ea4c 0c03 	orr.w	ip, ip, r3
 80002de:	fa24 f607 	lsr.w	r6, r4, r7
 80002e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002e6:	fbb6 f8f9 	udiv	r8, r6, r9
 80002ea:	fa1f fe8c 	uxth.w	lr, ip
 80002ee:	fb09 6618 	mls	r6, r9, r8, r6
 80002f2:	fa20 f307 	lsr.w	r3, r0, r7
 80002f6:	408c      	lsls	r4, r1
 80002f8:	fa00 fa01 	lsl.w	sl, r0, r1
 80002fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000300:	431c      	orrs	r4, r3
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000308:	4298      	cmp	r0, r3
 800030a:	fa02 f201 	lsl.w	r2, r2, r1
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x1a6>
 8000310:	eb1c 0303 	adds.w	r3, ip, r3
 8000314:	f108 36ff 	add.w	r6, r8, #4294967295
 8000318:	f080 8081 	bcs.w	800041e <__udivmoddi4+0x29e>
 800031c:	4298      	cmp	r0, r3
 800031e:	d97e      	bls.n	800041e <__udivmoddi4+0x29e>
 8000320:	f1a8 0802 	sub.w	r8, r8, #2
 8000324:	4463      	add	r3, ip
 8000326:	1a1e      	subs	r6, r3, r0
 8000328:	fbb6 f3f9 	udiv	r3, r6, r9
 800032c:	fb09 6613 	mls	r6, r9, r3, r6
 8000330:	fb03 fe0e 	mul.w	lr, r3, lr
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800033a:	45a6      	cmp	lr, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x1d0>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f103 30ff 	add.w	r0, r3, #4294967295
 8000346:	d266      	bcs.n	8000416 <__udivmoddi4+0x296>
 8000348:	45a6      	cmp	lr, r4
 800034a:	d964      	bls.n	8000416 <__udivmoddi4+0x296>
 800034c:	3b02      	subs	r3, #2
 800034e:	4464      	add	r4, ip
 8000350:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000354:	fba0 8302 	umull	r8, r3, r0, r2
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	429c      	cmp	r4, r3
 800035e:	46c6      	mov	lr, r8
 8000360:	461e      	mov	r6, r3
 8000362:	d350      	bcc.n	8000406 <__udivmoddi4+0x286>
 8000364:	d04d      	beq.n	8000402 <__udivmoddi4+0x282>
 8000366:	b155      	cbz	r5, 800037e <__udivmoddi4+0x1fe>
 8000368:	ebba 030e 	subs.w	r3, sl, lr
 800036c:	eb64 0406 	sbc.w	r4, r4, r6
 8000370:	fa04 f707 	lsl.w	r7, r4, r7
 8000374:	40cb      	lsrs	r3, r1
 8000376:	431f      	orrs	r7, r3
 8000378:	40cc      	lsrs	r4, r1
 800037a:	e9c5 7400 	strd	r7, r4, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	e751      	b.n	8000226 <__udivmoddi4+0xa6>
 8000382:	fa0c fc02 	lsl.w	ip, ip, r2
 8000386:	f1c2 0320 	rsb	r3, r2, #32
 800038a:	40d9      	lsrs	r1, r3
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa00 fe02 	lsl.w	lr, r0, r2
 8000398:	fbb1 f0f8 	udiv	r0, r1, r8
 800039c:	fb08 1110 	mls	r1, r8, r0, r1
 80003a0:	4094      	lsls	r4, r2
 80003a2:	431c      	orrs	r4, r3
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	0c23      	lsrs	r3, r4, #16
 80003aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ae:	fb00 f107 	mul.w	r1, r0, r7
 80003b2:	4299      	cmp	r1, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x248>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 36ff 	add.w	r6, r0, #4294967295
 80003be:	d22c      	bcs.n	800041a <__udivmoddi4+0x29a>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d92a      	bls.n	800041a <__udivmoddi4+0x29a>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4463      	add	r3, ip
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	fbb3 f1f8 	udiv	r1, r3, r8
 80003ce:	fb08 3311 	mls	r3, r8, r1, r3
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d8:	fb01 f307 	mul.w	r3, r1, r7
 80003dc:	42a3      	cmp	r3, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x272>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f101 36ff 	add.w	r6, r1, #4294967295
 80003e8:	d213      	bcs.n	8000412 <__udivmoddi4+0x292>
 80003ea:	42a3      	cmp	r3, r4
 80003ec:	d911      	bls.n	8000412 <__udivmoddi4+0x292>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	1ae4      	subs	r4, r4, r3
 80003f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f8:	e73b      	b.n	8000272 <__udivmoddi4+0xf2>
 80003fa:	4604      	mov	r4, r0
 80003fc:	e6f2      	b.n	80001e4 <__udivmoddi4+0x64>
 80003fe:	4608      	mov	r0, r1
 8000400:	e708      	b.n	8000214 <__udivmoddi4+0x94>
 8000402:	45c2      	cmp	sl, r8
 8000404:	d2af      	bcs.n	8000366 <__udivmoddi4+0x1e6>
 8000406:	ebb8 0e02 	subs.w	lr, r8, r2
 800040a:	eb63 060c 	sbc.w	r6, r3, ip
 800040e:	3801      	subs	r0, #1
 8000410:	e7a9      	b.n	8000366 <__udivmoddi4+0x1e6>
 8000412:	4631      	mov	r1, r6
 8000414:	e7ed      	b.n	80003f2 <__udivmoddi4+0x272>
 8000416:	4603      	mov	r3, r0
 8000418:	e79a      	b.n	8000350 <__udivmoddi4+0x1d0>
 800041a:	4630      	mov	r0, r6
 800041c:	e7d4      	b.n	80003c8 <__udivmoddi4+0x248>
 800041e:	46b0      	mov	r8, r6
 8000420:	e781      	b.n	8000326 <__udivmoddi4+0x1a6>
 8000422:	4463      	add	r3, ip
 8000424:	3802      	subs	r0, #2
 8000426:	e74f      	b.n	80002c8 <__udivmoddi4+0x148>
 8000428:	4606      	mov	r6, r0
 800042a:	4623      	mov	r3, r4
 800042c:	4608      	mov	r0, r1
 800042e:	e711      	b.n	8000254 <__udivmoddi4+0xd4>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	e732      	b.n	800029c <__udivmoddi4+0x11c>
 8000436:	bf00      	nop

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	78fa      	ldrb	r2, [r7, #3]
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fbd0 	bl	8000bf6 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fbeb 	bl	8000c36 <SX1278_hw_SPIReadByte>
 8000460:	4603      	mov	r3, r0
 8000462:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fb88 	bl	8000b80 <SX1278_hw_SetNSS>
	return tmp;
 8000470:	7bfb      	ldrb	r3, [r7, #15]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	460b      	mov	r3, r1
 8000484:	70fb      	strb	r3, [r7, #3]
 8000486:	4613      	mov	r3, r2
 8000488:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fb75 	bl	8000b80 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	4610      	mov	r0, r2
 80004a6:	f000 fba6 	bl	8000bf6 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	78ba      	ldrb	r2, [r7, #2]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fb9f 	bl	8000bf6 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fb5e 	bl	8000b80 <SX1278_hw_SetNSS>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	607a      	str	r2, [r7, #4]
 80004d6:	461a      	mov	r2, r3
 80004d8:	460b      	mov	r3, r1
 80004da:	72fb      	strb	r3, [r7, #11]
 80004dc:	4613      	mov	r3, r2
 80004de:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004e0:	7abb      	ldrb	r3, [r7, #10]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d927      	bls.n	8000536 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fb47 	bl	8000b80 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	7afa      	ldrb	r2, [r7, #11]
 80004f8:	4611      	mov	r1, r2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fb7b 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000500:	2300      	movs	r3, #0
 8000502:	75fb      	strb	r3, [r7, #23]
 8000504:	e00c      	b.n	8000520 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6819      	ldr	r1, [r3, #0]
 800050a:	7dfb      	ldrb	r3, [r7, #23]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	18d4      	adds	r4, r2, r3
 8000510:	4608      	mov	r0, r1
 8000512:	f000 fb90 	bl	8000c36 <SX1278_hw_SPIReadByte>
 8000516:	4603      	mov	r3, r0
 8000518:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800051a:	7dfb      	ldrb	r3, [r7, #23]
 800051c:	3301      	adds	r3, #1
 800051e:	75fb      	strb	r3, [r7, #23]
 8000520:	7dfa      	ldrb	r2, [r7, #23]
 8000522:	7abb      	ldrb	r3, [r7, #10]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3ee      	bcc.n	8000506 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fb26 	bl	8000b80 <SX1278_hw_SetNSS>
 8000534:	e000      	b.n	8000538 <SX1278_SPIBurstRead+0x6c>
		return;
 8000536:	bf00      	nop
	}
}
 8000538:	371c      	adds	r7, #28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd90      	pop	{r4, r7, pc}

0800053e <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	607a      	str	r2, [r7, #4]
 8000548:	461a      	mov	r2, r3
 800054a:	460b      	mov	r3, r1
 800054c:	72fb      	strb	r3, [r7, #11]
 800054e:	4613      	mov	r3, r2
 8000550:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000552:	7abb      	ldrb	r3, [r7, #10]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d929      	bls.n	80005ac <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fb0e 	bl	8000b80 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	7afb      	ldrb	r3, [r7, #11]
 800056a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	4610      	mov	r0, r2
 8000574:	f000 fb3f 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	75fb      	strb	r3, [r7, #23]
 800057c:	e00b      	b.n	8000596 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	f000 fb33 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000590:	7dfb      	ldrb	r3, [r7, #23]
 8000592:	3301      	adds	r3, #1
 8000594:	75fb      	strb	r3, [r7, #23]
 8000596:	7dfa      	ldrb	r2, [r7, #23]
 8000598:	7abb      	ldrb	r3, [r7, #10]
 800059a:	429a      	cmp	r2, r3
 800059c:	d3ef      	bcc.n	800057e <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2101      	movs	r1, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 faeb 	bl	8000b80 <SX1278_hw_SetNSS>
 80005aa:	e000      	b.n	80005ae <SX1278_SPIBurstWrite+0x70>
		return;
 80005ac:	bf00      	nop
	}
}
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f90d 	bl	80007dc <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 fb5d 	bl	8000c82 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f917 	bl	80007fc <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	f04f 0100 	mov.w	r1, #0
 80005dc:	04d9      	lsls	r1, r3, #19
 80005de:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005e2:	04d0      	lsls	r0, r2, #19
 80005e4:	4a6f      	ldr	r2, [pc, #444]	@ (80007a4 <SX1278_config+0x1f0>)
 80005e6:	f04f 0300 	mov.w	r3, #0
 80005ea:	f7ff fdb1 	bl	8000150 <__aeabi_uldivmod>
 80005ee:	4602      	mov	r2, r0
 80005f0:	460b      	mov	r3, r1
 80005f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80005f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005fa:	f04f 0200 	mov.w	r2, #0
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	0c02      	lsrs	r2, r0, #16
 8000604:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000608:	0c0b      	lsrs	r3, r1, #16
 800060a:	b2d3      	uxtb	r3, r2
 800060c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800060e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	0a02      	lsrs	r2, r0, #8
 800061c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000620:	0a0b      	lsrs	r3, r1, #8
 8000622:	b2d3      	uxtb	r3, r2
 8000624:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000626:	7c3b      	ldrb	r3, [r7, #16]
 8000628:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800062a:	f107 020c 	add.w	r2, r7, #12
 800062e:	2303      	movs	r3, #3
 8000630:	2106      	movs	r1, #6
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ff83 	bl	800053e <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000638:	2234      	movs	r2, #52	@ 0x34
 800063a:	2139      	movs	r1, #57	@ 0x39
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ff1c 	bl	800047a <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7c1b      	ldrb	r3, [r3, #16]
 8000646:	461a      	mov	r2, r3
 8000648:	4b57      	ldr	r3, [pc, #348]	@ (80007a8 <SX1278_config+0x1f4>)
 800064a:	5c9b      	ldrb	r3, [r3, r2]
 800064c:	461a      	mov	r2, r3
 800064e:	2109      	movs	r1, #9
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff12 	bl	800047a <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000656:	220b      	movs	r2, #11
 8000658:	210b      	movs	r1, #11
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff ff0d 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000660:	2223      	movs	r2, #35	@ 0x23
 8000662:	210c      	movs	r1, #12
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ff08 	bl	800047a <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7c5b      	ldrb	r3, [r3, #17]
 800066e:	461a      	mov	r2, r3
 8000670:	4b4e      	ldr	r3, [pc, #312]	@ (80007ac <SX1278_config+0x1f8>)
 8000672:	5c9b      	ldrb	r3, [r3, r2]
 8000674:	2b06      	cmp	r3, #6
 8000676:	d147      	bne.n	8000708 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7c9b      	ldrb	r3, [r3, #18]
 800067c:	461a      	mov	r2, r3
 800067e:	4b4c      	ldr	r3, [pc, #304]	@ (80007b0 <SX1278_config+0x1fc>)
 8000680:	5c9b      	ldrb	r3, [r3, r2]
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7cdb      	ldrb	r3, [r3, #19]
 800068a:	4619      	mov	r1, r3
 800068c:	4b49      	ldr	r3, [pc, #292]	@ (80007b4 <SX1278_config+0x200>)
 800068e:	5c5b      	ldrb	r3, [r3, r1]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000698:	3301      	adds	r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	211d      	movs	r1, #29
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff feea 	bl	800047a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7c5b      	ldrb	r3, [r3, #17]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b3f      	ldr	r3, [pc, #252]	@ (80007ac <SX1278_config+0x1f8>)
 80006ae:	5c9b      	ldrb	r3, [r3, r2]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7d1b      	ldrb	r3, [r3, #20]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4b3f      	ldr	r3, [pc, #252]	@ (80007b8 <SX1278_config+0x204>)
 80006bc:	5c5b      	ldrb	r3, [r3, r1]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4413      	add	r3, r2
 80006c4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006c6:	3303      	adds	r3, #3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	211e      	movs	r1, #30
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff fed3 	bl	800047a <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006d4:	2131      	movs	r1, #49	@ 0x31
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff feb0 	bl	800043c <SX1278_SPIRead>
 80006dc:	4603      	mov	r3, r0
 80006de:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	f023 0307 	bic.w	r3, r3, #7
 80006e6:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f043 0305 	orr.w	r3, r3, #5
 80006ee:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	461a      	mov	r2, r3
 80006f4:	2131      	movs	r1, #49	@ 0x31
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff febf 	bl	800047a <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80006fc:	220c      	movs	r2, #12
 80006fe:	2137      	movs	r1, #55	@ 0x37
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff feba 	bl	800047a <SX1278_SPIWrite>
 8000706:	e029      	b.n	800075c <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7c9b      	ldrb	r3, [r3, #18]
 800070c:	461a      	mov	r2, r3
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <SX1278_config+0x1fc>)
 8000710:	5c9b      	ldrb	r3, [r3, r2]
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	7cdb      	ldrb	r3, [r3, #19]
 800071a:	4619      	mov	r1, r3
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <SX1278_config+0x200>)
 800071e:	5c5b      	ldrb	r3, [r3, r1]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000724:	4413      	add	r3, r2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	211d      	movs	r1, #29
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fea4 	bl	800047a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7c5b      	ldrb	r3, [r3, #17]
 8000736:	461a      	mov	r2, r3
 8000738:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <SX1278_config+0x1f8>)
 800073a:	5c9b      	ldrb	r3, [r3, r2]
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7d1b      	ldrb	r3, [r3, #20]
 8000744:	4619      	mov	r1, r3
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <SX1278_config+0x204>)
 8000748:	5c5b      	ldrb	r3, [r3, r1]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	211e      	movs	r1, #30
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fe8f 	bl	800047a <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800075c:	2204      	movs	r2, #4
 800075e:	2126      	movs	r1, #38	@ 0x26
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fe8a 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000766:	2208      	movs	r2, #8
 8000768:	211f      	movs	r1, #31
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fe85 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe80 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800077a:	2208      	movs	r2, #8
 800077c:	2121      	movs	r1, #33	@ 0x21
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe7b 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000784:	2201      	movs	r2, #1
 8000786:	2141      	movs	r1, #65	@ 0x41
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fe76 	bl	800047a <SX1278_SPIWrite>
	module->readBytes = 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 f810 	bl	80007bc <SX1278_standby>
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	01e84800 	.word	0x01e84800
 80007a8:	0800344c 	.word	0x0800344c
 80007ac:	08003450 	.word	0x08003450
 80007b0:	08003458 	.word	0x08003458
 80007b4:	08003464 	.word	0x08003464
 80007b8:	08003468 	.word	0x08003468

080007bc <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007c4:	2209      	movs	r2, #9
 80007c6:	2101      	movs	r1, #1
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff fe56 	bl	800047a <SX1278_SPIWrite>
	module->status = STANDBY;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2201      	movs	r2, #1
 80007d2:	759a      	strb	r2, [r3, #22]
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80007e4:	2208      	movs	r2, #8
 80007e6:	2101      	movs	r1, #1
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fe46 	bl	800047a <SX1278_SPIWrite>
	module->status = SLEEP;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	759a      	strb	r2, [r3, #22]
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000804:	2288      	movs	r2, #136	@ 0x88
 8000806:	2101      	movs	r1, #1
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff fe36 	bl	800047a <SX1278_SPIWrite>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800081e:	22ff      	movs	r2, #255	@ 0xff
 8000820:	2112      	movs	r1, #18
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff fe29 	bl	800047a <SX1278_SPIWrite>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	460b      	mov	r3, r1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	7afa      	ldrb	r2, [r7, #11]
 8000842:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f7ff feb5 	bl	80005b4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800084a:	2284      	movs	r2, #132	@ 0x84
 800084c:	214d      	movs	r1, #77	@ 0x4d
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f7ff fe13 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000854:	22ff      	movs	r2, #255	@ 0xff
 8000856:	2124      	movs	r1, #36	@ 0x24
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff fe0e 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800085e:	2201      	movs	r2, #1
 8000860:	2140      	movs	r1, #64	@ 0x40
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f7ff fe09 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000868:	223f      	movs	r2, #63	@ 0x3f
 800086a:	2111      	movs	r1, #17
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff fe04 	bl	800047a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f7ff ffcf 	bl	8000816 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000878:	7afb      	ldrb	r3, [r7, #11]
 800087a:	461a      	mov	r2, r3
 800087c:	2122      	movs	r1, #34	@ 0x22
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fdfb 	bl	800047a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000884:	210f      	movs	r1, #15
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff fdd8 	bl	800043c <SX1278_SPIRead>
 800088c:	4603      	mov	r3, r0
 800088e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	461a      	mov	r2, r3
 8000894:	210d      	movs	r1, #13
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff fdef 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800089c:	228d      	movs	r2, #141	@ 0x8d
 800089e:	2101      	movs	r1, #1
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fdea 	bl	800047a <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008ae:	2118      	movs	r1, #24
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff fdc3 	bl	800043c <SX1278_SPIRead>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d104      	bne.n	80008ca <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2203      	movs	r2, #3
 80008c4:	759a      	strb	r2, [r3, #22]
			return 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e013      	b.n	80008f2 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d109      	bne.n	80008ea <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f967 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff fe67 	bl	80005b4 <SX1278_config>
			return 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e003      	b.n	80008f2 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 f9c9 	bl	8000c82 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008f0:	e7dd      	b.n	80008ae <SX1278_LoRaEntryRx+0x7e>
	}
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f9c6 	bl	8000c98 <SX1278_hw_GetDIO0>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d030      	beq.n	8000974 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3317      	adds	r3, #23
 8000916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f002 f8d7 	bl	8002ad0 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000922:	2110      	movs	r1, #16
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fd89 	bl	800043c <SX1278_SPIRead>
 800092a:	4603      	mov	r3, r0
 800092c:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	461a      	mov	r2, r3
 8000932:	210d      	movs	r1, #13
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fda0 	bl	800047a <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7c5b      	ldrb	r3, [r3, #17]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7d5b      	ldrb	r3, [r3, #21]
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e005      	b.n	8000956 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800094a:	2113      	movs	r1, #19
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fd75 	bl	800043c <SX1278_SPIRead>
 8000952:	4603      	mov	r3, r0
 8000954:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f103 0217 	add.w	r2, r3, #23
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	2100      	movs	r1, #0
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fdb3 	bl	80004cc <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff51 	bl	8000816 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	460b      	mov	r3, r1
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	7afa      	ldrb	r2, [r7, #11]
 8000994:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f7ff fe0c 	bl	80005b4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800099c:	2287      	movs	r2, #135	@ 0x87
 800099e:	214d      	movs	r1, #77	@ 0x4d
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff fd6a 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009a6:	2200      	movs	r2, #0
 80009a8:	2124      	movs	r1, #36	@ 0x24
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fd65 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009b0:	2241      	movs	r2, #65	@ 0x41
 80009b2:	2140      	movs	r1, #64	@ 0x40
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fd60 	bl	800047a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f7ff ff2b 	bl	8000816 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009c0:	22f7      	movs	r2, #247	@ 0xf7
 80009c2:	2111      	movs	r1, #17
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f7ff fd58 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009ca:	7afb      	ldrb	r3, [r7, #11]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2122      	movs	r1, #34	@ 0x22
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fd52 	bl	800047a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009d6:	210e      	movs	r1, #14
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fd2f 	bl	800043c <SX1278_SPIRead>
 80009de:	4603      	mov	r3, r0
 80009e0:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	461a      	mov	r2, r3
 80009e6:	210d      	movs	r1, #13
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f7ff fd46 	bl	800047a <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80009ee:	2122      	movs	r1, #34	@ 0x22
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff fd23 	bl	800043c <SX1278_SPIRead>
 80009f6:	4603      	mov	r3, r0
 80009f8:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80009fa:	7dba      	ldrb	r2, [r7, #22]
 80009fc:	7afb      	ldrb	r3, [r7, #11]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d104      	bne.n	8000a0c <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e00e      	b.n	8000a2a <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1ea      	bne.n	80009ee <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f8c6 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff fdc6 	bl	80005b4 <SX1278_config>
			return 0;
 8000a28:	2300      	movs	r3, #0
		}
	}
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	2100      	movs	r1, #0
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fd78 	bl	800053e <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a4e:	228b      	movs	r2, #139	@ 0x8b
 8000a50:	2101      	movs	r1, #1
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fd11 	bl	800047a <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f91b 	bl	8000c98 <SX1278_hw_GetDIO0>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00b      	beq.n	8000a80 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a68:	2112      	movs	r1, #18
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff fce6 	bl	800043c <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fed0 	bl	8000816 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fea0 	bl	80007bc <SX1278_standby>
			return 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e013      	b.n	8000aa8 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d109      	bne.n	8000aa0 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f88c 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff fd8c 	bl	80005b4 <SX1278_config>
			return 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e003      	b.n	8000aa8 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 f8ee 	bl	8000c82 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000aa6:	e7d7      	b.n	8000a58 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f848 	bl	8000b56 <SX1278_hw_init>
	module->frequency = frequency;
 8000ac6:	68f9      	ldr	r1, [r7, #12]
 8000ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000acc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	7e3a      	ldrb	r2, [r7, #24]
 8000ad4:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	7f3a      	ldrb	r2, [r7, #28]
 8000ada:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ae2:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000aea:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000af2:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000afa:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff fd59 	bl	80005b4 <SX1278_config>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	4613      	mov	r3, r2
 8000b16:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d003      	beq.n	8000b2c <SX1278_read+0x22>
		length = module->readBytes;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b2a:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3317      	adds	r3, #23
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	4619      	mov	r1, r3
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f002 f815 	bl	8002b64 <memcpy>
	rxBuf[length] = '\0';
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	4413      	add	r3, r2
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000b5e:	2101      	movs	r1, #1
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f80d 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6858      	ldr	r0, [r3, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	4619      	mov	r1, r3
 8000b74:	f000 ff3b 	bl	80019ee <HAL_GPIO_WritePin>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6958      	ldr	r0, [r3, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	b299      	uxth	r1, r3
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	f000 ff24 	bl	80019ee <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffe1 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6858      	ldr	r0, [r3, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f000 ff0f 	bl	80019ee <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 f856 	bl	8000c82 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6858      	ldr	r0, [r3, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	2201      	movs	r2, #1
 8000be2:	4619      	mov	r1, r3
 8000be4:	f000 ff03 	bl	80019ee <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000be8:	2064      	movs	r0, #100	@ 0x64
 8000bea:	f000 f84a 	bl	8000c82 <SX1278_hw_DelayMs>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ffbb 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6998      	ldr	r0, [r3, #24]
 8000c0e:	1cf9      	adds	r1, r7, #3
 8000c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c14:	2201      	movs	r2, #1
 8000c16:	f001 fb87 	bl	8002328 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c1a:	bf00      	nop
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fe6e 	bl	8002902 <HAL_SPI_GetState>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d1f7      	bne.n	8000c1c <SX1278_hw_SPICommand+0x26>
		;
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af02      	add	r7, sp, #8
 8000c3c:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff99 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6998      	ldr	r0, [r3, #24]
 8000c52:	f107 020e 	add.w	r2, r7, #14
 8000c56:	f107 010f 	add.w	r1, r7, #15
 8000c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	f001 fca5 	bl	80025b0 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c66:	bf00      	nop
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fe48 	bl	8002902 <HAL_SPI_GetState>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d1f7      	bne.n	8000c68 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 fbe2 	bl	8001454 <HAL_Delay>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	4619      	mov	r1, r3
 8000cac:	4610      	mov	r0, r2
 8000cae:	f000 fe87 	bl	80019c0 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	bf0c      	ite	eq
 8000cb8:	2301      	moveq	r3, #1
 8000cba:	2300      	movne	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cdc:	4b41      	ldr	r3, [pc, #260]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a40      	ldr	r2, [pc, #256]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000cfa:	f043 0320 	orr.w	r3, r3, #32
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b38      	ldr	r3, [pc, #224]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0320 	and.w	r3, r3, #32
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4b35      	ldr	r3, [pc, #212]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a34      	ldr	r2, [pc, #208]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a2e      	ldr	r2, [pc, #184]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <MX_GPIO_Init+0x11c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d42:	4829      	ldr	r0, [pc, #164]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d44:	f000 fe53 	bl	80019ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4827      	ldr	r0, [pc, #156]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d4e:	f000 fe4e 	bl	80019ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2101      	movs	r1, #1
 8000d56:	4826      	ldr	r0, [pc, #152]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000d58:	f000 fe49 	bl	80019ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	481c      	ldr	r0, [pc, #112]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d76:	f000 fc9f 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4816      	ldr	r0, [pc, #88]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d92:	f000 fc91 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000d96:	2301      	movs	r3, #1
 8000d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	4810      	ldr	r0, [pc, #64]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000dae:	f000 fc83 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000db2:	2302      	movs	r3, #2
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_GPIO_Init+0x12c>)
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480a      	ldr	r0, [pc, #40]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000dc6:	f000 fc77 	bl	80016b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2007      	movs	r0, #7
 8000dd0:	f000 fc3b 	bl	800164a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000dd4:	2007      	movs	r0, #7
 8000dd6:	f000 fc54 	bl	8001682 <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	10110000 	.word	0x10110000

08000df8 <clearTx>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clearTx(){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	memset(LoRaTxBuffer,0,sizeof(LoRaTxBuffer));
 8000dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e00:	2100      	movs	r1, #0
 8000e02:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <clearTx+0x14>)
 8000e04:	f001 fe64 	bl	8002ad0 <memset>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200001b8 	.word	0x200001b8

08000e10 <clearRx>:

void clearRx(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	memset(LoRaRxBuffer,0,sizeof(LoRaTxBuffer));
 8000e14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <clearRx+0x14>)
 8000e1c:	f001 fe58 	bl	8002ad0 <memset>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200003b8 	.word	0x200003b8

08000e28 <LoRaSetRxMode>:
// Puts LoRa module in receive mode
// -- LED should be off --
void LoRaSetRxMode(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	clearRx();
 8000e2c:	f7ff fff0 	bl	8000e10 <clearRx>
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000e30:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e34:	2110      	movs	r1, #16
 8000e36:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <LoRaSetRxMode+0x30>)
 8000e38:	f7ff fcfa 	bl	8000830 <SX1278_LoRaEntryRx>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <LoRaSetRxMode+0x34>)
 8000e40:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e48:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <LoRaSetRxMode+0x38>)
 8000e4a:	f000 fdd0 	bl	80019ee <HAL_GPIO_WritePin>
	master = 1;
 8000e4e:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <LoRaSetRxMode+0x3c>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000098 	.word	0x20000098
 8000e5c:	200001b4 	.word	0x200001b4
 8000e60:	40011000 	.word	0x40011000
 8000e64:	200001b0 	.word	0x200001b0

08000e68 <LoRaSetTxMode>:

// Puts LoRa module in transmit mode
// -- LED should be on --
void LoRaSetTxMode(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	clearTx();
 8000e6c:	f7ff ffc4 	bl	8000df8 <clearTx>
	ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000e70:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e74:	2110      	movs	r1, #16
 8000e76:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <LoRaSetTxMode+0x30>)
 8000e78:	f7ff fd83 	bl	8000982 <SX1278_LoRaEntryTx>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <LoRaSetTxMode+0x34>)
 8000e80:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <LoRaSetTxMode+0x38>)
 8000e8a:	f000 fdb0 	bl	80019ee <HAL_GPIO_WritePin>
	master = 0;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <LoRaSetTxMode+0x3c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000098 	.word	0x20000098
 8000e9c:	200001b4 	.word	0x200001b4
 8000ea0:	40011000 	.word	0x40011000
 8000ea4:	200001b0 	.word	0x200001b0

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fa6f 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f8d9 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f7ff ff07 	bl	8000cc8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000eba:	f000 f921 	bl	8001100 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // ===== LoRa setup =====
  master = 0;
 8000ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8001028 <main+0x180>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]

  control_val++;
 8000ec4:	4b59      	ldr	r3, [pc, #356]	@ (800102c <main+0x184>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a58      	ldr	r2, [pc, #352]	@ (800102c <main+0x184>)
 8000ecc:	6013      	str	r3, [r2, #0]
  	//initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000ece:	4b58      	ldr	r3, [pc, #352]	@ (8001030 <main+0x188>)
 8000ed0:	4a58      	ldr	r2, [pc, #352]	@ (8001034 <main+0x18c>)
 8000ed2:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8000ed4:	4b56      	ldr	r3, [pc, #344]	@ (8001030 <main+0x188>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8000eda:	4b55      	ldr	r3, [pc, #340]	@ (8001030 <main+0x188>)
 8000edc:	4a56      	ldr	r2, [pc, #344]	@ (8001038 <main+0x190>)
 8000ede:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8000ee0:	4b53      	ldr	r3, [pc, #332]	@ (8001030 <main+0x188>)
 8000ee2:	2210      	movs	r2, #16
 8000ee4:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RST_GPIO_Port;
 8000ee6:	4b52      	ldr	r3, [pc, #328]	@ (8001030 <main+0x188>)
 8000ee8:	4a52      	ldr	r2, [pc, #328]	@ (8001034 <main+0x18c>)
 8000eea:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RST_Pin;
 8000eec:	4b50      	ldr	r3, [pc, #320]	@ (8001030 <main+0x188>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8000ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8001030 <main+0x188>)
 8000ef4:	4a51      	ldr	r2, [pc, #324]	@ (800103c <main+0x194>)
 8000ef6:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8000ef8:	4b51      	ldr	r3, [pc, #324]	@ (8001040 <main+0x198>)
 8000efa:	4a4d      	ldr	r2, [pc, #308]	@ (8001030 <main+0x188>)
 8000efc:	601a      	str	r2, [r3, #0]

  control_val++;
 8000efe:	4b4b      	ldr	r3, [pc, #300]	@ (800102c <main+0x184>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a49      	ldr	r2, [pc, #292]	@ (800102c <main+0x184>)
 8000f06:	6013      	str	r3, [r2, #0]
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000f08:	230a      	movs	r3, #10
 8000f0a:	9305      	str	r3, [sp, #20]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9304      	str	r3, [sp, #16]
 8000f10:	2300      	movs	r3, #0
 8000f12:	9303      	str	r3, [sp, #12]
 8000f14:	2307      	movs	r3, #7
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	a33f      	add	r3, pc, #252	@ (adr r3, 8001020 <main+0x178>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	4846      	ldr	r0, [pc, #280]	@ (8001040 <main+0x198>)
 8000f28:	f7ff fdc2 	bl	8000ab0 <SX1278_init>
		  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  control_val++;
 8000f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800102c <main+0x184>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	4a3e      	ldr	r2, [pc, #248]	@ (800102c <main+0x184>)
 8000f34:	6013      	str	r3, [r2, #0]


  LoRaSetRxMode();
 8000f36:	f7ff ff77 	bl	8000e28 <LoRaSetRxMode>
  control_val++;
 8000f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800102c <main+0x184>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4a3a      	ldr	r2, [pc, #232]	@ (800102c <main+0x184>)
 8000f42:	6013      	str	r3, [r2, #0]
	  /*
	   * Test 2
	   *
	   */

	  control_val = 0;
 8000f44:	4b39      	ldr	r3, [pc, #228]	@ (800102c <main+0x184>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
	  ret = SX1278_LoRaRxPacket(&SX1278);
 8000f4a:	483d      	ldr	r0, [pc, #244]	@ (8001040 <main+0x198>)
 8000f4c:	f7ff fcd5 	bl	80008fa <SX1278_LoRaRxPacket>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b3b      	ldr	r3, [pc, #236]	@ (8001044 <main+0x19c>)
 8000f56:	601a      	str	r2, [r3, #0]
	  if (ret > 0) {
 8000f58:	4b3a      	ldr	r3, [pc, #232]	@ (8001044 <main+0x19c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dd56      	ble.n	800100e <main+0x166>
		  // Setup Timers


		  // Read buffer
		  SX1278_read(&SX1278, (uint8_t*) LoRaRxBuffer, ret);
 8000f60:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <main+0x19c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	4937      	ldr	r1, [pc, #220]	@ (8001048 <main+0x1a0>)
 8000f6a:	4835      	ldr	r0, [pc, #212]	@ (8001040 <main+0x198>)
 8000f6c:	f7ff fdcd 	bl	8000b0a <SX1278_read>
		  if(strstr((char *)LoRaRxBuffer,"S2")){
 8000f70:	4936      	ldr	r1, [pc, #216]	@ (800104c <main+0x1a4>)
 8000f72:	4835      	ldr	r0, [pc, #212]	@ (8001048 <main+0x1a0>)
 8000f74:	f001 fdb4 	bl	8002ae0 <strstr>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <main+0xda>
			  return 0;  								// If bad sensor_id pass
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e04a      	b.n	8001018 <main+0x170>
		  }else if(strstr((char *)LoRaRxBuffer,"S1")){	// 	If good sensor_id
 8000f82:	4933      	ldr	r1, [pc, #204]	@ (8001050 <main+0x1a8>)
 8000f84:	4830      	ldr	r0, [pc, #192]	@ (8001048 <main+0x1a0>)
 8000f86:	f001 fdab 	bl	8002ae0 <strstr>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <main+0xf4>
			  LoRaSetTxMode();							// 	Go into TX mode
 8000f90:	f7ff ff6a 	bl	8000e68 <LoRaSetTxMode>
			  HAL_Delay(2000);
 8000f94:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f98:	f000 fa5c 	bl	8001454 <HAL_Delay>


		  // Read sensors


		  current_time = HAL_GetTick();
 8000f9c:	f000 fa50 	bl	8001440 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8001054 <main+0x1ac>)
 8000fa4:	6013      	str	r3, [r2, #0]
		  inside_counter1 = current_time + 5000;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <main+0x1ac>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000fae:	3308      	adds	r3, #8
 8000fb0:	4a29      	ldr	r2, [pc, #164]	@ (8001058 <main+0x1b0>)
 8000fb2:	6013      	str	r3, [r2, #0]

		  while(HAL_GetTick()<=inside_counter1){
 8000fb4:	e022      	b.n	8000ffc <main+0x154>
			  tx_len = sprintf(LoRaTxBuffer, "S1,24,50,1001");
 8000fb6:	4929      	ldr	r1, [pc, #164]	@ (800105c <main+0x1b4>)
 8000fb8:	4829      	ldr	r0, [pc, #164]	@ (8001060 <main+0x1b8>)
 8000fba:	f001 fd69 	bl	8002a90 <siprintf>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a28      	ldr	r2, [pc, #160]	@ (8001064 <main+0x1bc>)
 8000fc2:	6013      	str	r3, [r2, #0]
			  ret = SX1278_LoRaEntryTx(&SX1278, tx_len, 1000);
 8000fc4:	4b27      	ldr	r3, [pc, #156]	@ (8001064 <main+0x1bc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	481b      	ldr	r0, [pc, #108]	@ (8001040 <main+0x198>)
 8000fd2:	f7ff fcd6 	bl	8000982 <SX1278_LoRaEntryTx>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <main+0x19c>)
 8000fda:	6013      	str	r3, [r2, #0]
			  ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) LoRaTxBuffer,tx_len, 1000);
 8000fdc:	4b21      	ldr	r3, [pc, #132]	@ (8001064 <main+0x1bc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	491e      	ldr	r1, [pc, #120]	@ (8001060 <main+0x1b8>)
 8000fe8:	4815      	ldr	r0, [pc, #84]	@ (8001040 <main+0x198>)
 8000fea:	f7ff fd22 	bl	8000a32 <SX1278_LoRaTxPacket>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <main+0x19c>)
 8000ff2:	6013      	str	r3, [r2, #0]
			  HAL_Delay(500);
 8000ff4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ff8:	f000 fa2c 	bl	8001454 <HAL_Delay>
		  while(HAL_GetTick()<=inside_counter1){
 8000ffc:	f000 fa20 	bl	8001440 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <main+0x1b0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d9d5      	bls.n	8000fb6 <main+0x10e>
		  }

		  // Switch to RX mode
		  LoRaSetRxMode();
 800100a:	f7ff ff0d 	bl	8000e28 <LoRaSetRxMode>


	  }
	  control_val = -1;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <main+0x184>)
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	601a      	str	r2, [r3, #0]
	  control_val = 0;
 8001016:	e795      	b.n	8000f44 <main+0x9c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	19de5080 	.word	0x19de5080
 8001024:	00000000 	.word	0x00000000
 8001028:	200001b0 	.word	0x200001b0
 800102c:	200005bc 	.word	0x200005bc
 8001030:	2000007c 	.word	0x2000007c
 8001034:	40010c00 	.word	0x40010c00
 8001038:	40010800 	.word	0x40010800
 800103c:	200005c8 	.word	0x200005c8
 8001040:	20000098 	.word	0x20000098
 8001044:	200001b4 	.word	0x200001b4
 8001048:	200003b8 	.word	0x200003b8
 800104c:	08003434 	.word	0x08003434
 8001050:	08003438 	.word	0x08003438
 8001054:	200005c0 	.word	0x200005c0
 8001058:	200005c4 	.word	0x200005c4
 800105c:	0800343c 	.word	0x0800343c
 8001060:	200001b8 	.word	0x200001b8
 8001064:	200005b8 	.word	0x200005b8

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b090      	sub	sp, #64	@ 0x40
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	2228      	movs	r2, #40	@ 0x28
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fd2a 	bl	8002ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001092:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fcd7 	bl	8001a64 <HAL_RCC_OscConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010bc:	f000 f819 	bl	80010f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c4:	2302      	movs	r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2102      	movs	r1, #2
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 ff44 	bl	8001f68 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010e6:	f000 f804 	bl	80010f2 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3740      	adds	r7, #64	@ 0x40
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f6:	b672      	cpsid	i
}
 80010f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fa:	bf00      	nop
 80010fc:	e7fd      	b.n	80010fa <Error_Handler+0x8>
	...

08001100 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001104:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001106:	4a18      	ldr	r2, [pc, #96]	@ (8001168 <MX_SPI1_Init+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800110a:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <MX_SPI1_Init+0x64>)
 800110c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001110:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <MX_SPI1_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_SPI1_Init+0x64>)
 800112c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001130:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001134:	2210      	movs	r2, #16
 8001136:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <MX_SPI1_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_SPI1_Init+0x64>)
 800114c:	220a      	movs	r2, #10
 800114e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001150:	4804      	ldr	r0, [pc, #16]	@ (8001164 <MX_SPI1_Init+0x64>)
 8001152:	f001 f865 	bl	8002220 <HAL_SPI_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800115c:	f7ff ffc9 	bl	80010f2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200005c8 	.word	0x200005c8
 8001168:	40013000 	.word	0x40013000

0800116c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1b      	ldr	r2, [pc, #108]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d12f      	bne.n	80011ec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <HAL_SPI_MspInit+0x8c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a19      	ldr	r2, [pc, #100]	@ (80011f8 <HAL_SPI_MspInit+0x8c>)
 8001192:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <HAL_SPI_MspInit+0x8c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_SPI_MspInit+0x8c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a13      	ldr	r2, [pc, #76]	@ (80011f8 <HAL_SPI_MspInit+0x8c>)
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <HAL_SPI_MspInit+0x8c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011bc:	23a0      	movs	r3, #160	@ 0xa0
 80011be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	480b      	ldr	r0, [pc, #44]	@ (80011fc <HAL_SPI_MspInit+0x90>)
 80011d0:	f000 fa72 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d4:	2340      	movs	r3, #64	@ 0x40
 80011d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <HAL_SPI_MspInit+0x90>)
 80011e8:	f000 fa66 	bl	80016b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40013000 	.word	0x40013000
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_MspInit+0x5c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a14      	ldr	r2, [pc, #80]	@ (800125c <HAL_MspInit+0x5c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a0e      	ldr	r2, [pc, #56]	@ (800125c <HAL_MspInit+0x5c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_MspInit+0x60>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_MspInit+0x60>)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x4>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <MemManage_Handler+0x4>

0800127c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <UsageFault_Handler+0x4>

0800128c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f8b2 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80012c0:	2002      	movs	r0, #2
 80012c2:	f000 fbad 	bl	8001a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	@ (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f001 fc06 	bl	8002b0c <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20005000 	.word	0x20005000
 800132c:	00000400 	.word	0x00000400
 8001330:	20000620 	.word	0x20000620
 8001334:	20000770 	.word	0x20000770

08001338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff fff8 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480b      	ldr	r0, [pc, #44]	@ (8001378 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800134a:	490c      	ldr	r1, [pc, #48]	@ (800137c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800134c:	4a0c      	ldr	r2, [pc, #48]	@ (8001380 <LoopFillZerobss+0x16>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001360:	4c09      	ldr	r4, [pc, #36]	@ (8001388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f001 fbd3 	bl	8002b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001372:	f7ff fd99 	bl	8000ea8 <main>
  bx lr
 8001376:	4770      	bx	lr
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001380:	080034d4 	.word	0x080034d4
  ldr r2, =_sbss
 8001384:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001388:	20000770 	.word	0x20000770

0800138c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC1_2_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_Init+0x28>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_Init+0x28>)
 800139a:	f043 0310 	orr.w	r3, r3, #16
 800139e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 f947 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a6:	200f      	movs	r0, #15
 80013a8:	f000 f808 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ac:	f7ff ff28 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_InitTick+0x54>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f95f 	bl	800169e <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 f927 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4a06      	ldr	r2, [pc, #24]	@ (8001418 <HAL_InitTick+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000000 	.word	0x20000000
 8001414:	20000008 	.word	0x20000008
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_IncTick+0x1c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x20>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a03      	ldr	r2, [pc, #12]	@ (800143c <HAL_IncTick+0x20>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	20000008 	.word	0x20000008
 800143c:	20000624 	.word	0x20000624

08001440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b02      	ldr	r3, [pc, #8]	@ (8001450 <HAL_GetTick+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	20000624 	.word	0x20000624

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff fff0 	bl	8001440 <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffe0 	bl	8001440 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4906      	ldr	r1, [pc, #24]	@ (8001534 <__NVIC_EnableIRQ+0x34>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	@ (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	@ (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	@ 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff90 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff2d 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff42 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff90 	bl	800158c <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5f 	bl	8001538 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff35 	bl	8001500 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b08b      	sub	sp, #44	@ 0x2c
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e169      	b.n	80019a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016cc:	2201      	movs	r2, #1
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f040 8158 	bne.w	800199a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a9a      	ldr	r2, [pc, #616]	@ (8001958 <HAL_GPIO_Init+0x2a0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d05e      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 80016f4:	4a98      	ldr	r2, [pc, #608]	@ (8001958 <HAL_GPIO_Init+0x2a0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d875      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 80016fa:	4a98      	ldr	r2, [pc, #608]	@ (800195c <HAL_GPIO_Init+0x2a4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d058      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001700:	4a96      	ldr	r2, [pc, #600]	@ (800195c <HAL_GPIO_Init+0x2a4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d86f      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001706:	4a96      	ldr	r2, [pc, #600]	@ (8001960 <HAL_GPIO_Init+0x2a8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d052      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 800170c:	4a94      	ldr	r2, [pc, #592]	@ (8001960 <HAL_GPIO_Init+0x2a8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d869      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001712:	4a94      	ldr	r2, [pc, #592]	@ (8001964 <HAL_GPIO_Init+0x2ac>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d04c      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001718:	4a92      	ldr	r2, [pc, #584]	@ (8001964 <HAL_GPIO_Init+0x2ac>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d863      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 800171e:	4a92      	ldr	r2, [pc, #584]	@ (8001968 <HAL_GPIO_Init+0x2b0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d046      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001724:	4a90      	ldr	r2, [pc, #576]	@ (8001968 <HAL_GPIO_Init+0x2b0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d85d      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 800172a:	2b12      	cmp	r3, #18
 800172c:	d82a      	bhi.n	8001784 <HAL_GPIO_Init+0xcc>
 800172e:	2b12      	cmp	r3, #18
 8001730:	d859      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001732:	a201      	add	r2, pc, #4	@ (adr r2, 8001738 <HAL_GPIO_Init+0x80>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	080017b3 	.word	0x080017b3
 800173c:	0800178d 	.word	0x0800178d
 8001740:	0800179f 	.word	0x0800179f
 8001744:	080017e1 	.word	0x080017e1
 8001748:	080017e7 	.word	0x080017e7
 800174c:	080017e7 	.word	0x080017e7
 8001750:	080017e7 	.word	0x080017e7
 8001754:	080017e7 	.word	0x080017e7
 8001758:	080017e7 	.word	0x080017e7
 800175c:	080017e7 	.word	0x080017e7
 8001760:	080017e7 	.word	0x080017e7
 8001764:	080017e7 	.word	0x080017e7
 8001768:	080017e7 	.word	0x080017e7
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017e7 	.word	0x080017e7
 8001774:	080017e7 	.word	0x080017e7
 8001778:	080017e7 	.word	0x080017e7
 800177c:	08001795 	.word	0x08001795
 8001780:	080017a9 	.word	0x080017a9
 8001784:	4a79      	ldr	r2, [pc, #484]	@ (800196c <HAL_GPIO_Init+0x2b4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800178a:	e02c      	b.n	80017e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e029      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	3304      	adds	r3, #4
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e024      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	3308      	adds	r3, #8
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e01f      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	330c      	adds	r3, #12
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e01a      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ba:	2304      	movs	r3, #4
 80017bc:	623b      	str	r3, [r7, #32]
          break;
 80017be:	e013      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c8:	2308      	movs	r3, #8
 80017ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	611a      	str	r2, [r3, #16]
          break;
 80017d2:	e009      	b.n	80017e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d4:	2308      	movs	r3, #8
 80017d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	615a      	str	r2, [r3, #20]
          break;
 80017de:	e003      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          break;
 80017e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2bff      	cmp	r3, #255	@ 0xff
 80017ec:	d801      	bhi.n	80017f2 <HAL_GPIO_Init+0x13a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	e001      	b.n	80017f6 <HAL_GPIO_Init+0x13e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3304      	adds	r3, #4
 80017f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2bff      	cmp	r3, #255	@ 0xff
 80017fc:	d802      	bhi.n	8001804 <HAL_GPIO_Init+0x14c>
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	e002      	b.n	800180a <HAL_GPIO_Init+0x152>
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	3b08      	subs	r3, #8
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	210f      	movs	r1, #15
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	6a39      	ldr	r1, [r7, #32]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80b1 	beq.w	800199a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001838:	4b4d      	ldr	r3, [pc, #308]	@ (8001970 <HAL_GPIO_Init+0x2b8>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a4c      	ldr	r2, [pc, #304]	@ (8001970 <HAL_GPIO_Init+0x2b8>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b4a      	ldr	r3, [pc, #296]	@ (8001970 <HAL_GPIO_Init+0x2b8>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001850:	4a48      	ldr	r2, [pc, #288]	@ (8001974 <HAL_GPIO_Init+0x2bc>)
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a40      	ldr	r2, [pc, #256]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d013      	beq.n	80018a4 <HAL_GPIO_Init+0x1ec>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3f      	ldr	r2, [pc, #252]	@ (800197c <HAL_GPIO_Init+0x2c4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00d      	beq.n	80018a0 <HAL_GPIO_Init+0x1e8>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3e      	ldr	r2, [pc, #248]	@ (8001980 <HAL_GPIO_Init+0x2c8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0x1e4>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a3d      	ldr	r2, [pc, #244]	@ (8001984 <HAL_GPIO_Init+0x2cc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_GPIO_Init+0x1e0>
 8001894:	2303      	movs	r3, #3
 8001896:	e006      	b.n	80018a6 <HAL_GPIO_Init+0x1ee>
 8001898:	2304      	movs	r3, #4
 800189a:	e004      	b.n	80018a6 <HAL_GPIO_Init+0x1ee>
 800189c:	2302      	movs	r3, #2
 800189e:	e002      	b.n	80018a6 <HAL_GPIO_Init+0x1ee>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_GPIO_Init+0x1ee>
 80018a4:	2300      	movs	r3, #0
 80018a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a8:	f002 0203 	and.w	r2, r2, #3
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	4093      	lsls	r3, r2
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018b6:	492f      	ldr	r1, [pc, #188]	@ (8001974 <HAL_GPIO_Init+0x2bc>)
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	492c      	ldr	r1, [pc, #176]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018de:	4b2a      	ldr	r3, [pc, #168]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4928      	ldr	r1, [pc, #160]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f8:	4b23      	ldr	r3, [pc, #140]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	4922      	ldr	r1, [pc, #136]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	491e      	ldr	r1, [pc, #120]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4918      	ldr	r1, [pc, #96]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	4914      	ldr	r1, [pc, #80]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d021      	beq.n	800198c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	490e      	ldr	r1, [pc, #56]	@ (8001988 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
 8001954:	e021      	b.n	800199a <HAL_GPIO_Init+0x2e2>
 8001956:	bf00      	nop
 8001958:	10320000 	.word	0x10320000
 800195c:	10310000 	.word	0x10310000
 8001960:	10220000 	.word	0x10220000
 8001964:	10210000 	.word	0x10210000
 8001968:	10120000 	.word	0x10120000
 800196c:	10110000 	.word	0x10110000
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	40010800 	.word	0x40010800
 800197c:	40010c00 	.word	0x40010c00
 8001980:	40011000 	.word	0x40011000
 8001984:	40011400 	.word	0x40011400
 8001988:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_GPIO_Init+0x304>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	43db      	mvns	r3, r3
 8001994:	4909      	ldr	r1, [pc, #36]	@ (80019bc <HAL_GPIO_Init+0x304>)
 8001996:	4013      	ands	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	3301      	adds	r3, #1
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f47f ae8e 	bne.w	80016cc <HAL_GPIO_Init+0x14>
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	372c      	adds	r7, #44	@ 0x2c
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	887b      	ldrh	r3, [r7, #2]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	e001      	b.n	80019e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	807b      	strh	r3, [r7, #2]
 80019fa:	4613      	mov	r3, r2
 80019fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019fe:	787b      	ldrb	r3, [r7, #1]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a04:	887a      	ldrh	r2, [r7, #2]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a0a:	e003      	b.n	8001a14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	041a      	lsls	r2, r3, #16
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	611a      	str	r2, [r3, #16]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a2a:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a36:	4a05      	ldr	r2, [pc, #20]	@ (8001a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f806 	bl	8001a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e272      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b92      	ldr	r3, [pc, #584]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a90:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b89      	ldr	r3, [pc, #548]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x12c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e24c      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x76>
 8001acc:	4b80      	ldr	r3, [pc, #512]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x98>
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7a      	ldr	r2, [pc, #488]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b78      	ldr	r3, [pc, #480]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a77      	ldr	r2, [pc, #476]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xbc>
 8001b06:	4b72      	ldr	r3, [pc, #456]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a71      	ldr	r2, [pc, #452]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001b20:	4b6b      	ldr	r3, [pc, #428]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6a      	ldr	r2, [pc, #424]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b68      	ldr	r3, [pc, #416]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a67      	ldr	r2, [pc, #412]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fc7e 	bl	8001440 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fc7a 	bl	8001440 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	@ 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e200      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe4>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fc6a 	bl	8001440 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fc66 	bl	8001440 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	@ 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1ec      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b53      	ldr	r3, [pc, #332]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x10c>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001baa:	4b49      	ldr	r3, [pc, #292]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
 8001bb6:	4b46      	ldr	r3, [pc, #280]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b43      	ldr	r3, [pc, #268]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1c0      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4939      	ldr	r1, [pc, #228]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b36      	ldr	r3, [pc, #216]	@ (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fc1f 	bl	8001440 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff fc1b 	bl	8001440 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1a1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4927      	ldr	r1, [pc, #156]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fbfe 	bl	8001440 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff fbfa 	bl	8001440 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e180      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d03a      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff fbde 	bl	8001440 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff fbda 	bl	8001440 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e160      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 fa9c 	bl	80021e4 <RCC_Delay>
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fbc4 	bl	8001440 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fbc0 	bl	8001440 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e146      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	42420000 	.word	0x42420000
 8001cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b92      	ldr	r3, [pc, #584]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a6 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b8b      	ldr	r3, [pc, #556]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b88      	ldr	r3, [pc, #544]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a87      	ldr	r2, [pc, #540]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b85      	ldr	r3, [pc, #532]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b82      	ldr	r3, [pc, #520]	@ (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7e      	ldr	r2, [pc, #504]	@ (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fb81 	bl	8001440 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff fb7d 	bl	8001440 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	@ 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e103      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b75      	ldr	r3, [pc, #468]	@ (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x312>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x334>
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a69      	ldr	r2, [pc, #420]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b67      	ldr	r3, [pc, #412]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a66      	ldr	r2, [pc, #408]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x356>
 8001da0:	4b61      	ldr	r3, [pc, #388]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a60      	ldr	r2, [pc, #384]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b5e      	ldr	r3, [pc, #376]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001dba:	4b5b      	ldr	r3, [pc, #364]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b58      	ldr	r3, [pc, #352]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a57      	ldr	r2, [pc, #348]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fb31 	bl	8001440 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff fb2d 	bl	8001440 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0b1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x37e>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fb1b 	bl	8001440 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fb17 	bl	8001440 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e09b      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b40      	ldr	r3, [pc, #256]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b3c      	ldr	r3, [pc, #240]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b36      	ldr	r3, [pc, #216]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d146      	bne.n	8001eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b33      	ldr	r3, [pc, #204]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff faeb 	bl	8001440 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff fae7 	bl	8001440 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e06d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	4b29      	ldr	r3, [pc, #164]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e96:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4921      	ldr	r1, [pc, #132]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a19      	ldr	r1, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	491b      	ldr	r1, [pc, #108]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fabb 	bl	8001440 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff fab7 	bl	8001440 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e03d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x46a>
 8001eec:	e035      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff faa4 	bl	8001440 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff faa0 	bl	8001440 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e026      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
 8001f1a:	e01e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e019      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_RCC_OscConfig+0x500>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0d0      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b67      	ldr	r3, [pc, #412]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4965      	ldr	r1, [pc, #404]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d040      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d115      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b41      	ldr	r3, [pc, #260]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e073      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3d      	ldr	r3, [pc, #244]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06b      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b39      	ldr	r3, [pc, #228]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4936      	ldr	r1, [pc, #216]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7ff f9f2 	bl	8001440 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7ff f9ee 	bl	8001440 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e053      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d210      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4922      	ldr	r1, [pc, #136]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e2:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	@ (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <HAL_RCC_ClockConfig+0x1cc>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_RCC_ClockConfig+0x1d0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f950 	bl	80013bc <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40022000 	.word	0x40022000
 800212c:	40021000 	.word	0x40021000
 8002130:	0800346c 	.word	0x0800346c
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002156:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x30>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x36>
 800216a:	e027      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800216c:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800216e:	613b      	str	r3, [r7, #16]
      break;
 8002170:	e027      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800218a:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0c5b      	lsrs	r3, r3, #17
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800219e:	fb03 f202 	mul.w	r2, r3, r2
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e004      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0c      	ldr	r2, [pc, #48]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	613b      	str	r3, [r7, #16]
      break;
 80021ba:	e002      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021be:	613b      	str	r3, [r7, #16]
      break;
 80021c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c2:	693b      	ldr	r3, [r7, #16]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	0800347c 	.word	0x0800347c
 80021dc:	0800348c 	.word	0x0800348c
 80021e0:	003d0900 	.word	0x003d0900

080021e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <RCC_Delay+0x34>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <RCC_Delay+0x38>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002200:	bf00      	nop
  }
  while (Delay --);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	60fa      	str	r2, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <RCC_Delay+0x1c>
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000000 	.word	0x20000000
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e076      	b.n	8002320 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002242:	d009      	beq.n	8002258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
 800224a:	e005      	b.n	8002258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe ff7a 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800228e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022dc:	ea42 0103 	orr.w	r1, r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	0c1a      	lsrs	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f002 0204 	and.w	r2, r2, #4
 80022fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800230e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002338:	f7ff f882 	bl	8001440 <HAL_GetTick>
 800233c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d001      	beq.n	8002352 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
 8002350:	e12a      	b.n	80025a8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_SPI_Transmit+0x36>
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e122      	b.n	80025a8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_SPI_Transmit+0x48>
 800236c:	2302      	movs	r3, #2
 800236e:	e11b      	b.n	80025a8 <HAL_SPI_Transmit+0x280>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2203      	movs	r2, #3
 800237c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	88fa      	ldrh	r2, [r7, #6]
 8002396:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023be:	d10f      	bne.n	80023e0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ea:	2b40      	cmp	r3, #64	@ 0x40
 80023ec:	d007      	beq.n	80023fe <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002406:	d152      	bne.n	80024ae <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_SPI_Transmit+0xee>
 8002410:	8b7b      	ldrh	r3, [r7, #26]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d145      	bne.n	80024a2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	881a      	ldrh	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	1c9a      	adds	r2, r3, #2
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800243a:	e032      	b.n	80024a2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d112      	bne.n	8002470 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	1c9a      	adds	r2, r3, #2
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800246e:	e018      	b.n	80024a2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002470:	f7fe ffe6 	bl	8001440 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d803      	bhi.n	8002488 <HAL_SPI_Transmit+0x160>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002486:	d102      	bne.n	800248e <HAL_SPI_Transmit+0x166>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e082      	b.n	80025a8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1c7      	bne.n	800243c <HAL_SPI_Transmit+0x114>
 80024ac:	e053      	b.n	8002556 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_SPI_Transmit+0x194>
 80024b6:	8b7b      	ldrh	r3, [r7, #26]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d147      	bne.n	800254c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	330c      	adds	r3, #12
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024e2:	e033      	b.n	800254c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d113      	bne.n	800251a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	330c      	adds	r3, #12
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002518:	e018      	b.n	800254c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800251a:	f7fe ff91 	bl	8001440 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d803      	bhi.n	8002532 <HAL_SPI_Transmit+0x20a>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d102      	bne.n	8002538 <HAL_SPI_Transmit+0x210>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e02d      	b.n	80025a8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1c6      	bne.n	80024e4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	6839      	ldr	r1, [r7, #0]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fa66 	bl	8002a2c <SPI_EndRxTxTransaction>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80025a6:	2300      	movs	r3, #0
  }
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	@ 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025be:	2301      	movs	r3, #1
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025c2:	f7fe ff3d 	bl	8001440 <HAL_GetTick>
 80025c6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025ce:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d00c      	beq.n	80025fa <HAL_SPI_TransmitReceive+0x4a>
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025e6:	d106      	bne.n	80025f6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <HAL_SPI_TransmitReceive+0x46>
 80025f0:	7ffb      	ldrb	r3, [r7, #31]
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d001      	beq.n	80025fa <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
 80025f8:	e17f      	b.n	80028fa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_SPI_TransmitReceive+0x5c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_SPI_TransmitReceive+0x5c>
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e174      	b.n	80028fa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_SPI_TransmitReceive+0x6e>
 800261a:	2302      	movs	r3, #2
 800261c:	e16d      	b.n	80028fa <HAL_SPI_TransmitReceive+0x34a>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b04      	cmp	r3, #4
 8002630:	d003      	beq.n	800263a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2205      	movs	r2, #5
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	887a      	ldrh	r2, [r7, #2]
 800264a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	887a      	ldrh	r2, [r7, #2]
 8002662:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267a:	2b40      	cmp	r3, #64	@ 0x40
 800267c:	d007      	beq.n	800268e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002696:	d17e      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0xf6>
 80026a0:	8afb      	ldrh	r3, [r7, #22]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d16c      	bne.n	8002780 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	881a      	ldrh	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	1c9a      	adds	r2, r3, #2
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ca:	e059      	b.n	8002780 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d11b      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x162>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x162>
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d113      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	881a      	ldrh	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	1c9a      	adds	r2, r3, #2
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d119      	bne.n	8002754 <HAL_SPI_TransmitReceive+0x1a4>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d014      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002734:	b292      	uxth	r2, r2
 8002736:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273c:	1c9a      	adds	r2, r3, #2
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002750:	2301      	movs	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002754:	f7fe fe74 	bl	8001440 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002760:	429a      	cmp	r2, r3
 8002762:	d80d      	bhi.n	8002780 <HAL_SPI_TransmitReceive+0x1d0>
 8002764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d009      	beq.n	8002780 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0bc      	b.n	80028fa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1a0      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x11c>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d19b      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x11c>
 8002794:	e082      	b.n	800289c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_SPI_TransmitReceive+0x1f4>
 800279e:	8afb      	ldrh	r3, [r7, #22]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d171      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	7812      	ldrb	r2, [r2, #0]
 80027b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ca:	e05d      	b.n	8002888 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d11c      	bne.n	8002814 <HAL_SPI_TransmitReceive+0x264>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d017      	beq.n	8002814 <HAL_SPI_TransmitReceive+0x264>
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d114      	bne.n	8002814 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	7812      	ldrb	r2, [r2, #0]
 80027f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b01      	cmp	r3, #1
 8002820:	d119      	bne.n	8002856 <HAL_SPI_TransmitReceive+0x2a6>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d014      	beq.n	8002856 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002852:	2301      	movs	r3, #1
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002856:	f7fe fdf3 	bl	8001440 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002862:	429a      	cmp	r2, r3
 8002864:	d803      	bhi.n	800286e <HAL_SPI_TransmitReceive+0x2be>
 8002866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d102      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x2c4>
 800286e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e038      	b.n	80028fa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d19c      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x21c>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d197      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800289c:	6a3a      	ldr	r2, [r7, #32]
 800289e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f8c3 	bl	8002a2c <SPI_EndRxTxTransaction>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e01d      	b.n	80028fa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80028f8:	2300      	movs	r3, #0
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3728      	adds	r7, #40	@ 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002910:	b2db      	uxtb	r3, r3
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800292c:	f7fe fd88 	bl	8001440 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	4413      	add	r3, r2
 800293a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800293c:	f7fe fd80 	bl	8001440 <HAL_GetTick>
 8002940:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002942:	4b39      	ldr	r3, [pc, #228]	@ (8002a28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	015b      	lsls	r3, r3, #5
 8002948:	0d1b      	lsrs	r3, r3, #20
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002952:	e054      	b.n	80029fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d050      	beq.n	80029fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800295c:	f7fe fd70 	bl	8001440 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	429a      	cmp	r2, r3
 800296a:	d902      	bls.n	8002972 <SPI_WaitFlagStateUntilTimeout+0x56>
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d13d      	bne.n	80029ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800298a:	d111      	bne.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002994:	d004      	beq.n	80029a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299e:	d107      	bne.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029b8:	d10f      	bne.n	80029da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e017      	b.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d19b      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000000 	.word	0x20000000

08002a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2102      	movs	r1, #2
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f7ff ff6a 	bl	800291c <SPI_WaitFlagStateUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a52:	f043 0220 	orr.w	r2, r3, #32
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e013      	b.n	8002a86 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	2180      	movs	r1, #128	@ 0x80
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff ff57 	bl	800291c <SPI_WaitFlagStateUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e000      	b.n	8002a86 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <siprintf>:
 8002a90:	b40e      	push	{r1, r2, r3}
 8002a92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002a96:	b500      	push	{lr}
 8002a98:	b09c      	sub	sp, #112	@ 0x70
 8002a9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8002a9c:	9002      	str	r0, [sp, #8]
 8002a9e:	9006      	str	r0, [sp, #24]
 8002aa0:	9107      	str	r1, [sp, #28]
 8002aa2:	9104      	str	r1, [sp, #16]
 8002aa4:	4808      	ldr	r0, [pc, #32]	@ (8002ac8 <siprintf+0x38>)
 8002aa6:	4909      	ldr	r1, [pc, #36]	@ (8002acc <siprintf+0x3c>)
 8002aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002aac:	9105      	str	r1, [sp, #20]
 8002aae:	6800      	ldr	r0, [r0, #0]
 8002ab0:	a902      	add	r1, sp, #8
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	f000 f9b6 	bl	8002e24 <_svfiprintf_r>
 8002ab8:	2200      	movs	r2, #0
 8002aba:	9b02      	ldr	r3, [sp, #8]
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	b01c      	add	sp, #112	@ 0x70
 8002ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ac4:	b003      	add	sp, #12
 8002ac6:	4770      	bx	lr
 8002ac8:	2000000c 	.word	0x2000000c
 8002acc:	ffff0208 	.word	0xffff0208

08002ad0 <memset>:
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4402      	add	r2, r0
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d100      	bne.n	8002ada <memset+0xa>
 8002ad8:	4770      	bx	lr
 8002ada:	f803 1b01 	strb.w	r1, [r3], #1
 8002ade:	e7f9      	b.n	8002ad4 <memset+0x4>

08002ae0 <strstr>:
 8002ae0:	780a      	ldrb	r2, [r1, #0]
 8002ae2:	b570      	push	{r4, r5, r6, lr}
 8002ae4:	b96a      	cbnz	r2, 8002b02 <strstr+0x22>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d109      	bne.n	8002b00 <strstr+0x20>
 8002aec:	460c      	mov	r4, r1
 8002aee:	4605      	mov	r5, r0
 8002af0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f6      	beq.n	8002ae6 <strstr+0x6>
 8002af8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002afc:	429e      	cmp	r6, r3
 8002afe:	d0f7      	beq.n	8002af0 <strstr+0x10>
 8002b00:	3001      	adds	r0, #1
 8002b02:	7803      	ldrb	r3, [r0, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ef      	bne.n	8002ae8 <strstr+0x8>
 8002b08:	4618      	mov	r0, r3
 8002b0a:	e7ec      	b.n	8002ae6 <strstr+0x6>

08002b0c <__errno>:
 8002b0c:	4b01      	ldr	r3, [pc, #4]	@ (8002b14 <__errno+0x8>)
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	2000000c 	.word	0x2000000c

08002b18 <__libc_init_array>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	2600      	movs	r6, #0
 8002b1c:	4d0c      	ldr	r5, [pc, #48]	@ (8002b50 <__libc_init_array+0x38>)
 8002b1e:	4c0d      	ldr	r4, [pc, #52]	@ (8002b54 <__libc_init_array+0x3c>)
 8002b20:	1b64      	subs	r4, r4, r5
 8002b22:	10a4      	asrs	r4, r4, #2
 8002b24:	42a6      	cmp	r6, r4
 8002b26:	d109      	bne.n	8002b3c <__libc_init_array+0x24>
 8002b28:	f000 fc78 	bl	800341c <_init>
 8002b2c:	2600      	movs	r6, #0
 8002b2e:	4d0a      	ldr	r5, [pc, #40]	@ (8002b58 <__libc_init_array+0x40>)
 8002b30:	4c0a      	ldr	r4, [pc, #40]	@ (8002b5c <__libc_init_array+0x44>)
 8002b32:	1b64      	subs	r4, r4, r5
 8002b34:	10a4      	asrs	r4, r4, #2
 8002b36:	42a6      	cmp	r6, r4
 8002b38:	d105      	bne.n	8002b46 <__libc_init_array+0x2e>
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
 8002b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b40:	4798      	blx	r3
 8002b42:	3601      	adds	r6, #1
 8002b44:	e7ee      	b.n	8002b24 <__libc_init_array+0xc>
 8002b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4a:	4798      	blx	r3
 8002b4c:	3601      	adds	r6, #1
 8002b4e:	e7f2      	b.n	8002b36 <__libc_init_array+0x1e>
 8002b50:	080034cc 	.word	0x080034cc
 8002b54:	080034cc 	.word	0x080034cc
 8002b58:	080034cc 	.word	0x080034cc
 8002b5c:	080034d0 	.word	0x080034d0

08002b60 <__retarget_lock_acquire_recursive>:
 8002b60:	4770      	bx	lr

08002b62 <__retarget_lock_release_recursive>:
 8002b62:	4770      	bx	lr

08002b64 <memcpy>:
 8002b64:	440a      	add	r2, r1
 8002b66:	4291      	cmp	r1, r2
 8002b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b6c:	d100      	bne.n	8002b70 <memcpy+0xc>
 8002b6e:	4770      	bx	lr
 8002b70:	b510      	push	{r4, lr}
 8002b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b76:	4291      	cmp	r1, r2
 8002b78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b7c:	d1f9      	bne.n	8002b72 <memcpy+0xe>
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <_free_r>:
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	4605      	mov	r5, r0
 8002b84:	2900      	cmp	r1, #0
 8002b86:	d040      	beq.n	8002c0a <_free_r+0x8a>
 8002b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b8c:	1f0c      	subs	r4, r1, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bfb8      	it	lt
 8002b92:	18e4      	addlt	r4, r4, r3
 8002b94:	f000 f8de 	bl	8002d54 <__malloc_lock>
 8002b98:	4a1c      	ldr	r2, [pc, #112]	@ (8002c0c <_free_r+0x8c>)
 8002b9a:	6813      	ldr	r3, [r2, #0]
 8002b9c:	b933      	cbnz	r3, 8002bac <_free_r+0x2c>
 8002b9e:	6063      	str	r3, [r4, #4]
 8002ba0:	6014      	str	r4, [r2, #0]
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ba8:	f000 b8da 	b.w	8002d60 <__malloc_unlock>
 8002bac:	42a3      	cmp	r3, r4
 8002bae:	d908      	bls.n	8002bc2 <_free_r+0x42>
 8002bb0:	6820      	ldr	r0, [r4, #0]
 8002bb2:	1821      	adds	r1, r4, r0
 8002bb4:	428b      	cmp	r3, r1
 8002bb6:	bf01      	itttt	eq
 8002bb8:	6819      	ldreq	r1, [r3, #0]
 8002bba:	685b      	ldreq	r3, [r3, #4]
 8002bbc:	1809      	addeq	r1, r1, r0
 8002bbe:	6021      	streq	r1, [r4, #0]
 8002bc0:	e7ed      	b.n	8002b9e <_free_r+0x1e>
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	b10b      	cbz	r3, 8002bcc <_free_r+0x4c>
 8002bc8:	42a3      	cmp	r3, r4
 8002bca:	d9fa      	bls.n	8002bc2 <_free_r+0x42>
 8002bcc:	6811      	ldr	r1, [r2, #0]
 8002bce:	1850      	adds	r0, r2, r1
 8002bd0:	42a0      	cmp	r0, r4
 8002bd2:	d10b      	bne.n	8002bec <_free_r+0x6c>
 8002bd4:	6820      	ldr	r0, [r4, #0]
 8002bd6:	4401      	add	r1, r0
 8002bd8:	1850      	adds	r0, r2, r1
 8002bda:	4283      	cmp	r3, r0
 8002bdc:	6011      	str	r1, [r2, #0]
 8002bde:	d1e0      	bne.n	8002ba2 <_free_r+0x22>
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4408      	add	r0, r1
 8002be6:	6010      	str	r0, [r2, #0]
 8002be8:	6053      	str	r3, [r2, #4]
 8002bea:	e7da      	b.n	8002ba2 <_free_r+0x22>
 8002bec:	d902      	bls.n	8002bf4 <_free_r+0x74>
 8002bee:	230c      	movs	r3, #12
 8002bf0:	602b      	str	r3, [r5, #0]
 8002bf2:	e7d6      	b.n	8002ba2 <_free_r+0x22>
 8002bf4:	6820      	ldr	r0, [r4, #0]
 8002bf6:	1821      	adds	r1, r4, r0
 8002bf8:	428b      	cmp	r3, r1
 8002bfa:	bf01      	itttt	eq
 8002bfc:	6819      	ldreq	r1, [r3, #0]
 8002bfe:	685b      	ldreq	r3, [r3, #4]
 8002c00:	1809      	addeq	r1, r1, r0
 8002c02:	6021      	streq	r1, [r4, #0]
 8002c04:	6063      	str	r3, [r4, #4]
 8002c06:	6054      	str	r4, [r2, #4]
 8002c08:	e7cb      	b.n	8002ba2 <_free_r+0x22>
 8002c0a:	bd38      	pop	{r3, r4, r5, pc}
 8002c0c:	2000076c 	.word	0x2000076c

08002c10 <sbrk_aligned>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	4e0f      	ldr	r6, [pc, #60]	@ (8002c50 <sbrk_aligned+0x40>)
 8002c14:	460c      	mov	r4, r1
 8002c16:	6831      	ldr	r1, [r6, #0]
 8002c18:	4605      	mov	r5, r0
 8002c1a:	b911      	cbnz	r1, 8002c22 <sbrk_aligned+0x12>
 8002c1c:	f000 fbaa 	bl	8003374 <_sbrk_r>
 8002c20:	6030      	str	r0, [r6, #0]
 8002c22:	4621      	mov	r1, r4
 8002c24:	4628      	mov	r0, r5
 8002c26:	f000 fba5 	bl	8003374 <_sbrk_r>
 8002c2a:	1c43      	adds	r3, r0, #1
 8002c2c:	d103      	bne.n	8002c36 <sbrk_aligned+0x26>
 8002c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8002c32:	4620      	mov	r0, r4
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
 8002c36:	1cc4      	adds	r4, r0, #3
 8002c38:	f024 0403 	bic.w	r4, r4, #3
 8002c3c:	42a0      	cmp	r0, r4
 8002c3e:	d0f8      	beq.n	8002c32 <sbrk_aligned+0x22>
 8002c40:	1a21      	subs	r1, r4, r0
 8002c42:	4628      	mov	r0, r5
 8002c44:	f000 fb96 	bl	8003374 <_sbrk_r>
 8002c48:	3001      	adds	r0, #1
 8002c4a:	d1f2      	bne.n	8002c32 <sbrk_aligned+0x22>
 8002c4c:	e7ef      	b.n	8002c2e <sbrk_aligned+0x1e>
 8002c4e:	bf00      	nop
 8002c50:	20000768 	.word	0x20000768

08002c54 <_malloc_r>:
 8002c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c58:	1ccd      	adds	r5, r1, #3
 8002c5a:	f025 0503 	bic.w	r5, r5, #3
 8002c5e:	3508      	adds	r5, #8
 8002c60:	2d0c      	cmp	r5, #12
 8002c62:	bf38      	it	cc
 8002c64:	250c      	movcc	r5, #12
 8002c66:	2d00      	cmp	r5, #0
 8002c68:	4606      	mov	r6, r0
 8002c6a:	db01      	blt.n	8002c70 <_malloc_r+0x1c>
 8002c6c:	42a9      	cmp	r1, r5
 8002c6e:	d904      	bls.n	8002c7a <_malloc_r+0x26>
 8002c70:	230c      	movs	r3, #12
 8002c72:	6033      	str	r3, [r6, #0]
 8002c74:	2000      	movs	r0, #0
 8002c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d50 <_malloc_r+0xfc>
 8002c7e:	f000 f869 	bl	8002d54 <__malloc_lock>
 8002c82:	f8d8 3000 	ldr.w	r3, [r8]
 8002c86:	461c      	mov	r4, r3
 8002c88:	bb44      	cbnz	r4, 8002cdc <_malloc_r+0x88>
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f7ff ffbf 	bl	8002c10 <sbrk_aligned>
 8002c92:	1c43      	adds	r3, r0, #1
 8002c94:	4604      	mov	r4, r0
 8002c96:	d158      	bne.n	8002d4a <_malloc_r+0xf6>
 8002c98:	f8d8 4000 	ldr.w	r4, [r8]
 8002c9c:	4627      	mov	r7, r4
 8002c9e:	2f00      	cmp	r7, #0
 8002ca0:	d143      	bne.n	8002d2a <_malloc_r+0xd6>
 8002ca2:	2c00      	cmp	r4, #0
 8002ca4:	d04b      	beq.n	8002d3e <_malloc_r+0xea>
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	4639      	mov	r1, r7
 8002caa:	4630      	mov	r0, r6
 8002cac:	eb04 0903 	add.w	r9, r4, r3
 8002cb0:	f000 fb60 	bl	8003374 <_sbrk_r>
 8002cb4:	4581      	cmp	r9, r0
 8002cb6:	d142      	bne.n	8002d3e <_malloc_r+0xea>
 8002cb8:	6821      	ldr	r1, [r4, #0]
 8002cba:	4630      	mov	r0, r6
 8002cbc:	1a6d      	subs	r5, r5, r1
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	f7ff ffa6 	bl	8002c10 <sbrk_aligned>
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d03a      	beq.n	8002d3e <_malloc_r+0xea>
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	442b      	add	r3, r5
 8002ccc:	6023      	str	r3, [r4, #0]
 8002cce:	f8d8 3000 	ldr.w	r3, [r8]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	bb62      	cbnz	r2, 8002d30 <_malloc_r+0xdc>
 8002cd6:	f8c8 7000 	str.w	r7, [r8]
 8002cda:	e00f      	b.n	8002cfc <_malloc_r+0xa8>
 8002cdc:	6822      	ldr	r2, [r4, #0]
 8002cde:	1b52      	subs	r2, r2, r5
 8002ce0:	d420      	bmi.n	8002d24 <_malloc_r+0xd0>
 8002ce2:	2a0b      	cmp	r2, #11
 8002ce4:	d917      	bls.n	8002d16 <_malloc_r+0xc2>
 8002ce6:	1961      	adds	r1, r4, r5
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	6025      	str	r5, [r4, #0]
 8002cec:	bf18      	it	ne
 8002cee:	6059      	strne	r1, [r3, #4]
 8002cf0:	6863      	ldr	r3, [r4, #4]
 8002cf2:	bf08      	it	eq
 8002cf4:	f8c8 1000 	streq.w	r1, [r8]
 8002cf8:	5162      	str	r2, [r4, r5]
 8002cfa:	604b      	str	r3, [r1, #4]
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	f000 f82f 	bl	8002d60 <__malloc_unlock>
 8002d02:	f104 000b 	add.w	r0, r4, #11
 8002d06:	1d23      	adds	r3, r4, #4
 8002d08:	f020 0007 	bic.w	r0, r0, #7
 8002d0c:	1ac2      	subs	r2, r0, r3
 8002d0e:	bf1c      	itt	ne
 8002d10:	1a1b      	subne	r3, r3, r0
 8002d12:	50a3      	strne	r3, [r4, r2]
 8002d14:	e7af      	b.n	8002c76 <_malloc_r+0x22>
 8002d16:	6862      	ldr	r2, [r4, #4]
 8002d18:	42a3      	cmp	r3, r4
 8002d1a:	bf0c      	ite	eq
 8002d1c:	f8c8 2000 	streq.w	r2, [r8]
 8002d20:	605a      	strne	r2, [r3, #4]
 8002d22:	e7eb      	b.n	8002cfc <_malloc_r+0xa8>
 8002d24:	4623      	mov	r3, r4
 8002d26:	6864      	ldr	r4, [r4, #4]
 8002d28:	e7ae      	b.n	8002c88 <_malloc_r+0x34>
 8002d2a:	463c      	mov	r4, r7
 8002d2c:	687f      	ldr	r7, [r7, #4]
 8002d2e:	e7b6      	b.n	8002c9e <_malloc_r+0x4a>
 8002d30:	461a      	mov	r2, r3
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	42a3      	cmp	r3, r4
 8002d36:	d1fb      	bne.n	8002d30 <_malloc_r+0xdc>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	6053      	str	r3, [r2, #4]
 8002d3c:	e7de      	b.n	8002cfc <_malloc_r+0xa8>
 8002d3e:	230c      	movs	r3, #12
 8002d40:	4630      	mov	r0, r6
 8002d42:	6033      	str	r3, [r6, #0]
 8002d44:	f000 f80c 	bl	8002d60 <__malloc_unlock>
 8002d48:	e794      	b.n	8002c74 <_malloc_r+0x20>
 8002d4a:	6005      	str	r5, [r0, #0]
 8002d4c:	e7d6      	b.n	8002cfc <_malloc_r+0xa8>
 8002d4e:	bf00      	nop
 8002d50:	2000076c 	.word	0x2000076c

08002d54 <__malloc_lock>:
 8002d54:	4801      	ldr	r0, [pc, #4]	@ (8002d5c <__malloc_lock+0x8>)
 8002d56:	f7ff bf03 	b.w	8002b60 <__retarget_lock_acquire_recursive>
 8002d5a:	bf00      	nop
 8002d5c:	20000764 	.word	0x20000764

08002d60 <__malloc_unlock>:
 8002d60:	4801      	ldr	r0, [pc, #4]	@ (8002d68 <__malloc_unlock+0x8>)
 8002d62:	f7ff befe 	b.w	8002b62 <__retarget_lock_release_recursive>
 8002d66:	bf00      	nop
 8002d68:	20000764 	.word	0x20000764

08002d6c <__ssputs_r>:
 8002d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d70:	461f      	mov	r7, r3
 8002d72:	688e      	ldr	r6, [r1, #8]
 8002d74:	4682      	mov	sl, r0
 8002d76:	42be      	cmp	r6, r7
 8002d78:	460c      	mov	r4, r1
 8002d7a:	4690      	mov	r8, r2
 8002d7c:	680b      	ldr	r3, [r1, #0]
 8002d7e:	d82d      	bhi.n	8002ddc <__ssputs_r+0x70>
 8002d80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002d88:	d026      	beq.n	8002dd8 <__ssputs_r+0x6c>
 8002d8a:	6965      	ldr	r5, [r4, #20]
 8002d8c:	6909      	ldr	r1, [r1, #16]
 8002d8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d92:	eba3 0901 	sub.w	r9, r3, r1
 8002d96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d9a:	1c7b      	adds	r3, r7, #1
 8002d9c:	444b      	add	r3, r9
 8002d9e:	106d      	asrs	r5, r5, #1
 8002da0:	429d      	cmp	r5, r3
 8002da2:	bf38      	it	cc
 8002da4:	461d      	movcc	r5, r3
 8002da6:	0553      	lsls	r3, r2, #21
 8002da8:	d527      	bpl.n	8002dfa <__ssputs_r+0x8e>
 8002daa:	4629      	mov	r1, r5
 8002dac:	f7ff ff52 	bl	8002c54 <_malloc_r>
 8002db0:	4606      	mov	r6, r0
 8002db2:	b360      	cbz	r0, 8002e0e <__ssputs_r+0xa2>
 8002db4:	464a      	mov	r2, r9
 8002db6:	6921      	ldr	r1, [r4, #16]
 8002db8:	f7ff fed4 	bl	8002b64 <memcpy>
 8002dbc:	89a3      	ldrh	r3, [r4, #12]
 8002dbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dc6:	81a3      	strh	r3, [r4, #12]
 8002dc8:	6126      	str	r6, [r4, #16]
 8002dca:	444e      	add	r6, r9
 8002dcc:	6026      	str	r6, [r4, #0]
 8002dce:	463e      	mov	r6, r7
 8002dd0:	6165      	str	r5, [r4, #20]
 8002dd2:	eba5 0509 	sub.w	r5, r5, r9
 8002dd6:	60a5      	str	r5, [r4, #8]
 8002dd8:	42be      	cmp	r6, r7
 8002dda:	d900      	bls.n	8002dde <__ssputs_r+0x72>
 8002ddc:	463e      	mov	r6, r7
 8002dde:	4632      	mov	r2, r6
 8002de0:	4641      	mov	r1, r8
 8002de2:	6820      	ldr	r0, [r4, #0]
 8002de4:	f000 faac 	bl	8003340 <memmove>
 8002de8:	2000      	movs	r0, #0
 8002dea:	68a3      	ldr	r3, [r4, #8]
 8002dec:	1b9b      	subs	r3, r3, r6
 8002dee:	60a3      	str	r3, [r4, #8]
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	4433      	add	r3, r6
 8002df4:	6023      	str	r3, [r4, #0]
 8002df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dfa:	462a      	mov	r2, r5
 8002dfc:	f000 fad8 	bl	80033b0 <_realloc_r>
 8002e00:	4606      	mov	r6, r0
 8002e02:	2800      	cmp	r0, #0
 8002e04:	d1e0      	bne.n	8002dc8 <__ssputs_r+0x5c>
 8002e06:	4650      	mov	r0, sl
 8002e08:	6921      	ldr	r1, [r4, #16]
 8002e0a:	f7ff feb9 	bl	8002b80 <_free_r>
 8002e0e:	230c      	movs	r3, #12
 8002e10:	f8ca 3000 	str.w	r3, [sl]
 8002e14:	89a3      	ldrh	r3, [r4, #12]
 8002e16:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e1e:	81a3      	strh	r3, [r4, #12]
 8002e20:	e7e9      	b.n	8002df6 <__ssputs_r+0x8a>
	...

08002e24 <_svfiprintf_r>:
 8002e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e28:	4698      	mov	r8, r3
 8002e2a:	898b      	ldrh	r3, [r1, #12]
 8002e2c:	4607      	mov	r7, r0
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	460d      	mov	r5, r1
 8002e32:	4614      	mov	r4, r2
 8002e34:	b09d      	sub	sp, #116	@ 0x74
 8002e36:	d510      	bpl.n	8002e5a <_svfiprintf_r+0x36>
 8002e38:	690b      	ldr	r3, [r1, #16]
 8002e3a:	b973      	cbnz	r3, 8002e5a <_svfiprintf_r+0x36>
 8002e3c:	2140      	movs	r1, #64	@ 0x40
 8002e3e:	f7ff ff09 	bl	8002c54 <_malloc_r>
 8002e42:	6028      	str	r0, [r5, #0]
 8002e44:	6128      	str	r0, [r5, #16]
 8002e46:	b930      	cbnz	r0, 8002e56 <_svfiprintf_r+0x32>
 8002e48:	230c      	movs	r3, #12
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	b01d      	add	sp, #116	@ 0x74
 8002e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e56:	2340      	movs	r3, #64	@ 0x40
 8002e58:	616b      	str	r3, [r5, #20]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e5e:	2320      	movs	r3, #32
 8002e60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e64:	2330      	movs	r3, #48	@ 0x30
 8002e66:	f04f 0901 	mov.w	r9, #1
 8002e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e6e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003008 <_svfiprintf_r+0x1e4>
 8002e72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e76:	4623      	mov	r3, r4
 8002e78:	469a      	mov	sl, r3
 8002e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e7e:	b10a      	cbz	r2, 8002e84 <_svfiprintf_r+0x60>
 8002e80:	2a25      	cmp	r2, #37	@ 0x25
 8002e82:	d1f9      	bne.n	8002e78 <_svfiprintf_r+0x54>
 8002e84:	ebba 0b04 	subs.w	fp, sl, r4
 8002e88:	d00b      	beq.n	8002ea2 <_svfiprintf_r+0x7e>
 8002e8a:	465b      	mov	r3, fp
 8002e8c:	4622      	mov	r2, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	4638      	mov	r0, r7
 8002e92:	f7ff ff6b 	bl	8002d6c <__ssputs_r>
 8002e96:	3001      	adds	r0, #1
 8002e98:	f000 80a7 	beq.w	8002fea <_svfiprintf_r+0x1c6>
 8002e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e9e:	445a      	add	r2, fp
 8002ea0:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 809f 	beq.w	8002fea <_svfiprintf_r+0x1c6>
 8002eac:	2300      	movs	r3, #0
 8002eae:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eb6:	f10a 0a01 	add.w	sl, sl, #1
 8002eba:	9304      	str	r3, [sp, #16]
 8002ebc:	9307      	str	r3, [sp, #28]
 8002ebe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ec2:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ec4:	4654      	mov	r4, sl
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ecc:	484e      	ldr	r0, [pc, #312]	@ (8003008 <_svfiprintf_r+0x1e4>)
 8002ece:	f000 fa61 	bl	8003394 <memchr>
 8002ed2:	9a04      	ldr	r2, [sp, #16]
 8002ed4:	b9d8      	cbnz	r0, 8002f0e <_svfiprintf_r+0xea>
 8002ed6:	06d0      	lsls	r0, r2, #27
 8002ed8:	bf44      	itt	mi
 8002eda:	2320      	movmi	r3, #32
 8002edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ee0:	0711      	lsls	r1, r2, #28
 8002ee2:	bf44      	itt	mi
 8002ee4:	232b      	movmi	r3, #43	@ 0x2b
 8002ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002eea:	f89a 3000 	ldrb.w	r3, [sl]
 8002eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ef0:	d015      	beq.n	8002f1e <_svfiprintf_r+0xfa>
 8002ef2:	4654      	mov	r4, sl
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f04f 0c0a 	mov.w	ip, #10
 8002efa:	9a07      	ldr	r2, [sp, #28]
 8002efc:	4621      	mov	r1, r4
 8002efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f02:	3b30      	subs	r3, #48	@ 0x30
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d94b      	bls.n	8002fa0 <_svfiprintf_r+0x17c>
 8002f08:	b1b0      	cbz	r0, 8002f38 <_svfiprintf_r+0x114>
 8002f0a:	9207      	str	r2, [sp, #28]
 8002f0c:	e014      	b.n	8002f38 <_svfiprintf_r+0x114>
 8002f0e:	eba0 0308 	sub.w	r3, r0, r8
 8002f12:	fa09 f303 	lsl.w	r3, r9, r3
 8002f16:	4313      	orrs	r3, r2
 8002f18:	46a2      	mov	sl, r4
 8002f1a:	9304      	str	r3, [sp, #16]
 8002f1c:	e7d2      	b.n	8002ec4 <_svfiprintf_r+0xa0>
 8002f1e:	9b03      	ldr	r3, [sp, #12]
 8002f20:	1d19      	adds	r1, r3, #4
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	9103      	str	r1, [sp, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bfbb      	ittet	lt
 8002f2a:	425b      	neglt	r3, r3
 8002f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8002f30:	9307      	strge	r3, [sp, #28]
 8002f32:	9307      	strlt	r3, [sp, #28]
 8002f34:	bfb8      	it	lt
 8002f36:	9204      	strlt	r2, [sp, #16]
 8002f38:	7823      	ldrb	r3, [r4, #0]
 8002f3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f3c:	d10a      	bne.n	8002f54 <_svfiprintf_r+0x130>
 8002f3e:	7863      	ldrb	r3, [r4, #1]
 8002f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f42:	d132      	bne.n	8002faa <_svfiprintf_r+0x186>
 8002f44:	9b03      	ldr	r3, [sp, #12]
 8002f46:	3402      	adds	r4, #2
 8002f48:	1d1a      	adds	r2, r3, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	9203      	str	r2, [sp, #12]
 8002f4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f52:	9305      	str	r3, [sp, #20]
 8002f54:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800300c <_svfiprintf_r+0x1e8>
 8002f58:	2203      	movs	r2, #3
 8002f5a:	4650      	mov	r0, sl
 8002f5c:	7821      	ldrb	r1, [r4, #0]
 8002f5e:	f000 fa19 	bl	8003394 <memchr>
 8002f62:	b138      	cbz	r0, 8002f74 <_svfiprintf_r+0x150>
 8002f64:	2240      	movs	r2, #64	@ 0x40
 8002f66:	9b04      	ldr	r3, [sp, #16]
 8002f68:	eba0 000a 	sub.w	r0, r0, sl
 8002f6c:	4082      	lsls	r2, r0
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	3401      	adds	r4, #1
 8002f72:	9304      	str	r3, [sp, #16]
 8002f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f78:	2206      	movs	r2, #6
 8002f7a:	4825      	ldr	r0, [pc, #148]	@ (8003010 <_svfiprintf_r+0x1ec>)
 8002f7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f80:	f000 fa08 	bl	8003394 <memchr>
 8002f84:	2800      	cmp	r0, #0
 8002f86:	d036      	beq.n	8002ff6 <_svfiprintf_r+0x1d2>
 8002f88:	4b22      	ldr	r3, [pc, #136]	@ (8003014 <_svfiprintf_r+0x1f0>)
 8002f8a:	bb1b      	cbnz	r3, 8002fd4 <_svfiprintf_r+0x1b0>
 8002f8c:	9b03      	ldr	r3, [sp, #12]
 8002f8e:	3307      	adds	r3, #7
 8002f90:	f023 0307 	bic.w	r3, r3, #7
 8002f94:	3308      	adds	r3, #8
 8002f96:	9303      	str	r3, [sp, #12]
 8002f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f9a:	4433      	add	r3, r6
 8002f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f9e:	e76a      	b.n	8002e76 <_svfiprintf_r+0x52>
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fa8:	e7a8      	b.n	8002efc <_svfiprintf_r+0xd8>
 8002faa:	2300      	movs	r3, #0
 8002fac:	f04f 0c0a 	mov.w	ip, #10
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	3401      	adds	r4, #1
 8002fb4:	9305      	str	r3, [sp, #20]
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fbc:	3a30      	subs	r2, #48	@ 0x30
 8002fbe:	2a09      	cmp	r2, #9
 8002fc0:	d903      	bls.n	8002fca <_svfiprintf_r+0x1a6>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0c6      	beq.n	8002f54 <_svfiprintf_r+0x130>
 8002fc6:	9105      	str	r1, [sp, #20]
 8002fc8:	e7c4      	b.n	8002f54 <_svfiprintf_r+0x130>
 8002fca:	4604      	mov	r4, r0
 8002fcc:	2301      	movs	r3, #1
 8002fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fd2:	e7f0      	b.n	8002fb6 <_svfiprintf_r+0x192>
 8002fd4:	ab03      	add	r3, sp, #12
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	462a      	mov	r2, r5
 8002fda:	4638      	mov	r0, r7
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003018 <_svfiprintf_r+0x1f4>)
 8002fde:	a904      	add	r1, sp, #16
 8002fe0:	f3af 8000 	nop.w
 8002fe4:	1c42      	adds	r2, r0, #1
 8002fe6:	4606      	mov	r6, r0
 8002fe8:	d1d6      	bne.n	8002f98 <_svfiprintf_r+0x174>
 8002fea:	89ab      	ldrh	r3, [r5, #12]
 8002fec:	065b      	lsls	r3, r3, #25
 8002fee:	f53f af2d 	bmi.w	8002e4c <_svfiprintf_r+0x28>
 8002ff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ff4:	e72c      	b.n	8002e50 <_svfiprintf_r+0x2c>
 8002ff6:	ab03      	add	r3, sp, #12
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	462a      	mov	r2, r5
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <_svfiprintf_r+0x1f4>)
 8003000:	a904      	add	r1, sp, #16
 8003002:	f000 f87d 	bl	8003100 <_printf_i>
 8003006:	e7ed      	b.n	8002fe4 <_svfiprintf_r+0x1c0>
 8003008:	0800348e 	.word	0x0800348e
 800300c:	08003494 	.word	0x08003494
 8003010:	08003498 	.word	0x08003498
 8003014:	00000000 	.word	0x00000000
 8003018:	08002d6d 	.word	0x08002d6d

0800301c <_printf_common>:
 800301c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003020:	4616      	mov	r6, r2
 8003022:	4698      	mov	r8, r3
 8003024:	688a      	ldr	r2, [r1, #8]
 8003026:	690b      	ldr	r3, [r1, #16]
 8003028:	4607      	mov	r7, r0
 800302a:	4293      	cmp	r3, r2
 800302c:	bfb8      	it	lt
 800302e:	4613      	movlt	r3, r2
 8003030:	6033      	str	r3, [r6, #0]
 8003032:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003036:	460c      	mov	r4, r1
 8003038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800303c:	b10a      	cbz	r2, 8003042 <_printf_common+0x26>
 800303e:	3301      	adds	r3, #1
 8003040:	6033      	str	r3, [r6, #0]
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	0699      	lsls	r1, r3, #26
 8003046:	bf42      	ittt	mi
 8003048:	6833      	ldrmi	r3, [r6, #0]
 800304a:	3302      	addmi	r3, #2
 800304c:	6033      	strmi	r3, [r6, #0]
 800304e:	6825      	ldr	r5, [r4, #0]
 8003050:	f015 0506 	ands.w	r5, r5, #6
 8003054:	d106      	bne.n	8003064 <_printf_common+0x48>
 8003056:	f104 0a19 	add.w	sl, r4, #25
 800305a:	68e3      	ldr	r3, [r4, #12]
 800305c:	6832      	ldr	r2, [r6, #0]
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	42ab      	cmp	r3, r5
 8003062:	dc2b      	bgt.n	80030bc <_printf_common+0xa0>
 8003064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003068:	6822      	ldr	r2, [r4, #0]
 800306a:	3b00      	subs	r3, #0
 800306c:	bf18      	it	ne
 800306e:	2301      	movne	r3, #1
 8003070:	0692      	lsls	r2, r2, #26
 8003072:	d430      	bmi.n	80030d6 <_printf_common+0xba>
 8003074:	4641      	mov	r1, r8
 8003076:	4638      	mov	r0, r7
 8003078:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800307c:	47c8      	blx	r9
 800307e:	3001      	adds	r0, #1
 8003080:	d023      	beq.n	80030ca <_printf_common+0xae>
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	6922      	ldr	r2, [r4, #16]
 8003086:	f003 0306 	and.w	r3, r3, #6
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf14      	ite	ne
 800308e:	2500      	movne	r5, #0
 8003090:	6833      	ldreq	r3, [r6, #0]
 8003092:	f04f 0600 	mov.w	r6, #0
 8003096:	bf08      	it	eq
 8003098:	68e5      	ldreq	r5, [r4, #12]
 800309a:	f104 041a 	add.w	r4, r4, #26
 800309e:	bf08      	it	eq
 80030a0:	1aed      	subeq	r5, r5, r3
 80030a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030a6:	bf08      	it	eq
 80030a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030ac:	4293      	cmp	r3, r2
 80030ae:	bfc4      	itt	gt
 80030b0:	1a9b      	subgt	r3, r3, r2
 80030b2:	18ed      	addgt	r5, r5, r3
 80030b4:	42b5      	cmp	r5, r6
 80030b6:	d11a      	bne.n	80030ee <_printf_common+0xd2>
 80030b8:	2000      	movs	r0, #0
 80030ba:	e008      	b.n	80030ce <_printf_common+0xb2>
 80030bc:	2301      	movs	r3, #1
 80030be:	4652      	mov	r2, sl
 80030c0:	4641      	mov	r1, r8
 80030c2:	4638      	mov	r0, r7
 80030c4:	47c8      	blx	r9
 80030c6:	3001      	adds	r0, #1
 80030c8:	d103      	bne.n	80030d2 <_printf_common+0xb6>
 80030ca:	f04f 30ff 	mov.w	r0, #4294967295
 80030ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d2:	3501      	adds	r5, #1
 80030d4:	e7c1      	b.n	800305a <_printf_common+0x3e>
 80030d6:	2030      	movs	r0, #48	@ 0x30
 80030d8:	18e1      	adds	r1, r4, r3
 80030da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030e4:	4422      	add	r2, r4
 80030e6:	3302      	adds	r3, #2
 80030e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030ec:	e7c2      	b.n	8003074 <_printf_common+0x58>
 80030ee:	2301      	movs	r3, #1
 80030f0:	4622      	mov	r2, r4
 80030f2:	4641      	mov	r1, r8
 80030f4:	4638      	mov	r0, r7
 80030f6:	47c8      	blx	r9
 80030f8:	3001      	adds	r0, #1
 80030fa:	d0e6      	beq.n	80030ca <_printf_common+0xae>
 80030fc:	3601      	adds	r6, #1
 80030fe:	e7d9      	b.n	80030b4 <_printf_common+0x98>

08003100 <_printf_i>:
 8003100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003104:	7e0f      	ldrb	r7, [r1, #24]
 8003106:	4691      	mov	r9, r2
 8003108:	2f78      	cmp	r7, #120	@ 0x78
 800310a:	4680      	mov	r8, r0
 800310c:	460c      	mov	r4, r1
 800310e:	469a      	mov	sl, r3
 8003110:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003116:	d807      	bhi.n	8003128 <_printf_i+0x28>
 8003118:	2f62      	cmp	r7, #98	@ 0x62
 800311a:	d80a      	bhi.n	8003132 <_printf_i+0x32>
 800311c:	2f00      	cmp	r7, #0
 800311e:	f000 80d3 	beq.w	80032c8 <_printf_i+0x1c8>
 8003122:	2f58      	cmp	r7, #88	@ 0x58
 8003124:	f000 80ba 	beq.w	800329c <_printf_i+0x19c>
 8003128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800312c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003130:	e03a      	b.n	80031a8 <_printf_i+0xa8>
 8003132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003136:	2b15      	cmp	r3, #21
 8003138:	d8f6      	bhi.n	8003128 <_printf_i+0x28>
 800313a:	a101      	add	r1, pc, #4	@ (adr r1, 8003140 <_printf_i+0x40>)
 800313c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003140:	08003199 	.word	0x08003199
 8003144:	080031ad 	.word	0x080031ad
 8003148:	08003129 	.word	0x08003129
 800314c:	08003129 	.word	0x08003129
 8003150:	08003129 	.word	0x08003129
 8003154:	08003129 	.word	0x08003129
 8003158:	080031ad 	.word	0x080031ad
 800315c:	08003129 	.word	0x08003129
 8003160:	08003129 	.word	0x08003129
 8003164:	08003129 	.word	0x08003129
 8003168:	08003129 	.word	0x08003129
 800316c:	080032af 	.word	0x080032af
 8003170:	080031d7 	.word	0x080031d7
 8003174:	08003269 	.word	0x08003269
 8003178:	08003129 	.word	0x08003129
 800317c:	08003129 	.word	0x08003129
 8003180:	080032d1 	.word	0x080032d1
 8003184:	08003129 	.word	0x08003129
 8003188:	080031d7 	.word	0x080031d7
 800318c:	08003129 	.word	0x08003129
 8003190:	08003129 	.word	0x08003129
 8003194:	08003271 	.word	0x08003271
 8003198:	6833      	ldr	r3, [r6, #0]
 800319a:	1d1a      	adds	r2, r3, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6032      	str	r2, [r6, #0]
 80031a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031a8:	2301      	movs	r3, #1
 80031aa:	e09e      	b.n	80032ea <_printf_i+0x1ea>
 80031ac:	6833      	ldr	r3, [r6, #0]
 80031ae:	6820      	ldr	r0, [r4, #0]
 80031b0:	1d19      	adds	r1, r3, #4
 80031b2:	6031      	str	r1, [r6, #0]
 80031b4:	0606      	lsls	r6, r0, #24
 80031b6:	d501      	bpl.n	80031bc <_printf_i+0xbc>
 80031b8:	681d      	ldr	r5, [r3, #0]
 80031ba:	e003      	b.n	80031c4 <_printf_i+0xc4>
 80031bc:	0645      	lsls	r5, r0, #25
 80031be:	d5fb      	bpl.n	80031b8 <_printf_i+0xb8>
 80031c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031c4:	2d00      	cmp	r5, #0
 80031c6:	da03      	bge.n	80031d0 <_printf_i+0xd0>
 80031c8:	232d      	movs	r3, #45	@ 0x2d
 80031ca:	426d      	negs	r5, r5
 80031cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031d0:	230a      	movs	r3, #10
 80031d2:	4859      	ldr	r0, [pc, #356]	@ (8003338 <_printf_i+0x238>)
 80031d4:	e011      	b.n	80031fa <_printf_i+0xfa>
 80031d6:	6821      	ldr	r1, [r4, #0]
 80031d8:	6833      	ldr	r3, [r6, #0]
 80031da:	0608      	lsls	r0, r1, #24
 80031dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80031e0:	d402      	bmi.n	80031e8 <_printf_i+0xe8>
 80031e2:	0649      	lsls	r1, r1, #25
 80031e4:	bf48      	it	mi
 80031e6:	b2ad      	uxthmi	r5, r5
 80031e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80031ea:	6033      	str	r3, [r6, #0]
 80031ec:	bf14      	ite	ne
 80031ee:	230a      	movne	r3, #10
 80031f0:	2308      	moveq	r3, #8
 80031f2:	4851      	ldr	r0, [pc, #324]	@ (8003338 <_printf_i+0x238>)
 80031f4:	2100      	movs	r1, #0
 80031f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031fa:	6866      	ldr	r6, [r4, #4]
 80031fc:	2e00      	cmp	r6, #0
 80031fe:	bfa8      	it	ge
 8003200:	6821      	ldrge	r1, [r4, #0]
 8003202:	60a6      	str	r6, [r4, #8]
 8003204:	bfa4      	itt	ge
 8003206:	f021 0104 	bicge.w	r1, r1, #4
 800320a:	6021      	strge	r1, [r4, #0]
 800320c:	b90d      	cbnz	r5, 8003212 <_printf_i+0x112>
 800320e:	2e00      	cmp	r6, #0
 8003210:	d04b      	beq.n	80032aa <_printf_i+0x1aa>
 8003212:	4616      	mov	r6, r2
 8003214:	fbb5 f1f3 	udiv	r1, r5, r3
 8003218:	fb03 5711 	mls	r7, r3, r1, r5
 800321c:	5dc7      	ldrb	r7, [r0, r7]
 800321e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003222:	462f      	mov	r7, r5
 8003224:	42bb      	cmp	r3, r7
 8003226:	460d      	mov	r5, r1
 8003228:	d9f4      	bls.n	8003214 <_printf_i+0x114>
 800322a:	2b08      	cmp	r3, #8
 800322c:	d10b      	bne.n	8003246 <_printf_i+0x146>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	07df      	lsls	r7, r3, #31
 8003232:	d508      	bpl.n	8003246 <_printf_i+0x146>
 8003234:	6923      	ldr	r3, [r4, #16]
 8003236:	6861      	ldr	r1, [r4, #4]
 8003238:	4299      	cmp	r1, r3
 800323a:	bfde      	ittt	le
 800323c:	2330      	movle	r3, #48	@ 0x30
 800323e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003242:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003246:	1b92      	subs	r2, r2, r6
 8003248:	6122      	str	r2, [r4, #16]
 800324a:	464b      	mov	r3, r9
 800324c:	4621      	mov	r1, r4
 800324e:	4640      	mov	r0, r8
 8003250:	f8cd a000 	str.w	sl, [sp]
 8003254:	aa03      	add	r2, sp, #12
 8003256:	f7ff fee1 	bl	800301c <_printf_common>
 800325a:	3001      	adds	r0, #1
 800325c:	d14a      	bne.n	80032f4 <_printf_i+0x1f4>
 800325e:	f04f 30ff 	mov.w	r0, #4294967295
 8003262:	b004      	add	sp, #16
 8003264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	f043 0320 	orr.w	r3, r3, #32
 800326e:	6023      	str	r3, [r4, #0]
 8003270:	2778      	movs	r7, #120	@ 0x78
 8003272:	4832      	ldr	r0, [pc, #200]	@ (800333c <_printf_i+0x23c>)
 8003274:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	6831      	ldr	r1, [r6, #0]
 800327c:	061f      	lsls	r7, r3, #24
 800327e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003282:	d402      	bmi.n	800328a <_printf_i+0x18a>
 8003284:	065f      	lsls	r7, r3, #25
 8003286:	bf48      	it	mi
 8003288:	b2ad      	uxthmi	r5, r5
 800328a:	6031      	str	r1, [r6, #0]
 800328c:	07d9      	lsls	r1, r3, #31
 800328e:	bf44      	itt	mi
 8003290:	f043 0320 	orrmi.w	r3, r3, #32
 8003294:	6023      	strmi	r3, [r4, #0]
 8003296:	b11d      	cbz	r5, 80032a0 <_printf_i+0x1a0>
 8003298:	2310      	movs	r3, #16
 800329a:	e7ab      	b.n	80031f4 <_printf_i+0xf4>
 800329c:	4826      	ldr	r0, [pc, #152]	@ (8003338 <_printf_i+0x238>)
 800329e:	e7e9      	b.n	8003274 <_printf_i+0x174>
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	f023 0320 	bic.w	r3, r3, #32
 80032a6:	6023      	str	r3, [r4, #0]
 80032a8:	e7f6      	b.n	8003298 <_printf_i+0x198>
 80032aa:	4616      	mov	r6, r2
 80032ac:	e7bd      	b.n	800322a <_printf_i+0x12a>
 80032ae:	6833      	ldr	r3, [r6, #0]
 80032b0:	6825      	ldr	r5, [r4, #0]
 80032b2:	1d18      	adds	r0, r3, #4
 80032b4:	6961      	ldr	r1, [r4, #20]
 80032b6:	6030      	str	r0, [r6, #0]
 80032b8:	062e      	lsls	r6, r5, #24
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	d501      	bpl.n	80032c2 <_printf_i+0x1c2>
 80032be:	6019      	str	r1, [r3, #0]
 80032c0:	e002      	b.n	80032c8 <_printf_i+0x1c8>
 80032c2:	0668      	lsls	r0, r5, #25
 80032c4:	d5fb      	bpl.n	80032be <_printf_i+0x1be>
 80032c6:	8019      	strh	r1, [r3, #0]
 80032c8:	2300      	movs	r3, #0
 80032ca:	4616      	mov	r6, r2
 80032cc:	6123      	str	r3, [r4, #16]
 80032ce:	e7bc      	b.n	800324a <_printf_i+0x14a>
 80032d0:	6833      	ldr	r3, [r6, #0]
 80032d2:	2100      	movs	r1, #0
 80032d4:	1d1a      	adds	r2, r3, #4
 80032d6:	6032      	str	r2, [r6, #0]
 80032d8:	681e      	ldr	r6, [r3, #0]
 80032da:	6862      	ldr	r2, [r4, #4]
 80032dc:	4630      	mov	r0, r6
 80032de:	f000 f859 	bl	8003394 <memchr>
 80032e2:	b108      	cbz	r0, 80032e8 <_printf_i+0x1e8>
 80032e4:	1b80      	subs	r0, r0, r6
 80032e6:	6060      	str	r0, [r4, #4]
 80032e8:	6863      	ldr	r3, [r4, #4]
 80032ea:	6123      	str	r3, [r4, #16]
 80032ec:	2300      	movs	r3, #0
 80032ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032f2:	e7aa      	b.n	800324a <_printf_i+0x14a>
 80032f4:	4632      	mov	r2, r6
 80032f6:	4649      	mov	r1, r9
 80032f8:	4640      	mov	r0, r8
 80032fa:	6923      	ldr	r3, [r4, #16]
 80032fc:	47d0      	blx	sl
 80032fe:	3001      	adds	r0, #1
 8003300:	d0ad      	beq.n	800325e <_printf_i+0x15e>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	079b      	lsls	r3, r3, #30
 8003306:	d413      	bmi.n	8003330 <_printf_i+0x230>
 8003308:	68e0      	ldr	r0, [r4, #12]
 800330a:	9b03      	ldr	r3, [sp, #12]
 800330c:	4298      	cmp	r0, r3
 800330e:	bfb8      	it	lt
 8003310:	4618      	movlt	r0, r3
 8003312:	e7a6      	b.n	8003262 <_printf_i+0x162>
 8003314:	2301      	movs	r3, #1
 8003316:	4632      	mov	r2, r6
 8003318:	4649      	mov	r1, r9
 800331a:	4640      	mov	r0, r8
 800331c:	47d0      	blx	sl
 800331e:	3001      	adds	r0, #1
 8003320:	d09d      	beq.n	800325e <_printf_i+0x15e>
 8003322:	3501      	adds	r5, #1
 8003324:	68e3      	ldr	r3, [r4, #12]
 8003326:	9903      	ldr	r1, [sp, #12]
 8003328:	1a5b      	subs	r3, r3, r1
 800332a:	42ab      	cmp	r3, r5
 800332c:	dcf2      	bgt.n	8003314 <_printf_i+0x214>
 800332e:	e7eb      	b.n	8003308 <_printf_i+0x208>
 8003330:	2500      	movs	r5, #0
 8003332:	f104 0619 	add.w	r6, r4, #25
 8003336:	e7f5      	b.n	8003324 <_printf_i+0x224>
 8003338:	0800349f 	.word	0x0800349f
 800333c:	080034b0 	.word	0x080034b0

08003340 <memmove>:
 8003340:	4288      	cmp	r0, r1
 8003342:	b510      	push	{r4, lr}
 8003344:	eb01 0402 	add.w	r4, r1, r2
 8003348:	d902      	bls.n	8003350 <memmove+0x10>
 800334a:	4284      	cmp	r4, r0
 800334c:	4623      	mov	r3, r4
 800334e:	d807      	bhi.n	8003360 <memmove+0x20>
 8003350:	1e43      	subs	r3, r0, #1
 8003352:	42a1      	cmp	r1, r4
 8003354:	d008      	beq.n	8003368 <memmove+0x28>
 8003356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800335a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800335e:	e7f8      	b.n	8003352 <memmove+0x12>
 8003360:	4601      	mov	r1, r0
 8003362:	4402      	add	r2, r0
 8003364:	428a      	cmp	r2, r1
 8003366:	d100      	bne.n	800336a <memmove+0x2a>
 8003368:	bd10      	pop	{r4, pc}
 800336a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800336e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003372:	e7f7      	b.n	8003364 <memmove+0x24>

08003374 <_sbrk_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	2300      	movs	r3, #0
 8003378:	4d05      	ldr	r5, [pc, #20]	@ (8003390 <_sbrk_r+0x1c>)
 800337a:	4604      	mov	r4, r0
 800337c:	4608      	mov	r0, r1
 800337e:	602b      	str	r3, [r5, #0]
 8003380:	f7fd ffa4 	bl	80012cc <_sbrk>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d102      	bne.n	800338e <_sbrk_r+0x1a>
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	b103      	cbz	r3, 800338e <_sbrk_r+0x1a>
 800338c:	6023      	str	r3, [r4, #0]
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	20000760 	.word	0x20000760

08003394 <memchr>:
 8003394:	4603      	mov	r3, r0
 8003396:	b510      	push	{r4, lr}
 8003398:	b2c9      	uxtb	r1, r1
 800339a:	4402      	add	r2, r0
 800339c:	4293      	cmp	r3, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	d101      	bne.n	80033a6 <memchr+0x12>
 80033a2:	2000      	movs	r0, #0
 80033a4:	e003      	b.n	80033ae <memchr+0x1a>
 80033a6:	7804      	ldrb	r4, [r0, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	428c      	cmp	r4, r1
 80033ac:	d1f6      	bne.n	800339c <memchr+0x8>
 80033ae:	bd10      	pop	{r4, pc}

080033b0 <_realloc_r>:
 80033b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b4:	4680      	mov	r8, r0
 80033b6:	4615      	mov	r5, r2
 80033b8:	460c      	mov	r4, r1
 80033ba:	b921      	cbnz	r1, 80033c6 <_realloc_r+0x16>
 80033bc:	4611      	mov	r1, r2
 80033be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033c2:	f7ff bc47 	b.w	8002c54 <_malloc_r>
 80033c6:	b92a      	cbnz	r2, 80033d4 <_realloc_r+0x24>
 80033c8:	f7ff fbda 	bl	8002b80 <_free_r>
 80033cc:	2400      	movs	r4, #0
 80033ce:	4620      	mov	r0, r4
 80033d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033d4:	f000 f81a 	bl	800340c <_malloc_usable_size_r>
 80033d8:	4285      	cmp	r5, r0
 80033da:	4606      	mov	r6, r0
 80033dc:	d802      	bhi.n	80033e4 <_realloc_r+0x34>
 80033de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80033e2:	d8f4      	bhi.n	80033ce <_realloc_r+0x1e>
 80033e4:	4629      	mov	r1, r5
 80033e6:	4640      	mov	r0, r8
 80033e8:	f7ff fc34 	bl	8002c54 <_malloc_r>
 80033ec:	4607      	mov	r7, r0
 80033ee:	2800      	cmp	r0, #0
 80033f0:	d0ec      	beq.n	80033cc <_realloc_r+0x1c>
 80033f2:	42b5      	cmp	r5, r6
 80033f4:	462a      	mov	r2, r5
 80033f6:	4621      	mov	r1, r4
 80033f8:	bf28      	it	cs
 80033fa:	4632      	movcs	r2, r6
 80033fc:	f7ff fbb2 	bl	8002b64 <memcpy>
 8003400:	4621      	mov	r1, r4
 8003402:	4640      	mov	r0, r8
 8003404:	f7ff fbbc 	bl	8002b80 <_free_r>
 8003408:	463c      	mov	r4, r7
 800340a:	e7e0      	b.n	80033ce <_realloc_r+0x1e>

0800340c <_malloc_usable_size_r>:
 800340c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003410:	1f18      	subs	r0, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	bfbc      	itt	lt
 8003416:	580b      	ldrlt	r3, [r1, r0]
 8003418:	18c0      	addlt	r0, r0, r3
 800341a:	4770      	bx	lr

0800341c <_init>:
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341e:	bf00      	nop
 8003420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003422:	bc08      	pop	{r3}
 8003424:	469e      	mov	lr, r3
 8003426:	4770      	bx	lr

08003428 <_fini>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	bf00      	nop
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr
