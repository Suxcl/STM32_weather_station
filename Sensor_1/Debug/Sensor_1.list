
Sensor_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009040  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08009150  08009150  0000a150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009544  08009544  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009544  08009544  0000a544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800954c  0800954c  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800954c  0800954c  0000a54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009550  08009550  0000a550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009554  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  200001e0  08009730  0000b1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  08009730  0000b980  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aad6  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f8  00000000  00000000  00015cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00017fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000849  00000000  00000000  00018ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e21  00000000  00000000  00019321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee01  00000000  00000000  00032142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bff  00000000  00000000  00040f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7b42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000401c  00000000  00000000  000c7b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000cbba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009138 	.word	0x08009138

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009138 	.word	0x08009138

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <__aeabi_uldivmod>:
 8001030:	b953      	cbnz	r3, 8001048 <__aeabi_uldivmod+0x18>
 8001032:	b94a      	cbnz	r2, 8001048 <__aeabi_uldivmod+0x18>
 8001034:	2900      	cmp	r1, #0
 8001036:	bf08      	it	eq
 8001038:	2800      	cmpeq	r0, #0
 800103a:	bf1c      	itt	ne
 800103c:	f04f 31ff 	movne.w	r1, #4294967295
 8001040:	f04f 30ff 	movne.w	r0, #4294967295
 8001044:	f000 b968 	b.w	8001318 <__aeabi_idiv0>
 8001048:	f1ad 0c08 	sub.w	ip, sp, #8
 800104c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001050:	f000 f806 	bl	8001060 <__udivmoddi4>
 8001054:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800105c:	b004      	add	sp, #16
 800105e:	4770      	bx	lr

08001060 <__udivmoddi4>:
 8001060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001064:	9d08      	ldr	r5, [sp, #32]
 8001066:	460c      	mov	r4, r1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d14e      	bne.n	800110a <__udivmoddi4+0xaa>
 800106c:	4694      	mov	ip, r2
 800106e:	458c      	cmp	ip, r1
 8001070:	4686      	mov	lr, r0
 8001072:	fab2 f282 	clz	r2, r2
 8001076:	d962      	bls.n	800113e <__udivmoddi4+0xde>
 8001078:	b14a      	cbz	r2, 800108e <__udivmoddi4+0x2e>
 800107a:	f1c2 0320 	rsb	r3, r2, #32
 800107e:	4091      	lsls	r1, r2
 8001080:	fa20 f303 	lsr.w	r3, r0, r3
 8001084:	fa0c fc02 	lsl.w	ip, ip, r2
 8001088:	4319      	orrs	r1, r3
 800108a:	fa00 fe02 	lsl.w	lr, r0, r2
 800108e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001092:	fbb1 f4f7 	udiv	r4, r1, r7
 8001096:	fb07 1114 	mls	r1, r7, r4, r1
 800109a:	fa1f f68c 	uxth.w	r6, ip
 800109e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010a6:	fb04 f106 	mul.w	r1, r4, r6
 80010aa:	4299      	cmp	r1, r3
 80010ac:	d90a      	bls.n	80010c4 <__udivmoddi4+0x64>
 80010ae:	eb1c 0303 	adds.w	r3, ip, r3
 80010b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80010b6:	f080 8110 	bcs.w	80012da <__udivmoddi4+0x27a>
 80010ba:	4299      	cmp	r1, r3
 80010bc:	f240 810d 	bls.w	80012da <__udivmoddi4+0x27a>
 80010c0:	3c02      	subs	r4, #2
 80010c2:	4463      	add	r3, ip
 80010c4:	1a59      	subs	r1, r3, r1
 80010c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80010ca:	fb07 1110 	mls	r1, r7, r0, r1
 80010ce:	fb00 f606 	mul.w	r6, r0, r6
 80010d2:	fa1f f38e 	uxth.w	r3, lr
 80010d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010da:	429e      	cmp	r6, r3
 80010dc:	d90a      	bls.n	80010f4 <__udivmoddi4+0x94>
 80010de:	eb1c 0303 	adds.w	r3, ip, r3
 80010e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010e6:	f080 80fa 	bcs.w	80012de <__udivmoddi4+0x27e>
 80010ea:	429e      	cmp	r6, r3
 80010ec:	f240 80f7 	bls.w	80012de <__udivmoddi4+0x27e>
 80010f0:	4463      	add	r3, ip
 80010f2:	3802      	subs	r0, #2
 80010f4:	2100      	movs	r1, #0
 80010f6:	1b9b      	subs	r3, r3, r6
 80010f8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010fc:	b11d      	cbz	r5, 8001106 <__udivmoddi4+0xa6>
 80010fe:	40d3      	lsrs	r3, r2
 8001100:	2200      	movs	r2, #0
 8001102:	e9c5 3200 	strd	r3, r2, [r5]
 8001106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800110a:	428b      	cmp	r3, r1
 800110c:	d905      	bls.n	800111a <__udivmoddi4+0xba>
 800110e:	b10d      	cbz	r5, 8001114 <__udivmoddi4+0xb4>
 8001110:	e9c5 0100 	strd	r0, r1, [r5]
 8001114:	2100      	movs	r1, #0
 8001116:	4608      	mov	r0, r1
 8001118:	e7f5      	b.n	8001106 <__udivmoddi4+0xa6>
 800111a:	fab3 f183 	clz	r1, r3
 800111e:	2900      	cmp	r1, #0
 8001120:	d146      	bne.n	80011b0 <__udivmoddi4+0x150>
 8001122:	42a3      	cmp	r3, r4
 8001124:	d302      	bcc.n	800112c <__udivmoddi4+0xcc>
 8001126:	4290      	cmp	r0, r2
 8001128:	f0c0 80ee 	bcc.w	8001308 <__udivmoddi4+0x2a8>
 800112c:	1a86      	subs	r6, r0, r2
 800112e:	eb64 0303 	sbc.w	r3, r4, r3
 8001132:	2001      	movs	r0, #1
 8001134:	2d00      	cmp	r5, #0
 8001136:	d0e6      	beq.n	8001106 <__udivmoddi4+0xa6>
 8001138:	e9c5 6300 	strd	r6, r3, [r5]
 800113c:	e7e3      	b.n	8001106 <__udivmoddi4+0xa6>
 800113e:	2a00      	cmp	r2, #0
 8001140:	f040 808f 	bne.w	8001262 <__udivmoddi4+0x202>
 8001144:	eba1 040c 	sub.w	r4, r1, ip
 8001148:	2101      	movs	r1, #1
 800114a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800114e:	fa1f f78c 	uxth.w	r7, ip
 8001152:	fbb4 f6f8 	udiv	r6, r4, r8
 8001156:	fb08 4416 	mls	r4, r8, r6, r4
 800115a:	fb07 f006 	mul.w	r0, r7, r6
 800115e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001162:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001166:	4298      	cmp	r0, r3
 8001168:	d908      	bls.n	800117c <__udivmoddi4+0x11c>
 800116a:	eb1c 0303 	adds.w	r3, ip, r3
 800116e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001172:	d202      	bcs.n	800117a <__udivmoddi4+0x11a>
 8001174:	4298      	cmp	r0, r3
 8001176:	f200 80cb 	bhi.w	8001310 <__udivmoddi4+0x2b0>
 800117a:	4626      	mov	r6, r4
 800117c:	1a1c      	subs	r4, r3, r0
 800117e:	fbb4 f0f8 	udiv	r0, r4, r8
 8001182:	fb08 4410 	mls	r4, r8, r0, r4
 8001186:	fb00 f707 	mul.w	r7, r0, r7
 800118a:	fa1f f38e 	uxth.w	r3, lr
 800118e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001192:	429f      	cmp	r7, r3
 8001194:	d908      	bls.n	80011a8 <__udivmoddi4+0x148>
 8001196:	eb1c 0303 	adds.w	r3, ip, r3
 800119a:	f100 34ff 	add.w	r4, r0, #4294967295
 800119e:	d202      	bcs.n	80011a6 <__udivmoddi4+0x146>
 80011a0:	429f      	cmp	r7, r3
 80011a2:	f200 80ae 	bhi.w	8001302 <__udivmoddi4+0x2a2>
 80011a6:	4620      	mov	r0, r4
 80011a8:	1bdb      	subs	r3, r3, r7
 80011aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80011ae:	e7a5      	b.n	80010fc <__udivmoddi4+0x9c>
 80011b0:	f1c1 0720 	rsb	r7, r1, #32
 80011b4:	408b      	lsls	r3, r1
 80011b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80011ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80011be:	fa24 f607 	lsr.w	r6, r4, r7
 80011c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011c6:	fbb6 f8f9 	udiv	r8, r6, r9
 80011ca:	fa1f fe8c 	uxth.w	lr, ip
 80011ce:	fb09 6618 	mls	r6, r9, r8, r6
 80011d2:	fa20 f307 	lsr.w	r3, r0, r7
 80011d6:	408c      	lsls	r4, r1
 80011d8:	fa00 fa01 	lsl.w	sl, r0, r1
 80011dc:	fb08 f00e 	mul.w	r0, r8, lr
 80011e0:	431c      	orrs	r4, r3
 80011e2:	0c23      	lsrs	r3, r4, #16
 80011e4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011e8:	4298      	cmp	r0, r3
 80011ea:	fa02 f201 	lsl.w	r2, r2, r1
 80011ee:	d90a      	bls.n	8001206 <__udivmoddi4+0x1a6>
 80011f0:	eb1c 0303 	adds.w	r3, ip, r3
 80011f4:	f108 36ff 	add.w	r6, r8, #4294967295
 80011f8:	f080 8081 	bcs.w	80012fe <__udivmoddi4+0x29e>
 80011fc:	4298      	cmp	r0, r3
 80011fe:	d97e      	bls.n	80012fe <__udivmoddi4+0x29e>
 8001200:	f1a8 0802 	sub.w	r8, r8, #2
 8001204:	4463      	add	r3, ip
 8001206:	1a1e      	subs	r6, r3, r0
 8001208:	fbb6 f3f9 	udiv	r3, r6, r9
 800120c:	fb09 6613 	mls	r6, r9, r3, r6
 8001210:	fb03 fe0e 	mul.w	lr, r3, lr
 8001214:	b2a4      	uxth	r4, r4
 8001216:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800121a:	45a6      	cmp	lr, r4
 800121c:	d908      	bls.n	8001230 <__udivmoddi4+0x1d0>
 800121e:	eb1c 0404 	adds.w	r4, ip, r4
 8001222:	f103 30ff 	add.w	r0, r3, #4294967295
 8001226:	d266      	bcs.n	80012f6 <__udivmoddi4+0x296>
 8001228:	45a6      	cmp	lr, r4
 800122a:	d964      	bls.n	80012f6 <__udivmoddi4+0x296>
 800122c:	3b02      	subs	r3, #2
 800122e:	4464      	add	r4, ip
 8001230:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001234:	fba0 8302 	umull	r8, r3, r0, r2
 8001238:	eba4 040e 	sub.w	r4, r4, lr
 800123c:	429c      	cmp	r4, r3
 800123e:	46c6      	mov	lr, r8
 8001240:	461e      	mov	r6, r3
 8001242:	d350      	bcc.n	80012e6 <__udivmoddi4+0x286>
 8001244:	d04d      	beq.n	80012e2 <__udivmoddi4+0x282>
 8001246:	b155      	cbz	r5, 800125e <__udivmoddi4+0x1fe>
 8001248:	ebba 030e 	subs.w	r3, sl, lr
 800124c:	eb64 0406 	sbc.w	r4, r4, r6
 8001250:	fa04 f707 	lsl.w	r7, r4, r7
 8001254:	40cb      	lsrs	r3, r1
 8001256:	431f      	orrs	r7, r3
 8001258:	40cc      	lsrs	r4, r1
 800125a:	e9c5 7400 	strd	r7, r4, [r5]
 800125e:	2100      	movs	r1, #0
 8001260:	e751      	b.n	8001106 <__udivmoddi4+0xa6>
 8001262:	fa0c fc02 	lsl.w	ip, ip, r2
 8001266:	f1c2 0320 	rsb	r3, r2, #32
 800126a:	40d9      	lsrs	r1, r3
 800126c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001270:	fa20 f303 	lsr.w	r3, r0, r3
 8001274:	fa00 fe02 	lsl.w	lr, r0, r2
 8001278:	fbb1 f0f8 	udiv	r0, r1, r8
 800127c:	fb08 1110 	mls	r1, r8, r0, r1
 8001280:	4094      	lsls	r4, r2
 8001282:	431c      	orrs	r4, r3
 8001284:	fa1f f78c 	uxth.w	r7, ip
 8001288:	0c23      	lsrs	r3, r4, #16
 800128a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800128e:	fb00 f107 	mul.w	r1, r0, r7
 8001292:	4299      	cmp	r1, r3
 8001294:	d908      	bls.n	80012a8 <__udivmoddi4+0x248>
 8001296:	eb1c 0303 	adds.w	r3, ip, r3
 800129a:	f100 36ff 	add.w	r6, r0, #4294967295
 800129e:	d22c      	bcs.n	80012fa <__udivmoddi4+0x29a>
 80012a0:	4299      	cmp	r1, r3
 80012a2:	d92a      	bls.n	80012fa <__udivmoddi4+0x29a>
 80012a4:	3802      	subs	r0, #2
 80012a6:	4463      	add	r3, ip
 80012a8:	1a5b      	subs	r3, r3, r1
 80012aa:	fbb3 f1f8 	udiv	r1, r3, r8
 80012ae:	fb08 3311 	mls	r3, r8, r1, r3
 80012b2:	b2a4      	uxth	r4, r4
 80012b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012b8:	fb01 f307 	mul.w	r3, r1, r7
 80012bc:	42a3      	cmp	r3, r4
 80012be:	d908      	bls.n	80012d2 <__udivmoddi4+0x272>
 80012c0:	eb1c 0404 	adds.w	r4, ip, r4
 80012c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80012c8:	d213      	bcs.n	80012f2 <__udivmoddi4+0x292>
 80012ca:	42a3      	cmp	r3, r4
 80012cc:	d911      	bls.n	80012f2 <__udivmoddi4+0x292>
 80012ce:	3902      	subs	r1, #2
 80012d0:	4464      	add	r4, ip
 80012d2:	1ae4      	subs	r4, r4, r3
 80012d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012d8:	e73b      	b.n	8001152 <__udivmoddi4+0xf2>
 80012da:	4604      	mov	r4, r0
 80012dc:	e6f2      	b.n	80010c4 <__udivmoddi4+0x64>
 80012de:	4608      	mov	r0, r1
 80012e0:	e708      	b.n	80010f4 <__udivmoddi4+0x94>
 80012e2:	45c2      	cmp	sl, r8
 80012e4:	d2af      	bcs.n	8001246 <__udivmoddi4+0x1e6>
 80012e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80012ea:	eb63 060c 	sbc.w	r6, r3, ip
 80012ee:	3801      	subs	r0, #1
 80012f0:	e7a9      	b.n	8001246 <__udivmoddi4+0x1e6>
 80012f2:	4631      	mov	r1, r6
 80012f4:	e7ed      	b.n	80012d2 <__udivmoddi4+0x272>
 80012f6:	4603      	mov	r3, r0
 80012f8:	e79a      	b.n	8001230 <__udivmoddi4+0x1d0>
 80012fa:	4630      	mov	r0, r6
 80012fc:	e7d4      	b.n	80012a8 <__udivmoddi4+0x248>
 80012fe:	46b0      	mov	r8, r6
 8001300:	e781      	b.n	8001206 <__udivmoddi4+0x1a6>
 8001302:	4463      	add	r3, ip
 8001304:	3802      	subs	r0, #2
 8001306:	e74f      	b.n	80011a8 <__udivmoddi4+0x148>
 8001308:	4606      	mov	r6, r0
 800130a:	4623      	mov	r3, r4
 800130c:	4608      	mov	r0, r1
 800130e:	e711      	b.n	8001134 <__udivmoddi4+0xd4>
 8001310:	3e02      	subs	r6, #2
 8001312:	4463      	add	r3, ip
 8001314:	e732      	b.n	800117c <__udivmoddi4+0x11c>
 8001316:	bf00      	nop

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	0000      	movs	r0, r0
	...

08001320 <AHT20_Read>:
#include "AHT20.h"
#include "i2c.h"

void AHT20_Read(float* Temp, float* Humid)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af04      	add	r7, sp, #16
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	uint8_t dum[6];
	HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 800132a:	2364      	movs	r3, #100	@ 0x64
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2301      	movs	r3, #1
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	2271      	movs	r2, #113	@ 0x71
 800133c:	2170      	movs	r1, #112	@ 0x70
 800133e:	484c      	ldr	r0, [pc, #304]	@ (8001470 <AHT20_Read+0x150>)
 8001340:	f002 fc5c 	bl	8003bfc <HAL_I2C_Mem_Read>

	if(!(dum[0]&(1<<3)))
 8001344:	7a3b      	ldrb	r3, [r7, #8]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <AHT20_Read+0x52>
	{
		dum[0] = 0xBE, dum[1] = 0x08, dum[2] = 0x00;
 800134e:	23be      	movs	r3, #190	@ 0xbe
 8001350:	723b      	strb	r3, [r7, #8]
 8001352:	2308      	movs	r3, #8
 8001354:	727b      	strb	r3, [r7, #9]
 8001356:	2300      	movs	r3, #0
 8001358:	72bb      	strb	r3, [r7, #10]
		HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 800135a:	f107 0208 	add.w	r2, r7, #8
 800135e:	2364      	movs	r3, #100	@ 0x64
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2303      	movs	r3, #3
 8001364:	2170      	movs	r1, #112	@ 0x70
 8001366:	4842      	ldr	r0, [pc, #264]	@ (8001470 <AHT20_Read+0x150>)
 8001368:	f001 ffe4 	bl	8003334 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800136c:	200a      	movs	r0, #10
 800136e:	f001 fb95 	bl	8002a9c <HAL_Delay>
	}

	dum[0] = 0xAC, dum[1] = 0x33, dum[2] = 0x00;
 8001372:	23ac      	movs	r3, #172	@ 0xac
 8001374:	723b      	strb	r3, [r7, #8]
 8001376:	2333      	movs	r3, #51	@ 0x33
 8001378:	727b      	strb	r3, [r7, #9]
 800137a:	2300      	movs	r3, #0
 800137c:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 800137e:	f107 0208 	add.w	r2, r7, #8
 8001382:	2364      	movs	r3, #100	@ 0x64
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2303      	movs	r3, #3
 8001388:	2170      	movs	r1, #112	@ 0x70
 800138a:	4839      	ldr	r0, [pc, #228]	@ (8001470 <AHT20_Read+0x150>)
 800138c:	f001 ffd2 	bl	8003334 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8001390:	2050      	movs	r0, #80	@ 0x50
 8001392:	f001 fb83 	bl	8002a9c <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 8001396:	2364      	movs	r3, #100	@ 0x64
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2301      	movs	r3, #1
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	2271      	movs	r2, #113	@ 0x71
 80013a8:	2170      	movs	r1, #112	@ 0x70
 80013aa:	4831      	ldr	r0, [pc, #196]	@ (8001470 <AHT20_Read+0x150>)
 80013ac:	f002 fc26 	bl	8003bfc <HAL_I2C_Mem_Read>
		HAL_Delay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f001 fb73 	bl	8002a9c <HAL_Delay>
	} while(dum[0]&(1<<7));
 80013b6:	7a3b      	ldrb	r3, [r7, #8]
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dbeb      	blt.n	8001396 <AHT20_Read+0x76>

	HAL_I2C_Master_Receive(&HI2C, AHT_ADDR, dum, 6, 100);
 80013be:	f107 0208 	add.w	r2, r7, #8
 80013c2:	2364      	movs	r3, #100	@ 0x64
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2306      	movs	r3, #6
 80013c8:	2170      	movs	r1, #112	@ 0x70
 80013ca:	4829      	ldr	r0, [pc, #164]	@ (8001470 <AHT20_Read+0x150>)
 80013cc:	f002 f8b0 	bl	8003530 <HAL_I2C_Master_Receive>
	uint32_t h20 = (dum[1])<<12 | (dum[2])<<4 | (dum[3]>>4);
 80013d0:	7a7b      	ldrb	r3, [r7, #9]
 80013d2:	031a      	lsls	r2, r3, #12
 80013d4:	7abb      	ldrb	r3, [r7, #10]
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	4313      	orrs	r3, r2
 80013da:	7afa      	ldrb	r2, [r7, #11]
 80013dc:	0912      	lsrs	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	4313      	orrs	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
	uint32_t t20 = (dum[3]&0x0F)<<16 | (dum[4])<<8 | dum[5];
 80013e4:	7afb      	ldrb	r3, [r7, #11]
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	4313      	orrs	r3, r2
 80013f2:	7b7a      	ldrb	r2, [r7, #13]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
	*Temp = (t20 / 1048576.0)*200.0 - 50.0;
 80013f8:	6938      	ldr	r0, [r7, #16]
 80013fa:	f7fe fff3 	bl	80003e4 <__aeabi_ui2d>
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <AHT20_Read+0x154>)
 8001404:	f7ff f992 	bl	800072c <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <AHT20_Read+0x158>)
 8001416:	f7ff f85f 	bl	80004d8 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <AHT20_Read+0x15c>)
 8001428:	f7fe fe9e 	bl	8000168 <__aeabi_dsub>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb28 	bl	8000a88 <__aeabi_d2f>
 8001438:	4602      	mov	r2, r0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	601a      	str	r2, [r3, #0]
	*Humid = h20 / 10485.76;
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7fe ffd0 	bl	80003e4 <__aeabi_ui2d>
 8001444:	a308      	add	r3, pc, #32	@ (adr r3, 8001468 <AHT20_Read+0x148>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f96f 	bl	800072c <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fb17 	bl	8000a88 <__aeabi_d2f>
 800145a:	4602      	mov	r2, r0
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	47ae147b 	.word	0x47ae147b
 800146c:	40c47ae1 	.word	0x40c47ae1
 8001470:	20000218 	.word	0x20000218
 8001474:	41300000 	.word	0x41300000
 8001478:	40690000 	.word	0x40690000
 800147c:	40490000 	.word	0x40490000

08001480 <BMP280_Init>:
int32_t t_fine;


/* Function to initialize BMP280 */
HAL_StatusTypeDef BMP280_Init(I2C_HandleTypeDef *hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	@ 0x38
 8001484:	af04      	add	r7, sp, #16
 8001486:	6078      	str	r0, [r7, #4]
    uint8_t chip_id = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t data[24];

    /* Check chip ID */
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDR << 1, BMP280_CHIP_ID_REG, 1, &chip_id, 1, 1000);
 800148e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	22d0      	movs	r2, #208	@ 0xd0
 80014a2:	21ee      	movs	r1, #238	@ 0xee
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f002 fba9 	bl	8003bfc <HAL_I2C_Mem_Read>
    if (chip_id != 0x58) // BMP280 chip id
 80014aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014ae:	2b58      	cmp	r3, #88	@ 0x58
 80014b0:	d001      	beq.n	80014b6 <BMP280_Init+0x36>
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0b7      	b.n	8001626 <BMP280_Init+0x1a6>

    /* Reset the sensor */
    uint8_t reset_cmd = 0xB6;
 80014b6:	23b6      	movs	r3, #182	@ 0xb6
 80014b8:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c, BMP280_I2C_ADDR << 1, BMP280_RESET_REG, 1, &reset_cmd, 1, 1000);
 80014ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	2301      	movs	r3, #1
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	f107 030b 	add.w	r3, r7, #11
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	22e0      	movs	r2, #224	@ 0xe0
 80014ce:	21ee      	movs	r1, #238	@ 0xee
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f002 fa99 	bl	8003a08 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80014d6:	200a      	movs	r0, #10
 80014d8:	f001 fae0 	bl	8002a9c <HAL_Delay>

    /* Read calibration data */
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDR << 1, BMP280_DIG_T1_LSB_REG, 1, data, 24, 1000);
 80014dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	2318      	movs	r3, #24
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2301      	movs	r3, #1
 80014ee:	2288      	movs	r2, #136	@ 0x88
 80014f0:	21ee      	movs	r1, #238	@ 0xee
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f002 fb82 	bl	8003bfc <HAL_I2C_Mem_Read>

    calibData.dig_T1 = (data[1] << 8) | data[0];
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	7b3b      	ldrb	r3, [r7, #12]
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21b      	sxth	r3, r3
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b49      	ldr	r3, [pc, #292]	@ (8001630 <BMP280_Init+0x1b0>)
 800150a:	801a      	strh	r2, [r3, #0]
    calibData.dig_T2 = (data[3] << 8) | data[2];
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	7bbb      	ldrb	r3, [r7, #14]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21a      	sxth	r2, r3
 800151a:	4b45      	ldr	r3, [pc, #276]	@ (8001630 <BMP280_Init+0x1b0>)
 800151c:	805a      	strh	r2, [r3, #2]
    calibData.dig_T3 = (data[5] << 8) | data[4];
 800151e:	7c7b      	ldrb	r3, [r7, #17]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	7c3b      	ldrb	r3, [r7, #16]
 8001526:	b21b      	sxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b40      	ldr	r3, [pc, #256]	@ (8001630 <BMP280_Init+0x1b0>)
 800152e:	809a      	strh	r2, [r3, #4]
    calibData.dig_P1 = (data[7] << 8) | data[6];
 8001530:	7cfb      	ldrb	r3, [r7, #19]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	7cbb      	ldrb	r3, [r7, #18]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21b      	sxth	r3, r3
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <BMP280_Init+0x1b0>)
 8001542:	80da      	strh	r2, [r3, #6]
    calibData.dig_P2 = (data[9] << 8) | data[8];
 8001544:	7d7b      	ldrb	r3, [r7, #21]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7d3b      	ldrb	r3, [r7, #20]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21a      	sxth	r2, r3
 8001552:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <BMP280_Init+0x1b0>)
 8001554:	811a      	strh	r2, [r3, #8]
    calibData.dig_P3 = (data[11] << 8) | data[10];
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b21a      	sxth	r2, r3
 800155c:	7dbb      	ldrb	r3, [r7, #22]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <BMP280_Init+0x1b0>)
 8001566:	815a      	strh	r2, [r3, #10]
    calibData.dig_P4 = (data[13] << 8) | data[12];
 8001568:	7e7b      	ldrb	r3, [r7, #25]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	7e3b      	ldrb	r3, [r7, #24]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <BMP280_Init+0x1b0>)
 8001578:	819a      	strh	r2, [r3, #12]
    calibData.dig_P5 = (data[15] << 8) | data[14];
 800157a:	7efb      	ldrb	r3, [r7, #27]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	7ebb      	ldrb	r3, [r7, #26]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <BMP280_Init+0x1b0>)
 800158a:	81da      	strh	r2, [r3, #14]
    calibData.dig_P6 = (data[17] << 8) | data[16];
 800158c:	7f7b      	ldrb	r3, [r7, #29]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	7f3b      	ldrb	r3, [r7, #28]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <BMP280_Init+0x1b0>)
 800159c:	821a      	strh	r2, [r3, #16]
    calibData.dig_P7 = (data[19] << 8) | data[18];
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <BMP280_Init+0x1b0>)
 80015ae:	825a      	strh	r2, [r3, #18]
    calibData.dig_P8 = (data[21] << 8) | data[20];
 80015b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015bc:	b21b      	sxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <BMP280_Init+0x1b0>)
 80015c4:	829a      	strh	r2, [r3, #20]
    calibData.dig_P9 = (data[23] << 8) | data[22];
 80015c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <BMP280_Init+0x1b0>)
 80015da:	82da      	strh	r2, [r3, #22]

    /* Configure the sensor */
    uint8_t config = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	72bb      	strb	r3, [r7, #10]
    config = (0x04 << 5) | (0x04 << 2) | 0x00; // Standby time 500ms, Filter coefficient 16, SPI disabled
 80015e0:	2390      	movs	r3, #144	@ 0x90
 80015e2:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(hi2c, BMP280_I2C_ADDR << 1, BMP280_CONFIG_REG, 1, &config, 1, 1000);
 80015e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	f107 030a 	add.w	r3, r7, #10
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	22f5      	movs	r2, #245	@ 0xf5
 80015f8:	21ee      	movs	r1, #238	@ 0xee
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f002 fa04 	bl	8003a08 <HAL_I2C_Mem_Write>

    /* Set measurement settings */
    uint8_t ctrl_meas = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	727b      	strb	r3, [r7, #9]
    ctrl_meas = (0x02 << 5) | (0x05 << 2) | 0x03; // Oversampling x4 for temp, x16 for pressure, normal mode
 8001604:	2357      	movs	r3, #87	@ 0x57
 8001606:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Mem_Write(hi2c, BMP280_I2C_ADDR << 1, BMP280_CTRL_MEAS_REG, 1, &ctrl_meas, 1, 1000);
 8001608:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	2301      	movs	r3, #1
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	f107 0309 	add.w	r3, r7, #9
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	22f4      	movs	r2, #244	@ 0xf4
 800161c:	21ee      	movs	r1, #238	@ 0xee
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f002 f9f2 	bl	8003a08 <HAL_I2C_Mem_Write>

    return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001fc 	.word	0x200001fc

08001634 <BMP280_ReadPressure>:

/* Function to read pressure */
float BMP280_ReadPressure(I2C_HandleTypeDef *hi2c)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	@ 0x38
 8001638:	af04      	add	r7, sp, #16
 800163a:	6078      	str	r0, [r7, #4]
    int32_t adc_P, adc_T;
    int32_t var1, var2;
    uint32_t pressure;

    /* Read pressure and temperature data */
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDR << 1, BMP280_PRESS_MSB_REG, 1, data, 6, 1000);
 800163c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	2306      	movs	r3, #6
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	22f7      	movs	r2, #247	@ 0xf7
 8001650:	21ee      	movs	r1, #238	@ 0xee
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f002 fad2 	bl	8003bfc <HAL_I2C_Mem_Read>

    adc_P = ((uint32_t)data[0] << 12) | ((uint32_t)data[1] << 4) | ((uint32_t)data[2] >> 4);
 8001658:	7b3b      	ldrb	r3, [r7, #12]
 800165a:	031a      	lsls	r2, r3, #12
 800165c:	7b7b      	ldrb	r3, [r7, #13]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4313      	orrs	r3, r2
 8001662:	7bba      	ldrb	r2, [r7, #14]
 8001664:	0912      	lsrs	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	4313      	orrs	r3, r2
 800166a:	623b      	str	r3, [r7, #32]
    adc_T = ((uint32_t)data[3] << 12) | ((uint32_t)data[4] << 4) | ((uint32_t)data[5] >> 4);
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	031a      	lsls	r2, r3, #12
 8001670:	7c3b      	ldrb	r3, [r7, #16]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4313      	orrs	r3, r2
 8001676:	7c7a      	ldrb	r2, [r7, #17]
 8001678:	0912      	lsrs	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	4313      	orrs	r3, r2
 800167e:	61fb      	str	r3, [r7, #28]

    /* Calculate temperature (just to get t_fine value) */
    var1 = ((((adc_T >> 3) - ((int32_t)calibData.dig_T1 << 1))) * ((int32_t)calibData.dig_T2)) >> 11;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	10da      	asrs	r2, r3, #3
 8001684:	4b5f      	ldr	r3, [pc, #380]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	4a5d      	ldr	r2, [pc, #372]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 800168e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	12db      	asrs	r3, r3, #11
 8001698:	61bb      	str	r3, [r7, #24]
    var2 = (((((adc_T >> 4) - ((int32_t)calibData.dig_T1)) * ((adc_T >> 4) - ((int32_t)calibData.dig_T1))) >> 12) * ((int32_t)calibData.dig_T3)) >> 14;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	111b      	asrs	r3, r3, #4
 800169e:	4a59      	ldr	r2, [pc, #356]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80016a0:	8812      	ldrh	r2, [r2, #0]
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	1112      	asrs	r2, r2, #4
 80016a8:	4956      	ldr	r1, [pc, #344]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80016aa:	8809      	ldrh	r1, [r1, #0]
 80016ac:	1a52      	subs	r2, r2, r1
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	131b      	asrs	r3, r3, #12
 80016b4:	4a53      	ldr	r2, [pc, #332]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80016b6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	139b      	asrs	r3, r3, #14
 80016c0:	617b      	str	r3, [r7, #20]
    t_fine = var1 + var2;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001808 <BMP280_ReadPressure+0x1d4>)
 80016ca:	6013      	str	r3, [r2, #0]

    /* Calculate pressure */
    var1 = (((int32_t)t_fine) >> 1) - (int32_t)64000;
 80016cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001808 <BMP280_ReadPressure+0x1d4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	105b      	asrs	r3, r3, #1
 80016d2:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 80016d6:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t)calibData.dig_P6);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	109b      	asrs	r3, r3, #2
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	1092      	asrs	r2, r2, #2
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	12db      	asrs	r3, r3, #11
 80016e6:	4a47      	ldr	r2, [pc, #284]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80016e8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calibData.dig_P5)) << 1);
 80016f2:	4b44      	ldr	r3, [pc, #272]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80016f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016f8:	461a      	mov	r2, r3
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4413      	add	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
    var2 = (var2 >> 2) + (((int32_t)calibData.dig_P4) << 16);
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	109a      	asrs	r2, r3, #2
 800170c:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 800170e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	4413      	add	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
    var1 = (((calibData.dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int32_t)calibData.dig_P2) * var1) >> 1)) >> 18;
 8001718:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 800171a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800171e:	4619      	mov	r1, r3
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	109b      	asrs	r3, r3, #2
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	1092      	asrs	r2, r2, #2
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	135b      	asrs	r3, r3, #13
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	10da      	asrs	r2, r3, #3
 8001734:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 8001736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800173a:	4619      	mov	r1, r3
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	105b      	asrs	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	149b      	asrs	r3, r3, #18
 8001748:	61bb      	str	r3, [r7, #24]
    var1 = ((((32768 + var1)) * ((int32_t)calibData.dig_P1)) >> 15);
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001750:	4a2c      	ldr	r2, [pc, #176]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 8001752:	88d2      	ldrh	r2, [r2, #6]
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	13db      	asrs	r3, r3, #15
 800175a:	61bb      	str	r3, [r7, #24]

    if (var1 == 0)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <BMP280_ReadPressure+0x134>
        return 0;
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e049      	b.n	80017fc <BMP280_ReadPressure+0x1c8>

    pressure = (((uint32_t)(((int32_t)1048576) - adc_P) - (var2 >> 12))) * 3125;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	131b      	asrs	r3, r3, #12
 800176c:	461a      	mov	r2, r3
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	4413      	add	r3, r2
 8001772:	4a26      	ldr	r2, [pc, #152]	@ (800180c <BMP280_ReadPressure+0x1d8>)
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 800177c:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    if (pressure < 0x80000000)
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	db06      	blt.n	8001796 <BMP280_ReadPressure+0x162>
        pressure = (pressure << 1) / ((uint32_t)var1);
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	005a      	lsls	r2, r3, #1
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
 8001794:	e005      	b.n	80017a2 <BMP280_ReadPressure+0x16e>
    else
        pressure = (pressure / (uint32_t)var1) * 2;
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24

    var1 = (((int32_t)calibData.dig_P9) * ((int32_t)(((pressure >> 3) * (pressure >> 3)) >> 13))) >> 12;
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80017a4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017a8:	4619      	mov	r1, r3
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b0:	08d2      	lsrs	r2, r2, #3
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	0b5b      	lsrs	r3, r3, #13
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	131b      	asrs	r3, r3, #12
 80017be:	61bb      	str	r3, [r7, #24]
    var2 = (((int32_t)(pressure >> 2)) * ((int32_t)calibData.dig_P8)) >> 13;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80017c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	135b      	asrs	r3, r3, #13
 80017d2:	617b      	str	r3, [r7, #20]
    pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calibData.dig_P7) >> 4));
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	4413      	add	r3, r2
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80017dc:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80017e0:	4413      	add	r3, r2
 80017e2:	111a      	asrs	r2, r3, #4
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	4413      	add	r3, r2
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24

    return pressure / 100.0f; // Return pressure in hPa
 80017ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017ec:	f7ff fa52 	bl	8000c94 <__aeabi_ui2f>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4907      	ldr	r1, [pc, #28]	@ (8001810 <BMP280_ReadPressure+0x1dc>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fb59 	bl	8000eac <__aeabi_fdiv>
 80017fa:	4603      	mov	r3, r0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3728      	adds	r7, #40	@ 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200001fc 	.word	0x200001fc
 8001808:	20000214 	.word	0x20000214
 800180c:	fffff3cb 	.word	0xfffff3cb
 8001810:	42c80000 	.word	0x42c80000

08001814 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fbd0 	bl	8001fce <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fbeb 	bl	800200e <SX1278_hw_SPIReadByte>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fb88 	bl	8001f58 <SX1278_hw_SetNSS>
	return tmp;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	70fb      	strb	r3, [r7, #3]
 800185e:	4613      	mov	r3, r2
 8001860:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fb75 	bl	8001f58 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4619      	mov	r1, r3
 800187c:	4610      	mov	r0, r2
 800187e:	f000 fba6 	bl	8001fce <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	78ba      	ldrb	r2, [r7, #2]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fb9f 	bl	8001fce <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2101      	movs	r1, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fb5e 	bl	8001f58 <SX1278_hw_SetNSS>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	461a      	mov	r2, r3
 80018b0:	460b      	mov	r3, r1
 80018b2:	72fb      	strb	r3, [r7, #11]
 80018b4:	4613      	mov	r3, r2
 80018b6:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80018b8:	7abb      	ldrb	r3, [r7, #10]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d927      	bls.n	800190e <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fb47 	bl	8001f58 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	7afa      	ldrb	r2, [r7, #11]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fb7b 	bl	8001fce <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80018d8:	2300      	movs	r3, #0
 80018da:	75fb      	strb	r3, [r7, #23]
 80018dc:	e00c      	b.n	80018f8 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6819      	ldr	r1, [r3, #0]
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	18d4      	adds	r4, r2, r3
 80018e8:	4608      	mov	r0, r1
 80018ea:	f000 fb90 	bl	800200e <SX1278_hw_SPIReadByte>
 80018ee:	4603      	mov	r3, r0
 80018f0:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	3301      	adds	r3, #1
 80018f6:	75fb      	strb	r3, [r7, #23]
 80018f8:	7dfa      	ldrb	r2, [r7, #23]
 80018fa:	7abb      	ldrb	r3, [r7, #10]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3ee      	bcc.n	80018de <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2101      	movs	r1, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fb26 	bl	8001f58 <SX1278_hw_SetNSS>
 800190c:	e000      	b.n	8001910 <SX1278_SPIBurstRead+0x6c>
		return;
 800190e:	bf00      	nop
	}
}
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}

08001916 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	461a      	mov	r2, r3
 8001922:	460b      	mov	r3, r1
 8001924:	72fb      	strb	r3, [r7, #11]
 8001926:	4613      	mov	r3, r2
 8001928:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800192a:	7abb      	ldrb	r3, [r7, #10]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d929      	bls.n	8001984 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fb0e 	bl	8001f58 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4619      	mov	r1, r3
 800194a:	4610      	mov	r0, r2
 800194c:	f000 fb3f 	bl	8001fce <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001950:	2300      	movs	r3, #0
 8001952:	75fb      	strb	r3, [r7, #23]
 8001954:	e00b      	b.n	800196e <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4619      	mov	r1, r3
 8001964:	f000 fb33 	bl	8001fce <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	3301      	adds	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
 800196e:	7dfa      	ldrb	r2, [r7, #23]
 8001970:	7abb      	ldrb	r3, [r7, #10]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3ef      	bcc.n	8001956 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2101      	movs	r1, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f000 faeb 	bl	8001f58 <SX1278_hw_SetNSS>
 8001982:	e000      	b.n	8001986 <SX1278_SPIBurstWrite+0x70>
		return;
 8001984:	bf00      	nop
	}
}
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f90d 	bl	8001bb4 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800199a:	200f      	movs	r0, #15
 800199c:	f000 fb5d 	bl	800205a <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f917 	bl	8001bd4 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019ac:	f04f 0000 	mov.w	r0, #0
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	04d9      	lsls	r1, r3, #19
 80019b6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80019ba:	04d0      	lsls	r0, r2, #19
 80019bc:	4a6f      	ldr	r2, [pc, #444]	@ (8001b7c <SX1278_config+0x1f0>)
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	f7ff fb35 	bl	8001030 <__aeabi_uldivmod>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80019ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	0c02      	lsrs	r2, r0, #16
 80019dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80019e0:	0c0b      	lsrs	r3, r1, #16
 80019e2:	b2d3      	uxtb	r3, r2
 80019e4:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80019e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	0a02      	lsrs	r2, r0, #8
 80019f4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80019f8:	0a0b      	lsrs	r3, r1, #8
 80019fa:	b2d3      	uxtb	r3, r2
 80019fc:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80019fe:	7c3b      	ldrb	r3, [r7, #16]
 8001a00:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8001a02:	f107 020c 	add.w	r2, r7, #12
 8001a06:	2303      	movs	r3, #3
 8001a08:	2106      	movs	r1, #6
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff83 	bl	8001916 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8001a10:	2234      	movs	r2, #52	@ 0x34
 8001a12:	2139      	movs	r1, #57	@ 0x39
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff1c 	bl	8001852 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7c1b      	ldrb	r3, [r3, #16]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b57      	ldr	r3, [pc, #348]	@ (8001b80 <SX1278_config+0x1f4>)
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	461a      	mov	r2, r3
 8001a26:	2109      	movs	r1, #9
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff12 	bl	8001852 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001a2e:	220b      	movs	r2, #11
 8001a30:	210b      	movs	r1, #11
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff0d 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001a38:	2223      	movs	r2, #35	@ 0x23
 8001a3a:	210c      	movs	r1, #12
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff08 	bl	8001852 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7c5b      	ldrb	r3, [r3, #17]
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b4e      	ldr	r3, [pc, #312]	@ (8001b84 <SX1278_config+0x1f8>)
 8001a4a:	5c9b      	ldrb	r3, [r3, r2]
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	d147      	bne.n	8001ae0 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7c9b      	ldrb	r3, [r3, #18]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b4c      	ldr	r3, [pc, #304]	@ (8001b88 <SX1278_config+0x1fc>)
 8001a58:	5c9b      	ldrb	r3, [r3, r2]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7cdb      	ldrb	r3, [r3, #19]
 8001a62:	4619      	mov	r1, r3
 8001a64:	4b49      	ldr	r3, [pc, #292]	@ (8001b8c <SX1278_config+0x200>)
 8001a66:	5c5b      	ldrb	r3, [r3, r1]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	211d      	movs	r1, #29
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff feea 	bl	8001852 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7c5b      	ldrb	r3, [r3, #17]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b3f      	ldr	r3, [pc, #252]	@ (8001b84 <SX1278_config+0x1f8>)
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7d1b      	ldrb	r3, [r3, #20]
 8001a90:	4619      	mov	r1, r3
 8001a92:	4b3f      	ldr	r3, [pc, #252]	@ (8001b90 <SX1278_config+0x204>)
 8001a94:	5c5b      	ldrb	r3, [r3, r1]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001a9e:	3303      	adds	r3, #3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	211e      	movs	r1, #30
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fed3 	bl	8001852 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8001aac:	2131      	movs	r1, #49	@ 0x31
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff feb0 	bl	8001814 <SX1278_SPIRead>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	f023 0307 	bic.w	r3, r3, #7
 8001abe:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	f043 0305 	orr.w	r3, r3, #5
 8001ac6:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	461a      	mov	r2, r3
 8001acc:	2131      	movs	r1, #49	@ 0x31
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff febf 	bl	8001852 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	2137      	movs	r1, #55	@ 0x37
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff feba 	bl	8001852 <SX1278_SPIWrite>
 8001ade:	e029      	b.n	8001b34 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7c9b      	ldrb	r3, [r3, #18]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <SX1278_config+0x1fc>)
 8001ae8:	5c9b      	ldrb	r3, [r3, r2]
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7cdb      	ldrb	r3, [r3, #19]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <SX1278_config+0x200>)
 8001af6:	5c5b      	ldrb	r3, [r3, r1]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001afc:	4413      	add	r3, r2
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	211d      	movs	r1, #29
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fea4 	bl	8001852 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7c5b      	ldrb	r3, [r3, #17]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <SX1278_config+0x1f8>)
 8001b12:	5c9b      	ldrb	r3, [r3, r2]
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7d1b      	ldrb	r3, [r3, #20]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <SX1278_config+0x204>)
 8001b20:	5c5b      	ldrb	r3, [r3, r1]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001b26:	4413      	add	r3, r2
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	211e      	movs	r1, #30
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fe8f 	bl	8001852 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8001b34:	2204      	movs	r2, #4
 8001b36:	2126      	movs	r1, #38	@ 0x26
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff fe8a 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001b3e:	2208      	movs	r2, #8
 8001b40:	211f      	movs	r1, #31
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fe85 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fe80 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8001b52:	2208      	movs	r2, #8
 8001b54:	2121      	movs	r1, #33	@ 0x21
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fe7b 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2141      	movs	r1, #65	@ 0x41
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fe76 	bl	8001852 <SX1278_SPIWrite>
	module->readBytes = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f810 	bl	8001b94 <SX1278_standby>
}
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	01e84800 	.word	0x01e84800
 8001b80:	08009170 	.word	0x08009170
 8001b84:	08009174 	.word	0x08009174
 8001b88:	0800917c 	.word	0x0800917c
 8001b8c:	08009188 	.word	0x08009188
 8001b90:	0800918c 	.word	0x0800918c

08001b94 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001b9c:	2209      	movs	r2, #9
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fe56 	bl	8001852 <SX1278_SPIWrite>
	module->status = STANDBY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	759a      	strb	r2, [r3, #22]
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fe46 	bl	8001852 <SX1278_SPIWrite>
	module->status = SLEEP;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	759a      	strb	r2, [r3, #22]
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001bdc:	2288      	movs	r2, #136	@ 0x88
 8001bde:	2101      	movs	r1, #1
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff fe36 	bl	8001852 <SX1278_SPIWrite>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8001bf6:	22ff      	movs	r2, #255	@ 0xff
 8001bf8:	2112      	movs	r1, #18
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fe29 	bl	8001852 <SX1278_SPIWrite>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	460b      	mov	r3, r1
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	7afa      	ldrb	r2, [r7, #11]
 8001c1a:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7ff feb5 	bl	800198c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8001c22:	2284      	movs	r2, #132	@ 0x84
 8001c24:	214d      	movs	r1, #77	@ 0x4d
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7ff fe13 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001c2c:	22ff      	movs	r2, #255	@ 0xff
 8001c2e:	2124      	movs	r1, #36	@ 0x24
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff fe0e 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001c36:	2201      	movs	r2, #1
 8001c38:	2140      	movs	r1, #64	@ 0x40
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fe09 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8001c40:	223f      	movs	r2, #63	@ 0x3f
 8001c42:	2111      	movs	r1, #17
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7ff fe04 	bl	8001852 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff ffcf 	bl	8001bee <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	461a      	mov	r2, r3
 8001c54:	2122      	movs	r1, #34	@ 0x22
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7ff fdfb 	bl	8001852 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f7ff fdd8 	bl	8001814 <SX1278_SPIRead>
 8001c64:	4603      	mov	r3, r0
 8001c66:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	210d      	movs	r1, #13
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f7ff fdef 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001c74:	228d      	movs	r2, #141	@ 0x8d
 8001c76:	2101      	movs	r1, #1
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7ff fdea 	bl	8001852 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001c86:	2118      	movs	r1, #24
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fdc3 	bl	8001814 <SX1278_SPIRead>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d104      	bne.n	8001ca2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	759a      	strb	r2, [r3, #22]
			return 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e013      	b.n	8001cca <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f967 	bl	8001f86 <SX1278_hw_Reset>
			SX1278_config(module);
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7ff fe67 	bl	800198c <SX1278_config>
			return 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e003      	b.n	8001cca <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 f9c9 	bl	800205a <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001cc8:	e7dd      	b.n	8001c86 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f9c6 	bl	8002070 <SX1278_hw_GetDIO0>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d030      	beq.n	8001d4c <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3317      	adds	r3, #23
 8001cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fcda 	bl	80066ae <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8001cfa:	2110      	movs	r1, #16
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff fd89 	bl	8001814 <SX1278_SPIRead>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8001d06:	7bbb      	ldrb	r3, [r7, #14]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	210d      	movs	r1, #13
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fda0 	bl	8001852 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7c5b      	ldrb	r3, [r3, #17]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7d5b      	ldrb	r3, [r3, #21]
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e005      	b.n	8001d2e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8001d22:	2113      	movs	r1, #19
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fd75 	bl	8001814 <SX1278_SPIRead>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f103 0217 	add.w	r2, r3, #23
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2100      	movs	r1, #0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fdb3 	bl	80018a4 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff51 	bl	8001bee <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	460b      	mov	r3, r1
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	7afa      	ldrb	r2, [r7, #11]
 8001d6c:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fe0c 	bl	800198c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8001d74:	2287      	movs	r2, #135	@ 0x87
 8001d76:	214d      	movs	r1, #77	@ 0x4d
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff fd6a 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2124      	movs	r1, #36	@ 0x24
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fd65 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001d88:	2241      	movs	r2, #65	@ 0x41
 8001d8a:	2140      	movs	r1, #64	@ 0x40
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fd60 	bl	8001852 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff ff2b 	bl	8001bee <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8001d98:	22f7      	movs	r2, #247	@ 0xf7
 8001d9a:	2111      	movs	r1, #17
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff fd58 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8001da2:	7afb      	ldrb	r3, [r7, #11]
 8001da4:	461a      	mov	r2, r3
 8001da6:	2122      	movs	r1, #34	@ 0x22
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff fd52 	bl	8001852 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001dae:	210e      	movs	r1, #14
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff fd2f 	bl	8001814 <SX1278_SPIRead>
 8001db6:	4603      	mov	r3, r0
 8001db8:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	210d      	movs	r1, #13
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f7ff fd46 	bl	8001852 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8001dc6:	2122      	movs	r1, #34	@ 0x22
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7ff fd23 	bl	8001814 <SX1278_SPIRead>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8001dd2:	7dba      	ldrb	r2, [r7, #22]
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d104      	bne.n	8001de4 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	759a      	strb	r2, [r3, #22]
			return 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e00e      	b.n	8001e02 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ea      	bne.n	8001dc6 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f8c6 	bl	8001f86 <SX1278_hw_Reset>
			SX1278_config(module);
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff fdc6 	bl	800198c <SX1278_config>
			return 0;
 8001e00:	2300      	movs	r3, #0
		}
	}
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	2100      	movs	r1, #0
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fd78 	bl	8001916 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001e26:	228b      	movs	r2, #139	@ 0x8b
 8001e28:	2101      	movs	r1, #1
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7ff fd11 	bl	8001852 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 f91b 	bl	8002070 <SX1278_hw_GetDIO0>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8001e40:	2112      	movs	r1, #18
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff fce6 	bl	8001814 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff fed0 	bl	8001bee <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff fea0 	bl	8001b94 <SX1278_standby>
			return 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e013      	b.n	8001e80 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 f88c 	bl	8001f86 <SX1278_hw_Reset>
			SX1278_config(module);
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7ff fd8c 	bl	800198c <SX1278_config>
			return 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e003      	b.n	8001e80 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f000 f8ee 	bl	800205a <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001e7e:	e7d7      	b.n	8001e30 <SX1278_LoRaTxPacket+0x26>
	}
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 f848 	bl	8001f2e <SX1278_hw_init>
	module->frequency = frequency;
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	7e3a      	ldrb	r2, [r7, #24]
 8001eac:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	7f3a      	ldrb	r2, [r7, #28]
 8001eb2:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001eba:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001ec2:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001eca:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001ed2:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7ff fd59 	bl	800198c <SX1278_config>
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	4613      	mov	r3, r2
 8001eee:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8001ef6:	79fa      	ldrb	r2, [r7, #7]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d003      	beq.n	8001f04 <SX1278_read+0x22>
		length = module->readBytes;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8001f02:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3317      	adds	r3, #23
 8001f08:	79fa      	ldrb	r2, [r7, #7]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f004 fc5c 	bl	80067ca <memcpy>
	rxBuf[length] = '\0';
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	4413      	add	r3, r2
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001f36:	2101      	movs	r1, #1
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f80d 	bl	8001f58 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6858      	ldr	r0, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f001 f873 	bl	8003036 <HAL_GPIO_WritePin>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6958      	ldr	r0, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	b299      	uxth	r1, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f001 f85c 	bl	8003036 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001f8e:	2101      	movs	r1, #1
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ffe1 	bl	8001f58 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6858      	ldr	r0, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f001 f847 	bl	8003036 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f000 f856 	bl	800205a <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6858      	ldr	r0, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f001 f83b 	bl	8003036 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001fc0:	2064      	movs	r0, #100	@ 0x64
 8001fc2:	f000 f84a 	bl	800205a <SX1278_hw_DelayMs>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ffbb 	bl	8001f58 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6998      	ldr	r0, [r3, #24]
 8001fe6:	1cf9      	adds	r1, r7, #3
 8001fe8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fec:	2201      	movs	r2, #1
 8001fee:	f003 f9fd 	bl	80053ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001ff2:	bf00      	nop
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fce4 	bl	80059c6 <HAL_SPI_GetState>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d1f7      	bne.n	8001ff4 <SX1278_hw_SPICommand+0x26>
		;
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af02      	add	r7, sp, #8
 8002014:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800201a:	2300      	movs	r3, #0
 800201c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800201e:	2100      	movs	r1, #0
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff99 	bl	8001f58 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6998      	ldr	r0, [r3, #24]
 800202a:	f107 020e 	add.w	r2, r7, #14
 800202e:	f107 010f 	add.w	r1, r7, #15
 8002032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2301      	movs	r3, #1
 800203a:	f003 fb1b 	bl	8005674 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800203e:	bf00      	nop
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4618      	mov	r0, r3
 8002046:	f003 fcbe 	bl	80059c6 <HAL_SPI_GetState>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d1f7      	bne.n	8002040 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8002050:	7bbb      	ldrb	r3, [r7, #14]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fd1a 	bl	8002a9c <HAL_Delay>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4619      	mov	r1, r3
 8002084:	4610      	mov	r0, r2
 8002086:	f000 ffbf 	bl	8003008 <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b4:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a40      	ldr	r2, [pc, #256]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b3e      	ldr	r3, [pc, #248]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020cc:	4b3b      	ldr	r3, [pc, #236]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a3a      	ldr	r2, [pc, #232]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020d2:	f043 0320 	orr.w	r3, r3, #32
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	4b35      	ldr	r3, [pc, #212]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a34      	ldr	r2, [pc, #208]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b32      	ldr	r3, [pc, #200]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fc:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4a2e      	ldr	r2, [pc, #184]	@ (80021bc <MX_GPIO_Init+0x11c>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6193      	str	r3, [r2, #24]
 8002108:	4b2c      	ldr	r3, [pc, #176]	@ (80021bc <MX_GPIO_Init+0x11c>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800211a:	4829      	ldr	r0, [pc, #164]	@ (80021c0 <MX_GPIO_Init+0x120>)
 800211c:	f000 ff8b 	bl	8003036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	2110      	movs	r1, #16
 8002124:	4827      	ldr	r0, [pc, #156]	@ (80021c4 <MX_GPIO_Init+0x124>)
 8002126:	f000 ff86 	bl	8003036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	2101      	movs	r1, #1
 800212e:	4826      	ldr	r0, [pc, #152]	@ (80021c8 <MX_GPIO_Init+0x128>)
 8002130:	f000 ff81 	bl	8003036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2302      	movs	r3, #2
 8002144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 0310 	add.w	r3, r7, #16
 800214a:	4619      	mov	r1, r3
 800214c:	481c      	ldr	r0, [pc, #112]	@ (80021c0 <MX_GPIO_Init+0x120>)
 800214e:	f000 fdd7 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8002152:	2310      	movs	r3, #16
 8002154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002156:	2301      	movs	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2302      	movs	r3, #2
 8002160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	4619      	mov	r1, r3
 8002168:	4816      	ldr	r0, [pc, #88]	@ (80021c4 <MX_GPIO_Init+0x124>)
 800216a:	f000 fdc9 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 800216e:	2301      	movs	r3, #1
 8002170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2302      	movs	r3, #2
 800217c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 0310 	add.w	r3, r7, #16
 8002182:	4619      	mov	r1, r3
 8002184:	4810      	ldr	r0, [pc, #64]	@ (80021c8 <MX_GPIO_Init+0x128>)
 8002186:	f000 fdbb 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800218a:	2302      	movs	r3, #2
 800218c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <MX_GPIO_Init+0x12c>)
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 0310 	add.w	r3, r7, #16
 800219a:	4619      	mov	r1, r3
 800219c:	480a      	ldr	r0, [pc, #40]	@ (80021c8 <MX_GPIO_Init+0x128>)
 800219e:	f000 fdaf 	bl	8002d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2007      	movs	r0, #7
 80021a8:	f000 fd73 	bl	8002c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80021ac:	2007      	movs	r0, #7
 80021ae:	f000 fd8c 	bl	8002cca <HAL_NVIC_EnableIRQ>

}
 80021b2:	bf00      	nop
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40011000 	.word	0x40011000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	10110000 	.word	0x10110000

080021d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021d4:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021d6:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <MX_I2C1_Init+0x54>)
 80021d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021dc:	4a12      	ldr	r2, [pc, #72]	@ (8002228 <MX_I2C1_Init+0x58>)
 80021de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002200:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <MX_I2C1_Init+0x50>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <MX_I2C1_Init+0x50>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800220c:	4804      	ldr	r0, [pc, #16]	@ (8002220 <MX_I2C1_Init+0x50>)
 800220e:	f000 ff4d 	bl	80030ac <HAL_I2C_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002218:	f000 fa05 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000218 	.word	0x20000218
 8002224:	40005400 	.word	0x40005400
 8002228:	000186a0 	.word	0x000186a0

0800222c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a15      	ldr	r2, [pc, #84]	@ (800229c <HAL_I2C_MspInit+0x70>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d123      	bne.n	8002294 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a13      	ldr	r2, [pc, #76]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002264:	23c0      	movs	r3, #192	@ 0xc0
 8002266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002268:	2312      	movs	r3, #18
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4619      	mov	r1, r3
 8002276:	480b      	ldr	r0, [pc, #44]	@ (80022a4 <HAL_I2C_MspInit+0x78>)
 8002278:	f000 fd42 	bl	8002d00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a07      	ldr	r2, [pc, #28]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 8002282:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002286:	61d3      	str	r3, [r2, #28]
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40005400 	.word	0x40005400
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010c00 	.word	0x40010c00

080022a8 <clearTx>:

/*  ----------------------------------
 * 		LoRa Functions
 *  ----------------------------------
 */
void clearTx(){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	memset(LoRaTxBuffer,0,sizeof(LoRaTxBuffer));
 80022ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022b0:	2100      	movs	r1, #0
 80022b2:	4802      	ldr	r0, [pc, #8]	@ (80022bc <clearTx+0x14>)
 80022b4:	f004 f9fb 	bl	80066ae <memset>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200003c0 	.word	0x200003c0

080022c0 <clearRx>:

void clearRx(){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	memset(LoRaRxBuffer,0,sizeof(LoRaRxBuffer));
 80022c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022c8:	2100      	movs	r1, #0
 80022ca:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <clearRx+0x14>)
 80022cc:	f004 f9ef 	bl	80066ae <memset>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200005c0 	.word	0x200005c0

080022d8 <LoRaSetRxMode>:
// Puts LoRa module in receive mode
// -- LED should be off --
void LoRaSetRxMode(){
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	clearRx();
 80022dc:	f7ff fff0 	bl	80022c0 <clearRx>
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 1000);
 80022e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022e4:	2110      	movs	r1, #16
 80022e6:	480a      	ldr	r0, [pc, #40]	@ (8002310 <LoRaSetRxMode+0x38>)
 80022e8:	f7ff fc8e 	bl	8001c08 <SX1278_LoRaEntryRx>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <LoRaSetRxMode+0x3c>)
 80022f0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022f8:	4807      	ldr	r0, [pc, #28]	@ (8002318 <LoRaSetRxMode+0x40>)
 80022fa:	f000 fe9c 	bl	8003036 <HAL_GPIO_WritePin>
	receiver = 1;
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <LoRaSetRxMode+0x44>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 8002304:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002308:	f000 fbc8 	bl	8002a9c <HAL_Delay>
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200002a0 	.word	0x200002a0
 8002314:	200003bc 	.word	0x200003bc
 8002318:	40011000 	.word	0x40011000
 800231c:	200003b8 	.word	0x200003b8

08002320 <LoRaSetTxMode>:

// Puts LoRa module in transmit mode
// -- LED should be on --
void LoRaSetTxMode(){
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	clearTx();
 8002324:	f7ff ffc0 	bl	80022a8 <clearTx>
	ret = SX1278_LoRaEntryTx(&SX1278, 16, 1000);
 8002328:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800232c:	2110      	movs	r1, #16
 800232e:	480a      	ldr	r0, [pc, #40]	@ (8002358 <LoRaSetTxMode+0x38>)
 8002330:	f7ff fd13 	bl	8001d5a <SX1278_LoRaEntryTx>
 8002334:	4603      	mov	r3, r0
 8002336:	4a09      	ldr	r2, [pc, #36]	@ (800235c <LoRaSetTxMode+0x3c>)
 8002338:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002340:	4807      	ldr	r0, [pc, #28]	@ (8002360 <LoRaSetTxMode+0x40>)
 8002342:	f000 fe78 	bl	8003036 <HAL_GPIO_WritePin>
	receiver = 0;
 8002346:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <LoRaSetTxMode+0x44>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 800234c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002350:	f000 fba4 	bl	8002a9c <HAL_Delay>
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	200002a0 	.word	0x200002a0
 800235c:	200003bc 	.word	0x200003bc
 8002360:	40011000 	.word	0x40011000
 8002364:	200003b8 	.word	0x200003b8

08002368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236e:	f000 fb33 	bl	80029d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002372:	f000 f913 	bl	800259c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002376:	f7ff fe93 	bl	80020a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800237a:	f000 f95b 	bl	8002634 <MX_SPI1_Init>
  MX_I2C1_Init();
 800237e:	f7ff ff27 	bl	80021d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // ===== BMP sensor setup =====
  // SAK
  BMP280_Init(&hi2c1);
 8002382:	486d      	ldr	r0, [pc, #436]	@ (8002538 <main+0x1d0>)
 8002384:	f7ff f87c 	bl	8001480 <BMP280_Init>
// ===== LoRa setup =====
  receiver = 0;
 8002388:	4b6c      	ldr	r3, [pc, #432]	@ (800253c <main+0x1d4>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]

  control_val++;
 800238e:	4b6c      	ldr	r3, [pc, #432]	@ (8002540 <main+0x1d8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	4a6a      	ldr	r2, [pc, #424]	@ (8002540 <main+0x1d8>)
 8002396:	6013      	str	r3, [r2, #0]
  	//initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8002398:	4b6a      	ldr	r3, [pc, #424]	@ (8002544 <main+0x1dc>)
 800239a:	4a6b      	ldr	r2, [pc, #428]	@ (8002548 <main+0x1e0>)
 800239c:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 800239e:	4b69      	ldr	r3, [pc, #420]	@ (8002544 <main+0x1dc>)
 80023a0:	2202      	movs	r2, #2
 80023a2:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 80023a4:	4b67      	ldr	r3, [pc, #412]	@ (8002544 <main+0x1dc>)
 80023a6:	4a69      	ldr	r2, [pc, #420]	@ (800254c <main+0x1e4>)
 80023a8:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 80023aa:	4b66      	ldr	r3, [pc, #408]	@ (8002544 <main+0x1dc>)
 80023ac:	2210      	movs	r2, #16
 80023ae:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RST_GPIO_Port;
 80023b0:	4b64      	ldr	r3, [pc, #400]	@ (8002544 <main+0x1dc>)
 80023b2:	4a65      	ldr	r2, [pc, #404]	@ (8002548 <main+0x1e0>)
 80023b4:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RST_Pin;
 80023b6:	4b63      	ldr	r3, [pc, #396]	@ (8002544 <main+0x1dc>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 80023bc:	4b61      	ldr	r3, [pc, #388]	@ (8002544 <main+0x1dc>)
 80023be:	4a64      	ldr	r2, [pc, #400]	@ (8002550 <main+0x1e8>)
 80023c0:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 80023c2:	4b64      	ldr	r3, [pc, #400]	@ (8002554 <main+0x1ec>)
 80023c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002544 <main+0x1dc>)
 80023c6:	601a      	str	r2, [r3, #0]

  control_val++;
 80023c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002540 <main+0x1d8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002540 <main+0x1d8>)
 80023d0:	6013      	str	r3, [r2, #0]
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 80023d2:	230a      	movs	r3, #10
 80023d4:	9305      	str	r3, [sp, #20]
 80023d6:	2300      	movs	r3, #0
 80023d8:	9304      	str	r3, [sp, #16]
 80023da:	2300      	movs	r3, #0
 80023dc:	9303      	str	r3, [sp, #12]
 80023de:	2307      	movs	r3, #7
 80023e0:	9302      	str	r3, [sp, #8]
 80023e2:	2301      	movs	r3, #1
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	2301      	movs	r3, #1
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	a351      	add	r3, pc, #324	@ (adr r3, 8002530 <main+0x1c8>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	4858      	ldr	r0, [pc, #352]	@ (8002554 <main+0x1ec>)
 80023f2:	f7ff fd49 	bl	8001e88 <SX1278_init>
		  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  control_val++;
 80023f6:	4b52      	ldr	r3, [pc, #328]	@ (8002540 <main+0x1d8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	4a50      	ldr	r2, [pc, #320]	@ (8002540 <main+0x1d8>)
 80023fe:	6013      	str	r3, [r2, #0]


  LoRaSetRxMode();
 8002400:	f7ff ff6a 	bl	80022d8 <LoRaSetRxMode>
  control_val++;
 8002404:	4b4e      	ldr	r3, [pc, #312]	@ (8002540 <main+0x1d8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	4a4d      	ldr	r2, [pc, #308]	@ (8002540 <main+0x1d8>)
 800240c:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret = SX1278_LoRaRxPacket(&SX1278);
 800240e:	4851      	ldr	r0, [pc, #324]	@ (8002554 <main+0x1ec>)
 8002410:	f7ff fc5f 	bl	8001cd2 <SX1278_LoRaRxPacket>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	4b4f      	ldr	r3, [pc, #316]	@ (8002558 <main+0x1f0>)
 800241a:	601a      	str	r2, [r3, #0]
	  if (ret > 0) {
 800241c:	4b4e      	ldr	r3, [pc, #312]	@ (8002558 <main+0x1f0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	ddf4      	ble.n	800240e <main+0xa6>
		  // Setup Timers
		  current_time = HAL_GetTick();
 8002424:	f000 fb30 	bl	8002a88 <HAL_GetTick>
 8002428:	4603      	mov	r3, r0
 800242a:	4a4c      	ldr	r2, [pc, #304]	@ (800255c <main+0x1f4>)
 800242c:	6013      	str	r3, [r2, #0]

		  // Read buffer
		  SX1278_read(&SX1278, (uint8_t*) LoRaRxBuffer, ret);
 800242e:	4b4a      	ldr	r3, [pc, #296]	@ (8002558 <main+0x1f0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	494a      	ldr	r1, [pc, #296]	@ (8002560 <main+0x1f8>)
 8002438:	4846      	ldr	r0, [pc, #280]	@ (8002554 <main+0x1ec>)
 800243a:	f7ff fd52 	bl	8001ee2 <SX1278_read>
		  sscanf(LoRaRxBuffer, "%d,%d",&rec_sensor_id, &reverse_time);
 800243e:	4b49      	ldr	r3, [pc, #292]	@ (8002564 <main+0x1fc>)
 8002440:	4a49      	ldr	r2, [pc, #292]	@ (8002568 <main+0x200>)
 8002442:	494a      	ldr	r1, [pc, #296]	@ (800256c <main+0x204>)
 8002444:	4846      	ldr	r0, [pc, #280]	@ (8002560 <main+0x1f8>)
 8002446:	f004 f8c3 	bl	80065d0 <siscanf>

		  if(rec_sensor_id == 2){
 800244a:	4b47      	ldr	r3, [pc, #284]	@ (8002568 <main+0x200>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d1dd      	bne.n	800240e <main+0xa6>
			  LoRaSetTxMode();							// 	Go into TX mode
 8002452:	f7ff ff65 	bl	8002320 <LoRaSetTxMode>
			  AHT20_Read(&temperature, &humidity); 	 	// Read sensor data
 8002456:	4946      	ldr	r1, [pc, #280]	@ (8002570 <main+0x208>)
 8002458:	4846      	ldr	r0, [pc, #280]	@ (8002574 <main+0x20c>)
 800245a:	f7fe ff61 	bl	8001320 <AHT20_Read>
			  pressure = BMP280_ReadPressure(&hi2c1);
 800245e:	4836      	ldr	r0, [pc, #216]	@ (8002538 <main+0x1d0>)
 8002460:	f7ff f8e8 	bl	8001634 <BMP280_ReadPressure>
 8002464:	4603      	mov	r3, r0
 8002466:	4a44      	ldr	r2, [pc, #272]	@ (8002578 <main+0x210>)
 8002468:	6013      	str	r3, [r2, #0]
			  temperature_int = (int)temperature;
 800246a:	4b42      	ldr	r3, [pc, #264]	@ (8002574 <main+0x20c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fdb8 	bl	8000fe4 <__aeabi_f2iz>
 8002474:	4603      	mov	r3, r0
 8002476:	4a41      	ldr	r2, [pc, #260]	@ (800257c <main+0x214>)
 8002478:	6013      	str	r3, [r2, #0]
			  humidity_int = (int)humidity;
 800247a:	4b3d      	ldr	r3, [pc, #244]	@ (8002570 <main+0x208>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fdb0 	bl	8000fe4 <__aeabi_f2iz>
 8002484:	4603      	mov	r3, r0
 8002486:	4a3e      	ldr	r2, [pc, #248]	@ (8002580 <main+0x218>)
 8002488:	6013      	str	r3, [r2, #0]
			  pressure_int = (int)pressure;
 800248a:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <main+0x210>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fda8 	bl	8000fe4 <__aeabi_f2iz>
 8002494:	4603      	mov	r3, r0
 8002496:	4a3b      	ldr	r2, [pc, #236]	@ (8002584 <main+0x21c>)
 8002498:	6013      	str	r3, [r2, #0]

			  current_time = HAL_GetTick();
 800249a:	f000 faf5 	bl	8002a88 <HAL_GetTick>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a2e      	ldr	r2, [pc, #184]	@ (800255c <main+0x1f4>)
 80024a2:	6013      	str	r3, [r2, #0]
			  inside_counter = current_time + (reverse_time * 1000);
 80024a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002564 <main+0x1fc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <main+0x1f4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a33      	ldr	r2, [pc, #204]	@ (8002588 <main+0x220>)
 80024ba:	6013      	str	r3, [r2, #0]

			  tx_len = sprintf(LoRaTxBuffer, "%d,%d,%d,%d",sensor_id,temperature_int, humidity_int, pressure_int);
 80024bc:	4b33      	ldr	r3, [pc, #204]	@ (800258c <main+0x224>)
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	4b2e      	ldr	r3, [pc, #184]	@ (800257c <main+0x214>)
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <main+0x218>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002584 <main+0x21c>)
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	9201      	str	r2, [sp, #4]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4603      	mov	r3, r0
 80024d2:	460a      	mov	r2, r1
 80024d4:	492e      	ldr	r1, [pc, #184]	@ (8002590 <main+0x228>)
 80024d6:	482f      	ldr	r0, [pc, #188]	@ (8002594 <main+0x22c>)
 80024d8:	f004 f85a 	bl	8006590 <siprintf>
 80024dc:	4603      	mov	r3, r0
 80024de:	4a2e      	ldr	r2, [pc, #184]	@ (8002598 <main+0x230>)
 80024e0:	6013      	str	r3, [r2, #0]

			  while(HAL_GetTick()<=inside_counter){
 80024e2:	e017      	b.n	8002514 <main+0x1ac>
				  ret = SX1278_LoRaEntryTx(&SX1278, tx_len, 2000);
 80024e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002598 <main+0x230>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80024ee:	4619      	mov	r1, r3
 80024f0:	4818      	ldr	r0, [pc, #96]	@ (8002554 <main+0x1ec>)
 80024f2:	f7ff fc32 	bl	8001d5a <SX1278_LoRaEntryTx>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4a17      	ldr	r2, [pc, #92]	@ (8002558 <main+0x1f0>)
 80024fa:	6013      	str	r3, [r2, #0]
				  ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) LoRaTxBuffer,tx_len, 2000);
 80024fc:	4b26      	ldr	r3, [pc, #152]	@ (8002598 <main+0x230>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002506:	4923      	ldr	r1, [pc, #140]	@ (8002594 <main+0x22c>)
 8002508:	4812      	ldr	r0, [pc, #72]	@ (8002554 <main+0x1ec>)
 800250a:	f7ff fc7e 	bl	8001e0a <SX1278_LoRaTxPacket>
 800250e:	4603      	mov	r3, r0
 8002510:	4a11      	ldr	r2, [pc, #68]	@ (8002558 <main+0x1f0>)
 8002512:	6013      	str	r3, [r2, #0]
			  while(HAL_GetTick()<=inside_counter){
 8002514:	f000 fab8 	bl	8002a88 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <main+0x220>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d9e0      	bls.n	80024e4 <main+0x17c>
			  }

			  // Switch to RX mode
			  LoRaSetRxMode();
 8002522:	f7ff fed9 	bl	80022d8 <LoRaSetRxMode>
			  rec_sensor_id = -1;
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <main+0x200>)
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	601a      	str	r2, [r3, #0]
	  ret = SX1278_LoRaRxPacket(&SX1278);
 800252e:	e76e      	b.n	800240e <main+0xa6>
 8002530:	19de5080 	.word	0x19de5080
 8002534:	00000000 	.word	0x00000000
 8002538:	20000218 	.word	0x20000218
 800253c:	200003b8 	.word	0x200003b8
 8002540:	200007c4 	.word	0x200007c4
 8002544:	20000284 	.word	0x20000284
 8002548:	40010c00 	.word	0x40010c00
 800254c:	40010800 	.word	0x40010800
 8002550:	200007d4 	.word	0x200007d4
 8002554:	200002a0 	.word	0x200002a0
 8002558:	200003bc 	.word	0x200003bc
 800255c:	200007cc 	.word	0x200007cc
 8002560:	200005c0 	.word	0x200005c0
 8002564:	200007c8 	.word	0x200007c8
 8002568:	20000004 	.word	0x20000004
 800256c:	08009150 	.word	0x08009150
 8002570:	20000270 	.word	0x20000270
 8002574:	2000026c 	.word	0x2000026c
 8002578:	20000274 	.word	0x20000274
 800257c:	20000278 	.word	0x20000278
 8002580:	2000027c 	.word	0x2000027c
 8002584:	20000280 	.word	0x20000280
 8002588:	200007d0 	.word	0x200007d0
 800258c:	20000000 	.word	0x20000000
 8002590:	08009158 	.word	0x08009158
 8002594:	200003c0 	.word	0x200003c0
 8002598:	200007c0 	.word	0x200007c0

0800259c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b090      	sub	sp, #64	@ 0x40
 80025a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025a2:	f107 0318 	add.w	r3, r7, #24
 80025a6:	2228      	movs	r2, #40	@ 0x28
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f004 f87f 	bl	80066ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
 80025bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025be:	2301      	movs	r3, #1
 80025c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025cc:	2301      	movs	r3, #1
 80025ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d0:	2302      	movs	r3, #2
 80025d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025da:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80025de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e0:	f107 0318 	add.w	r3, r7, #24
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fa81 	bl	8004aec <HAL_RCC_OscConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80025f0:	f000 f819 	bl	8002626 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025f4:	230f      	movs	r3, #15
 80025f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f8:	2302      	movs	r3, #2
 80025fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2102      	movs	r1, #2
 800260e:	4618      	mov	r0, r3
 8002610:	f002 fcee 	bl	8004ff0 <HAL_RCC_ClockConfig>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800261a:	f000 f804 	bl	8002626 <Error_Handler>
  }
}
 800261e:	bf00      	nop
 8002620:	3740      	adds	r7, #64	@ 0x40
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800262a:	b672      	cpsid	i
}
 800262c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800262e:	bf00      	nop
 8002630:	e7fd      	b.n	800262e <Error_Handler+0x8>
	...

08002634 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002638:	4b17      	ldr	r3, [pc, #92]	@ (8002698 <MX_SPI1_Init+0x64>)
 800263a:	4a18      	ldr	r2, [pc, #96]	@ (800269c <MX_SPI1_Init+0x68>)
 800263c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800263e:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <MX_SPI1_Init+0x64>)
 8002640:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002644:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002646:	4b14      	ldr	r3, [pc, #80]	@ (8002698 <MX_SPI1_Init+0x64>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <MX_SPI1_Init+0x64>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <MX_SPI1_Init+0x64>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002658:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <MX_SPI1_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800265e:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <MX_SPI1_Init+0x64>)
 8002660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002664:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002666:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <MX_SPI1_Init+0x64>)
 8002668:	2210      	movs	r2, #16
 800266a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800266c:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <MX_SPI1_Init+0x64>)
 800266e:	2200      	movs	r2, #0
 8002670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <MX_SPI1_Init+0x64>)
 8002674:	2200      	movs	r2, #0
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002678:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <MX_SPI1_Init+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <MX_SPI1_Init+0x64>)
 8002680:	220a      	movs	r2, #10
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002684:	4804      	ldr	r0, [pc, #16]	@ (8002698 <MX_SPI1_Init+0x64>)
 8002686:	f002 fe2d 	bl	80052e4 <HAL_SPI_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002690:	f7ff ffc9 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200007d4 	.word	0x200007d4
 800269c:	40013000 	.word	0x40013000

080026a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002728 <HAL_SPI_MspInit+0x88>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d12f      	bne.n	8002720 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026c0:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <HAL_SPI_MspInit+0x8c>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a19      	ldr	r2, [pc, #100]	@ (800272c <HAL_SPI_MspInit+0x8c>)
 80026c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b17      	ldr	r3, [pc, #92]	@ (800272c <HAL_SPI_MspInit+0x8c>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <HAL_SPI_MspInit+0x8c>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a13      	ldr	r2, [pc, #76]	@ (800272c <HAL_SPI_MspInit+0x8c>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_SPI_MspInit+0x8c>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80026f0:	23a0      	movs	r3, #160	@ 0xa0
 80026f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	4619      	mov	r1, r3
 8002702:	480b      	ldr	r0, [pc, #44]	@ (8002730 <HAL_SPI_MspInit+0x90>)
 8002704:	f000 fafc 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002708:	2340      	movs	r3, #64	@ 0x40
 800270a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002714:	f107 0310 	add.w	r3, r7, #16
 8002718:	4619      	mov	r1, r3
 800271a:	4805      	ldr	r0, [pc, #20]	@ (8002730 <HAL_SPI_MspInit+0x90>)
 800271c:	f000 faf0 	bl	8002d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002720:	bf00      	nop
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40013000 	.word	0x40013000
 800272c:	40021000 	.word	0x40021000
 8002730:	40010800 	.word	0x40010800

08002734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_MspInit+0x5c>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	4a14      	ldr	r2, [pc, #80]	@ (8002790 <HAL_MspInit+0x5c>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6193      	str	r3, [r2, #24]
 8002746:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <HAL_MspInit+0x5c>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <HAL_MspInit+0x5c>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4a0e      	ldr	r2, [pc, #56]	@ (8002790 <HAL_MspInit+0x5c>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800275c:	61d3      	str	r3, [r2, #28]
 800275e:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <HAL_MspInit+0x5c>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800276a:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <HAL_MspInit+0x60>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	4a04      	ldr	r2, [pc, #16]	@ (8002794 <HAL_MspInit+0x60>)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000

08002798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <NMI_Handler+0x4>

080027a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <HardFault_Handler+0x4>

080027a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <MemManage_Handler+0x4>

080027b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <BusFault_Handler+0x4>

080027b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <UsageFault_Handler+0x4>

080027c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e8:	f000 f93c 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80027f4:	2002      	movs	r0, #2
 80027f6:	f000 fc37 	bl	8003068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}

080027fe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  return 1;
 8002802:	2301      	movs	r3, #1
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <_kill>:

int _kill(int pid, int sig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002816:	f003 ff9d 	bl	8006754 <__errno>
 800281a:	4603      	mov	r3, r0
 800281c:	2216      	movs	r2, #22
 800281e:	601a      	str	r2, [r3, #0]
  return -1;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <_exit>:

void _exit (int status)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ffe7 	bl	800280c <_kill>
  while (1) {}    /* Make sure we hang here */
 800283e:	bf00      	nop
 8002840:	e7fd      	b.n	800283e <_exit+0x12>

08002842 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	e00a      	b.n	800286a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002854:	f3af 8000 	nop.w
 8002858:	4601      	mov	r1, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	60ba      	str	r2, [r7, #8]
 8002860:	b2ca      	uxtb	r2, r1
 8002862:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3301      	adds	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	dbf0      	blt.n	8002854 <_read+0x12>
  }

  return len;
 8002872:	687b      	ldr	r3, [r7, #4]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e009      	b.n	80028a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	60ba      	str	r2, [r7, #8]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3301      	adds	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	dbf1      	blt.n	800288e <_write+0x12>
  }
  return len;
 80028aa:	687b      	ldr	r3, [r7, #4]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_close>:

int _close(int file)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028da:	605a      	str	r2, [r3, #4]
  return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <_isatty>:

int _isatty(int file)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028f0:	2301      	movs	r3, #1
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800291c:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <_sbrk+0x5c>)
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <_sbrk+0x60>)
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <_sbrk+0x64>)
 8002932:	4a12      	ldr	r2, [pc, #72]	@ (800297c <_sbrk+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d207      	bcs.n	8002954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002944:	f003 ff06 	bl	8006754 <__errno>
 8002948:	4603      	mov	r3, r0
 800294a:	220c      	movs	r2, #12
 800294c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	e009      	b.n	8002968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002954:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800295a:	4b07      	ldr	r3, [pc, #28]	@ (8002978 <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	4a05      	ldr	r2, [pc, #20]	@ (8002978 <_sbrk+0x64>)
 8002964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20005000 	.word	0x20005000
 8002974:	00000400 	.word	0x00000400
 8002978:	2000082c 	.word	0x2000082c
 800297c:	20000980 	.word	0x20000980

08002980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
 	    bl  SystemInit
 800298c:	f7ff fff8 	bl	8002980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002990:	480b      	ldr	r0, [pc, #44]	@ (80029c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002992:	490c      	ldr	r1, [pc, #48]	@ (80029c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002994:	4a0c      	ldr	r2, [pc, #48]	@ (80029c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002998:	e002      	b.n	80029a0 <LoopCopyDataInit>

0800299a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800299c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299e:	3304      	adds	r3, #4

080029a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a4:	d3f9      	bcc.n	800299a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a6:	4a09      	ldr	r2, [pc, #36]	@ (80029cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80029a8:	4c09      	ldr	r4, [pc, #36]	@ (80029d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ac:	e001      	b.n	80029b2 <LoopFillZerobss>

080029ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b0:	3204      	adds	r2, #4

080029b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b4:	d3fb      	bcc.n	80029ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029b6:	f003 fed3 	bl	8006760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ba:	f7ff fcd5 	bl	8002368 <main>
  bx lr
 80029be:	4770      	bx	lr
  ldr r0, =_sdata
 80029c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80029c8:	08009554 	.word	0x08009554
  ldr r2, =_sbss
 80029cc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80029d0:	20000980 	.word	0x20000980

080029d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029d4:	e7fe      	b.n	80029d4 <ADC1_2_IRQHandler>
	...

080029d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029dc:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <HAL_Init+0x28>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a07      	ldr	r2, [pc, #28]	@ (8002a00 <HAL_Init+0x28>)
 80029e2:	f043 0310 	orr.w	r3, r3, #16
 80029e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e8:	2003      	movs	r0, #3
 80029ea:	f000 f947 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ee:	200f      	movs	r0, #15
 80029f0:	f000 f808 	bl	8002a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f4:	f7ff fe9e 	bl	8002734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40022000 	.word	0x40022000

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a0c:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_InitTick+0x54>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_InitTick+0x58>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f95f 	bl	8002ce6 <HAL_SYSTICK_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00e      	b.n	8002a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	d80a      	bhi.n	8002a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f000 f927 	bl	8002c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a44:	4a06      	ldr	r2, [pc, #24]	@ (8002a60 <HAL_InitTick+0x5c>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000010 	.word	0x20000010
 8002a60:	2000000c 	.word	0x2000000c

08002a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_IncTick+0x1c>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <HAL_IncTick+0x20>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a03      	ldr	r2, [pc, #12]	@ (8002a84 <HAL_IncTick+0x20>)
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	20000010 	.word	0x20000010
 8002a84:	20000830 	.word	0x20000830

08002a88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b02      	ldr	r3, [pc, #8]	@ (8002a98 <HAL_GetTick+0x10>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	20000830 	.word	0x20000830

08002a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff fff0 	bl	8002a88 <HAL_GetTick>
 8002aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d005      	beq.n	8002ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <HAL_Delay+0x44>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ac2:	bf00      	nop
 8002ac4:	f7ff ffe0 	bl	8002a88 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d8f7      	bhi.n	8002ac4 <HAL_Delay+0x28>
  {
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000010 	.word	0x20000010

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4906      	ldr	r1, [pc, #24]	@ (8002b7c <__NVIC_EnableIRQ+0x34>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100

08002b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db0a      	blt.n	8002baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	490c      	ldr	r1, [pc, #48]	@ (8002bcc <__NVIC_SetPriority+0x4c>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba8:	e00a      	b.n	8002bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4908      	ldr	r1, [pc, #32]	@ (8002bd0 <__NVIC_SetPriority+0x50>)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	761a      	strb	r2, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	@ 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf28      	it	cs
 8002bf2:	2304      	movcs	r3, #4
 8002bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d902      	bls.n	8002c04 <NVIC_EncodePriority+0x30>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3b03      	subs	r3, #3
 8002c02:	e000      	b.n	8002c06 <NVIC_EncodePriority+0x32>
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	401a      	ands	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43d9      	mvns	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	4313      	orrs	r3, r2
         );
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	@ 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c48:	d301      	bcc.n	8002c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00f      	b.n	8002c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <SysTick_Config+0x40>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c56:	210f      	movs	r1, #15
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f7ff ff90 	bl	8002b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <SysTick_Config+0x40>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c66:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <SysTick_Config+0x40>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff2d 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca4:	f7ff ff42 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff ff90 	bl	8002bd4 <NVIC_EncodePriority>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff5f 	bl	8002b80 <__NVIC_SetPriority>
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff35 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ffa2 	bl	8002c38 <SysTick_Config>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b08b      	sub	sp, #44	@ 0x2c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d12:	e169      	b.n	8002fe8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d14:	2201      	movs	r2, #1
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f040 8158 	bne.w	8002fe2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a9a      	ldr	r2, [pc, #616]	@ (8002fa0 <HAL_GPIO_Init+0x2a0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d05e      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d3c:	4a98      	ldr	r2, [pc, #608]	@ (8002fa0 <HAL_GPIO_Init+0x2a0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d875      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d42:	4a98      	ldr	r2, [pc, #608]	@ (8002fa4 <HAL_GPIO_Init+0x2a4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d058      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d48:	4a96      	ldr	r2, [pc, #600]	@ (8002fa4 <HAL_GPIO_Init+0x2a4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d86f      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d4e:	4a96      	ldr	r2, [pc, #600]	@ (8002fa8 <HAL_GPIO_Init+0x2a8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d052      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d54:	4a94      	ldr	r2, [pc, #592]	@ (8002fa8 <HAL_GPIO_Init+0x2a8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d869      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d5a:	4a94      	ldr	r2, [pc, #592]	@ (8002fac <HAL_GPIO_Init+0x2ac>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d04c      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d60:	4a92      	ldr	r2, [pc, #584]	@ (8002fac <HAL_GPIO_Init+0x2ac>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d863      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d66:	4a92      	ldr	r2, [pc, #584]	@ (8002fb0 <HAL_GPIO_Init+0x2b0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d046      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d6c:	4a90      	ldr	r2, [pc, #576]	@ (8002fb0 <HAL_GPIO_Init+0x2b0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d85d      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d72:	2b12      	cmp	r3, #18
 8002d74:	d82a      	bhi.n	8002dcc <HAL_GPIO_Init+0xcc>
 8002d76:	2b12      	cmp	r3, #18
 8002d78:	d859      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d80 <HAL_GPIO_Init+0x80>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002dfb 	.word	0x08002dfb
 8002d84:	08002dd5 	.word	0x08002dd5
 8002d88:	08002de7 	.word	0x08002de7
 8002d8c:	08002e29 	.word	0x08002e29
 8002d90:	08002e2f 	.word	0x08002e2f
 8002d94:	08002e2f 	.word	0x08002e2f
 8002d98:	08002e2f 	.word	0x08002e2f
 8002d9c:	08002e2f 	.word	0x08002e2f
 8002da0:	08002e2f 	.word	0x08002e2f
 8002da4:	08002e2f 	.word	0x08002e2f
 8002da8:	08002e2f 	.word	0x08002e2f
 8002dac:	08002e2f 	.word	0x08002e2f
 8002db0:	08002e2f 	.word	0x08002e2f
 8002db4:	08002e2f 	.word	0x08002e2f
 8002db8:	08002e2f 	.word	0x08002e2f
 8002dbc:	08002e2f 	.word	0x08002e2f
 8002dc0:	08002e2f 	.word	0x08002e2f
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002df1 	.word	0x08002df1
 8002dcc:	4a79      	ldr	r2, [pc, #484]	@ (8002fb4 <HAL_GPIO_Init+0x2b4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dd2:	e02c      	b.n	8002e2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	623b      	str	r3, [r7, #32]
          break;
 8002dda:	e029      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	3304      	adds	r3, #4
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e024      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	3308      	adds	r3, #8
 8002dec:	623b      	str	r3, [r7, #32]
          break;
 8002dee:	e01f      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	330c      	adds	r3, #12
 8002df6:	623b      	str	r3, [r7, #32]
          break;
 8002df8:	e01a      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e02:	2304      	movs	r3, #4
 8002e04:	623b      	str	r3, [r7, #32]
          break;
 8002e06:	e013      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e10:	2308      	movs	r3, #8
 8002e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	611a      	str	r2, [r3, #16]
          break;
 8002e1a:	e009      	b.n	8002e30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	615a      	str	r2, [r3, #20]
          break;
 8002e26:	e003      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
          break;
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          break;
 8002e2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2bff      	cmp	r3, #255	@ 0xff
 8002e34:	d801      	bhi.n	8002e3a <HAL_GPIO_Init+0x13a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_Init+0x13e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2bff      	cmp	r3, #255	@ 0xff
 8002e44:	d802      	bhi.n	8002e4c <HAL_GPIO_Init+0x14c>
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x152>
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	3b08      	subs	r3, #8
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	210f      	movs	r1, #15
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	6a39      	ldr	r1, [r7, #32]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80b1 	beq.w	8002fe2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e80:	4b4d      	ldr	r3, [pc, #308]	@ (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	4a4c      	ldr	r2, [pc, #304]	@ (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6193      	str	r3, [r2, #24]
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e98:	4a48      	ldr	r2, [pc, #288]	@ (8002fbc <HAL_GPIO_Init+0x2bc>)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	220f      	movs	r2, #15
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a40      	ldr	r2, [pc, #256]	@ (8002fc0 <HAL_GPIO_Init+0x2c0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_GPIO_Init+0x1ec>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8002fc4 <HAL_GPIO_Init+0x2c4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00d      	beq.n	8002ee8 <HAL_GPIO_Init+0x1e8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3e      	ldr	r2, [pc, #248]	@ (8002fc8 <HAL_GPIO_Init+0x2c8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <HAL_GPIO_Init+0x1e4>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3d      	ldr	r2, [pc, #244]	@ (8002fcc <HAL_GPIO_Init+0x2cc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d101      	bne.n	8002ee0 <HAL_GPIO_Init+0x1e0>
 8002edc:	2303      	movs	r3, #3
 8002ede:	e006      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	e004      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e002      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_GPIO_Init+0x1ee>
 8002eec:	2300      	movs	r3, #0
 8002eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef0:	f002 0203 	and.w	r2, r2, #3
 8002ef4:	0092      	lsls	r2, r2, #2
 8002ef6:	4093      	lsls	r3, r2
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002efe:	492f      	ldr	r1, [pc, #188]	@ (8002fbc <HAL_GPIO_Init+0x2bc>)
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	3302      	adds	r3, #2
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d006      	beq.n	8002f26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f18:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	492c      	ldr	r1, [pc, #176]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f26:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	4928      	ldr	r1, [pc, #160]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f40:	4b23      	ldr	r3, [pc, #140]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	4922      	ldr	r1, [pc, #136]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60cb      	str	r3, [r1, #12]
 8002f4c:	e006      	b.n	8002f5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f4e:	4b20      	ldr	r3, [pc, #128]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	491e      	ldr	r1, [pc, #120]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f68:	4b19      	ldr	r3, [pc, #100]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	4918      	ldr	r1, [pc, #96]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
 8002f74:	e006      	b.n	8002f84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f76:	4b16      	ldr	r3, [pc, #88]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	4914      	ldr	r1, [pc, #80]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d021      	beq.n	8002fd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f90:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	490e      	ldr	r1, [pc, #56]	@ (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	e021      	b.n	8002fe2 <HAL_GPIO_Init+0x2e2>
 8002f9e:	bf00      	nop
 8002fa0:	10320000 	.word	0x10320000
 8002fa4:	10310000 	.word	0x10310000
 8002fa8:	10220000 	.word	0x10220000
 8002fac:	10210000 	.word	0x10210000
 8002fb0:	10120000 	.word	0x10120000
 8002fb4:	10110000 	.word	0x10110000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40010000 	.word	0x40010000
 8002fc0:	40010800 	.word	0x40010800
 8002fc4:	40010c00 	.word	0x40010c00
 8002fc8:	40011000 	.word	0x40011000
 8002fcc:	40011400 	.word	0x40011400
 8002fd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <HAL_GPIO_Init+0x304>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	4909      	ldr	r1, [pc, #36]	@ (8003004 <HAL_GPIO_Init+0x304>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f47f ae8e 	bne.w	8002d14 <HAL_GPIO_Init+0x14>
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	372c      	adds	r7, #44	@ 0x2c
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40010400 	.word	0x40010400

08003008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	e001      	b.n	800302a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	807b      	strh	r3, [r7, #2]
 8003042:	4613      	mov	r3, r2
 8003044:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003046:	787b      	ldrb	r3, [r7, #1]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304c:	887a      	ldrh	r2, [r7, #2]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003052:	e003      	b.n	800305c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003054:	887b      	ldrh	r3, [r7, #2]
 8003056:	041a      	lsls	r2, r3, #16
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	611a      	str	r2, [r3, #16]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
	...

08003068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003072:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d006      	beq.n	800308c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800307e:	4a05      	ldr	r2, [pc, #20]	@ (8003094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f806 	bl	8003098 <HAL_GPIO_EXTI_Callback>
  }
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40010400 	.word	0x40010400

08003098 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e12b      	b.n	8003316 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff f8aa 	bl	800222c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	@ 0x24
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800310e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003110:	f002 f8b6 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 8003114:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4a81      	ldr	r2, [pc, #516]	@ (8003320 <HAL_I2C_Init+0x274>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d807      	bhi.n	8003130 <HAL_I2C_Init+0x84>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a80      	ldr	r2, [pc, #512]	@ (8003324 <HAL_I2C_Init+0x278>)
 8003124:	4293      	cmp	r3, r2
 8003126:	bf94      	ite	ls
 8003128:	2301      	movls	r3, #1
 800312a:	2300      	movhi	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e006      	b.n	800313e <HAL_I2C_Init+0x92>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a7d      	ldr	r2, [pc, #500]	@ (8003328 <HAL_I2C_Init+0x27c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	bf94      	ite	ls
 8003138:	2301      	movls	r3, #1
 800313a:	2300      	movhi	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0e7      	b.n	8003316 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4a78      	ldr	r2, [pc, #480]	@ (800332c <HAL_I2C_Init+0x280>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	0c9b      	lsrs	r3, r3, #18
 8003150:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4a6a      	ldr	r2, [pc, #424]	@ (8003320 <HAL_I2C_Init+0x274>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d802      	bhi.n	8003180 <HAL_I2C_Init+0xd4>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3301      	adds	r3, #1
 800317e:	e009      	b.n	8003194 <HAL_I2C_Init+0xe8>
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	4a69      	ldr	r2, [pc, #420]	@ (8003330 <HAL_I2C_Init+0x284>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	3301      	adds	r3, #1
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	430b      	orrs	r3, r1
 800319a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	495c      	ldr	r1, [pc, #368]	@ (8003320 <HAL_I2C_Init+0x274>)
 80031b0:	428b      	cmp	r3, r1
 80031b2:	d819      	bhi.n	80031e8 <HAL_I2C_Init+0x13c>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1e59      	subs	r1, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031c8:	400b      	ands	r3, r1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_I2C_Init+0x138>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1e59      	subs	r1, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031dc:	3301      	adds	r3, #1
 80031de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e2:	e051      	b.n	8003288 <HAL_I2C_Init+0x1dc>
 80031e4:	2304      	movs	r3, #4
 80031e6:	e04f      	b.n	8003288 <HAL_I2C_Init+0x1dc>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d111      	bne.n	8003214 <HAL_I2C_Init+0x168>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e58      	subs	r0, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e012      	b.n	800323a <HAL_I2C_Init+0x18e>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	0099      	lsls	r1, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Init+0x196>
 800323e:	2301      	movs	r3, #1
 8003240:	e022      	b.n	8003288 <HAL_I2C_Init+0x1dc>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10e      	bne.n	8003268 <HAL_I2C_Init+0x1bc>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1e58      	subs	r0, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	440b      	add	r3, r1
 8003258:	fbb0 f3f3 	udiv	r3, r0, r3
 800325c:	3301      	adds	r3, #1
 800325e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003266:	e00f      	b.n	8003288 <HAL_I2C_Init+0x1dc>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1e58      	subs	r0, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	0099      	lsls	r1, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	fbb0 f3f3 	udiv	r3, r0, r3
 800327e:	3301      	adds	r3, #1
 8003280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003284:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	6809      	ldr	r1, [r1, #0]
 800328c:	4313      	orrs	r3, r2
 800328e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6911      	ldr	r1, [r2, #16]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68d2      	ldr	r2, [r2, #12]
 80032c2:	4311      	orrs	r1, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	430b      	orrs	r3, r1
 80032ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	000186a0 	.word	0x000186a0
 8003324:	001e847f 	.word	0x001e847f
 8003328:	003d08ff 	.word	0x003d08ff
 800332c:	431bde83 	.word	0x431bde83
 8003330:	10624dd3 	.word	0x10624dd3

08003334 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	461a      	mov	r2, r3
 8003340:	460b      	mov	r3, r1
 8003342:	817b      	strh	r3, [r7, #10]
 8003344:	4613      	mov	r3, r2
 8003346:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003348:	f7ff fb9e 	bl	8002a88 <HAL_GetTick>
 800334c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b20      	cmp	r3, #32
 8003358:	f040 80e0 	bne.w	800351c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2319      	movs	r3, #25
 8003362:	2201      	movs	r2, #1
 8003364:	4970      	ldr	r1, [pc, #448]	@ (8003528 <HAL_I2C_Master_Transmit+0x1f4>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f001 f98a 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
 8003374:	e0d3      	b.n	800351e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_I2C_Master_Transmit+0x50>
 8003380:	2302      	movs	r3, #2
 8003382:	e0cc      	b.n	800351e <HAL_I2C_Master_Transmit+0x1ea>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d007      	beq.n	80033aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2221      	movs	r2, #33	@ 0x21
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2210      	movs	r2, #16
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	893a      	ldrh	r2, [r7, #8]
 80033da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a50      	ldr	r2, [pc, #320]	@ (800352c <HAL_I2C_Master_Transmit+0x1f8>)
 80033ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033ec:	8979      	ldrh	r1, [r7, #10]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fe76 	bl	80040e4 <I2C_MasterRequestWrite>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e08d      	b.n	800351e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003418:	e066      	b.n	80034e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	6a39      	ldr	r1, [r7, #32]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f001 fa48 	bl	80048b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	2b04      	cmp	r3, #4
 8003430:	d107      	bne.n	8003442 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003440:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e06b      	b.n	800351e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	781a      	ldrb	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d11b      	bne.n	80034bc <HAL_I2C_Master_Transmit+0x188>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d017      	beq.n	80034bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	6a39      	ldr	r1, [r7, #32]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f001 fa3f 	bl	8004944 <I2C_WaitOnBTFFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00d      	beq.n	80034e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d107      	bne.n	80034e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e01a      	b.n	800351e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d194      	bne.n	800341a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	00100002 	.word	0x00100002
 800352c:	ffff0000 	.word	0xffff0000

08003530 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08c      	sub	sp, #48	@ 0x30
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	461a      	mov	r2, r3
 800353c:	460b      	mov	r3, r1
 800353e:	817b      	strh	r3, [r7, #10]
 8003540:	4613      	mov	r3, r2
 8003542:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7ff fa9e 	bl	8002a88 <HAL_GetTick>
 800354c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b20      	cmp	r3, #32
 8003558:	f040 824b 	bne.w	80039f2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2319      	movs	r3, #25
 8003562:	2201      	movs	r2, #1
 8003564:	497f      	ldr	r1, [pc, #508]	@ (8003764 <HAL_I2C_Master_Receive+0x234>)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f001 f88a 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
 8003574:	e23e      	b.n	80039f4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_I2C_Master_Receive+0x54>
 8003580:	2302      	movs	r3, #2
 8003582:	e237      	b.n	80039f4 <HAL_I2C_Master_Receive+0x4c4>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d007      	beq.n	80035aa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2222      	movs	r2, #34	@ 0x22
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2210      	movs	r2, #16
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	893a      	ldrh	r2, [r7, #8]
 80035da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a5f      	ldr	r2, [pc, #380]	@ (8003768 <HAL_I2C_Master_Receive+0x238>)
 80035ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035ec:	8979      	ldrh	r1, [r7, #10]
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fdf8 	bl	80041e8 <I2C_MasterRequestRead>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e1f8      	b.n	80039f4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d113      	bne.n	8003632 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e1cc      	b.n	80039cc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003636:	2b01      	cmp	r3, #1
 8003638:	d11e      	bne.n	8003678 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003648:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800364a:	b672      	cpsid	i
}
 800364c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003672:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003674:	b662      	cpsie	i
}
 8003676:	e035      	b.n	80036e4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	2b02      	cmp	r3, #2
 800367e:	d11e      	bne.n	80036be <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003690:	b672      	cpsid	i
}
 8003692:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036ba:	b662      	cpsie	i
}
 80036bc:	e012      	b.n	80036e4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80036e4:	e172      	b.n	80039cc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	f200 811f 	bhi.w	800392e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d123      	bne.n	8003740 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f001 f969 	bl	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e173      	b.n	80039f4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800373e:	e145      	b.n	80039cc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	2b02      	cmp	r3, #2
 8003746:	d152      	bne.n	80037ee <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374e:	2200      	movs	r2, #0
 8003750:	4906      	ldr	r1, [pc, #24]	@ (800376c <HAL_I2C_Master_Receive+0x23c>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 ff94 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e148      	b.n	80039f4 <HAL_I2C_Master_Receive+0x4c4>
 8003762:	bf00      	nop
 8003764:	00100002 	.word	0x00100002
 8003768:	ffff0000 	.word	0xffff0000
 800376c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003770:	b672      	cpsid	i
}
 8003772:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037b6:	b662      	cpsie	i
}
 80037b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037ec:	e0ee      	b.n	80039cc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	2200      	movs	r2, #0
 80037f6:	4981      	ldr	r1, [pc, #516]	@ (80039fc <HAL_I2C_Master_Receive+0x4cc>)
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 ff41 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0f5      	b.n	80039f4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003818:	b672      	cpsid	i
}
 800381a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800384e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a00 <HAL_I2C_Master_Receive+0x4d0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	08db      	lsrs	r3, r3, #3
 8003854:	4a6b      	ldr	r2, [pc, #428]	@ (8003a04 <HAL_I2C_Master_Receive+0x4d4>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	0a1a      	lsrs	r2, r3, #8
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	00da      	lsls	r2, r3, #3
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	3b01      	subs	r3, #1
 800386c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d118      	bne.n	80038a6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003896:	b662      	cpsie	i
}
 8003898:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e0a6      	b.n	80039f4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d1d9      	bne.n	8003868 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038f6:	b662      	cpsie	i
}
 80038f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800392c:	e04e      	b.n	80039cc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003930:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f001 f84e 	bl	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e058      	b.n	80039f4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d124      	bne.n	80039cc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003986:	2b03      	cmp	r3, #3
 8003988:	d107      	bne.n	800399a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003998:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f47f ae88 	bne.w	80036e6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3728      	adds	r7, #40	@ 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	00010004 	.word	0x00010004
 8003a00:	20000008 	.word	0x20000008
 8003a04:	14f8b589 	.word	0x14f8b589

08003a08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	817b      	strh	r3, [r7, #10]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	813b      	strh	r3, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a22:	f7ff f831 	bl	8002a88 <HAL_GetTick>
 8003a26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	f040 80d9 	bne.w	8003be8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2319      	movs	r3, #25
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	496d      	ldr	r1, [pc, #436]	@ (8003bf4 <HAL_I2C_Mem_Write+0x1ec>)
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fe1d 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e0cc      	b.n	8003bea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_I2C_Mem_Write+0x56>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e0c5      	b.n	8003bea <HAL_I2C_Mem_Write+0x1e2>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d007      	beq.n	8003a84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2221      	movs	r2, #33	@ 0x21
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2240      	movs	r2, #64	@ 0x40
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a4d      	ldr	r2, [pc, #308]	@ (8003bf8 <HAL_I2C_Mem_Write+0x1f0>)
 8003ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ac6:	88f8      	ldrh	r0, [r7, #6]
 8003ac8:	893a      	ldrh	r2, [r7, #8]
 8003aca:	8979      	ldrh	r1, [r7, #10]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fc54 	bl	8004384 <I2C_RequestMemoryWrite>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d052      	beq.n	8003b88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e081      	b.n	8003bea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fee2 	bl	80048b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d107      	bne.n	8003b0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06b      	b.n	8003bea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d11b      	bne.n	8003b88 <HAL_I2C_Mem_Write+0x180>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d017      	beq.n	8003b88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1aa      	bne.n	8003ae6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fed5 	bl	8004944 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00d      	beq.n	8003bbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d107      	bne.n	8003bb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e016      	b.n	8003bea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	00100002 	.word	0x00100002
 8003bf8:	ffff0000 	.word	0xffff0000

08003bfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	@ 0x30
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	817b      	strh	r3, [r7, #10]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	813b      	strh	r3, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c1a:	f7fe ff35 	bl	8002a88 <HAL_GetTick>
 8003c1e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	f040 8250 	bne.w	80040ce <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2319      	movs	r3, #25
 8003c34:	2201      	movs	r2, #1
 8003c36:	4982      	ldr	r1, [pc, #520]	@ (8003e40 <HAL_I2C_Mem_Read+0x244>)
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fd21 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
 8003c46:	e243      	b.n	80040d0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_I2C_Mem_Read+0x5a>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e23c      	b.n	80040d0 <HAL_I2C_Mem_Read+0x4d4>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d007      	beq.n	8003c7c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2222      	movs	r2, #34	@ 0x22
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2240      	movs	r2, #64	@ 0x40
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a62      	ldr	r2, [pc, #392]	@ (8003e44 <HAL_I2C_Mem_Read+0x248>)
 8003cbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cbe:	88f8      	ldrh	r0, [r7, #6]
 8003cc0:	893a      	ldrh	r2, [r7, #8]
 8003cc2:	8979      	ldrh	r1, [r7, #10]
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4603      	mov	r3, r0
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fbee 	bl	80044b0 <I2C_RequestMemoryRead>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e1f8      	b.n	80040d0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d113      	bne.n	8003d0e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e1cc      	b.n	80040a8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d11e      	bne.n	8003d54 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d26:	b672      	cpsid	i
}
 8003d28:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d50:	b662      	cpsie	i
}
 8003d52:	e035      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d11e      	bne.n	8003d9a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d6c:	b672      	cpsid	i
}
 8003d6e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d96:	b662      	cpsie	i
}
 8003d98:	e012      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003da8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003dc0:	e172      	b.n	80040a8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	f200 811f 	bhi.w	800400a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d123      	bne.n	8003e1c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fdfb 	bl	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e173      	b.n	80040d0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e1a:	e145      	b.n	80040a8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d152      	bne.n	8003eca <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	4906      	ldr	r1, [pc, #24]	@ (8003e48 <HAL_I2C_Mem_Read+0x24c>)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fc26 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e148      	b.n	80040d0 <HAL_I2C_Mem_Read+0x4d4>
 8003e3e:	bf00      	nop
 8003e40:	00100002 	.word	0x00100002
 8003e44:	ffff0000 	.word	0xffff0000
 8003e48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e4c:	b672      	cpsid	i
}
 8003e4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e92:	b662      	cpsie	i
}
 8003e94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ec8:	e0ee      	b.n	80040a8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4981      	ldr	r1, [pc, #516]	@ (80040d8 <HAL_I2C_Mem_Read+0x4dc>)
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fbd3 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0f5      	b.n	80040d0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ef4:	b672      	cpsid	i
}
 8003ef6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f2a:	4b6c      	ldr	r3, [pc, #432]	@ (80040dc <HAL_I2C_Mem_Read+0x4e0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	08db      	lsrs	r3, r3, #3
 8003f30:	4a6b      	ldr	r2, [pc, #428]	@ (80040e0 <HAL_I2C_Mem_Read+0x4e4>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0a1a      	lsrs	r2, r3, #8
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	00da      	lsls	r2, r3, #3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d118      	bne.n	8003f82 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	f043 0220 	orr.w	r2, r3, #32
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003f72:	b662      	cpsie	i
}
 8003f74:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0a6      	b.n	80040d0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d1d9      	bne.n	8003f44 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fd2:	b662      	cpsie	i
}
 8003fd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004008:	e04e      	b.n	80040a8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fce0 	bl	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e058      	b.n	80040d0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b04      	cmp	r3, #4
 800405c:	d124      	bne.n	80040a8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	2b03      	cmp	r3, #3
 8004064:	d107      	bne.n	8004076 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004074:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f47f ae88 	bne.w	8003dc2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3728      	adds	r7, #40	@ 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	00010004 	.word	0x00010004
 80040dc:	20000008 	.word	0x20000008
 80040e0:	14f8b589 	.word	0x14f8b589

080040e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	460b      	mov	r3, r1
 80040f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d006      	beq.n	800410e <I2C_MasterRequestWrite+0x2a>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d003      	beq.n	800410e <I2C_MasterRequestWrite+0x2a>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800410c:	d108      	bne.n	8004120 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e00b      	b.n	8004138 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	2b12      	cmp	r3, #18
 8004126:	d107      	bne.n	8004138 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004136:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fa9b 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800415e:	d103      	bne.n	8004168 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004166:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e035      	b.n	80041d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004174:	d108      	bne.n	8004188 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004184:	611a      	str	r2, [r3, #16]
 8004186:	e01b      	b.n	80041c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004188:	897b      	ldrh	r3, [r7, #10]
 800418a:	11db      	asrs	r3, r3, #7
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0306 	and.w	r3, r3, #6
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f063 030f 	orn	r3, r3, #15
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	490e      	ldr	r1, [pc, #56]	@ (80041e0 <I2C_MasterRequestWrite+0xfc>)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fae4 	bl	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e010      	b.n	80041d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4907      	ldr	r1, [pc, #28]	@ (80041e4 <I2C_MasterRequestWrite+0x100>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fad4 	bl	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	00010008 	.word	0x00010008
 80041e4:	00010002 	.word	0x00010002

080041e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	460b      	mov	r3, r1
 80041f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800420c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d006      	beq.n	8004222 <I2C_MasterRequestRead+0x3a>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d003      	beq.n	8004222 <I2C_MasterRequestRead+0x3a>
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004220:	d108      	bne.n	8004234 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e00b      	b.n	800424c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	2b11      	cmp	r3, #17
 800423a:	d107      	bne.n	800424c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800424a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fa11 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00d      	beq.n	8004280 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004272:	d103      	bne.n	800427c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800427a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e079      	b.n	8004374 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004288:	d108      	bne.n	800429c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800428a:	897b      	ldrh	r3, [r7, #10]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	b2da      	uxtb	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	611a      	str	r2, [r3, #16]
 800429a:	e05f      	b.n	800435c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800429c:	897b      	ldrh	r3, [r7, #10]
 800429e:	11db      	asrs	r3, r3, #7
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f003 0306 	and.w	r3, r3, #6
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f063 030f 	orn	r3, r3, #15
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4930      	ldr	r1, [pc, #192]	@ (800437c <I2C_MasterRequestRead+0x194>)
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fa5a 	bl	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e054      	b.n	8004374 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042ca:	897b      	ldrh	r3, [r7, #10]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4929      	ldr	r1, [pc, #164]	@ (8004380 <I2C_MasterRequestRead+0x198>)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fa4a 	bl	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e044      	b.n	8004374 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800430e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f9af 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004336:	d103      	bne.n	8004340 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e017      	b.n	8004374 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004344:	897b      	ldrh	r3, [r7, #10]
 8004346:	11db      	asrs	r3, r3, #7
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0306 	and.w	r3, r3, #6
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f063 030e 	orn	r3, r3, #14
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4907      	ldr	r1, [pc, #28]	@ (8004380 <I2C_MasterRequestRead+0x198>)
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fa06 	bl	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	00010008 	.word	0x00010008
 8004380:	00010002 	.word	0x00010002

08004384 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af02      	add	r7, sp, #8
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	4608      	mov	r0, r1
 800438e:	4611      	mov	r1, r2
 8004390:	461a      	mov	r2, r3
 8004392:	4603      	mov	r3, r0
 8004394:	817b      	strh	r3, [r7, #10]
 8004396:	460b      	mov	r3, r1
 8004398:	813b      	strh	r3, [r7, #8]
 800439a:	4613      	mov	r3, r2
 800439c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f960 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00d      	beq.n	80043e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043d4:	d103      	bne.n	80043de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e05f      	b.n	80044a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043e2:	897b      	ldrh	r3, [r7, #10]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	6a3a      	ldr	r2, [r7, #32]
 80043f6:	492d      	ldr	r1, [pc, #180]	@ (80044ac <I2C_RequestMemoryWrite+0x128>)
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f9bb 	bl	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e04c      	b.n	80044a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004420:	6a39      	ldr	r1, [r7, #32]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 fa46 	bl	80048b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00d      	beq.n	800444a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	2b04      	cmp	r3, #4
 8004434:	d107      	bne.n	8004446 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e02b      	b.n	80044a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004450:	893b      	ldrh	r3, [r7, #8]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	611a      	str	r2, [r3, #16]
 800445a:	e021      	b.n	80044a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800445c:	893b      	ldrh	r3, [r7, #8]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	b29b      	uxth	r3, r3
 8004462:	b2da      	uxtb	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446c:	6a39      	ldr	r1, [r7, #32]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fa20 	bl	80048b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	2b04      	cmp	r3, #4
 8004480:	d107      	bne.n	8004492 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e005      	b.n	80044a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004496:	893b      	ldrh	r3, [r7, #8]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	00010002 	.word	0x00010002

080044b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	4608      	mov	r0, r1
 80044ba:	4611      	mov	r1, r2
 80044bc:	461a      	mov	r2, r3
 80044be:	4603      	mov	r3, r0
 80044c0:	817b      	strh	r3, [r7, #10]
 80044c2:	460b      	mov	r3, r1
 80044c4:	813b      	strh	r3, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f8c2 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004510:	d103      	bne.n	800451a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004518:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0aa      	b.n	8004674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800451e:	897b      	ldrh	r3, [r7, #10]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800452c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	6a3a      	ldr	r2, [r7, #32]
 8004532:	4952      	ldr	r1, [pc, #328]	@ (800467c <I2C_RequestMemoryRead+0x1cc>)
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f91d 	bl	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e097      	b.n	8004674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800455a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800455c:	6a39      	ldr	r1, [r7, #32]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f9a8 	bl	80048b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00d      	beq.n	8004586 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	2b04      	cmp	r3, #4
 8004570:	d107      	bne.n	8004582 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004580:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e076      	b.n	8004674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800458c:	893b      	ldrh	r3, [r7, #8]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	611a      	str	r2, [r3, #16]
 8004596:	e021      	b.n	80045dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	0a1b      	lsrs	r3, r3, #8
 800459c:	b29b      	uxth	r3, r3
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a8:	6a39      	ldr	r1, [r7, #32]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f982 	bl	80048b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d107      	bne.n	80045ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e050      	b.n	8004674 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045d2:	893b      	ldrh	r3, [r7, #8]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045de:	6a39      	ldr	r1, [r7, #32]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f967 	bl	80048b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00d      	beq.n	8004608 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d107      	bne.n	8004604 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004602:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e035      	b.n	8004674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004616:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	2200      	movs	r2, #0
 8004620:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f82b 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800463e:	d103      	bne.n	8004648 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e013      	b.n	8004674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800464c:	897b      	ldrh	r3, [r7, #10]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	6a3a      	ldr	r2, [r7, #32]
 8004660:	4906      	ldr	r1, [pc, #24]	@ (800467c <I2C_RequestMemoryRead+0x1cc>)
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f886 	bl	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	00010002 	.word	0x00010002

08004680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004690:	e048      	b.n	8004724 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d044      	beq.n	8004724 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469a:	f7fe f9f5 	bl	8002a88 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d302      	bcc.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d139      	bne.n	8004724 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d10d      	bne.n	80046d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	43da      	mvns	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4013      	ands	r3, r2
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	e00c      	b.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	43da      	mvns	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4013      	ands	r3, r2
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d116      	bne.n	8004724 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e023      	b.n	800476c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	0c1b      	lsrs	r3, r3, #16
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d10d      	bne.n	800474a <I2C_WaitOnFlagUntilTimeout+0xca>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	43da      	mvns	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	e00c      	b.n	8004764 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	43da      	mvns	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	429a      	cmp	r2, r3
 8004768:	d093      	beq.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004782:	e071      	b.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800478e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004792:	d123      	bne.n	80047dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c8:	f043 0204 	orr.w	r2, r3, #4
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e067      	b.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d041      	beq.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e4:	f7fe f950 	bl	8002a88 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d136      	bne.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	0c1b      	lsrs	r3, r3, #16
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d10c      	bne.n	800481e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	43da      	mvns	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4013      	ands	r3, r2
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	bf14      	ite	ne
 8004816:	2301      	movne	r3, #1
 8004818:	2300      	moveq	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	e00b      	b.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	43da      	mvns	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e021      	b.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	d10c      	bne.n	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	43da      	mvns	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e00b      	b.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	43da      	mvns	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	bf14      	ite	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	2300      	moveq	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f47f af6d 	bne.w	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c0:	e034      	b.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f8e3 	bl	8004a8e <I2C_IsAcknowledgeFailed>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e034      	b.n	800493c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d028      	beq.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fe f8d5 	bl	8002a88 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11d      	bne.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fa:	2b80      	cmp	r3, #128	@ 0x80
 80048fc:	d016      	beq.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e007      	b.n	800493c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b80      	cmp	r3, #128	@ 0x80
 8004938:	d1c3      	bne.n	80048c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004950:	e034      	b.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f89b 	bl	8004a8e <I2C_IsAcknowledgeFailed>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e034      	b.n	80049cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004968:	d028      	beq.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496a:	f7fe f88d 	bl	8002a88 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	429a      	cmp	r2, r3
 8004978:	d302      	bcc.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d11d      	bne.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d016      	beq.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	f043 0220 	orr.w	r2, r3, #32
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e007      	b.n	80049cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d1c3      	bne.n	8004952 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049e0:	e049      	b.n	8004a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d119      	bne.n	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0210 	mvn.w	r2, #16
 80049f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e030      	b.n	8004a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a24:	f7fe f830 	bl	8002a88 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d302      	bcc.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d11d      	bne.n	8004a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a44:	2b40      	cmp	r3, #64	@ 0x40
 8004a46:	d016      	beq.n	8004a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	f043 0220 	orr.w	r2, r3, #32
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e007      	b.n	8004a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a80:	2b40      	cmp	r3, #64	@ 0x40
 8004a82:	d1ae      	bne.n	80049e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa4:	d11b      	bne.n	8004ade <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004aae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	f043 0204 	orr.w	r2, r3, #4
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e272      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8087 	beq.w	8004c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b0c:	4b92      	ldr	r3, [pc, #584]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d00c      	beq.n	8004b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b18:	4b8f      	ldr	r3, [pc, #572]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 030c 	and.w	r3, r3, #12
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d112      	bne.n	8004b4a <HAL_RCC_OscConfig+0x5e>
 8004b24:	4b8c      	ldr	r3, [pc, #560]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b30:	d10b      	bne.n	8004b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b32:	4b89      	ldr	r3, [pc, #548]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d06c      	beq.n	8004c18 <HAL_RCC_OscConfig+0x12c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d168      	bne.n	8004c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e24c      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b52:	d106      	bne.n	8004b62 <HAL_RCC_OscConfig+0x76>
 8004b54:	4b80      	ldr	r3, [pc, #512]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a7f      	ldr	r2, [pc, #508]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	e02e      	b.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x98>
 8004b6a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a7a      	ldr	r2, [pc, #488]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b78      	ldr	r3, [pc, #480]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a77      	ldr	r2, [pc, #476]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e01d      	b.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0xbc>
 8004b8e:	4b72      	ldr	r3, [pc, #456]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a71      	ldr	r2, [pc, #452]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6e      	ldr	r2, [pc, #440]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
 8004ba8:	4b6b      	ldr	r3, [pc, #428]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a6a      	ldr	r2, [pc, #424]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	4b68      	ldr	r3, [pc, #416]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a67      	ldr	r2, [pc, #412]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fd ff5e 	bl	8002a88 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fd ff5a 	bl	8002a88 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	@ 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e200      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	4b5d      	ldr	r3, [pc, #372]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xe4>
 8004bee:	e014      	b.n	8004c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fd ff4a 	bl	8002a88 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fd ff46 	bl	8002a88 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	@ 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e1ec      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0a:	4b53      	ldr	r3, [pc, #332]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x10c>
 8004c16:	e000      	b.n	8004c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c26:	4b4c      	ldr	r3, [pc, #304]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00b      	beq.n	8004c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c32:	4b49      	ldr	r3, [pc, #292]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d11c      	bne.n	8004c78 <HAL_RCC_OscConfig+0x18c>
 8004c3e:	4b46      	ldr	r3, [pc, #280]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d116      	bne.n	8004c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4a:	4b43      	ldr	r3, [pc, #268]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_RCC_OscConfig+0x176>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e1c0      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c62:	4b3d      	ldr	r3, [pc, #244]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4939      	ldr	r1, [pc, #228]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c76:	e03a      	b.n	8004cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d020      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c80:	4b36      	ldr	r3, [pc, #216]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c86:	f7fd feff 	bl	8002a88 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8e:	f7fd fefb 	bl	8002a88 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e1a1      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cac:	4b2a      	ldr	r3, [pc, #168]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4927      	ldr	r1, [pc, #156]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]
 8004cc0:	e015      	b.n	8004cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc2:	4b26      	ldr	r3, [pc, #152]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fd fede 	bl	8002a88 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd0:	f7fd feda 	bl	8002a88 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e180      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03a      	beq.n	8004d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d019      	beq.n	8004d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d02:	4b17      	ldr	r3, [pc, #92]	@ (8004d60 <HAL_RCC_OscConfig+0x274>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d08:	f7fd febe 	bl	8002a88 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d10:	f7fd feba 	bl	8002a88 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e160      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d22:	4b0d      	ldr	r3, [pc, #52]	@ (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f000 faba 	bl	80052a8 <RCC_Delay>
 8004d34:	e01c      	b.n	8004d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d36:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <HAL_RCC_OscConfig+0x274>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3c:	f7fd fea4 	bl	8002a88 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d42:	e00f      	b.n	8004d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d44:	f7fd fea0 	bl	8002a88 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d908      	bls.n	8004d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e146      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	42420000 	.word	0x42420000
 8004d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d64:	4b92      	ldr	r3, [pc, #584]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e9      	bne.n	8004d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80a6 	beq.w	8004eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d82:	4b8b      	ldr	r3, [pc, #556]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	4b88      	ldr	r3, [pc, #544]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	4a87      	ldr	r2, [pc, #540]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d98:	61d3      	str	r3, [r2, #28]
 8004d9a:	4b85      	ldr	r3, [pc, #532]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da2:	60bb      	str	r3, [r7, #8]
 8004da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004da6:	2301      	movs	r3, #1
 8004da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004daa:	4b82      	ldr	r3, [pc, #520]	@ (8004fb4 <HAL_RCC_OscConfig+0x4c8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d118      	bne.n	8004de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db6:	4b7f      	ldr	r3, [pc, #508]	@ (8004fb4 <HAL_RCC_OscConfig+0x4c8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a7e      	ldr	r2, [pc, #504]	@ (8004fb4 <HAL_RCC_OscConfig+0x4c8>)
 8004dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc2:	f7fd fe61 	bl	8002a88 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dca:	f7fd fe5d 	bl	8002a88 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b64      	cmp	r3, #100	@ 0x64
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e103      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ddc:	4b75      	ldr	r3, [pc, #468]	@ (8004fb4 <HAL_RCC_OscConfig+0x4c8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d106      	bne.n	8004dfe <HAL_RCC_OscConfig+0x312>
 8004df0:	4b6f      	ldr	r3, [pc, #444]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	4a6e      	ldr	r2, [pc, #440]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6213      	str	r3, [r2, #32]
 8004dfc:	e02d      	b.n	8004e5a <HAL_RCC_OscConfig+0x36e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x334>
 8004e06:	4b6a      	ldr	r3, [pc, #424]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	4a69      	ldr	r2, [pc, #420]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	6213      	str	r3, [r2, #32]
 8004e12:	4b67      	ldr	r3, [pc, #412]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	4a66      	ldr	r2, [pc, #408]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	6213      	str	r3, [r2, #32]
 8004e1e:	e01c      	b.n	8004e5a <HAL_RCC_OscConfig+0x36e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d10c      	bne.n	8004e42 <HAL_RCC_OscConfig+0x356>
 8004e28:	4b61      	ldr	r3, [pc, #388]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	4a60      	ldr	r2, [pc, #384]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	f043 0304 	orr.w	r3, r3, #4
 8004e32:	6213      	str	r3, [r2, #32]
 8004e34:	4b5e      	ldr	r3, [pc, #376]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	4a5d      	ldr	r2, [pc, #372]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6213      	str	r3, [r2, #32]
 8004e40:	e00b      	b.n	8004e5a <HAL_RCC_OscConfig+0x36e>
 8004e42:	4b5b      	ldr	r3, [pc, #364]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	4a5a      	ldr	r2, [pc, #360]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	6213      	str	r3, [r2, #32]
 8004e4e:	4b58      	ldr	r3, [pc, #352]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4a57      	ldr	r2, [pc, #348]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d015      	beq.n	8004e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e62:	f7fd fe11 	bl	8002a88 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fd fe0d 	bl	8002a88 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0b1      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e80:	4b4b      	ldr	r3, [pc, #300]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ee      	beq.n	8004e6a <HAL_RCC_OscConfig+0x37e>
 8004e8c:	e014      	b.n	8004eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8e:	f7fd fdfb 	bl	8002a88 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fd fdf7 	bl	8002a88 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e09b      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eac:	4b40      	ldr	r3, [pc, #256]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ee      	bne.n	8004e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d105      	bne.n	8004eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	4a3b      	ldr	r2, [pc, #236]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8087 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed4:	4b36      	ldr	r3, [pc, #216]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 030c 	and.w	r3, r3, #12
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d061      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d146      	bne.n	8004f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b33      	ldr	r3, [pc, #204]	@ (8004fb8 <HAL_RCC_OscConfig+0x4cc>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eee:	f7fd fdcb 	bl	8002a88 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef6:	f7fd fdc7 	bl	8002a88 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e06d      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f08:	4b29      	ldr	r3, [pc, #164]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f0      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f1c:	d108      	bne.n	8004f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f1e:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	4921      	ldr	r1, [pc, #132]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f30:	4b1f      	ldr	r3, [pc, #124]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a19      	ldr	r1, [r3, #32]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	430b      	orrs	r3, r1
 8004f42:	491b      	ldr	r1, [pc, #108]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f48:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb8 <HAL_RCC_OscConfig+0x4cc>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4e:	f7fd fd9b 	bl	8002a88 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f56:	f7fd fd97 	bl	8002a88 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e03d      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f68:	4b11      	ldr	r3, [pc, #68]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x46a>
 8004f74:	e035      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	4b10      	ldr	r3, [pc, #64]	@ (8004fb8 <HAL_RCC_OscConfig+0x4cc>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fd fd84 	bl	8002a88 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fd fd80 	bl	8002a88 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e026      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f96:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x498>
 8004fa2:	e01e      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d107      	bne.n	8004fbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e019      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	40007000 	.word	0x40007000
 8004fb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <HAL_RCC_OscConfig+0x500>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d106      	bne.n	8004fde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000

08004ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0d0      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b6a      	ldr	r3, [pc, #424]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d910      	bls.n	8005034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b67      	ldr	r3, [pc, #412]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 0207 	bic.w	r2, r3, #7
 800501a:	4965      	ldr	r1, [pc, #404]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005022:	4b63      	ldr	r3, [pc, #396]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d001      	beq.n	8005034 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0b8      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d020      	beq.n	8005082 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800504c:	4b59      	ldr	r3, [pc, #356]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a58      	ldr	r2, [pc, #352]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005052:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005056:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005064:	4b53      	ldr	r3, [pc, #332]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a52      	ldr	r2, [pc, #328]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800506a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800506e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005070:	4b50      	ldr	r3, [pc, #320]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	494d      	ldr	r1, [pc, #308]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d040      	beq.n	8005110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d107      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005096:	4b47      	ldr	r3, [pc, #284]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d115      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e07f      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ae:	4b41      	ldr	r3, [pc, #260]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e073      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050be:	4b3d      	ldr	r3, [pc, #244]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e06b      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ce:	4b39      	ldr	r3, [pc, #228]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f023 0203 	bic.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4936      	ldr	r1, [pc, #216]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e0:	f7fd fcd2 	bl	8002a88 <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e8:	f7fd fcce 	bl	8002a88 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e053      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	4b2d      	ldr	r3, [pc, #180]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 020c 	and.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	429a      	cmp	r2, r3
 800510e:	d1eb      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005110:	4b27      	ldr	r3, [pc, #156]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d210      	bcs.n	8005140 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b24      	ldr	r3, [pc, #144]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 0207 	bic.w	r2, r3, #7
 8005126:	4922      	ldr	r1, [pc, #136]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	4b20      	ldr	r3, [pc, #128]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e032      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800514c:	4b19      	ldr	r3, [pc, #100]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4916      	ldr	r1, [pc, #88]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800516a:	4b12      	ldr	r3, [pc, #72]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	490e      	ldr	r1, [pc, #56]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800517e:	f000 f821 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 8005182:	4602      	mov	r2, r0
 8005184:	4b0b      	ldr	r3, [pc, #44]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	490a      	ldr	r1, [pc, #40]	@ (80051b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005190:	5ccb      	ldrb	r3, [r1, r3]
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	4a09      	ldr	r2, [pc, #36]	@ (80051bc <HAL_RCC_ClockConfig+0x1cc>)
 8005198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800519a:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_RCC_ClockConfig+0x1d0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fd fc30 	bl	8002a04 <HAL_InitTick>

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40022000 	.word	0x40022000
 80051b4:	40021000 	.word	0x40021000
 80051b8:	08009190 	.word	0x08009190
 80051bc:	20000008 	.word	0x20000008
 80051c0:	2000000c 	.word	0x2000000c

080051c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051de:	4b1e      	ldr	r3, [pc, #120]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x94>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d002      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x30>
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d003      	beq.n	80051fa <HAL_RCC_GetSysClockFreq+0x36>
 80051f2:	e027      	b.n	8005244 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051f4:	4b19      	ldr	r3, [pc, #100]	@ (800525c <HAL_RCC_GetSysClockFreq+0x98>)
 80051f6:	613b      	str	r3, [r7, #16]
      break;
 80051f8:	e027      	b.n	800524a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	0c9b      	lsrs	r3, r3, #18
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	4a17      	ldr	r2, [pc, #92]	@ (8005260 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005204:	5cd3      	ldrb	r3, [r2, r3]
 8005206:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d010      	beq.n	8005234 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005212:	4b11      	ldr	r3, [pc, #68]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x94>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	0c5b      	lsrs	r3, r3, #17
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	4a11      	ldr	r2, [pc, #68]	@ (8005264 <HAL_RCC_GetSysClockFreq+0xa0>)
 800521e:	5cd3      	ldrb	r3, [r2, r3]
 8005220:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a0d      	ldr	r2, [pc, #52]	@ (800525c <HAL_RCC_GetSysClockFreq+0x98>)
 8005226:	fb03 f202 	mul.w	r2, r3, r2
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e004      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a0c      	ldr	r2, [pc, #48]	@ (8005268 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005238:	fb02 f303 	mul.w	r3, r2, r3
 800523c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	613b      	str	r3, [r7, #16]
      break;
 8005242:	e002      	b.n	800524a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005244:	4b05      	ldr	r3, [pc, #20]	@ (800525c <HAL_RCC_GetSysClockFreq+0x98>)
 8005246:	613b      	str	r3, [r7, #16]
      break;
 8005248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800524a:	693b      	ldr	r3, [r7, #16]
}
 800524c:	4618      	mov	r0, r3
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	bc80      	pop	{r7}
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	007a1200 	.word	0x007a1200
 8005260:	080091a8 	.word	0x080091a8
 8005264:	080091b8 	.word	0x080091b8
 8005268:	003d0900 	.word	0x003d0900

0800526c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005270:	4b02      	ldr	r3, [pc, #8]	@ (800527c <HAL_RCC_GetHCLKFreq+0x10>)
 8005272:	681b      	ldr	r3, [r3, #0]
}
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr
 800527c:	20000008 	.word	0x20000008

08005280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005284:	f7ff fff2 	bl	800526c <HAL_RCC_GetHCLKFreq>
 8005288:	4602      	mov	r2, r0
 800528a:	4b05      	ldr	r3, [pc, #20]	@ (80052a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	4903      	ldr	r1, [pc, #12]	@ (80052a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005296:	5ccb      	ldrb	r3, [r1, r3]
 8005298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800529c:	4618      	mov	r0, r3
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000
 80052a4:	080091a0 	.word	0x080091a0

080052a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052b0:	4b0a      	ldr	r3, [pc, #40]	@ (80052dc <RCC_Delay+0x34>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0a      	ldr	r2, [pc, #40]	@ (80052e0 <RCC_Delay+0x38>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	0a5b      	lsrs	r3, r3, #9
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052c4:	bf00      	nop
  }
  while (Delay --);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1e5a      	subs	r2, r3, #1
 80052ca:	60fa      	str	r2, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f9      	bne.n	80052c4 <RCC_Delay+0x1c>
}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	20000008 	.word	0x20000008
 80052e0:	10624dd3 	.word	0x10624dd3

080052e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e076      	b.n	80053e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d108      	bne.n	8005310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005306:	d009      	beq.n	800531c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	61da      	str	r2, [r3, #28]
 800530e:	e005      	b.n	800531c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fd f9b2 	bl	80026a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005352:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a0:	ea42 0103 	orr.w	r1, r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	0c1a      	lsrs	r2, r3, #16
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f002 0204 	and.w	r2, r2, #4
 80053c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053fc:	f7fd fb44 	bl	8002a88 <HAL_GetTick>
 8005400:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b01      	cmp	r3, #1
 8005410:	d001      	beq.n	8005416 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005412:	2302      	movs	r3, #2
 8005414:	e12a      	b.n	800566c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_SPI_Transmit+0x36>
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e122      	b.n	800566c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_SPI_Transmit+0x48>
 8005430:	2302      	movs	r3, #2
 8005432:	e11b      	b.n	800566c <HAL_SPI_Transmit+0x280>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2203      	movs	r2, #3
 8005440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	88fa      	ldrh	r2, [r7, #6]
 800545a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005482:	d10f      	bne.n	80054a4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005492:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ae:	2b40      	cmp	r3, #64	@ 0x40
 80054b0:	d007      	beq.n	80054c2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ca:	d152      	bne.n	8005572 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_SPI_Transmit+0xee>
 80054d4:	8b7b      	ldrh	r3, [r7, #26]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d145      	bne.n	8005566 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054de:	881a      	ldrh	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ea:	1c9a      	adds	r2, r3, #2
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054fe:	e032      	b.n	8005566 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b02      	cmp	r3, #2
 800550c:	d112      	bne.n	8005534 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005512:	881a      	ldrh	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551e:	1c9a      	adds	r2, r3, #2
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005532:	e018      	b.n	8005566 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005534:	f7fd faa8 	bl	8002a88 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d803      	bhi.n	800554c <HAL_SPI_Transmit+0x160>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d102      	bne.n	8005552 <HAL_SPI_Transmit+0x166>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e082      	b.n	800566c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1c7      	bne.n	8005500 <HAL_SPI_Transmit+0x114>
 8005570:	e053      	b.n	800561a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Transmit+0x194>
 800557a:	8b7b      	ldrh	r3, [r7, #26]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d147      	bne.n	8005610 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	7812      	ldrb	r2, [r2, #0]
 800558c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055a6:	e033      	b.n	8005610 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d113      	bne.n	80055de <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	330c      	adds	r3, #12
 80055c0:	7812      	ldrb	r2, [r2, #0]
 80055c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055dc:	e018      	b.n	8005610 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055de:	f7fd fa53 	bl	8002a88 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d803      	bhi.n	80055f6 <HAL_SPI_Transmit+0x20a>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f4:	d102      	bne.n	80055fc <HAL_SPI_Transmit+0x210>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e02d      	b.n	800566c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1c6      	bne.n	80055a8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 fa66 	bl	8005af0 <SPI_EndRxTxTransaction>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800566a:	2300      	movs	r3, #0
  }
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	@ 0x28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005682:	2301      	movs	r3, #1
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005686:	f7fd f9ff 	bl	8002a88 <HAL_GetTick>
 800568a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005692:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800569a:	887b      	ldrh	r3, [r7, #2]
 800569c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800569e:	7ffb      	ldrb	r3, [r7, #31]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d00c      	beq.n	80056be <HAL_SPI_TransmitReceive+0x4a>
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056aa:	d106      	bne.n	80056ba <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d102      	bne.n	80056ba <HAL_SPI_TransmitReceive+0x46>
 80056b4:	7ffb      	ldrb	r3, [r7, #31]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d001      	beq.n	80056be <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
 80056bc:	e17f      	b.n	80059be <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x5c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x5c>
 80056ca:	887b      	ldrh	r3, [r7, #2]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e174      	b.n	80059be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_SPI_TransmitReceive+0x6e>
 80056de:	2302      	movs	r3, #2
 80056e0:	e16d      	b.n	80059be <HAL_SPI_TransmitReceive+0x34a>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d003      	beq.n	80056fe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2205      	movs	r2, #5
 80056fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	887a      	ldrh	r2, [r7, #2]
 800570e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	887a      	ldrh	r2, [r7, #2]
 8005714:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	887a      	ldrh	r2, [r7, #2]
 8005720:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	887a      	ldrh	r2, [r7, #2]
 8005726:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573e:	2b40      	cmp	r3, #64	@ 0x40
 8005740:	d007      	beq.n	8005752 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005750:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800575a:	d17e      	bne.n	800585a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_SPI_TransmitReceive+0xf6>
 8005764:	8afb      	ldrh	r3, [r7, #22]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d16c      	bne.n	8005844 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576e:	881a      	ldrh	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577a:	1c9a      	adds	r2, r3, #2
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800578e:	e059      	b.n	8005844 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d11b      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x162>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d016      	beq.n	80057d6 <HAL_SPI_TransmitReceive+0x162>
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d113      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	881a      	ldrh	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	1c9a      	adds	r2, r3, #2
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d119      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x1a4>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d014      	beq.n	8005818 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f8:	b292      	uxth	r2, r2
 80057fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005800:	1c9a      	adds	r2, r3, #2
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800580a:	b29b      	uxth	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005814:	2301      	movs	r3, #1
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005818:	f7fd f936 	bl	8002a88 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005824:	429a      	cmp	r2, r3
 8005826:	d80d      	bhi.n	8005844 <HAL_SPI_TransmitReceive+0x1d0>
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d009      	beq.n	8005844 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e0bc      	b.n	80059be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1a0      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x11c>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d19b      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x11c>
 8005858:	e082      	b.n	8005960 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x1f4>
 8005862:	8afb      	ldrh	r3, [r7, #22]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d171      	bne.n	800594c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	7812      	ldrb	r2, [r2, #0]
 8005874:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800588e:	e05d      	b.n	800594c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d11c      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x264>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d017      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x264>
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d114      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	7812      	ldrb	r2, [r2, #0]
 80058ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d119      	bne.n	800591a <HAL_SPI_TransmitReceive+0x2a6>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d014      	beq.n	800591a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005916:	2301      	movs	r3, #1
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800591a:	f7fd f8b5 	bl	8002a88 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005926:	429a      	cmp	r2, r3
 8005928:	d803      	bhi.n	8005932 <HAL_SPI_TransmitReceive+0x2be>
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d102      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x2c4>
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e038      	b.n	80059be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d19c      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x21c>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d197      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005960:	6a3a      	ldr	r2, [r7, #32]
 8005962:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f8c3 	bl	8005af0 <SPI_EndRxTxTransaction>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e01d      	b.n	80059be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800598a:	2300      	movs	r3, #0
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80059bc:	2300      	movs	r3, #0
  }
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3728      	adds	r7, #40	@ 0x28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059d4:	b2db      	uxtb	r3, r3
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059f0:	f7fd f84a 	bl	8002a88 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	4413      	add	r3, r2
 80059fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a00:	f7fd f842 	bl	8002a88 <HAL_GetTick>
 8005a04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a06:	4b39      	ldr	r3, [pc, #228]	@ (8005aec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	015b      	lsls	r3, r3, #5
 8005a0c:	0d1b      	lsrs	r3, r3, #20
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	fb02 f303 	mul.w	r3, r2, r3
 8005a14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a16:	e054      	b.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d050      	beq.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a20:	f7fd f832 	bl	8002a88 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d902      	bls.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d13d      	bne.n	8005ab2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a4e:	d111      	bne.n	8005a74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a58:	d004      	beq.n	8005a64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a62:	d107      	bne.n	8005a74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a7c:	d10f      	bne.n	8005a9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e017      	b.n	8005ae2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4013      	ands	r3, r2
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	bf0c      	ite	eq
 8005ad2:	2301      	moveq	r3, #1
 8005ad4:	2300      	movne	r3, #0
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d19b      	bne.n	8005a18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000008 	.word	0x20000008

08005af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2201      	movs	r2, #1
 8005b04:	2102      	movs	r1, #2
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff ff6a 	bl	80059e0 <SPI_WaitFlagStateUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b16:	f043 0220 	orr.w	r2, r3, #32
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e013      	b.n	8005b4a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	@ 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff ff57 	bl	80059e0 <SPI_WaitFlagStateUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3c:	f043 0220 	orr.w	r2, r3, #32
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e000      	b.n	8005b4a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <__cvt>:
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	461d      	mov	r5, r3
 8005b5a:	bfbb      	ittet	lt
 8005b5c:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005b60:	461d      	movlt	r5, r3
 8005b62:	2300      	movge	r3, #0
 8005b64:	232d      	movlt	r3, #45	@ 0x2d
 8005b66:	b088      	sub	sp, #32
 8005b68:	4614      	mov	r4, r2
 8005b6a:	bfb8      	it	lt
 8005b6c:	4614      	movlt	r4, r2
 8005b6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b70:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005b72:	7013      	strb	r3, [r2, #0]
 8005b74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b76:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005b7a:	f023 0820 	bic.w	r8, r3, #32
 8005b7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b82:	d005      	beq.n	8005b90 <__cvt+0x3e>
 8005b84:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b88:	d100      	bne.n	8005b8c <__cvt+0x3a>
 8005b8a:	3601      	adds	r6, #1
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e000      	b.n	8005b92 <__cvt+0x40>
 8005b90:	2303      	movs	r3, #3
 8005b92:	aa07      	add	r2, sp, #28
 8005b94:	9204      	str	r2, [sp, #16]
 8005b96:	aa06      	add	r2, sp, #24
 8005b98:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b9c:	e9cd 3600 	strd	r3, r6, [sp]
 8005ba0:	4622      	mov	r2, r4
 8005ba2:	462b      	mov	r3, r5
 8005ba4:	f000 fea8 	bl	80068f8 <_dtoa_r>
 8005ba8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bac:	4607      	mov	r7, r0
 8005bae:	d119      	bne.n	8005be4 <__cvt+0x92>
 8005bb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005bb2:	07db      	lsls	r3, r3, #31
 8005bb4:	d50e      	bpl.n	8005bd4 <__cvt+0x82>
 8005bb6:	eb00 0906 	add.w	r9, r0, r6
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f7fa fef1 	bl	80009a8 <__aeabi_dcmpeq>
 8005bc6:	b108      	cbz	r0, 8005bcc <__cvt+0x7a>
 8005bc8:	f8cd 901c 	str.w	r9, [sp, #28]
 8005bcc:	2230      	movs	r2, #48	@ 0x30
 8005bce:	9b07      	ldr	r3, [sp, #28]
 8005bd0:	454b      	cmp	r3, r9
 8005bd2:	d31e      	bcc.n	8005c12 <__cvt+0xc0>
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	9b07      	ldr	r3, [sp, #28]
 8005bd8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005bda:	1bdb      	subs	r3, r3, r7
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	b008      	add	sp, #32
 8005be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005be8:	eb00 0906 	add.w	r9, r0, r6
 8005bec:	d1e5      	bne.n	8005bba <__cvt+0x68>
 8005bee:	7803      	ldrb	r3, [r0, #0]
 8005bf0:	2b30      	cmp	r3, #48	@ 0x30
 8005bf2:	d10a      	bne.n	8005c0a <__cvt+0xb8>
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	f7fa fed4 	bl	80009a8 <__aeabi_dcmpeq>
 8005c00:	b918      	cbnz	r0, 8005c0a <__cvt+0xb8>
 8005c02:	f1c6 0601 	rsb	r6, r6, #1
 8005c06:	f8ca 6000 	str.w	r6, [sl]
 8005c0a:	f8da 3000 	ldr.w	r3, [sl]
 8005c0e:	4499      	add	r9, r3
 8005c10:	e7d3      	b.n	8005bba <__cvt+0x68>
 8005c12:	1c59      	adds	r1, r3, #1
 8005c14:	9107      	str	r1, [sp, #28]
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	e7d9      	b.n	8005bce <__cvt+0x7c>

08005c1a <__exponent>:
 8005c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	bfb6      	itet	lt
 8005c20:	232d      	movlt	r3, #45	@ 0x2d
 8005c22:	232b      	movge	r3, #43	@ 0x2b
 8005c24:	4249      	neglt	r1, r1
 8005c26:	2909      	cmp	r1, #9
 8005c28:	7002      	strb	r2, [r0, #0]
 8005c2a:	7043      	strb	r3, [r0, #1]
 8005c2c:	dd29      	ble.n	8005c82 <__exponent+0x68>
 8005c2e:	f10d 0307 	add.w	r3, sp, #7
 8005c32:	461d      	mov	r5, r3
 8005c34:	270a      	movs	r7, #10
 8005c36:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	fb07 1416 	mls	r4, r7, r6, r1
 8005c40:	3430      	adds	r4, #48	@ 0x30
 8005c42:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c46:	460c      	mov	r4, r1
 8005c48:	2c63      	cmp	r4, #99	@ 0x63
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c50:	dcf1      	bgt.n	8005c36 <__exponent+0x1c>
 8005c52:	3130      	adds	r1, #48	@ 0x30
 8005c54:	1e94      	subs	r4, r2, #2
 8005c56:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c5a:	4623      	mov	r3, r4
 8005c5c:	1c41      	adds	r1, r0, #1
 8005c5e:	42ab      	cmp	r3, r5
 8005c60:	d30a      	bcc.n	8005c78 <__exponent+0x5e>
 8005c62:	f10d 0309 	add.w	r3, sp, #9
 8005c66:	1a9b      	subs	r3, r3, r2
 8005c68:	42ac      	cmp	r4, r5
 8005c6a:	bf88      	it	hi
 8005c6c:	2300      	movhi	r3, #0
 8005c6e:	3302      	adds	r3, #2
 8005c70:	4403      	add	r3, r0
 8005c72:	1a18      	subs	r0, r3, r0
 8005c74:	b003      	add	sp, #12
 8005c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c78:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c7c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c80:	e7ed      	b.n	8005c5e <__exponent+0x44>
 8005c82:	2330      	movs	r3, #48	@ 0x30
 8005c84:	3130      	adds	r1, #48	@ 0x30
 8005c86:	7083      	strb	r3, [r0, #2]
 8005c88:	70c1      	strb	r1, [r0, #3]
 8005c8a:	1d03      	adds	r3, r0, #4
 8005c8c:	e7f1      	b.n	8005c72 <__exponent+0x58>
	...

08005c90 <_printf_float>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	b091      	sub	sp, #68	@ 0x44
 8005c96:	460c      	mov	r4, r1
 8005c98:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	461f      	mov	r7, r3
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	f000 fd0d 	bl	80066c0 <_localeconv_r>
 8005ca6:	6803      	ldr	r3, [r0, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	9308      	str	r3, [sp, #32]
 8005cac:	f7fa fa50 	bl	8000150 <strlen>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005cba:	3307      	adds	r3, #7
 8005cbc:	f023 0307 	bic.w	r3, r3, #7
 8005cc0:	f103 0208 	add.w	r2, r3, #8
 8005cc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cc8:	f8d4 b000 	ldr.w	fp, [r4]
 8005ccc:	f8c8 2000 	str.w	r2, [r8]
 8005cd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005cd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cda:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ce6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005cea:	4b9c      	ldr	r3, [pc, #624]	@ (8005f5c <_printf_float+0x2cc>)
 8005cec:	f7fa fe8e 	bl	8000a0c <__aeabi_dcmpun>
 8005cf0:	bb70      	cbnz	r0, 8005d50 <_printf_float+0xc0>
 8005cf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfa:	4b98      	ldr	r3, [pc, #608]	@ (8005f5c <_printf_float+0x2cc>)
 8005cfc:	f7fa fe68 	bl	80009d0 <__aeabi_dcmple>
 8005d00:	bb30      	cbnz	r0, 8005d50 <_printf_float+0xc0>
 8005d02:	2200      	movs	r2, #0
 8005d04:	2300      	movs	r3, #0
 8005d06:	4640      	mov	r0, r8
 8005d08:	4649      	mov	r1, r9
 8005d0a:	f7fa fe57 	bl	80009bc <__aeabi_dcmplt>
 8005d0e:	b110      	cbz	r0, 8005d16 <_printf_float+0x86>
 8005d10:	232d      	movs	r3, #45	@ 0x2d
 8005d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d16:	4a92      	ldr	r2, [pc, #584]	@ (8005f60 <_printf_float+0x2d0>)
 8005d18:	4b92      	ldr	r3, [pc, #584]	@ (8005f64 <_printf_float+0x2d4>)
 8005d1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d1e:	bf94      	ite	ls
 8005d20:	4690      	movls	r8, r2
 8005d22:	4698      	movhi	r8, r3
 8005d24:	2303      	movs	r3, #3
 8005d26:	f04f 0900 	mov.w	r9, #0
 8005d2a:	6123      	str	r3, [r4, #16]
 8005d2c:	f02b 0304 	bic.w	r3, fp, #4
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	4633      	mov	r3, r6
 8005d34:	4621      	mov	r1, r4
 8005d36:	4628      	mov	r0, r5
 8005d38:	9700      	str	r7, [sp, #0]
 8005d3a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005d3c:	f000 f9d4 	bl	80060e8 <_printf_common>
 8005d40:	3001      	adds	r0, #1
 8005d42:	f040 8090 	bne.w	8005e66 <_printf_float+0x1d6>
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4a:	b011      	add	sp, #68	@ 0x44
 8005d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d50:	4642      	mov	r2, r8
 8005d52:	464b      	mov	r3, r9
 8005d54:	4640      	mov	r0, r8
 8005d56:	4649      	mov	r1, r9
 8005d58:	f7fa fe58 	bl	8000a0c <__aeabi_dcmpun>
 8005d5c:	b148      	cbz	r0, 8005d72 <_printf_float+0xe2>
 8005d5e:	464b      	mov	r3, r9
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bfb8      	it	lt
 8005d64:	232d      	movlt	r3, #45	@ 0x2d
 8005d66:	4a80      	ldr	r2, [pc, #512]	@ (8005f68 <_printf_float+0x2d8>)
 8005d68:	bfb8      	it	lt
 8005d6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f6c <_printf_float+0x2dc>)
 8005d70:	e7d3      	b.n	8005d1a <_printf_float+0x8a>
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	d13f      	bne.n	8005dfc <_printf_float+0x16c>
 8005d7c:	2306      	movs	r3, #6
 8005d7e:	6063      	str	r3, [r4, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005d86:	6023      	str	r3, [r4, #0]
 8005d88:	9206      	str	r2, [sp, #24]
 8005d8a:	aa0e      	add	r2, sp, #56	@ 0x38
 8005d8c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005d90:	aa0d      	add	r2, sp, #52	@ 0x34
 8005d92:	9203      	str	r2, [sp, #12]
 8005d94:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005d98:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	4642      	mov	r2, r8
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	4628      	mov	r0, r5
 8005da4:	464b      	mov	r3, r9
 8005da6:	910a      	str	r1, [sp, #40]	@ 0x28
 8005da8:	f7ff fed3 	bl	8005b52 <__cvt>
 8005dac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005dae:	4680      	mov	r8, r0
 8005db0:	2947      	cmp	r1, #71	@ 0x47
 8005db2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005db4:	d128      	bne.n	8005e08 <_printf_float+0x178>
 8005db6:	1cc8      	adds	r0, r1, #3
 8005db8:	db02      	blt.n	8005dc0 <_printf_float+0x130>
 8005dba:	6863      	ldr	r3, [r4, #4]
 8005dbc:	4299      	cmp	r1, r3
 8005dbe:	dd40      	ble.n	8005e42 <_printf_float+0x1b2>
 8005dc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005dc4:	fa5f fa8a 	uxtb.w	sl, sl
 8005dc8:	4652      	mov	r2, sl
 8005dca:	3901      	subs	r1, #1
 8005dcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005dd0:	910d      	str	r1, [sp, #52]	@ 0x34
 8005dd2:	f7ff ff22 	bl	8005c1a <__exponent>
 8005dd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005dd8:	4681      	mov	r9, r0
 8005dda:	1813      	adds	r3, r2, r0
 8005ddc:	2a01      	cmp	r2, #1
 8005dde:	6123      	str	r3, [r4, #16]
 8005de0:	dc02      	bgt.n	8005de8 <_printf_float+0x158>
 8005de2:	6822      	ldr	r2, [r4, #0]
 8005de4:	07d2      	lsls	r2, r2, #31
 8005de6:	d501      	bpl.n	8005dec <_printf_float+0x15c>
 8005de8:	3301      	adds	r3, #1
 8005dea:	6123      	str	r3, [r4, #16]
 8005dec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d09e      	beq.n	8005d32 <_printf_float+0xa2>
 8005df4:	232d      	movs	r3, #45	@ 0x2d
 8005df6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dfa:	e79a      	b.n	8005d32 <_printf_float+0xa2>
 8005dfc:	2947      	cmp	r1, #71	@ 0x47
 8005dfe:	d1bf      	bne.n	8005d80 <_printf_float+0xf0>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1bd      	bne.n	8005d80 <_printf_float+0xf0>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e7ba      	b.n	8005d7e <_printf_float+0xee>
 8005e08:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e0c:	d9dc      	bls.n	8005dc8 <_printf_float+0x138>
 8005e0e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e12:	d118      	bne.n	8005e46 <_printf_float+0x1b6>
 8005e14:	2900      	cmp	r1, #0
 8005e16:	6863      	ldr	r3, [r4, #4]
 8005e18:	dd0b      	ble.n	8005e32 <_printf_float+0x1a2>
 8005e1a:	6121      	str	r1, [r4, #16]
 8005e1c:	b913      	cbnz	r3, 8005e24 <_printf_float+0x194>
 8005e1e:	6822      	ldr	r2, [r4, #0]
 8005e20:	07d0      	lsls	r0, r2, #31
 8005e22:	d502      	bpl.n	8005e2a <_printf_float+0x19a>
 8005e24:	3301      	adds	r3, #1
 8005e26:	440b      	add	r3, r1
 8005e28:	6123      	str	r3, [r4, #16]
 8005e2a:	f04f 0900 	mov.w	r9, #0
 8005e2e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e30:	e7dc      	b.n	8005dec <_printf_float+0x15c>
 8005e32:	b913      	cbnz	r3, 8005e3a <_printf_float+0x1aa>
 8005e34:	6822      	ldr	r2, [r4, #0]
 8005e36:	07d2      	lsls	r2, r2, #31
 8005e38:	d501      	bpl.n	8005e3e <_printf_float+0x1ae>
 8005e3a:	3302      	adds	r3, #2
 8005e3c:	e7f4      	b.n	8005e28 <_printf_float+0x198>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e7f2      	b.n	8005e28 <_printf_float+0x198>
 8005e42:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e48:	4299      	cmp	r1, r3
 8005e4a:	db05      	blt.n	8005e58 <_printf_float+0x1c8>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	6121      	str	r1, [r4, #16]
 8005e50:	07d8      	lsls	r0, r3, #31
 8005e52:	d5ea      	bpl.n	8005e2a <_printf_float+0x19a>
 8005e54:	1c4b      	adds	r3, r1, #1
 8005e56:	e7e7      	b.n	8005e28 <_printf_float+0x198>
 8005e58:	2900      	cmp	r1, #0
 8005e5a:	bfcc      	ite	gt
 8005e5c:	2201      	movgt	r2, #1
 8005e5e:	f1c1 0202 	rsble	r2, r1, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	e7e0      	b.n	8005e28 <_printf_float+0x198>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	055a      	lsls	r2, r3, #21
 8005e6a:	d407      	bmi.n	8005e7c <_printf_float+0x1ec>
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	4642      	mov	r2, r8
 8005e70:	4631      	mov	r1, r6
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b8      	blx	r7
 8005e76:	3001      	adds	r0, #1
 8005e78:	d12b      	bne.n	8005ed2 <_printf_float+0x242>
 8005e7a:	e764      	b.n	8005d46 <_printf_float+0xb6>
 8005e7c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e80:	f240 80dc 	bls.w	800603c <_printf_float+0x3ac>
 8005e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f7fa fd8c 	bl	80009a8 <__aeabi_dcmpeq>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d033      	beq.n	8005efc <_printf_float+0x26c>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	4a35      	ldr	r2, [pc, #212]	@ (8005f70 <_printf_float+0x2e0>)
 8005e9c:	47b8      	blx	r7
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f43f af51 	beq.w	8005d46 <_printf_float+0xb6>
 8005ea4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005ea8:	4543      	cmp	r3, r8
 8005eaa:	db02      	blt.n	8005eb2 <_printf_float+0x222>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	07d8      	lsls	r0, r3, #31
 8005eb0:	d50f      	bpl.n	8005ed2 <_printf_float+0x242>
 8005eb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	f43f af42 	beq.w	8005d46 <_printf_float+0xb6>
 8005ec2:	f04f 0900 	mov.w	r9, #0
 8005ec6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eca:	f104 0a1a 	add.w	sl, r4, #26
 8005ece:	45c8      	cmp	r8, r9
 8005ed0:	dc09      	bgt.n	8005ee6 <_printf_float+0x256>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	079b      	lsls	r3, r3, #30
 8005ed6:	f100 8102 	bmi.w	80060de <_printf_float+0x44e>
 8005eda:	68e0      	ldr	r0, [r4, #12]
 8005edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ede:	4298      	cmp	r0, r3
 8005ee0:	bfb8      	it	lt
 8005ee2:	4618      	movlt	r0, r3
 8005ee4:	e731      	b.n	8005d4a <_printf_float+0xba>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4652      	mov	r2, sl
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b8      	blx	r7
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	f43f af28 	beq.w	8005d46 <_printf_float+0xb6>
 8005ef6:	f109 0901 	add.w	r9, r9, #1
 8005efa:	e7e8      	b.n	8005ece <_printf_float+0x23e>
 8005efc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dc38      	bgt.n	8005f74 <_printf_float+0x2e4>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4631      	mov	r1, r6
 8005f06:	4628      	mov	r0, r5
 8005f08:	4a19      	ldr	r2, [pc, #100]	@ (8005f70 <_printf_float+0x2e0>)
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	f43f af1a 	beq.w	8005d46 <_printf_float+0xb6>
 8005f12:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005f16:	ea59 0303 	orrs.w	r3, r9, r3
 8005f1a:	d102      	bne.n	8005f22 <_printf_float+0x292>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	07d9      	lsls	r1, r3, #31
 8005f20:	d5d7      	bpl.n	8005ed2 <_printf_float+0x242>
 8005f22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f af0a 	beq.w	8005d46 <_printf_float+0xb6>
 8005f32:	f04f 0a00 	mov.w	sl, #0
 8005f36:	f104 0b1a 	add.w	fp, r4, #26
 8005f3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f3c:	425b      	negs	r3, r3
 8005f3e:	4553      	cmp	r3, sl
 8005f40:	dc01      	bgt.n	8005f46 <_printf_float+0x2b6>
 8005f42:	464b      	mov	r3, r9
 8005f44:	e793      	b.n	8005e6e <_printf_float+0x1de>
 8005f46:	2301      	movs	r3, #1
 8005f48:	465a      	mov	r2, fp
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	f43f aef8 	beq.w	8005d46 <_printf_float+0xb6>
 8005f56:	f10a 0a01 	add.w	sl, sl, #1
 8005f5a:	e7ee      	b.n	8005f3a <_printf_float+0x2aa>
 8005f5c:	7fefffff 	.word	0x7fefffff
 8005f60:	080091ba 	.word	0x080091ba
 8005f64:	080091be 	.word	0x080091be
 8005f68:	080091c2 	.word	0x080091c2
 8005f6c:	080091c6 	.word	0x080091c6
 8005f70:	080093f7 	.word	0x080093f7
 8005f74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f76:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f7a:	4553      	cmp	r3, sl
 8005f7c:	bfa8      	it	ge
 8005f7e:	4653      	movge	r3, sl
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	4699      	mov	r9, r3
 8005f84:	dc36      	bgt.n	8005ff4 <_printf_float+0x364>
 8005f86:	f04f 0b00 	mov.w	fp, #0
 8005f8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f8e:	f104 021a 	add.w	r2, r4, #26
 8005f92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f94:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f96:	eba3 0309 	sub.w	r3, r3, r9
 8005f9a:	455b      	cmp	r3, fp
 8005f9c:	dc31      	bgt.n	8006002 <_printf_float+0x372>
 8005f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fa0:	459a      	cmp	sl, r3
 8005fa2:	dc3a      	bgt.n	800601a <_printf_float+0x38a>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	07da      	lsls	r2, r3, #31
 8005fa8:	d437      	bmi.n	800601a <_printf_float+0x38a>
 8005faa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fac:	ebaa 0903 	sub.w	r9, sl, r3
 8005fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fb2:	ebaa 0303 	sub.w	r3, sl, r3
 8005fb6:	4599      	cmp	r9, r3
 8005fb8:	bfa8      	it	ge
 8005fba:	4699      	movge	r9, r3
 8005fbc:	f1b9 0f00 	cmp.w	r9, #0
 8005fc0:	dc33      	bgt.n	800602a <_printf_float+0x39a>
 8005fc2:	f04f 0800 	mov.w	r8, #0
 8005fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fca:	f104 0b1a 	add.w	fp, r4, #26
 8005fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fd0:	ebaa 0303 	sub.w	r3, sl, r3
 8005fd4:	eba3 0309 	sub.w	r3, r3, r9
 8005fd8:	4543      	cmp	r3, r8
 8005fda:	f77f af7a 	ble.w	8005ed2 <_printf_float+0x242>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	465a      	mov	r2, fp
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	47b8      	blx	r7
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f43f aeac 	beq.w	8005d46 <_printf_float+0xb6>
 8005fee:	f108 0801 	add.w	r8, r8, #1
 8005ff2:	e7ec      	b.n	8005fce <_printf_float+0x33e>
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d1c2      	bne.n	8005f86 <_printf_float+0x2f6>
 8006000:	e6a1      	b.n	8005d46 <_printf_float+0xb6>
 8006002:	2301      	movs	r3, #1
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	920a      	str	r2, [sp, #40]	@ 0x28
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	f43f ae9a 	beq.w	8005d46 <_printf_float+0xb6>
 8006012:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006014:	f10b 0b01 	add.w	fp, fp, #1
 8006018:	e7bb      	b.n	8005f92 <_printf_float+0x302>
 800601a:	4631      	mov	r1, r6
 800601c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006020:	4628      	mov	r0, r5
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	d1c0      	bne.n	8005faa <_printf_float+0x31a>
 8006028:	e68d      	b.n	8005d46 <_printf_float+0xb6>
 800602a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800602c:	464b      	mov	r3, r9
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	4442      	add	r2, r8
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	d1c3      	bne.n	8005fc2 <_printf_float+0x332>
 800603a:	e684      	b.n	8005d46 <_printf_float+0xb6>
 800603c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006040:	f1ba 0f01 	cmp.w	sl, #1
 8006044:	dc01      	bgt.n	800604a <_printf_float+0x3ba>
 8006046:	07db      	lsls	r3, r3, #31
 8006048:	d536      	bpl.n	80060b8 <_printf_float+0x428>
 800604a:	2301      	movs	r3, #1
 800604c:	4642      	mov	r2, r8
 800604e:	4631      	mov	r1, r6
 8006050:	4628      	mov	r0, r5
 8006052:	47b8      	blx	r7
 8006054:	3001      	adds	r0, #1
 8006056:	f43f ae76 	beq.w	8005d46 <_printf_float+0xb6>
 800605a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	47b8      	blx	r7
 8006064:	3001      	adds	r0, #1
 8006066:	f43f ae6e 	beq.w	8005d46 <_printf_float+0xb6>
 800606a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800606e:	2200      	movs	r2, #0
 8006070:	2300      	movs	r3, #0
 8006072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006076:	f7fa fc97 	bl	80009a8 <__aeabi_dcmpeq>
 800607a:	b9c0      	cbnz	r0, 80060ae <_printf_float+0x41e>
 800607c:	4653      	mov	r3, sl
 800607e:	f108 0201 	add.w	r2, r8, #1
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	d10c      	bne.n	80060a6 <_printf_float+0x416>
 800608c:	e65b      	b.n	8005d46 <_printf_float+0xb6>
 800608e:	2301      	movs	r3, #1
 8006090:	465a      	mov	r2, fp
 8006092:	4631      	mov	r1, r6
 8006094:	4628      	mov	r0, r5
 8006096:	47b8      	blx	r7
 8006098:	3001      	adds	r0, #1
 800609a:	f43f ae54 	beq.w	8005d46 <_printf_float+0xb6>
 800609e:	f108 0801 	add.w	r8, r8, #1
 80060a2:	45d0      	cmp	r8, sl
 80060a4:	dbf3      	blt.n	800608e <_printf_float+0x3fe>
 80060a6:	464b      	mov	r3, r9
 80060a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060ac:	e6e0      	b.n	8005e70 <_printf_float+0x1e0>
 80060ae:	f04f 0800 	mov.w	r8, #0
 80060b2:	f104 0b1a 	add.w	fp, r4, #26
 80060b6:	e7f4      	b.n	80060a2 <_printf_float+0x412>
 80060b8:	2301      	movs	r3, #1
 80060ba:	4642      	mov	r2, r8
 80060bc:	e7e1      	b.n	8006082 <_printf_float+0x3f2>
 80060be:	2301      	movs	r3, #1
 80060c0:	464a      	mov	r2, r9
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b8      	blx	r7
 80060c8:	3001      	adds	r0, #1
 80060ca:	f43f ae3c 	beq.w	8005d46 <_printf_float+0xb6>
 80060ce:	f108 0801 	add.w	r8, r8, #1
 80060d2:	68e3      	ldr	r3, [r4, #12]
 80060d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80060d6:	1a5b      	subs	r3, r3, r1
 80060d8:	4543      	cmp	r3, r8
 80060da:	dcf0      	bgt.n	80060be <_printf_float+0x42e>
 80060dc:	e6fd      	b.n	8005eda <_printf_float+0x24a>
 80060de:	f04f 0800 	mov.w	r8, #0
 80060e2:	f104 0919 	add.w	r9, r4, #25
 80060e6:	e7f4      	b.n	80060d2 <_printf_float+0x442>

080060e8 <_printf_common>:
 80060e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ec:	4616      	mov	r6, r2
 80060ee:	4698      	mov	r8, r3
 80060f0:	688a      	ldr	r2, [r1, #8]
 80060f2:	690b      	ldr	r3, [r1, #16]
 80060f4:	4607      	mov	r7, r0
 80060f6:	4293      	cmp	r3, r2
 80060f8:	bfb8      	it	lt
 80060fa:	4613      	movlt	r3, r2
 80060fc:	6033      	str	r3, [r6, #0]
 80060fe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006102:	460c      	mov	r4, r1
 8006104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006108:	b10a      	cbz	r2, 800610e <_printf_common+0x26>
 800610a:	3301      	adds	r3, #1
 800610c:	6033      	str	r3, [r6, #0]
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	0699      	lsls	r1, r3, #26
 8006112:	bf42      	ittt	mi
 8006114:	6833      	ldrmi	r3, [r6, #0]
 8006116:	3302      	addmi	r3, #2
 8006118:	6033      	strmi	r3, [r6, #0]
 800611a:	6825      	ldr	r5, [r4, #0]
 800611c:	f015 0506 	ands.w	r5, r5, #6
 8006120:	d106      	bne.n	8006130 <_printf_common+0x48>
 8006122:	f104 0a19 	add.w	sl, r4, #25
 8006126:	68e3      	ldr	r3, [r4, #12]
 8006128:	6832      	ldr	r2, [r6, #0]
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	42ab      	cmp	r3, r5
 800612e:	dc2b      	bgt.n	8006188 <_printf_common+0xa0>
 8006130:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	3b00      	subs	r3, #0
 8006138:	bf18      	it	ne
 800613a:	2301      	movne	r3, #1
 800613c:	0692      	lsls	r2, r2, #26
 800613e:	d430      	bmi.n	80061a2 <_printf_common+0xba>
 8006140:	4641      	mov	r1, r8
 8006142:	4638      	mov	r0, r7
 8006144:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006148:	47c8      	blx	r9
 800614a:	3001      	adds	r0, #1
 800614c:	d023      	beq.n	8006196 <_printf_common+0xae>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	6922      	ldr	r2, [r4, #16]
 8006152:	f003 0306 	and.w	r3, r3, #6
 8006156:	2b04      	cmp	r3, #4
 8006158:	bf14      	ite	ne
 800615a:	2500      	movne	r5, #0
 800615c:	6833      	ldreq	r3, [r6, #0]
 800615e:	f04f 0600 	mov.w	r6, #0
 8006162:	bf08      	it	eq
 8006164:	68e5      	ldreq	r5, [r4, #12]
 8006166:	f104 041a 	add.w	r4, r4, #26
 800616a:	bf08      	it	eq
 800616c:	1aed      	subeq	r5, r5, r3
 800616e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006172:	bf08      	it	eq
 8006174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006178:	4293      	cmp	r3, r2
 800617a:	bfc4      	itt	gt
 800617c:	1a9b      	subgt	r3, r3, r2
 800617e:	18ed      	addgt	r5, r5, r3
 8006180:	42b5      	cmp	r5, r6
 8006182:	d11a      	bne.n	80061ba <_printf_common+0xd2>
 8006184:	2000      	movs	r0, #0
 8006186:	e008      	b.n	800619a <_printf_common+0xb2>
 8006188:	2301      	movs	r3, #1
 800618a:	4652      	mov	r2, sl
 800618c:	4641      	mov	r1, r8
 800618e:	4638      	mov	r0, r7
 8006190:	47c8      	blx	r9
 8006192:	3001      	adds	r0, #1
 8006194:	d103      	bne.n	800619e <_printf_common+0xb6>
 8006196:	f04f 30ff 	mov.w	r0, #4294967295
 800619a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800619e:	3501      	adds	r5, #1
 80061a0:	e7c1      	b.n	8006126 <_printf_common+0x3e>
 80061a2:	2030      	movs	r0, #48	@ 0x30
 80061a4:	18e1      	adds	r1, r4, r3
 80061a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061b0:	4422      	add	r2, r4
 80061b2:	3302      	adds	r3, #2
 80061b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061b8:	e7c2      	b.n	8006140 <_printf_common+0x58>
 80061ba:	2301      	movs	r3, #1
 80061bc:	4622      	mov	r2, r4
 80061be:	4641      	mov	r1, r8
 80061c0:	4638      	mov	r0, r7
 80061c2:	47c8      	blx	r9
 80061c4:	3001      	adds	r0, #1
 80061c6:	d0e6      	beq.n	8006196 <_printf_common+0xae>
 80061c8:	3601      	adds	r6, #1
 80061ca:	e7d9      	b.n	8006180 <_printf_common+0x98>

080061cc <_printf_i>:
 80061cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d0:	7e0f      	ldrb	r7, [r1, #24]
 80061d2:	4691      	mov	r9, r2
 80061d4:	2f78      	cmp	r7, #120	@ 0x78
 80061d6:	4680      	mov	r8, r0
 80061d8:	460c      	mov	r4, r1
 80061da:	469a      	mov	sl, r3
 80061dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061e2:	d807      	bhi.n	80061f4 <_printf_i+0x28>
 80061e4:	2f62      	cmp	r7, #98	@ 0x62
 80061e6:	d80a      	bhi.n	80061fe <_printf_i+0x32>
 80061e8:	2f00      	cmp	r7, #0
 80061ea:	f000 80d3 	beq.w	8006394 <_printf_i+0x1c8>
 80061ee:	2f58      	cmp	r7, #88	@ 0x58
 80061f0:	f000 80ba 	beq.w	8006368 <_printf_i+0x19c>
 80061f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061fc:	e03a      	b.n	8006274 <_printf_i+0xa8>
 80061fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006202:	2b15      	cmp	r3, #21
 8006204:	d8f6      	bhi.n	80061f4 <_printf_i+0x28>
 8006206:	a101      	add	r1, pc, #4	@ (adr r1, 800620c <_printf_i+0x40>)
 8006208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800620c:	08006265 	.word	0x08006265
 8006210:	08006279 	.word	0x08006279
 8006214:	080061f5 	.word	0x080061f5
 8006218:	080061f5 	.word	0x080061f5
 800621c:	080061f5 	.word	0x080061f5
 8006220:	080061f5 	.word	0x080061f5
 8006224:	08006279 	.word	0x08006279
 8006228:	080061f5 	.word	0x080061f5
 800622c:	080061f5 	.word	0x080061f5
 8006230:	080061f5 	.word	0x080061f5
 8006234:	080061f5 	.word	0x080061f5
 8006238:	0800637b 	.word	0x0800637b
 800623c:	080062a3 	.word	0x080062a3
 8006240:	08006335 	.word	0x08006335
 8006244:	080061f5 	.word	0x080061f5
 8006248:	080061f5 	.word	0x080061f5
 800624c:	0800639d 	.word	0x0800639d
 8006250:	080061f5 	.word	0x080061f5
 8006254:	080062a3 	.word	0x080062a3
 8006258:	080061f5 	.word	0x080061f5
 800625c:	080061f5 	.word	0x080061f5
 8006260:	0800633d 	.word	0x0800633d
 8006264:	6833      	ldr	r3, [r6, #0]
 8006266:	1d1a      	adds	r2, r3, #4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6032      	str	r2, [r6, #0]
 800626c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006270:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006274:	2301      	movs	r3, #1
 8006276:	e09e      	b.n	80063b6 <_printf_i+0x1ea>
 8006278:	6833      	ldr	r3, [r6, #0]
 800627a:	6820      	ldr	r0, [r4, #0]
 800627c:	1d19      	adds	r1, r3, #4
 800627e:	6031      	str	r1, [r6, #0]
 8006280:	0606      	lsls	r6, r0, #24
 8006282:	d501      	bpl.n	8006288 <_printf_i+0xbc>
 8006284:	681d      	ldr	r5, [r3, #0]
 8006286:	e003      	b.n	8006290 <_printf_i+0xc4>
 8006288:	0645      	lsls	r5, r0, #25
 800628a:	d5fb      	bpl.n	8006284 <_printf_i+0xb8>
 800628c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006290:	2d00      	cmp	r5, #0
 8006292:	da03      	bge.n	800629c <_printf_i+0xd0>
 8006294:	232d      	movs	r3, #45	@ 0x2d
 8006296:	426d      	negs	r5, r5
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800629c:	230a      	movs	r3, #10
 800629e:	4859      	ldr	r0, [pc, #356]	@ (8006404 <_printf_i+0x238>)
 80062a0:	e011      	b.n	80062c6 <_printf_i+0xfa>
 80062a2:	6821      	ldr	r1, [r4, #0]
 80062a4:	6833      	ldr	r3, [r6, #0]
 80062a6:	0608      	lsls	r0, r1, #24
 80062a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80062ac:	d402      	bmi.n	80062b4 <_printf_i+0xe8>
 80062ae:	0649      	lsls	r1, r1, #25
 80062b0:	bf48      	it	mi
 80062b2:	b2ad      	uxthmi	r5, r5
 80062b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80062b6:	6033      	str	r3, [r6, #0]
 80062b8:	bf14      	ite	ne
 80062ba:	230a      	movne	r3, #10
 80062bc:	2308      	moveq	r3, #8
 80062be:	4851      	ldr	r0, [pc, #324]	@ (8006404 <_printf_i+0x238>)
 80062c0:	2100      	movs	r1, #0
 80062c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062c6:	6866      	ldr	r6, [r4, #4]
 80062c8:	2e00      	cmp	r6, #0
 80062ca:	bfa8      	it	ge
 80062cc:	6821      	ldrge	r1, [r4, #0]
 80062ce:	60a6      	str	r6, [r4, #8]
 80062d0:	bfa4      	itt	ge
 80062d2:	f021 0104 	bicge.w	r1, r1, #4
 80062d6:	6021      	strge	r1, [r4, #0]
 80062d8:	b90d      	cbnz	r5, 80062de <_printf_i+0x112>
 80062da:	2e00      	cmp	r6, #0
 80062dc:	d04b      	beq.n	8006376 <_printf_i+0x1aa>
 80062de:	4616      	mov	r6, r2
 80062e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80062e4:	fb03 5711 	mls	r7, r3, r1, r5
 80062e8:	5dc7      	ldrb	r7, [r0, r7]
 80062ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062ee:	462f      	mov	r7, r5
 80062f0:	42bb      	cmp	r3, r7
 80062f2:	460d      	mov	r5, r1
 80062f4:	d9f4      	bls.n	80062e0 <_printf_i+0x114>
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d10b      	bne.n	8006312 <_printf_i+0x146>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	07df      	lsls	r7, r3, #31
 80062fe:	d508      	bpl.n	8006312 <_printf_i+0x146>
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	6861      	ldr	r1, [r4, #4]
 8006304:	4299      	cmp	r1, r3
 8006306:	bfde      	ittt	le
 8006308:	2330      	movle	r3, #48	@ 0x30
 800630a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800630e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006312:	1b92      	subs	r2, r2, r6
 8006314:	6122      	str	r2, [r4, #16]
 8006316:	464b      	mov	r3, r9
 8006318:	4621      	mov	r1, r4
 800631a:	4640      	mov	r0, r8
 800631c:	f8cd a000 	str.w	sl, [sp]
 8006320:	aa03      	add	r2, sp, #12
 8006322:	f7ff fee1 	bl	80060e8 <_printf_common>
 8006326:	3001      	adds	r0, #1
 8006328:	d14a      	bne.n	80063c0 <_printf_i+0x1f4>
 800632a:	f04f 30ff 	mov.w	r0, #4294967295
 800632e:	b004      	add	sp, #16
 8006330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	f043 0320 	orr.w	r3, r3, #32
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	2778      	movs	r7, #120	@ 0x78
 800633e:	4832      	ldr	r0, [pc, #200]	@ (8006408 <_printf_i+0x23c>)
 8006340:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	6831      	ldr	r1, [r6, #0]
 8006348:	061f      	lsls	r7, r3, #24
 800634a:	f851 5b04 	ldr.w	r5, [r1], #4
 800634e:	d402      	bmi.n	8006356 <_printf_i+0x18a>
 8006350:	065f      	lsls	r7, r3, #25
 8006352:	bf48      	it	mi
 8006354:	b2ad      	uxthmi	r5, r5
 8006356:	6031      	str	r1, [r6, #0]
 8006358:	07d9      	lsls	r1, r3, #31
 800635a:	bf44      	itt	mi
 800635c:	f043 0320 	orrmi.w	r3, r3, #32
 8006360:	6023      	strmi	r3, [r4, #0]
 8006362:	b11d      	cbz	r5, 800636c <_printf_i+0x1a0>
 8006364:	2310      	movs	r3, #16
 8006366:	e7ab      	b.n	80062c0 <_printf_i+0xf4>
 8006368:	4826      	ldr	r0, [pc, #152]	@ (8006404 <_printf_i+0x238>)
 800636a:	e7e9      	b.n	8006340 <_printf_i+0x174>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	f023 0320 	bic.w	r3, r3, #32
 8006372:	6023      	str	r3, [r4, #0]
 8006374:	e7f6      	b.n	8006364 <_printf_i+0x198>
 8006376:	4616      	mov	r6, r2
 8006378:	e7bd      	b.n	80062f6 <_printf_i+0x12a>
 800637a:	6833      	ldr	r3, [r6, #0]
 800637c:	6825      	ldr	r5, [r4, #0]
 800637e:	1d18      	adds	r0, r3, #4
 8006380:	6961      	ldr	r1, [r4, #20]
 8006382:	6030      	str	r0, [r6, #0]
 8006384:	062e      	lsls	r6, r5, #24
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	d501      	bpl.n	800638e <_printf_i+0x1c2>
 800638a:	6019      	str	r1, [r3, #0]
 800638c:	e002      	b.n	8006394 <_printf_i+0x1c8>
 800638e:	0668      	lsls	r0, r5, #25
 8006390:	d5fb      	bpl.n	800638a <_printf_i+0x1be>
 8006392:	8019      	strh	r1, [r3, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	4616      	mov	r6, r2
 8006398:	6123      	str	r3, [r4, #16]
 800639a:	e7bc      	b.n	8006316 <_printf_i+0x14a>
 800639c:	6833      	ldr	r3, [r6, #0]
 800639e:	2100      	movs	r1, #0
 80063a0:	1d1a      	adds	r2, r3, #4
 80063a2:	6032      	str	r2, [r6, #0]
 80063a4:	681e      	ldr	r6, [r3, #0]
 80063a6:	6862      	ldr	r2, [r4, #4]
 80063a8:	4630      	mov	r0, r6
 80063aa:	f000 fa00 	bl	80067ae <memchr>
 80063ae:	b108      	cbz	r0, 80063b4 <_printf_i+0x1e8>
 80063b0:	1b80      	subs	r0, r0, r6
 80063b2:	6060      	str	r0, [r4, #4]
 80063b4:	6863      	ldr	r3, [r4, #4]
 80063b6:	6123      	str	r3, [r4, #16]
 80063b8:	2300      	movs	r3, #0
 80063ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063be:	e7aa      	b.n	8006316 <_printf_i+0x14a>
 80063c0:	4632      	mov	r2, r6
 80063c2:	4649      	mov	r1, r9
 80063c4:	4640      	mov	r0, r8
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	47d0      	blx	sl
 80063ca:	3001      	adds	r0, #1
 80063cc:	d0ad      	beq.n	800632a <_printf_i+0x15e>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	079b      	lsls	r3, r3, #30
 80063d2:	d413      	bmi.n	80063fc <_printf_i+0x230>
 80063d4:	68e0      	ldr	r0, [r4, #12]
 80063d6:	9b03      	ldr	r3, [sp, #12]
 80063d8:	4298      	cmp	r0, r3
 80063da:	bfb8      	it	lt
 80063dc:	4618      	movlt	r0, r3
 80063de:	e7a6      	b.n	800632e <_printf_i+0x162>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4632      	mov	r2, r6
 80063e4:	4649      	mov	r1, r9
 80063e6:	4640      	mov	r0, r8
 80063e8:	47d0      	blx	sl
 80063ea:	3001      	adds	r0, #1
 80063ec:	d09d      	beq.n	800632a <_printf_i+0x15e>
 80063ee:	3501      	adds	r5, #1
 80063f0:	68e3      	ldr	r3, [r4, #12]
 80063f2:	9903      	ldr	r1, [sp, #12]
 80063f4:	1a5b      	subs	r3, r3, r1
 80063f6:	42ab      	cmp	r3, r5
 80063f8:	dcf2      	bgt.n	80063e0 <_printf_i+0x214>
 80063fa:	e7eb      	b.n	80063d4 <_printf_i+0x208>
 80063fc:	2500      	movs	r5, #0
 80063fe:	f104 0619 	add.w	r6, r4, #25
 8006402:	e7f5      	b.n	80063f0 <_printf_i+0x224>
 8006404:	080091ca 	.word	0x080091ca
 8006408:	080091db 	.word	0x080091db

0800640c <std>:
 800640c:	2300      	movs	r3, #0
 800640e:	b510      	push	{r4, lr}
 8006410:	4604      	mov	r4, r0
 8006412:	e9c0 3300 	strd	r3, r3, [r0]
 8006416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800641a:	6083      	str	r3, [r0, #8]
 800641c:	8181      	strh	r1, [r0, #12]
 800641e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006420:	81c2      	strh	r2, [r0, #14]
 8006422:	6183      	str	r3, [r0, #24]
 8006424:	4619      	mov	r1, r3
 8006426:	2208      	movs	r2, #8
 8006428:	305c      	adds	r0, #92	@ 0x5c
 800642a:	f000 f940 	bl	80066ae <memset>
 800642e:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <std+0x58>)
 8006430:	6224      	str	r4, [r4, #32]
 8006432:	6263      	str	r3, [r4, #36]	@ 0x24
 8006434:	4b0c      	ldr	r3, [pc, #48]	@ (8006468 <std+0x5c>)
 8006436:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006438:	4b0c      	ldr	r3, [pc, #48]	@ (800646c <std+0x60>)
 800643a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800643c:	4b0c      	ldr	r3, [pc, #48]	@ (8006470 <std+0x64>)
 800643e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006440:	4b0c      	ldr	r3, [pc, #48]	@ (8006474 <std+0x68>)
 8006442:	429c      	cmp	r4, r3
 8006444:	d006      	beq.n	8006454 <std+0x48>
 8006446:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800644a:	4294      	cmp	r4, r2
 800644c:	d002      	beq.n	8006454 <std+0x48>
 800644e:	33d0      	adds	r3, #208	@ 0xd0
 8006450:	429c      	cmp	r4, r3
 8006452:	d105      	bne.n	8006460 <std+0x54>
 8006454:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800645c:	f000 b9a4 	b.w	80067a8 <__retarget_lock_init_recursive>
 8006460:	bd10      	pop	{r4, pc}
 8006462:	bf00      	nop
 8006464:	08006625 	.word	0x08006625
 8006468:	0800664b 	.word	0x0800664b
 800646c:	08006683 	.word	0x08006683
 8006470:	080066a7 	.word	0x080066a7
 8006474:	20000834 	.word	0x20000834

08006478 <stdio_exit_handler>:
 8006478:	4a02      	ldr	r2, [pc, #8]	@ (8006484 <stdio_exit_handler+0xc>)
 800647a:	4903      	ldr	r1, [pc, #12]	@ (8006488 <stdio_exit_handler+0x10>)
 800647c:	4803      	ldr	r0, [pc, #12]	@ (800648c <stdio_exit_handler+0x14>)
 800647e:	f000 b869 	b.w	8006554 <_fwalk_sglue>
 8006482:	bf00      	nop
 8006484:	20000014 	.word	0x20000014
 8006488:	08008761 	.word	0x08008761
 800648c:	20000024 	.word	0x20000024

08006490 <cleanup_stdio>:
 8006490:	6841      	ldr	r1, [r0, #4]
 8006492:	4b0c      	ldr	r3, [pc, #48]	@ (80064c4 <cleanup_stdio+0x34>)
 8006494:	b510      	push	{r4, lr}
 8006496:	4299      	cmp	r1, r3
 8006498:	4604      	mov	r4, r0
 800649a:	d001      	beq.n	80064a0 <cleanup_stdio+0x10>
 800649c:	f002 f960 	bl	8008760 <_fflush_r>
 80064a0:	68a1      	ldr	r1, [r4, #8]
 80064a2:	4b09      	ldr	r3, [pc, #36]	@ (80064c8 <cleanup_stdio+0x38>)
 80064a4:	4299      	cmp	r1, r3
 80064a6:	d002      	beq.n	80064ae <cleanup_stdio+0x1e>
 80064a8:	4620      	mov	r0, r4
 80064aa:	f002 f959 	bl	8008760 <_fflush_r>
 80064ae:	68e1      	ldr	r1, [r4, #12]
 80064b0:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <cleanup_stdio+0x3c>)
 80064b2:	4299      	cmp	r1, r3
 80064b4:	d004      	beq.n	80064c0 <cleanup_stdio+0x30>
 80064b6:	4620      	mov	r0, r4
 80064b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064bc:	f002 b950 	b.w	8008760 <_fflush_r>
 80064c0:	bd10      	pop	{r4, pc}
 80064c2:	bf00      	nop
 80064c4:	20000834 	.word	0x20000834
 80064c8:	2000089c 	.word	0x2000089c
 80064cc:	20000904 	.word	0x20000904

080064d0 <global_stdio_init.part.0>:
 80064d0:	b510      	push	{r4, lr}
 80064d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <global_stdio_init.part.0+0x30>)
 80064d4:	4c0b      	ldr	r4, [pc, #44]	@ (8006504 <global_stdio_init.part.0+0x34>)
 80064d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006508 <global_stdio_init.part.0+0x38>)
 80064d8:	4620      	mov	r0, r4
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	2104      	movs	r1, #4
 80064de:	2200      	movs	r2, #0
 80064e0:	f7ff ff94 	bl	800640c <std>
 80064e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064e8:	2201      	movs	r2, #1
 80064ea:	2109      	movs	r1, #9
 80064ec:	f7ff ff8e 	bl	800640c <std>
 80064f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064f4:	2202      	movs	r2, #2
 80064f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fa:	2112      	movs	r1, #18
 80064fc:	f7ff bf86 	b.w	800640c <std>
 8006500:	2000096c 	.word	0x2000096c
 8006504:	20000834 	.word	0x20000834
 8006508:	08006479 	.word	0x08006479

0800650c <__sfp_lock_acquire>:
 800650c:	4801      	ldr	r0, [pc, #4]	@ (8006514 <__sfp_lock_acquire+0x8>)
 800650e:	f000 b94c 	b.w	80067aa <__retarget_lock_acquire_recursive>
 8006512:	bf00      	nop
 8006514:	20000975 	.word	0x20000975

08006518 <__sfp_lock_release>:
 8006518:	4801      	ldr	r0, [pc, #4]	@ (8006520 <__sfp_lock_release+0x8>)
 800651a:	f000 b947 	b.w	80067ac <__retarget_lock_release_recursive>
 800651e:	bf00      	nop
 8006520:	20000975 	.word	0x20000975

08006524 <__sinit>:
 8006524:	b510      	push	{r4, lr}
 8006526:	4604      	mov	r4, r0
 8006528:	f7ff fff0 	bl	800650c <__sfp_lock_acquire>
 800652c:	6a23      	ldr	r3, [r4, #32]
 800652e:	b11b      	cbz	r3, 8006538 <__sinit+0x14>
 8006530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006534:	f7ff bff0 	b.w	8006518 <__sfp_lock_release>
 8006538:	4b04      	ldr	r3, [pc, #16]	@ (800654c <__sinit+0x28>)
 800653a:	6223      	str	r3, [r4, #32]
 800653c:	4b04      	ldr	r3, [pc, #16]	@ (8006550 <__sinit+0x2c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1f5      	bne.n	8006530 <__sinit+0xc>
 8006544:	f7ff ffc4 	bl	80064d0 <global_stdio_init.part.0>
 8006548:	e7f2      	b.n	8006530 <__sinit+0xc>
 800654a:	bf00      	nop
 800654c:	08006491 	.word	0x08006491
 8006550:	2000096c 	.word	0x2000096c

08006554 <_fwalk_sglue>:
 8006554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006558:	4607      	mov	r7, r0
 800655a:	4688      	mov	r8, r1
 800655c:	4614      	mov	r4, r2
 800655e:	2600      	movs	r6, #0
 8006560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006564:	f1b9 0901 	subs.w	r9, r9, #1
 8006568:	d505      	bpl.n	8006576 <_fwalk_sglue+0x22>
 800656a:	6824      	ldr	r4, [r4, #0]
 800656c:	2c00      	cmp	r4, #0
 800656e:	d1f7      	bne.n	8006560 <_fwalk_sglue+0xc>
 8006570:	4630      	mov	r0, r6
 8006572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006576:	89ab      	ldrh	r3, [r5, #12]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d907      	bls.n	800658c <_fwalk_sglue+0x38>
 800657c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006580:	3301      	adds	r3, #1
 8006582:	d003      	beq.n	800658c <_fwalk_sglue+0x38>
 8006584:	4629      	mov	r1, r5
 8006586:	4638      	mov	r0, r7
 8006588:	47c0      	blx	r8
 800658a:	4306      	orrs	r6, r0
 800658c:	3568      	adds	r5, #104	@ 0x68
 800658e:	e7e9      	b.n	8006564 <_fwalk_sglue+0x10>

08006590 <siprintf>:
 8006590:	b40e      	push	{r1, r2, r3}
 8006592:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006596:	b500      	push	{lr}
 8006598:	b09c      	sub	sp, #112	@ 0x70
 800659a:	ab1d      	add	r3, sp, #116	@ 0x74
 800659c:	9002      	str	r0, [sp, #8]
 800659e:	9006      	str	r0, [sp, #24]
 80065a0:	9107      	str	r1, [sp, #28]
 80065a2:	9104      	str	r1, [sp, #16]
 80065a4:	4808      	ldr	r0, [pc, #32]	@ (80065c8 <siprintf+0x38>)
 80065a6:	4909      	ldr	r1, [pc, #36]	@ (80065cc <siprintf+0x3c>)
 80065a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ac:	9105      	str	r1, [sp, #20]
 80065ae:	6800      	ldr	r0, [r0, #0]
 80065b0:	a902      	add	r1, sp, #8
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	f001 fc42 	bl	8007e3c <_svfiprintf_r>
 80065b8:	2200      	movs	r2, #0
 80065ba:	9b02      	ldr	r3, [sp, #8]
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	b01c      	add	sp, #112	@ 0x70
 80065c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c4:	b003      	add	sp, #12
 80065c6:	4770      	bx	lr
 80065c8:	20000020 	.word	0x20000020
 80065cc:	ffff0208 	.word	0xffff0208

080065d0 <siscanf>:
 80065d0:	b40e      	push	{r1, r2, r3}
 80065d2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80065d6:	b530      	push	{r4, r5, lr}
 80065d8:	b09c      	sub	sp, #112	@ 0x70
 80065da:	ac1f      	add	r4, sp, #124	@ 0x7c
 80065dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80065e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80065e4:	9002      	str	r0, [sp, #8]
 80065e6:	9006      	str	r0, [sp, #24]
 80065e8:	f7f9 fdb2 	bl	8000150 <strlen>
 80065ec:	4b0b      	ldr	r3, [pc, #44]	@ (800661c <siscanf+0x4c>)
 80065ee:	9003      	str	r0, [sp, #12]
 80065f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065f2:	2300      	movs	r3, #0
 80065f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80065f6:	9314      	str	r3, [sp, #80]	@ 0x50
 80065f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065fc:	9007      	str	r0, [sp, #28]
 80065fe:	4808      	ldr	r0, [pc, #32]	@ (8006620 <siscanf+0x50>)
 8006600:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006604:	462a      	mov	r2, r5
 8006606:	4623      	mov	r3, r4
 8006608:	a902      	add	r1, sp, #8
 800660a:	6800      	ldr	r0, [r0, #0]
 800660c:	9401      	str	r4, [sp, #4]
 800660e:	f001 fd69 	bl	80080e4 <__ssvfiscanf_r>
 8006612:	b01c      	add	sp, #112	@ 0x70
 8006614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006618:	b003      	add	sp, #12
 800661a:	4770      	bx	lr
 800661c:	08006647 	.word	0x08006647
 8006620:	20000020 	.word	0x20000020

08006624 <__sread>:
 8006624:	b510      	push	{r4, lr}
 8006626:	460c      	mov	r4, r1
 8006628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662c:	f000 f86e 	bl	800670c <_read_r>
 8006630:	2800      	cmp	r0, #0
 8006632:	bfab      	itete	ge
 8006634:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006636:	89a3      	ldrhlt	r3, [r4, #12]
 8006638:	181b      	addge	r3, r3, r0
 800663a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800663e:	bfac      	ite	ge
 8006640:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006642:	81a3      	strhlt	r3, [r4, #12]
 8006644:	bd10      	pop	{r4, pc}

08006646 <__seofread>:
 8006646:	2000      	movs	r0, #0
 8006648:	4770      	bx	lr

0800664a <__swrite>:
 800664a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	461f      	mov	r7, r3
 8006650:	898b      	ldrh	r3, [r1, #12]
 8006652:	4605      	mov	r5, r0
 8006654:	05db      	lsls	r3, r3, #23
 8006656:	460c      	mov	r4, r1
 8006658:	4616      	mov	r6, r2
 800665a:	d505      	bpl.n	8006668 <__swrite+0x1e>
 800665c:	2302      	movs	r3, #2
 800665e:	2200      	movs	r2, #0
 8006660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006664:	f000 f840 	bl	80066e8 <_lseek_r>
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	4632      	mov	r2, r6
 800666c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	4628      	mov	r0, r5
 8006674:	463b      	mov	r3, r7
 8006676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800667a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667e:	f000 b857 	b.w	8006730 <_write_r>

08006682 <__sseek>:
 8006682:	b510      	push	{r4, lr}
 8006684:	460c      	mov	r4, r1
 8006686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668a:	f000 f82d 	bl	80066e8 <_lseek_r>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	bf15      	itete	ne
 8006694:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800669a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800669e:	81a3      	strheq	r3, [r4, #12]
 80066a0:	bf18      	it	ne
 80066a2:	81a3      	strhne	r3, [r4, #12]
 80066a4:	bd10      	pop	{r4, pc}

080066a6 <__sclose>:
 80066a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066aa:	f000 b80d 	b.w	80066c8 <_close_r>

080066ae <memset>:
 80066ae:	4603      	mov	r3, r0
 80066b0:	4402      	add	r2, r0
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d100      	bne.n	80066b8 <memset+0xa>
 80066b6:	4770      	bx	lr
 80066b8:	f803 1b01 	strb.w	r1, [r3], #1
 80066bc:	e7f9      	b.n	80066b2 <memset+0x4>
	...

080066c0 <_localeconv_r>:
 80066c0:	4800      	ldr	r0, [pc, #0]	@ (80066c4 <_localeconv_r+0x4>)
 80066c2:	4770      	bx	lr
 80066c4:	20000160 	.word	0x20000160

080066c8 <_close_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	2300      	movs	r3, #0
 80066cc:	4d05      	ldr	r5, [pc, #20]	@ (80066e4 <_close_r+0x1c>)
 80066ce:	4604      	mov	r4, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	602b      	str	r3, [r5, #0]
 80066d4:	f7fc f8ee 	bl	80028b4 <_close>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_close_r+0x1a>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_close_r+0x1a>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20000970 	.word	0x20000970

080066e8 <_lseek_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4604      	mov	r4, r0
 80066ec:	4608      	mov	r0, r1
 80066ee:	4611      	mov	r1, r2
 80066f0:	2200      	movs	r2, #0
 80066f2:	4d05      	ldr	r5, [pc, #20]	@ (8006708 <_lseek_r+0x20>)
 80066f4:	602a      	str	r2, [r5, #0]
 80066f6:	461a      	mov	r2, r3
 80066f8:	f7fc f900 	bl	80028fc <_lseek>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_lseek_r+0x1e>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_lseek_r+0x1e>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	20000970 	.word	0x20000970

0800670c <_read_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4604      	mov	r4, r0
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	2200      	movs	r2, #0
 8006716:	4d05      	ldr	r5, [pc, #20]	@ (800672c <_read_r+0x20>)
 8006718:	602a      	str	r2, [r5, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	f7fc f891 	bl	8002842 <_read>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_read_r+0x1e>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	b103      	cbz	r3, 800672a <_read_r+0x1e>
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	20000970 	.word	0x20000970

08006730 <_write_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	2200      	movs	r2, #0
 800673a:	4d05      	ldr	r5, [pc, #20]	@ (8006750 <_write_r+0x20>)
 800673c:	602a      	str	r2, [r5, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f7fc f89c 	bl	800287c <_write>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_write_r+0x1e>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_write_r+0x1e>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	20000970 	.word	0x20000970

08006754 <__errno>:
 8006754:	4b01      	ldr	r3, [pc, #4]	@ (800675c <__errno+0x8>)
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000020 	.word	0x20000020

08006760 <__libc_init_array>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	2600      	movs	r6, #0
 8006764:	4d0c      	ldr	r5, [pc, #48]	@ (8006798 <__libc_init_array+0x38>)
 8006766:	4c0d      	ldr	r4, [pc, #52]	@ (800679c <__libc_init_array+0x3c>)
 8006768:	1b64      	subs	r4, r4, r5
 800676a:	10a4      	asrs	r4, r4, #2
 800676c:	42a6      	cmp	r6, r4
 800676e:	d109      	bne.n	8006784 <__libc_init_array+0x24>
 8006770:	f002 fce2 	bl	8009138 <_init>
 8006774:	2600      	movs	r6, #0
 8006776:	4d0a      	ldr	r5, [pc, #40]	@ (80067a0 <__libc_init_array+0x40>)
 8006778:	4c0a      	ldr	r4, [pc, #40]	@ (80067a4 <__libc_init_array+0x44>)
 800677a:	1b64      	subs	r4, r4, r5
 800677c:	10a4      	asrs	r4, r4, #2
 800677e:	42a6      	cmp	r6, r4
 8006780:	d105      	bne.n	800678e <__libc_init_array+0x2e>
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	f855 3b04 	ldr.w	r3, [r5], #4
 8006788:	4798      	blx	r3
 800678a:	3601      	adds	r6, #1
 800678c:	e7ee      	b.n	800676c <__libc_init_array+0xc>
 800678e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006792:	4798      	blx	r3
 8006794:	3601      	adds	r6, #1
 8006796:	e7f2      	b.n	800677e <__libc_init_array+0x1e>
 8006798:	0800954c 	.word	0x0800954c
 800679c:	0800954c 	.word	0x0800954c
 80067a0:	0800954c 	.word	0x0800954c
 80067a4:	08009550 	.word	0x08009550

080067a8 <__retarget_lock_init_recursive>:
 80067a8:	4770      	bx	lr

080067aa <__retarget_lock_acquire_recursive>:
 80067aa:	4770      	bx	lr

080067ac <__retarget_lock_release_recursive>:
 80067ac:	4770      	bx	lr

080067ae <memchr>:
 80067ae:	4603      	mov	r3, r0
 80067b0:	b510      	push	{r4, lr}
 80067b2:	b2c9      	uxtb	r1, r1
 80067b4:	4402      	add	r2, r0
 80067b6:	4293      	cmp	r3, r2
 80067b8:	4618      	mov	r0, r3
 80067ba:	d101      	bne.n	80067c0 <memchr+0x12>
 80067bc:	2000      	movs	r0, #0
 80067be:	e003      	b.n	80067c8 <memchr+0x1a>
 80067c0:	7804      	ldrb	r4, [r0, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	428c      	cmp	r4, r1
 80067c6:	d1f6      	bne.n	80067b6 <memchr+0x8>
 80067c8:	bd10      	pop	{r4, pc}

080067ca <memcpy>:
 80067ca:	440a      	add	r2, r1
 80067cc:	4291      	cmp	r1, r2
 80067ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80067d2:	d100      	bne.n	80067d6 <memcpy+0xc>
 80067d4:	4770      	bx	lr
 80067d6:	b510      	push	{r4, lr}
 80067d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067dc:	4291      	cmp	r1, r2
 80067de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067e2:	d1f9      	bne.n	80067d8 <memcpy+0xe>
 80067e4:	bd10      	pop	{r4, pc}

080067e6 <quorem>:
 80067e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	6903      	ldr	r3, [r0, #16]
 80067ec:	690c      	ldr	r4, [r1, #16]
 80067ee:	4607      	mov	r7, r0
 80067f0:	42a3      	cmp	r3, r4
 80067f2:	db7e      	blt.n	80068f2 <quorem+0x10c>
 80067f4:	3c01      	subs	r4, #1
 80067f6:	00a3      	lsls	r3, r4, #2
 80067f8:	f100 0514 	add.w	r5, r0, #20
 80067fc:	f101 0814 	add.w	r8, r1, #20
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800680c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006810:	3301      	adds	r3, #1
 8006812:	429a      	cmp	r2, r3
 8006814:	fbb2 f6f3 	udiv	r6, r2, r3
 8006818:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800681c:	d32e      	bcc.n	800687c <quorem+0x96>
 800681e:	f04f 0a00 	mov.w	sl, #0
 8006822:	46c4      	mov	ip, r8
 8006824:	46ae      	mov	lr, r5
 8006826:	46d3      	mov	fp, sl
 8006828:	f85c 3b04 	ldr.w	r3, [ip], #4
 800682c:	b298      	uxth	r0, r3
 800682e:	fb06 a000 	mla	r0, r6, r0, sl
 8006832:	0c1b      	lsrs	r3, r3, #16
 8006834:	0c02      	lsrs	r2, r0, #16
 8006836:	fb06 2303 	mla	r3, r6, r3, r2
 800683a:	f8de 2000 	ldr.w	r2, [lr]
 800683e:	b280      	uxth	r0, r0
 8006840:	b292      	uxth	r2, r2
 8006842:	1a12      	subs	r2, r2, r0
 8006844:	445a      	add	r2, fp
 8006846:	f8de 0000 	ldr.w	r0, [lr]
 800684a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800684e:	b29b      	uxth	r3, r3
 8006850:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006854:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006858:	b292      	uxth	r2, r2
 800685a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800685e:	45e1      	cmp	r9, ip
 8006860:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006864:	f84e 2b04 	str.w	r2, [lr], #4
 8006868:	d2de      	bcs.n	8006828 <quorem+0x42>
 800686a:	9b00      	ldr	r3, [sp, #0]
 800686c:	58eb      	ldr	r3, [r5, r3]
 800686e:	b92b      	cbnz	r3, 800687c <quorem+0x96>
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	3b04      	subs	r3, #4
 8006874:	429d      	cmp	r5, r3
 8006876:	461a      	mov	r2, r3
 8006878:	d32f      	bcc.n	80068da <quorem+0xf4>
 800687a:	613c      	str	r4, [r7, #16]
 800687c:	4638      	mov	r0, r7
 800687e:	f001 f979 	bl	8007b74 <__mcmp>
 8006882:	2800      	cmp	r0, #0
 8006884:	db25      	blt.n	80068d2 <quorem+0xec>
 8006886:	4629      	mov	r1, r5
 8006888:	2000      	movs	r0, #0
 800688a:	f858 2b04 	ldr.w	r2, [r8], #4
 800688e:	f8d1 c000 	ldr.w	ip, [r1]
 8006892:	fa1f fe82 	uxth.w	lr, r2
 8006896:	fa1f f38c 	uxth.w	r3, ip
 800689a:	eba3 030e 	sub.w	r3, r3, lr
 800689e:	4403      	add	r3, r0
 80068a0:	0c12      	lsrs	r2, r2, #16
 80068a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b0:	45c1      	cmp	r9, r8
 80068b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068b6:	f841 3b04 	str.w	r3, [r1], #4
 80068ba:	d2e6      	bcs.n	800688a <quorem+0xa4>
 80068bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068c4:	b922      	cbnz	r2, 80068d0 <quorem+0xea>
 80068c6:	3b04      	subs	r3, #4
 80068c8:	429d      	cmp	r5, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	d30b      	bcc.n	80068e6 <quorem+0x100>
 80068ce:	613c      	str	r4, [r7, #16]
 80068d0:	3601      	adds	r6, #1
 80068d2:	4630      	mov	r0, r6
 80068d4:	b003      	add	sp, #12
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	3b04      	subs	r3, #4
 80068de:	2a00      	cmp	r2, #0
 80068e0:	d1cb      	bne.n	800687a <quorem+0x94>
 80068e2:	3c01      	subs	r4, #1
 80068e4:	e7c6      	b.n	8006874 <quorem+0x8e>
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	3b04      	subs	r3, #4
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	d1ef      	bne.n	80068ce <quorem+0xe8>
 80068ee:	3c01      	subs	r4, #1
 80068f0:	e7ea      	b.n	80068c8 <quorem+0xe2>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e7ee      	b.n	80068d4 <quorem+0xee>
	...

080068f8 <_dtoa_r>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	4614      	mov	r4, r2
 80068fe:	461d      	mov	r5, r3
 8006900:	69c7      	ldr	r7, [r0, #28]
 8006902:	b097      	sub	sp, #92	@ 0x5c
 8006904:	4683      	mov	fp, r0
 8006906:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800690a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800690c:	b97f      	cbnz	r7, 800692e <_dtoa_r+0x36>
 800690e:	2010      	movs	r0, #16
 8006910:	f000 fe02 	bl	8007518 <malloc>
 8006914:	4602      	mov	r2, r0
 8006916:	f8cb 001c 	str.w	r0, [fp, #28]
 800691a:	b920      	cbnz	r0, 8006926 <_dtoa_r+0x2e>
 800691c:	21ef      	movs	r1, #239	@ 0xef
 800691e:	4ba8      	ldr	r3, [pc, #672]	@ (8006bc0 <_dtoa_r+0x2c8>)
 8006920:	48a8      	ldr	r0, [pc, #672]	@ (8006bc4 <_dtoa_r+0x2cc>)
 8006922:	f001 ffe1 	bl	80088e8 <__assert_func>
 8006926:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800692a:	6007      	str	r7, [r0, #0]
 800692c:	60c7      	str	r7, [r0, #12]
 800692e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006932:	6819      	ldr	r1, [r3, #0]
 8006934:	b159      	cbz	r1, 800694e <_dtoa_r+0x56>
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	2301      	movs	r3, #1
 800693a:	4093      	lsls	r3, r2
 800693c:	604a      	str	r2, [r1, #4]
 800693e:	608b      	str	r3, [r1, #8]
 8006940:	4658      	mov	r0, fp
 8006942:	f000 fedf 	bl	8007704 <_Bfree>
 8006946:	2200      	movs	r2, #0
 8006948:	f8db 301c 	ldr.w	r3, [fp, #28]
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	1e2b      	subs	r3, r5, #0
 8006950:	bfaf      	iteee	ge
 8006952:	2300      	movge	r3, #0
 8006954:	2201      	movlt	r2, #1
 8006956:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800695a:	9303      	strlt	r3, [sp, #12]
 800695c:	bfa8      	it	ge
 800695e:	6033      	strge	r3, [r6, #0]
 8006960:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006964:	4b98      	ldr	r3, [pc, #608]	@ (8006bc8 <_dtoa_r+0x2d0>)
 8006966:	bfb8      	it	lt
 8006968:	6032      	strlt	r2, [r6, #0]
 800696a:	ea33 0308 	bics.w	r3, r3, r8
 800696e:	d112      	bne.n	8006996 <_dtoa_r+0x9e>
 8006970:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006974:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800697c:	4323      	orrs	r3, r4
 800697e:	f000 8550 	beq.w	8007422 <_dtoa_r+0xb2a>
 8006982:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006984:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006bcc <_dtoa_r+0x2d4>
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 8552 	beq.w	8007432 <_dtoa_r+0xb3a>
 800698e:	f10a 0303 	add.w	r3, sl, #3
 8006992:	f000 bd4c 	b.w	800742e <_dtoa_r+0xb36>
 8006996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800699a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800699e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069a2:	2200      	movs	r2, #0
 80069a4:	2300      	movs	r3, #0
 80069a6:	f7f9 ffff 	bl	80009a8 <__aeabi_dcmpeq>
 80069aa:	4607      	mov	r7, r0
 80069ac:	b158      	cbz	r0, 80069c6 <_dtoa_r+0xce>
 80069ae:	2301      	movs	r3, #1
 80069b0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069b6:	b113      	cbz	r3, 80069be <_dtoa_r+0xc6>
 80069b8:	4b85      	ldr	r3, [pc, #532]	@ (8006bd0 <_dtoa_r+0x2d8>)
 80069ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006bd4 <_dtoa_r+0x2dc>
 80069c2:	f000 bd36 	b.w	8007432 <_dtoa_r+0xb3a>
 80069c6:	ab14      	add	r3, sp, #80	@ 0x50
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	ab15      	add	r3, sp, #84	@ 0x54
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4658      	mov	r0, fp
 80069d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80069d4:	f001 f97e 	bl	8007cd4 <__d2b>
 80069d8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80069dc:	4681      	mov	r9, r0
 80069de:	2e00      	cmp	r6, #0
 80069e0:	d077      	beq.n	8006ad2 <_dtoa_r+0x1da>
 80069e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069e8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069f0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069f4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069f8:	9712      	str	r7, [sp, #72]	@ 0x48
 80069fa:	4619      	mov	r1, r3
 80069fc:	2200      	movs	r2, #0
 80069fe:	4b76      	ldr	r3, [pc, #472]	@ (8006bd8 <_dtoa_r+0x2e0>)
 8006a00:	f7f9 fbb2 	bl	8000168 <__aeabi_dsub>
 8006a04:	a368      	add	r3, pc, #416	@ (adr r3, 8006ba8 <_dtoa_r+0x2b0>)
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f7f9 fd65 	bl	80004d8 <__aeabi_dmul>
 8006a0e:	a368      	add	r3, pc, #416	@ (adr r3, 8006bb0 <_dtoa_r+0x2b8>)
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	f7f9 fbaa 	bl	800016c <__adddf3>
 8006a18:	4604      	mov	r4, r0
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	460d      	mov	r5, r1
 8006a1e:	f7f9 fcf1 	bl	8000404 <__aeabi_i2d>
 8006a22:	a365      	add	r3, pc, #404	@ (adr r3, 8006bb8 <_dtoa_r+0x2c0>)
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 fd56 	bl	80004d8 <__aeabi_dmul>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4620      	mov	r0, r4
 8006a32:	4629      	mov	r1, r5
 8006a34:	f7f9 fb9a 	bl	800016c <__adddf3>
 8006a38:	4604      	mov	r4, r0
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	f7f9 fffc 	bl	8000a38 <__aeabi_d2iz>
 8006a40:	2200      	movs	r2, #0
 8006a42:	4607      	mov	r7, r0
 8006a44:	2300      	movs	r3, #0
 8006a46:	4620      	mov	r0, r4
 8006a48:	4629      	mov	r1, r5
 8006a4a:	f7f9 ffb7 	bl	80009bc <__aeabi_dcmplt>
 8006a4e:	b140      	cbz	r0, 8006a62 <_dtoa_r+0x16a>
 8006a50:	4638      	mov	r0, r7
 8006a52:	f7f9 fcd7 	bl	8000404 <__aeabi_i2d>
 8006a56:	4622      	mov	r2, r4
 8006a58:	462b      	mov	r3, r5
 8006a5a:	f7f9 ffa5 	bl	80009a8 <__aeabi_dcmpeq>
 8006a5e:	b900      	cbnz	r0, 8006a62 <_dtoa_r+0x16a>
 8006a60:	3f01      	subs	r7, #1
 8006a62:	2f16      	cmp	r7, #22
 8006a64:	d853      	bhi.n	8006b0e <_dtoa_r+0x216>
 8006a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a6a:	4b5c      	ldr	r3, [pc, #368]	@ (8006bdc <_dtoa_r+0x2e4>)
 8006a6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 ffa2 	bl	80009bc <__aeabi_dcmplt>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d04a      	beq.n	8006b12 <_dtoa_r+0x21a>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	3f01      	subs	r7, #1
 8006a80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a84:	1b9b      	subs	r3, r3, r6
 8006a86:	1e5a      	subs	r2, r3, #1
 8006a88:	bf46      	itte	mi
 8006a8a:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a8e:	2300      	movmi	r3, #0
 8006a90:	f04f 0800 	movpl.w	r8, #0
 8006a94:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a96:	bf48      	it	mi
 8006a98:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006a9a:	2f00      	cmp	r7, #0
 8006a9c:	db3b      	blt.n	8006b16 <_dtoa_r+0x21e>
 8006a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa0:	970e      	str	r7, [sp, #56]	@ 0x38
 8006aa2:	443b      	add	r3, r7
 8006aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006aac:	2b09      	cmp	r3, #9
 8006aae:	d866      	bhi.n	8006b7e <_dtoa_r+0x286>
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	bfc4      	itt	gt
 8006ab4:	3b04      	subgt	r3, #4
 8006ab6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006ab8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006aba:	bfc8      	it	gt
 8006abc:	2400      	movgt	r4, #0
 8006abe:	f1a3 0302 	sub.w	r3, r3, #2
 8006ac2:	bfd8      	it	le
 8006ac4:	2401      	movle	r4, #1
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d864      	bhi.n	8006b94 <_dtoa_r+0x29c>
 8006aca:	e8df f003 	tbb	[pc, r3]
 8006ace:	382b      	.short	0x382b
 8006ad0:	5636      	.short	0x5636
 8006ad2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006ad6:	441e      	add	r6, r3
 8006ad8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	bfc1      	itttt	gt
 8006ae0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ae4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006ae8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006aec:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006af0:	bfd6      	itet	le
 8006af2:	f1c3 0320 	rsble	r3, r3, #32
 8006af6:	ea48 0003 	orrgt.w	r0, r8, r3
 8006afa:	fa04 f003 	lslle.w	r0, r4, r3
 8006afe:	f7f9 fc71 	bl	80003e4 <__aeabi_ui2d>
 8006b02:	2201      	movs	r2, #1
 8006b04:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b08:	3e01      	subs	r6, #1
 8006b0a:	9212      	str	r2, [sp, #72]	@ 0x48
 8006b0c:	e775      	b.n	80069fa <_dtoa_r+0x102>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e7b6      	b.n	8006a80 <_dtoa_r+0x188>
 8006b12:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006b14:	e7b5      	b.n	8006a82 <_dtoa_r+0x18a>
 8006b16:	427b      	negs	r3, r7
 8006b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	eba8 0807 	sub.w	r8, r8, r7
 8006b20:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b22:	e7c2      	b.n	8006aaa <_dtoa_r+0x1b2>
 8006b24:	2300      	movs	r3, #0
 8006b26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dc35      	bgt.n	8006b9a <_dtoa_r+0x2a2>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	461a      	mov	r2, r3
 8006b32:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b36:	9221      	str	r2, [sp, #132]	@ 0x84
 8006b38:	e00b      	b.n	8006b52 <_dtoa_r+0x25a>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e7f3      	b.n	8006b26 <_dtoa_r+0x22e>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b44:	18fb      	adds	r3, r7, r3
 8006b46:	9308      	str	r3, [sp, #32]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	9307      	str	r3, [sp, #28]
 8006b4e:	bfb8      	it	lt
 8006b50:	2301      	movlt	r3, #1
 8006b52:	2100      	movs	r1, #0
 8006b54:	2204      	movs	r2, #4
 8006b56:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b5a:	f102 0514 	add.w	r5, r2, #20
 8006b5e:	429d      	cmp	r5, r3
 8006b60:	d91f      	bls.n	8006ba2 <_dtoa_r+0x2aa>
 8006b62:	6041      	str	r1, [r0, #4]
 8006b64:	4658      	mov	r0, fp
 8006b66:	f000 fd8d 	bl	8007684 <_Balloc>
 8006b6a:	4682      	mov	sl, r0
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d139      	bne.n	8006be4 <_dtoa_r+0x2ec>
 8006b70:	4602      	mov	r2, r0
 8006b72:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b76:	4b1a      	ldr	r3, [pc, #104]	@ (8006be0 <_dtoa_r+0x2e8>)
 8006b78:	e6d2      	b.n	8006920 <_dtoa_r+0x28>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e7e0      	b.n	8006b40 <_dtoa_r+0x248>
 8006b7e:	2401      	movs	r4, #1
 8006b80:	2300      	movs	r3, #0
 8006b82:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b84:	9320      	str	r3, [sp, #128]	@ 0x80
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b90:	2312      	movs	r3, #18
 8006b92:	e7d0      	b.n	8006b36 <_dtoa_r+0x23e>
 8006b94:	2301      	movs	r3, #1
 8006b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b98:	e7f5      	b.n	8006b86 <_dtoa_r+0x28e>
 8006b9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ba0:	e7d7      	b.n	8006b52 <_dtoa_r+0x25a>
 8006ba2:	3101      	adds	r1, #1
 8006ba4:	0052      	lsls	r2, r2, #1
 8006ba6:	e7d8      	b.n	8006b5a <_dtoa_r+0x262>
 8006ba8:	636f4361 	.word	0x636f4361
 8006bac:	3fd287a7 	.word	0x3fd287a7
 8006bb0:	8b60c8b3 	.word	0x8b60c8b3
 8006bb4:	3fc68a28 	.word	0x3fc68a28
 8006bb8:	509f79fb 	.word	0x509f79fb
 8006bbc:	3fd34413 	.word	0x3fd34413
 8006bc0:	080091f9 	.word	0x080091f9
 8006bc4:	08009210 	.word	0x08009210
 8006bc8:	7ff00000 	.word	0x7ff00000
 8006bcc:	080091f5 	.word	0x080091f5
 8006bd0:	080093f8 	.word	0x080093f8
 8006bd4:	080093f7 	.word	0x080093f7
 8006bd8:	3ff80000 	.word	0x3ff80000
 8006bdc:	08009308 	.word	0x08009308
 8006be0:	08009268 	.word	0x08009268
 8006be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006be8:	6018      	str	r0, [r3, #0]
 8006bea:	9b07      	ldr	r3, [sp, #28]
 8006bec:	2b0e      	cmp	r3, #14
 8006bee:	f200 80a4 	bhi.w	8006d3a <_dtoa_r+0x442>
 8006bf2:	2c00      	cmp	r4, #0
 8006bf4:	f000 80a1 	beq.w	8006d3a <_dtoa_r+0x442>
 8006bf8:	2f00      	cmp	r7, #0
 8006bfa:	dd33      	ble.n	8006c64 <_dtoa_r+0x36c>
 8006bfc:	4b86      	ldr	r3, [pc, #536]	@ (8006e18 <_dtoa_r+0x520>)
 8006bfe:	f007 020f 	and.w	r2, r7, #15
 8006c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c06:	05f8      	lsls	r0, r7, #23
 8006c08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c14:	d516      	bpl.n	8006c44 <_dtoa_r+0x34c>
 8006c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c1a:	4b80      	ldr	r3, [pc, #512]	@ (8006e1c <_dtoa_r+0x524>)
 8006c1c:	2603      	movs	r6, #3
 8006c1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c22:	f7f9 fd83 	bl	800072c <__aeabi_ddiv>
 8006c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c2a:	f004 040f 	and.w	r4, r4, #15
 8006c2e:	4d7b      	ldr	r5, [pc, #492]	@ (8006e1c <_dtoa_r+0x524>)
 8006c30:	b954      	cbnz	r4, 8006c48 <_dtoa_r+0x350>
 8006c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c3a:	f7f9 fd77 	bl	800072c <__aeabi_ddiv>
 8006c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c42:	e028      	b.n	8006c96 <_dtoa_r+0x39e>
 8006c44:	2602      	movs	r6, #2
 8006c46:	e7f2      	b.n	8006c2e <_dtoa_r+0x336>
 8006c48:	07e1      	lsls	r1, r4, #31
 8006c4a:	d508      	bpl.n	8006c5e <_dtoa_r+0x366>
 8006c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c54:	f7f9 fc40 	bl	80004d8 <__aeabi_dmul>
 8006c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	1064      	asrs	r4, r4, #1
 8006c60:	3508      	adds	r5, #8
 8006c62:	e7e5      	b.n	8006c30 <_dtoa_r+0x338>
 8006c64:	f000 80d2 	beq.w	8006e0c <_dtoa_r+0x514>
 8006c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c6c:	427c      	negs	r4, r7
 8006c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e18 <_dtoa_r+0x520>)
 8006c70:	f004 020f 	and.w	r2, r4, #15
 8006c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f7f9 fc2c 	bl	80004d8 <__aeabi_dmul>
 8006c80:	2602      	movs	r6, #2
 8006c82:	2300      	movs	r3, #0
 8006c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c88:	4d64      	ldr	r5, [pc, #400]	@ (8006e1c <_dtoa_r+0x524>)
 8006c8a:	1124      	asrs	r4, r4, #4
 8006c8c:	2c00      	cmp	r4, #0
 8006c8e:	f040 80b2 	bne.w	8006df6 <_dtoa_r+0x4fe>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1d3      	bne.n	8006c3e <_dtoa_r+0x346>
 8006c96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80b7 	beq.w	8006e10 <_dtoa_r+0x518>
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4b5d      	ldr	r3, [pc, #372]	@ (8006e20 <_dtoa_r+0x528>)
 8006caa:	f7f9 fe87 	bl	80009bc <__aeabi_dcmplt>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f000 80ae 	beq.w	8006e10 <_dtoa_r+0x518>
 8006cb4:	9b07      	ldr	r3, [sp, #28]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 80aa 	beq.w	8006e10 <_dtoa_r+0x518>
 8006cbc:	9b08      	ldr	r3, [sp, #32]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd37      	ble.n	8006d32 <_dtoa_r+0x43a>
 8006cc2:	1e7b      	subs	r3, r7, #1
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	9304      	str	r3, [sp, #16]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4b55      	ldr	r3, [pc, #340]	@ (8006e24 <_dtoa_r+0x52c>)
 8006cce:	f7f9 fc03 	bl	80004d8 <__aeabi_dmul>
 8006cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd6:	9c08      	ldr	r4, [sp, #32]
 8006cd8:	3601      	adds	r6, #1
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7f9 fb92 	bl	8000404 <__aeabi_i2d>
 8006ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ce4:	f7f9 fbf8 	bl	80004d8 <__aeabi_dmul>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	4b4f      	ldr	r3, [pc, #316]	@ (8006e28 <_dtoa_r+0x530>)
 8006cec:	f7f9 fa3e 	bl	800016c <__adddf3>
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cf6:	2c00      	cmp	r4, #0
 8006cf8:	f040 809a 	bne.w	8006e30 <_dtoa_r+0x538>
 8006cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d00:	2200      	movs	r2, #0
 8006d02:	4b4a      	ldr	r3, [pc, #296]	@ (8006e2c <_dtoa_r+0x534>)
 8006d04:	f7f9 fa30 	bl	8000168 <__aeabi_dsub>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d10:	462a      	mov	r2, r5
 8006d12:	4633      	mov	r3, r6
 8006d14:	f7f9 fe70 	bl	80009f8 <__aeabi_dcmpgt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	f040 828e 	bne.w	800723a <_dtoa_r+0x942>
 8006d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d22:	462a      	mov	r2, r5
 8006d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d28:	f7f9 fe48 	bl	80009bc <__aeabi_dcmplt>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f040 8127 	bne.w	8006f80 <_dtoa_r+0x688>
 8006d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f2c0 8163 	blt.w	8007008 <_dtoa_r+0x710>
 8006d42:	2f0e      	cmp	r7, #14
 8006d44:	f300 8160 	bgt.w	8007008 <_dtoa_r+0x710>
 8006d48:	4b33      	ldr	r3, [pc, #204]	@ (8006e18 <_dtoa_r+0x520>)
 8006d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da03      	bge.n	8006d64 <_dtoa_r+0x46c>
 8006d5c:	9b07      	ldr	r3, [sp, #28]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f340 8100 	ble.w	8006f64 <_dtoa_r+0x66c>
 8006d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d68:	4656      	mov	r6, sl
 8006d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d6e:	4620      	mov	r0, r4
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7f9 fcdb 	bl	800072c <__aeabi_ddiv>
 8006d76:	f7f9 fe5f 	bl	8000a38 <__aeabi_d2iz>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	f7f9 fb42 	bl	8000404 <__aeabi_i2d>
 8006d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d84:	f7f9 fba8 	bl	80004d8 <__aeabi_dmul>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 f9ea 	bl	8000168 <__aeabi_dsub>
 8006d94:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d98:	9d07      	ldr	r5, [sp, #28]
 8006d9a:	f806 4b01 	strb.w	r4, [r6], #1
 8006d9e:	eba6 040a 	sub.w	r4, r6, sl
 8006da2:	42a5      	cmp	r5, r4
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	f040 8116 	bne.w	8006fd8 <_dtoa_r+0x6e0>
 8006dac:	f7f9 f9de 	bl	800016c <__adddf3>
 8006db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	f7f9 fe1e 	bl	80009f8 <__aeabi_dcmpgt>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f040 80f8 	bne.w	8006fb2 <_dtoa_r+0x6ba>
 8006dc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fded 	bl	80009a8 <__aeabi_dcmpeq>
 8006dce:	b118      	cbz	r0, 8006dd8 <_dtoa_r+0x4e0>
 8006dd0:	f018 0f01 	tst.w	r8, #1
 8006dd4:	f040 80ed 	bne.w	8006fb2 <_dtoa_r+0x6ba>
 8006dd8:	4649      	mov	r1, r9
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f000 fc92 	bl	8007704 <_Bfree>
 8006de0:	2300      	movs	r3, #0
 8006de2:	7033      	strb	r3, [r6, #0]
 8006de4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006de6:	3701      	adds	r7, #1
 8006de8:	601f      	str	r7, [r3, #0]
 8006dea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8320 	beq.w	8007432 <_dtoa_r+0xb3a>
 8006df2:	601e      	str	r6, [r3, #0]
 8006df4:	e31d      	b.n	8007432 <_dtoa_r+0xb3a>
 8006df6:	07e2      	lsls	r2, r4, #31
 8006df8:	d505      	bpl.n	8006e06 <_dtoa_r+0x50e>
 8006dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dfe:	f7f9 fb6b 	bl	80004d8 <__aeabi_dmul>
 8006e02:	2301      	movs	r3, #1
 8006e04:	3601      	adds	r6, #1
 8006e06:	1064      	asrs	r4, r4, #1
 8006e08:	3508      	adds	r5, #8
 8006e0a:	e73f      	b.n	8006c8c <_dtoa_r+0x394>
 8006e0c:	2602      	movs	r6, #2
 8006e0e:	e742      	b.n	8006c96 <_dtoa_r+0x39e>
 8006e10:	9c07      	ldr	r4, [sp, #28]
 8006e12:	9704      	str	r7, [sp, #16]
 8006e14:	e761      	b.n	8006cda <_dtoa_r+0x3e2>
 8006e16:	bf00      	nop
 8006e18:	08009308 	.word	0x08009308
 8006e1c:	080092e0 	.word	0x080092e0
 8006e20:	3ff00000 	.word	0x3ff00000
 8006e24:	40240000 	.word	0x40240000
 8006e28:	401c0000 	.word	0x401c0000
 8006e2c:	40140000 	.word	0x40140000
 8006e30:	4b70      	ldr	r3, [pc, #448]	@ (8006ff4 <_dtoa_r+0x6fc>)
 8006e32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e3c:	4454      	add	r4, sl
 8006e3e:	2900      	cmp	r1, #0
 8006e40:	d045      	beq.n	8006ece <_dtoa_r+0x5d6>
 8006e42:	2000      	movs	r0, #0
 8006e44:	496c      	ldr	r1, [pc, #432]	@ (8006ff8 <_dtoa_r+0x700>)
 8006e46:	f7f9 fc71 	bl	800072c <__aeabi_ddiv>
 8006e4a:	4633      	mov	r3, r6
 8006e4c:	462a      	mov	r2, r5
 8006e4e:	f7f9 f98b 	bl	8000168 <__aeabi_dsub>
 8006e52:	4656      	mov	r6, sl
 8006e54:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e5c:	f7f9 fdec 	bl	8000a38 <__aeabi_d2iz>
 8006e60:	4605      	mov	r5, r0
 8006e62:	f7f9 facf 	bl	8000404 <__aeabi_i2d>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e6e:	f7f9 f97b 	bl	8000168 <__aeabi_dsub>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	3530      	adds	r5, #48	@ 0x30
 8006e78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e80:	f806 5b01 	strb.w	r5, [r6], #1
 8006e84:	f7f9 fd9a 	bl	80009bc <__aeabi_dcmplt>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d163      	bne.n	8006f54 <_dtoa_r+0x65c>
 8006e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e90:	2000      	movs	r0, #0
 8006e92:	495a      	ldr	r1, [pc, #360]	@ (8006ffc <_dtoa_r+0x704>)
 8006e94:	f7f9 f968 	bl	8000168 <__aeabi_dsub>
 8006e98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e9c:	f7f9 fd8e 	bl	80009bc <__aeabi_dcmplt>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	f040 8087 	bne.w	8006fb4 <_dtoa_r+0x6bc>
 8006ea6:	42a6      	cmp	r6, r4
 8006ea8:	f43f af43 	beq.w	8006d32 <_dtoa_r+0x43a>
 8006eac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	4b53      	ldr	r3, [pc, #332]	@ (8007000 <_dtoa_r+0x708>)
 8006eb4:	f7f9 fb10 	bl	80004d8 <__aeabi_dmul>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8007000 <_dtoa_r+0x708>)
 8006ec4:	f7f9 fb08 	bl	80004d8 <__aeabi_dmul>
 8006ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ecc:	e7c4      	b.n	8006e58 <_dtoa_r+0x560>
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f7f9 fb01 	bl	80004d8 <__aeabi_dmul>
 8006ed6:	4656      	mov	r6, sl
 8006ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006edc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee2:	f7f9 fda9 	bl	8000a38 <__aeabi_d2iz>
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	f7f9 fa8c 	bl	8000404 <__aeabi_i2d>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef4:	f7f9 f938 	bl	8000168 <__aeabi_dsub>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	3530      	adds	r5, #48	@ 0x30
 8006efe:	f806 5b01 	strb.w	r5, [r6], #1
 8006f02:	42a6      	cmp	r6, r4
 8006f04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	d124      	bne.n	8006f58 <_dtoa_r+0x660>
 8006f0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f12:	4b39      	ldr	r3, [pc, #228]	@ (8006ff8 <_dtoa_r+0x700>)
 8006f14:	f7f9 f92a 	bl	800016c <__adddf3>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f20:	f7f9 fd6a 	bl	80009f8 <__aeabi_dcmpgt>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d145      	bne.n	8006fb4 <_dtoa_r+0x6bc>
 8006f28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	4932      	ldr	r1, [pc, #200]	@ (8006ff8 <_dtoa_r+0x700>)
 8006f30:	f7f9 f91a 	bl	8000168 <__aeabi_dsub>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f3c:	f7f9 fd3e 	bl	80009bc <__aeabi_dcmplt>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f43f aef6 	beq.w	8006d32 <_dtoa_r+0x43a>
 8006f46:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f48:	1e73      	subs	r3, r6, #1
 8006f4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f50:	2b30      	cmp	r3, #48	@ 0x30
 8006f52:	d0f8      	beq.n	8006f46 <_dtoa_r+0x64e>
 8006f54:	9f04      	ldr	r7, [sp, #16]
 8006f56:	e73f      	b.n	8006dd8 <_dtoa_r+0x4e0>
 8006f58:	4b29      	ldr	r3, [pc, #164]	@ (8007000 <_dtoa_r+0x708>)
 8006f5a:	f7f9 fabd 	bl	80004d8 <__aeabi_dmul>
 8006f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f62:	e7bc      	b.n	8006ede <_dtoa_r+0x5e6>
 8006f64:	d10c      	bne.n	8006f80 <_dtoa_r+0x688>
 8006f66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	4b25      	ldr	r3, [pc, #148]	@ (8007004 <_dtoa_r+0x70c>)
 8006f6e:	f7f9 fab3 	bl	80004d8 <__aeabi_dmul>
 8006f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f76:	f7f9 fd35 	bl	80009e4 <__aeabi_dcmpge>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	f000 815b 	beq.w	8007236 <_dtoa_r+0x93e>
 8006f80:	2400      	movs	r4, #0
 8006f82:	4625      	mov	r5, r4
 8006f84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f86:	4656      	mov	r6, sl
 8006f88:	43db      	mvns	r3, r3
 8006f8a:	9304      	str	r3, [sp, #16]
 8006f8c:	2700      	movs	r7, #0
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4658      	mov	r0, fp
 8006f92:	f000 fbb7 	bl	8007704 <_Bfree>
 8006f96:	2d00      	cmp	r5, #0
 8006f98:	d0dc      	beq.n	8006f54 <_dtoa_r+0x65c>
 8006f9a:	b12f      	cbz	r7, 8006fa8 <_dtoa_r+0x6b0>
 8006f9c:	42af      	cmp	r7, r5
 8006f9e:	d003      	beq.n	8006fa8 <_dtoa_r+0x6b0>
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	4658      	mov	r0, fp
 8006fa4:	f000 fbae 	bl	8007704 <_Bfree>
 8006fa8:	4629      	mov	r1, r5
 8006faa:	4658      	mov	r0, fp
 8006fac:	f000 fbaa 	bl	8007704 <_Bfree>
 8006fb0:	e7d0      	b.n	8006f54 <_dtoa_r+0x65c>
 8006fb2:	9704      	str	r7, [sp, #16]
 8006fb4:	4633      	mov	r3, r6
 8006fb6:	461e      	mov	r6, r3
 8006fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fbc:	2a39      	cmp	r2, #57	@ 0x39
 8006fbe:	d107      	bne.n	8006fd0 <_dtoa_r+0x6d8>
 8006fc0:	459a      	cmp	sl, r3
 8006fc2:	d1f8      	bne.n	8006fb6 <_dtoa_r+0x6be>
 8006fc4:	9a04      	ldr	r2, [sp, #16]
 8006fc6:	3201      	adds	r2, #1
 8006fc8:	9204      	str	r2, [sp, #16]
 8006fca:	2230      	movs	r2, #48	@ 0x30
 8006fcc:	f88a 2000 	strb.w	r2, [sl]
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	3201      	adds	r2, #1
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e7bd      	b.n	8006f54 <_dtoa_r+0x65c>
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4b09      	ldr	r3, [pc, #36]	@ (8007000 <_dtoa_r+0x708>)
 8006fdc:	f7f9 fa7c 	bl	80004d8 <__aeabi_dmul>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	f7f9 fcde 	bl	80009a8 <__aeabi_dcmpeq>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	f43f aebc 	beq.w	8006d6a <_dtoa_r+0x472>
 8006ff2:	e6f1      	b.n	8006dd8 <_dtoa_r+0x4e0>
 8006ff4:	08009308 	.word	0x08009308
 8006ff8:	3fe00000 	.word	0x3fe00000
 8006ffc:	3ff00000 	.word	0x3ff00000
 8007000:	40240000 	.word	0x40240000
 8007004:	40140000 	.word	0x40140000
 8007008:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800700a:	2a00      	cmp	r2, #0
 800700c:	f000 80db 	beq.w	80071c6 <_dtoa_r+0x8ce>
 8007010:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007012:	2a01      	cmp	r2, #1
 8007014:	f300 80bf 	bgt.w	8007196 <_dtoa_r+0x89e>
 8007018:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800701a:	2a00      	cmp	r2, #0
 800701c:	f000 80b7 	beq.w	800718e <_dtoa_r+0x896>
 8007020:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007024:	4646      	mov	r6, r8
 8007026:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800702a:	2101      	movs	r1, #1
 800702c:	441a      	add	r2, r3
 800702e:	4658      	mov	r0, fp
 8007030:	4498      	add	r8, r3
 8007032:	9209      	str	r2, [sp, #36]	@ 0x24
 8007034:	f000 fc1a 	bl	800786c <__i2b>
 8007038:	4605      	mov	r5, r0
 800703a:	b15e      	cbz	r6, 8007054 <_dtoa_r+0x75c>
 800703c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800703e:	2b00      	cmp	r3, #0
 8007040:	dd08      	ble.n	8007054 <_dtoa_r+0x75c>
 8007042:	42b3      	cmp	r3, r6
 8007044:	bfa8      	it	ge
 8007046:	4633      	movge	r3, r6
 8007048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800704a:	eba8 0803 	sub.w	r8, r8, r3
 800704e:	1af6      	subs	r6, r6, r3
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	9309      	str	r3, [sp, #36]	@ 0x24
 8007054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007056:	b1f3      	cbz	r3, 8007096 <_dtoa_r+0x79e>
 8007058:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 80b7 	beq.w	80071ce <_dtoa_r+0x8d6>
 8007060:	b18c      	cbz	r4, 8007086 <_dtoa_r+0x78e>
 8007062:	4629      	mov	r1, r5
 8007064:	4622      	mov	r2, r4
 8007066:	4658      	mov	r0, fp
 8007068:	f000 fcbe 	bl	80079e8 <__pow5mult>
 800706c:	464a      	mov	r2, r9
 800706e:	4601      	mov	r1, r0
 8007070:	4605      	mov	r5, r0
 8007072:	4658      	mov	r0, fp
 8007074:	f000 fc10 	bl	8007898 <__multiply>
 8007078:	4649      	mov	r1, r9
 800707a:	9004      	str	r0, [sp, #16]
 800707c:	4658      	mov	r0, fp
 800707e:	f000 fb41 	bl	8007704 <_Bfree>
 8007082:	9b04      	ldr	r3, [sp, #16]
 8007084:	4699      	mov	r9, r3
 8007086:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007088:	1b1a      	subs	r2, r3, r4
 800708a:	d004      	beq.n	8007096 <_dtoa_r+0x79e>
 800708c:	4649      	mov	r1, r9
 800708e:	4658      	mov	r0, fp
 8007090:	f000 fcaa 	bl	80079e8 <__pow5mult>
 8007094:	4681      	mov	r9, r0
 8007096:	2101      	movs	r1, #1
 8007098:	4658      	mov	r0, fp
 800709a:	f000 fbe7 	bl	800786c <__i2b>
 800709e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070a0:	4604      	mov	r4, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 81c9 	beq.w	800743a <_dtoa_r+0xb42>
 80070a8:	461a      	mov	r2, r3
 80070aa:	4601      	mov	r1, r0
 80070ac:	4658      	mov	r0, fp
 80070ae:	f000 fc9b 	bl	80079e8 <__pow5mult>
 80070b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070b4:	4604      	mov	r4, r0
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	f300 808f 	bgt.w	80071da <_dtoa_r+0x8e2>
 80070bc:	9b02      	ldr	r3, [sp, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f040 8087 	bne.w	80071d2 <_dtoa_r+0x8da>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 8083 	bne.w	80071d6 <_dtoa_r+0x8de>
 80070d0:	9b03      	ldr	r3, [sp, #12]
 80070d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070d6:	0d1b      	lsrs	r3, r3, #20
 80070d8:	051b      	lsls	r3, r3, #20
 80070da:	b12b      	cbz	r3, 80070e8 <_dtoa_r+0x7f0>
 80070dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070de:	f108 0801 	add.w	r8, r8, #1
 80070e2:	3301      	adds	r3, #1
 80070e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e6:	2301      	movs	r3, #1
 80070e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 81aa 	beq.w	8007446 <_dtoa_r+0xb4e>
 80070f2:	6923      	ldr	r3, [r4, #16]
 80070f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070f8:	6918      	ldr	r0, [r3, #16]
 80070fa:	f000 fb6b 	bl	80077d4 <__hi0bits>
 80070fe:	f1c0 0020 	rsb	r0, r0, #32
 8007102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007104:	4418      	add	r0, r3
 8007106:	f010 001f 	ands.w	r0, r0, #31
 800710a:	d071      	beq.n	80071f0 <_dtoa_r+0x8f8>
 800710c:	f1c0 0320 	rsb	r3, r0, #32
 8007110:	2b04      	cmp	r3, #4
 8007112:	dd65      	ble.n	80071e0 <_dtoa_r+0x8e8>
 8007114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007116:	f1c0 001c 	rsb	r0, r0, #28
 800711a:	4403      	add	r3, r0
 800711c:	4480      	add	r8, r0
 800711e:	4406      	add	r6, r0
 8007120:	9309      	str	r3, [sp, #36]	@ 0x24
 8007122:	f1b8 0f00 	cmp.w	r8, #0
 8007126:	dd05      	ble.n	8007134 <_dtoa_r+0x83c>
 8007128:	4649      	mov	r1, r9
 800712a:	4642      	mov	r2, r8
 800712c:	4658      	mov	r0, fp
 800712e:	f000 fcb5 	bl	8007a9c <__lshift>
 8007132:	4681      	mov	r9, r0
 8007134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	dd05      	ble.n	8007146 <_dtoa_r+0x84e>
 800713a:	4621      	mov	r1, r4
 800713c:	461a      	mov	r2, r3
 800713e:	4658      	mov	r0, fp
 8007140:	f000 fcac 	bl	8007a9c <__lshift>
 8007144:	4604      	mov	r4, r0
 8007146:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d053      	beq.n	80071f4 <_dtoa_r+0x8fc>
 800714c:	4621      	mov	r1, r4
 800714e:	4648      	mov	r0, r9
 8007150:	f000 fd10 	bl	8007b74 <__mcmp>
 8007154:	2800      	cmp	r0, #0
 8007156:	da4d      	bge.n	80071f4 <_dtoa_r+0x8fc>
 8007158:	1e7b      	subs	r3, r7, #1
 800715a:	4649      	mov	r1, r9
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	220a      	movs	r2, #10
 8007160:	2300      	movs	r3, #0
 8007162:	4658      	mov	r0, fp
 8007164:	f000 faf0 	bl	8007748 <__multadd>
 8007168:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800716a:	4681      	mov	r9, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 816c 	beq.w	800744a <_dtoa_r+0xb52>
 8007172:	2300      	movs	r3, #0
 8007174:	4629      	mov	r1, r5
 8007176:	220a      	movs	r2, #10
 8007178:	4658      	mov	r0, fp
 800717a:	f000 fae5 	bl	8007748 <__multadd>
 800717e:	9b08      	ldr	r3, [sp, #32]
 8007180:	4605      	mov	r5, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	dc61      	bgt.n	800724a <_dtoa_r+0x952>
 8007186:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007188:	2b02      	cmp	r3, #2
 800718a:	dc3b      	bgt.n	8007204 <_dtoa_r+0x90c>
 800718c:	e05d      	b.n	800724a <_dtoa_r+0x952>
 800718e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007190:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007194:	e746      	b.n	8007024 <_dtoa_r+0x72c>
 8007196:	9b07      	ldr	r3, [sp, #28]
 8007198:	1e5c      	subs	r4, r3, #1
 800719a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800719c:	42a3      	cmp	r3, r4
 800719e:	bfbf      	itttt	lt
 80071a0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80071a2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80071a4:	1ae3      	sublt	r3, r4, r3
 80071a6:	18d2      	addlt	r2, r2, r3
 80071a8:	bfa8      	it	ge
 80071aa:	1b1c      	subge	r4, r3, r4
 80071ac:	9b07      	ldr	r3, [sp, #28]
 80071ae:	bfbe      	ittt	lt
 80071b0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80071b2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80071b4:	2400      	movlt	r4, #0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfb5      	itete	lt
 80071ba:	eba8 0603 	sublt.w	r6, r8, r3
 80071be:	4646      	movge	r6, r8
 80071c0:	2300      	movlt	r3, #0
 80071c2:	9b07      	ldrge	r3, [sp, #28]
 80071c4:	e730      	b.n	8007028 <_dtoa_r+0x730>
 80071c6:	4646      	mov	r6, r8
 80071c8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071ca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071cc:	e735      	b.n	800703a <_dtoa_r+0x742>
 80071ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071d0:	e75c      	b.n	800708c <_dtoa_r+0x794>
 80071d2:	2300      	movs	r3, #0
 80071d4:	e788      	b.n	80070e8 <_dtoa_r+0x7f0>
 80071d6:	9b02      	ldr	r3, [sp, #8]
 80071d8:	e786      	b.n	80070e8 <_dtoa_r+0x7f0>
 80071da:	2300      	movs	r3, #0
 80071dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80071de:	e788      	b.n	80070f2 <_dtoa_r+0x7fa>
 80071e0:	d09f      	beq.n	8007122 <_dtoa_r+0x82a>
 80071e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071e4:	331c      	adds	r3, #28
 80071e6:	441a      	add	r2, r3
 80071e8:	4498      	add	r8, r3
 80071ea:	441e      	add	r6, r3
 80071ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80071ee:	e798      	b.n	8007122 <_dtoa_r+0x82a>
 80071f0:	4603      	mov	r3, r0
 80071f2:	e7f6      	b.n	80071e2 <_dtoa_r+0x8ea>
 80071f4:	9b07      	ldr	r3, [sp, #28]
 80071f6:	9704      	str	r7, [sp, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	dc20      	bgt.n	800723e <_dtoa_r+0x946>
 80071fc:	9308      	str	r3, [sp, #32]
 80071fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007200:	2b02      	cmp	r3, #2
 8007202:	dd1e      	ble.n	8007242 <_dtoa_r+0x94a>
 8007204:	9b08      	ldr	r3, [sp, #32]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f47f aebc 	bne.w	8006f84 <_dtoa_r+0x68c>
 800720c:	4621      	mov	r1, r4
 800720e:	2205      	movs	r2, #5
 8007210:	4658      	mov	r0, fp
 8007212:	f000 fa99 	bl	8007748 <__multadd>
 8007216:	4601      	mov	r1, r0
 8007218:	4604      	mov	r4, r0
 800721a:	4648      	mov	r0, r9
 800721c:	f000 fcaa 	bl	8007b74 <__mcmp>
 8007220:	2800      	cmp	r0, #0
 8007222:	f77f aeaf 	ble.w	8006f84 <_dtoa_r+0x68c>
 8007226:	2331      	movs	r3, #49	@ 0x31
 8007228:	4656      	mov	r6, sl
 800722a:	f806 3b01 	strb.w	r3, [r6], #1
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	3301      	adds	r3, #1
 8007232:	9304      	str	r3, [sp, #16]
 8007234:	e6aa      	b.n	8006f8c <_dtoa_r+0x694>
 8007236:	9c07      	ldr	r4, [sp, #28]
 8007238:	9704      	str	r7, [sp, #16]
 800723a:	4625      	mov	r5, r4
 800723c:	e7f3      	b.n	8007226 <_dtoa_r+0x92e>
 800723e:	9b07      	ldr	r3, [sp, #28]
 8007240:	9308      	str	r3, [sp, #32]
 8007242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8104 	beq.w	8007452 <_dtoa_r+0xb5a>
 800724a:	2e00      	cmp	r6, #0
 800724c:	dd05      	ble.n	800725a <_dtoa_r+0x962>
 800724e:	4629      	mov	r1, r5
 8007250:	4632      	mov	r2, r6
 8007252:	4658      	mov	r0, fp
 8007254:	f000 fc22 	bl	8007a9c <__lshift>
 8007258:	4605      	mov	r5, r0
 800725a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800725c:	2b00      	cmp	r3, #0
 800725e:	d05a      	beq.n	8007316 <_dtoa_r+0xa1e>
 8007260:	4658      	mov	r0, fp
 8007262:	6869      	ldr	r1, [r5, #4]
 8007264:	f000 fa0e 	bl	8007684 <_Balloc>
 8007268:	4606      	mov	r6, r0
 800726a:	b928      	cbnz	r0, 8007278 <_dtoa_r+0x980>
 800726c:	4602      	mov	r2, r0
 800726e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007272:	4b83      	ldr	r3, [pc, #524]	@ (8007480 <_dtoa_r+0xb88>)
 8007274:	f7ff bb54 	b.w	8006920 <_dtoa_r+0x28>
 8007278:	692a      	ldr	r2, [r5, #16]
 800727a:	f105 010c 	add.w	r1, r5, #12
 800727e:	3202      	adds	r2, #2
 8007280:	0092      	lsls	r2, r2, #2
 8007282:	300c      	adds	r0, #12
 8007284:	f7ff faa1 	bl	80067ca <memcpy>
 8007288:	2201      	movs	r2, #1
 800728a:	4631      	mov	r1, r6
 800728c:	4658      	mov	r0, fp
 800728e:	f000 fc05 	bl	8007a9c <__lshift>
 8007292:	462f      	mov	r7, r5
 8007294:	4605      	mov	r5, r0
 8007296:	f10a 0301 	add.w	r3, sl, #1
 800729a:	9307      	str	r3, [sp, #28]
 800729c:	9b08      	ldr	r3, [sp, #32]
 800729e:	4453      	add	r3, sl
 80072a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072a2:	9b02      	ldr	r3, [sp, #8]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80072aa:	9b07      	ldr	r3, [sp, #28]
 80072ac:	4621      	mov	r1, r4
 80072ae:	3b01      	subs	r3, #1
 80072b0:	4648      	mov	r0, r9
 80072b2:	9302      	str	r3, [sp, #8]
 80072b4:	f7ff fa97 	bl	80067e6 <quorem>
 80072b8:	4639      	mov	r1, r7
 80072ba:	9008      	str	r0, [sp, #32]
 80072bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072c0:	4648      	mov	r0, r9
 80072c2:	f000 fc57 	bl	8007b74 <__mcmp>
 80072c6:	462a      	mov	r2, r5
 80072c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80072ca:	4621      	mov	r1, r4
 80072cc:	4658      	mov	r0, fp
 80072ce:	f000 fc6d 	bl	8007bac <__mdiff>
 80072d2:	68c2      	ldr	r2, [r0, #12]
 80072d4:	4606      	mov	r6, r0
 80072d6:	bb02      	cbnz	r2, 800731a <_dtoa_r+0xa22>
 80072d8:	4601      	mov	r1, r0
 80072da:	4648      	mov	r0, r9
 80072dc:	f000 fc4a 	bl	8007b74 <__mcmp>
 80072e0:	4602      	mov	r2, r0
 80072e2:	4631      	mov	r1, r6
 80072e4:	4658      	mov	r0, fp
 80072e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80072e8:	f000 fa0c 	bl	8007704 <_Bfree>
 80072ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80072f0:	9e07      	ldr	r6, [sp, #28]
 80072f2:	ea43 0102 	orr.w	r1, r3, r2
 80072f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072f8:	4319      	orrs	r1, r3
 80072fa:	d110      	bne.n	800731e <_dtoa_r+0xa26>
 80072fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007300:	d029      	beq.n	8007356 <_dtoa_r+0xa5e>
 8007302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	dd02      	ble.n	800730e <_dtoa_r+0xa16>
 8007308:	9b08      	ldr	r3, [sp, #32]
 800730a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800730e:	9b02      	ldr	r3, [sp, #8]
 8007310:	f883 8000 	strb.w	r8, [r3]
 8007314:	e63b      	b.n	8006f8e <_dtoa_r+0x696>
 8007316:	4628      	mov	r0, r5
 8007318:	e7bb      	b.n	8007292 <_dtoa_r+0x99a>
 800731a:	2201      	movs	r2, #1
 800731c:	e7e1      	b.n	80072e2 <_dtoa_r+0x9ea>
 800731e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	db04      	blt.n	800732e <_dtoa_r+0xa36>
 8007324:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007326:	430b      	orrs	r3, r1
 8007328:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800732a:	430b      	orrs	r3, r1
 800732c:	d120      	bne.n	8007370 <_dtoa_r+0xa78>
 800732e:	2a00      	cmp	r2, #0
 8007330:	dded      	ble.n	800730e <_dtoa_r+0xa16>
 8007332:	4649      	mov	r1, r9
 8007334:	2201      	movs	r2, #1
 8007336:	4658      	mov	r0, fp
 8007338:	f000 fbb0 	bl	8007a9c <__lshift>
 800733c:	4621      	mov	r1, r4
 800733e:	4681      	mov	r9, r0
 8007340:	f000 fc18 	bl	8007b74 <__mcmp>
 8007344:	2800      	cmp	r0, #0
 8007346:	dc03      	bgt.n	8007350 <_dtoa_r+0xa58>
 8007348:	d1e1      	bne.n	800730e <_dtoa_r+0xa16>
 800734a:	f018 0f01 	tst.w	r8, #1
 800734e:	d0de      	beq.n	800730e <_dtoa_r+0xa16>
 8007350:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007354:	d1d8      	bne.n	8007308 <_dtoa_r+0xa10>
 8007356:	2339      	movs	r3, #57	@ 0x39
 8007358:	9a02      	ldr	r2, [sp, #8]
 800735a:	7013      	strb	r3, [r2, #0]
 800735c:	4633      	mov	r3, r6
 800735e:	461e      	mov	r6, r3
 8007360:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007364:	3b01      	subs	r3, #1
 8007366:	2a39      	cmp	r2, #57	@ 0x39
 8007368:	d052      	beq.n	8007410 <_dtoa_r+0xb18>
 800736a:	3201      	adds	r2, #1
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	e60e      	b.n	8006f8e <_dtoa_r+0x696>
 8007370:	2a00      	cmp	r2, #0
 8007372:	dd07      	ble.n	8007384 <_dtoa_r+0xa8c>
 8007374:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007378:	d0ed      	beq.n	8007356 <_dtoa_r+0xa5e>
 800737a:	9a02      	ldr	r2, [sp, #8]
 800737c:	f108 0301 	add.w	r3, r8, #1
 8007380:	7013      	strb	r3, [r2, #0]
 8007382:	e604      	b.n	8006f8e <_dtoa_r+0x696>
 8007384:	9b07      	ldr	r3, [sp, #28]
 8007386:	9a07      	ldr	r2, [sp, #28]
 8007388:	f803 8c01 	strb.w	r8, [r3, #-1]
 800738c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800738e:	4293      	cmp	r3, r2
 8007390:	d028      	beq.n	80073e4 <_dtoa_r+0xaec>
 8007392:	4649      	mov	r1, r9
 8007394:	2300      	movs	r3, #0
 8007396:	220a      	movs	r2, #10
 8007398:	4658      	mov	r0, fp
 800739a:	f000 f9d5 	bl	8007748 <__multadd>
 800739e:	42af      	cmp	r7, r5
 80073a0:	4681      	mov	r9, r0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	f04f 020a 	mov.w	r2, #10
 80073aa:	4639      	mov	r1, r7
 80073ac:	4658      	mov	r0, fp
 80073ae:	d107      	bne.n	80073c0 <_dtoa_r+0xac8>
 80073b0:	f000 f9ca 	bl	8007748 <__multadd>
 80073b4:	4607      	mov	r7, r0
 80073b6:	4605      	mov	r5, r0
 80073b8:	9b07      	ldr	r3, [sp, #28]
 80073ba:	3301      	adds	r3, #1
 80073bc:	9307      	str	r3, [sp, #28]
 80073be:	e774      	b.n	80072aa <_dtoa_r+0x9b2>
 80073c0:	f000 f9c2 	bl	8007748 <__multadd>
 80073c4:	4629      	mov	r1, r5
 80073c6:	4607      	mov	r7, r0
 80073c8:	2300      	movs	r3, #0
 80073ca:	220a      	movs	r2, #10
 80073cc:	4658      	mov	r0, fp
 80073ce:	f000 f9bb 	bl	8007748 <__multadd>
 80073d2:	4605      	mov	r5, r0
 80073d4:	e7f0      	b.n	80073b8 <_dtoa_r+0xac0>
 80073d6:	9b08      	ldr	r3, [sp, #32]
 80073d8:	2700      	movs	r7, #0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfcc      	ite	gt
 80073de:	461e      	movgt	r6, r3
 80073e0:	2601      	movle	r6, #1
 80073e2:	4456      	add	r6, sl
 80073e4:	4649      	mov	r1, r9
 80073e6:	2201      	movs	r2, #1
 80073e8:	4658      	mov	r0, fp
 80073ea:	f000 fb57 	bl	8007a9c <__lshift>
 80073ee:	4621      	mov	r1, r4
 80073f0:	4681      	mov	r9, r0
 80073f2:	f000 fbbf 	bl	8007b74 <__mcmp>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	dcb0      	bgt.n	800735c <_dtoa_r+0xa64>
 80073fa:	d102      	bne.n	8007402 <_dtoa_r+0xb0a>
 80073fc:	f018 0f01 	tst.w	r8, #1
 8007400:	d1ac      	bne.n	800735c <_dtoa_r+0xa64>
 8007402:	4633      	mov	r3, r6
 8007404:	461e      	mov	r6, r3
 8007406:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800740a:	2a30      	cmp	r2, #48	@ 0x30
 800740c:	d0fa      	beq.n	8007404 <_dtoa_r+0xb0c>
 800740e:	e5be      	b.n	8006f8e <_dtoa_r+0x696>
 8007410:	459a      	cmp	sl, r3
 8007412:	d1a4      	bne.n	800735e <_dtoa_r+0xa66>
 8007414:	9b04      	ldr	r3, [sp, #16]
 8007416:	3301      	adds	r3, #1
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	2331      	movs	r3, #49	@ 0x31
 800741c:	f88a 3000 	strb.w	r3, [sl]
 8007420:	e5b5      	b.n	8006f8e <_dtoa_r+0x696>
 8007422:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007424:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007484 <_dtoa_r+0xb8c>
 8007428:	b11b      	cbz	r3, 8007432 <_dtoa_r+0xb3a>
 800742a:	f10a 0308 	add.w	r3, sl, #8
 800742e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	4650      	mov	r0, sl
 8007434:	b017      	add	sp, #92	@ 0x5c
 8007436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800743c:	2b01      	cmp	r3, #1
 800743e:	f77f ae3d 	ble.w	80070bc <_dtoa_r+0x7c4>
 8007442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007444:	930a      	str	r3, [sp, #40]	@ 0x28
 8007446:	2001      	movs	r0, #1
 8007448:	e65b      	b.n	8007102 <_dtoa_r+0x80a>
 800744a:	9b08      	ldr	r3, [sp, #32]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f77f aed6 	ble.w	80071fe <_dtoa_r+0x906>
 8007452:	4656      	mov	r6, sl
 8007454:	4621      	mov	r1, r4
 8007456:	4648      	mov	r0, r9
 8007458:	f7ff f9c5 	bl	80067e6 <quorem>
 800745c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007460:	9b08      	ldr	r3, [sp, #32]
 8007462:	f806 8b01 	strb.w	r8, [r6], #1
 8007466:	eba6 020a 	sub.w	r2, r6, sl
 800746a:	4293      	cmp	r3, r2
 800746c:	ddb3      	ble.n	80073d6 <_dtoa_r+0xade>
 800746e:	4649      	mov	r1, r9
 8007470:	2300      	movs	r3, #0
 8007472:	220a      	movs	r2, #10
 8007474:	4658      	mov	r0, fp
 8007476:	f000 f967 	bl	8007748 <__multadd>
 800747a:	4681      	mov	r9, r0
 800747c:	e7ea      	b.n	8007454 <_dtoa_r+0xb5c>
 800747e:	bf00      	nop
 8007480:	08009268 	.word	0x08009268
 8007484:	080091ec 	.word	0x080091ec

08007488 <_free_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4605      	mov	r5, r0
 800748c:	2900      	cmp	r1, #0
 800748e:	d040      	beq.n	8007512 <_free_r+0x8a>
 8007490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007494:	1f0c      	subs	r4, r1, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfb8      	it	lt
 800749a:	18e4      	addlt	r4, r4, r3
 800749c:	f000 f8e6 	bl	800766c <__malloc_lock>
 80074a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007514 <_free_r+0x8c>)
 80074a2:	6813      	ldr	r3, [r2, #0]
 80074a4:	b933      	cbnz	r3, 80074b4 <_free_r+0x2c>
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	6014      	str	r4, [r2, #0]
 80074aa:	4628      	mov	r0, r5
 80074ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b0:	f000 b8e2 	b.w	8007678 <__malloc_unlock>
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	d908      	bls.n	80074ca <_free_r+0x42>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	1821      	adds	r1, r4, r0
 80074bc:	428b      	cmp	r3, r1
 80074be:	bf01      	itttt	eq
 80074c0:	6819      	ldreq	r1, [r3, #0]
 80074c2:	685b      	ldreq	r3, [r3, #4]
 80074c4:	1809      	addeq	r1, r1, r0
 80074c6:	6021      	streq	r1, [r4, #0]
 80074c8:	e7ed      	b.n	80074a6 <_free_r+0x1e>
 80074ca:	461a      	mov	r2, r3
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	b10b      	cbz	r3, 80074d4 <_free_r+0x4c>
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	d9fa      	bls.n	80074ca <_free_r+0x42>
 80074d4:	6811      	ldr	r1, [r2, #0]
 80074d6:	1850      	adds	r0, r2, r1
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d10b      	bne.n	80074f4 <_free_r+0x6c>
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	4401      	add	r1, r0
 80074e0:	1850      	adds	r0, r2, r1
 80074e2:	4283      	cmp	r3, r0
 80074e4:	6011      	str	r1, [r2, #0]
 80074e6:	d1e0      	bne.n	80074aa <_free_r+0x22>
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	4408      	add	r0, r1
 80074ee:	6010      	str	r0, [r2, #0]
 80074f0:	6053      	str	r3, [r2, #4]
 80074f2:	e7da      	b.n	80074aa <_free_r+0x22>
 80074f4:	d902      	bls.n	80074fc <_free_r+0x74>
 80074f6:	230c      	movs	r3, #12
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	e7d6      	b.n	80074aa <_free_r+0x22>
 80074fc:	6820      	ldr	r0, [r4, #0]
 80074fe:	1821      	adds	r1, r4, r0
 8007500:	428b      	cmp	r3, r1
 8007502:	bf01      	itttt	eq
 8007504:	6819      	ldreq	r1, [r3, #0]
 8007506:	685b      	ldreq	r3, [r3, #4]
 8007508:	1809      	addeq	r1, r1, r0
 800750a:	6021      	streq	r1, [r4, #0]
 800750c:	6063      	str	r3, [r4, #4]
 800750e:	6054      	str	r4, [r2, #4]
 8007510:	e7cb      	b.n	80074aa <_free_r+0x22>
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	2000097c 	.word	0x2000097c

08007518 <malloc>:
 8007518:	4b02      	ldr	r3, [pc, #8]	@ (8007524 <malloc+0xc>)
 800751a:	4601      	mov	r1, r0
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	f000 b825 	b.w	800756c <_malloc_r>
 8007522:	bf00      	nop
 8007524:	20000020 	.word	0x20000020

08007528 <sbrk_aligned>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	4e0f      	ldr	r6, [pc, #60]	@ (8007568 <sbrk_aligned+0x40>)
 800752c:	460c      	mov	r4, r1
 800752e:	6831      	ldr	r1, [r6, #0]
 8007530:	4605      	mov	r5, r0
 8007532:	b911      	cbnz	r1, 800753a <sbrk_aligned+0x12>
 8007534:	f001 f9c8 	bl	80088c8 <_sbrk_r>
 8007538:	6030      	str	r0, [r6, #0]
 800753a:	4621      	mov	r1, r4
 800753c:	4628      	mov	r0, r5
 800753e:	f001 f9c3 	bl	80088c8 <_sbrk_r>
 8007542:	1c43      	adds	r3, r0, #1
 8007544:	d103      	bne.n	800754e <sbrk_aligned+0x26>
 8007546:	f04f 34ff 	mov.w	r4, #4294967295
 800754a:	4620      	mov	r0, r4
 800754c:	bd70      	pop	{r4, r5, r6, pc}
 800754e:	1cc4      	adds	r4, r0, #3
 8007550:	f024 0403 	bic.w	r4, r4, #3
 8007554:	42a0      	cmp	r0, r4
 8007556:	d0f8      	beq.n	800754a <sbrk_aligned+0x22>
 8007558:	1a21      	subs	r1, r4, r0
 800755a:	4628      	mov	r0, r5
 800755c:	f001 f9b4 	bl	80088c8 <_sbrk_r>
 8007560:	3001      	adds	r0, #1
 8007562:	d1f2      	bne.n	800754a <sbrk_aligned+0x22>
 8007564:	e7ef      	b.n	8007546 <sbrk_aligned+0x1e>
 8007566:	bf00      	nop
 8007568:	20000978 	.word	0x20000978

0800756c <_malloc_r>:
 800756c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007570:	1ccd      	adds	r5, r1, #3
 8007572:	f025 0503 	bic.w	r5, r5, #3
 8007576:	3508      	adds	r5, #8
 8007578:	2d0c      	cmp	r5, #12
 800757a:	bf38      	it	cc
 800757c:	250c      	movcc	r5, #12
 800757e:	2d00      	cmp	r5, #0
 8007580:	4606      	mov	r6, r0
 8007582:	db01      	blt.n	8007588 <_malloc_r+0x1c>
 8007584:	42a9      	cmp	r1, r5
 8007586:	d904      	bls.n	8007592 <_malloc_r+0x26>
 8007588:	230c      	movs	r3, #12
 800758a:	6033      	str	r3, [r6, #0]
 800758c:	2000      	movs	r0, #0
 800758e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007668 <_malloc_r+0xfc>
 8007596:	f000 f869 	bl	800766c <__malloc_lock>
 800759a:	f8d8 3000 	ldr.w	r3, [r8]
 800759e:	461c      	mov	r4, r3
 80075a0:	bb44      	cbnz	r4, 80075f4 <_malloc_r+0x88>
 80075a2:	4629      	mov	r1, r5
 80075a4:	4630      	mov	r0, r6
 80075a6:	f7ff ffbf 	bl	8007528 <sbrk_aligned>
 80075aa:	1c43      	adds	r3, r0, #1
 80075ac:	4604      	mov	r4, r0
 80075ae:	d158      	bne.n	8007662 <_malloc_r+0xf6>
 80075b0:	f8d8 4000 	ldr.w	r4, [r8]
 80075b4:	4627      	mov	r7, r4
 80075b6:	2f00      	cmp	r7, #0
 80075b8:	d143      	bne.n	8007642 <_malloc_r+0xd6>
 80075ba:	2c00      	cmp	r4, #0
 80075bc:	d04b      	beq.n	8007656 <_malloc_r+0xea>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	4639      	mov	r1, r7
 80075c2:	4630      	mov	r0, r6
 80075c4:	eb04 0903 	add.w	r9, r4, r3
 80075c8:	f001 f97e 	bl	80088c8 <_sbrk_r>
 80075cc:	4581      	cmp	r9, r0
 80075ce:	d142      	bne.n	8007656 <_malloc_r+0xea>
 80075d0:	6821      	ldr	r1, [r4, #0]
 80075d2:	4630      	mov	r0, r6
 80075d4:	1a6d      	subs	r5, r5, r1
 80075d6:	4629      	mov	r1, r5
 80075d8:	f7ff ffa6 	bl	8007528 <sbrk_aligned>
 80075dc:	3001      	adds	r0, #1
 80075de:	d03a      	beq.n	8007656 <_malloc_r+0xea>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	442b      	add	r3, r5
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	f8d8 3000 	ldr.w	r3, [r8]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	bb62      	cbnz	r2, 8007648 <_malloc_r+0xdc>
 80075ee:	f8c8 7000 	str.w	r7, [r8]
 80075f2:	e00f      	b.n	8007614 <_malloc_r+0xa8>
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	1b52      	subs	r2, r2, r5
 80075f8:	d420      	bmi.n	800763c <_malloc_r+0xd0>
 80075fa:	2a0b      	cmp	r2, #11
 80075fc:	d917      	bls.n	800762e <_malloc_r+0xc2>
 80075fe:	1961      	adds	r1, r4, r5
 8007600:	42a3      	cmp	r3, r4
 8007602:	6025      	str	r5, [r4, #0]
 8007604:	bf18      	it	ne
 8007606:	6059      	strne	r1, [r3, #4]
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	bf08      	it	eq
 800760c:	f8c8 1000 	streq.w	r1, [r8]
 8007610:	5162      	str	r2, [r4, r5]
 8007612:	604b      	str	r3, [r1, #4]
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f82f 	bl	8007678 <__malloc_unlock>
 800761a:	f104 000b 	add.w	r0, r4, #11
 800761e:	1d23      	adds	r3, r4, #4
 8007620:	f020 0007 	bic.w	r0, r0, #7
 8007624:	1ac2      	subs	r2, r0, r3
 8007626:	bf1c      	itt	ne
 8007628:	1a1b      	subne	r3, r3, r0
 800762a:	50a3      	strne	r3, [r4, r2]
 800762c:	e7af      	b.n	800758e <_malloc_r+0x22>
 800762e:	6862      	ldr	r2, [r4, #4]
 8007630:	42a3      	cmp	r3, r4
 8007632:	bf0c      	ite	eq
 8007634:	f8c8 2000 	streq.w	r2, [r8]
 8007638:	605a      	strne	r2, [r3, #4]
 800763a:	e7eb      	b.n	8007614 <_malloc_r+0xa8>
 800763c:	4623      	mov	r3, r4
 800763e:	6864      	ldr	r4, [r4, #4]
 8007640:	e7ae      	b.n	80075a0 <_malloc_r+0x34>
 8007642:	463c      	mov	r4, r7
 8007644:	687f      	ldr	r7, [r7, #4]
 8007646:	e7b6      	b.n	80075b6 <_malloc_r+0x4a>
 8007648:	461a      	mov	r2, r3
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	42a3      	cmp	r3, r4
 800764e:	d1fb      	bne.n	8007648 <_malloc_r+0xdc>
 8007650:	2300      	movs	r3, #0
 8007652:	6053      	str	r3, [r2, #4]
 8007654:	e7de      	b.n	8007614 <_malloc_r+0xa8>
 8007656:	230c      	movs	r3, #12
 8007658:	4630      	mov	r0, r6
 800765a:	6033      	str	r3, [r6, #0]
 800765c:	f000 f80c 	bl	8007678 <__malloc_unlock>
 8007660:	e794      	b.n	800758c <_malloc_r+0x20>
 8007662:	6005      	str	r5, [r0, #0]
 8007664:	e7d6      	b.n	8007614 <_malloc_r+0xa8>
 8007666:	bf00      	nop
 8007668:	2000097c 	.word	0x2000097c

0800766c <__malloc_lock>:
 800766c:	4801      	ldr	r0, [pc, #4]	@ (8007674 <__malloc_lock+0x8>)
 800766e:	f7ff b89c 	b.w	80067aa <__retarget_lock_acquire_recursive>
 8007672:	bf00      	nop
 8007674:	20000974 	.word	0x20000974

08007678 <__malloc_unlock>:
 8007678:	4801      	ldr	r0, [pc, #4]	@ (8007680 <__malloc_unlock+0x8>)
 800767a:	f7ff b897 	b.w	80067ac <__retarget_lock_release_recursive>
 800767e:	bf00      	nop
 8007680:	20000974 	.word	0x20000974

08007684 <_Balloc>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	69c6      	ldr	r6, [r0, #28]
 8007688:	4604      	mov	r4, r0
 800768a:	460d      	mov	r5, r1
 800768c:	b976      	cbnz	r6, 80076ac <_Balloc+0x28>
 800768e:	2010      	movs	r0, #16
 8007690:	f7ff ff42 	bl	8007518 <malloc>
 8007694:	4602      	mov	r2, r0
 8007696:	61e0      	str	r0, [r4, #28]
 8007698:	b920      	cbnz	r0, 80076a4 <_Balloc+0x20>
 800769a:	216b      	movs	r1, #107	@ 0x6b
 800769c:	4b17      	ldr	r3, [pc, #92]	@ (80076fc <_Balloc+0x78>)
 800769e:	4818      	ldr	r0, [pc, #96]	@ (8007700 <_Balloc+0x7c>)
 80076a0:	f001 f922 	bl	80088e8 <__assert_func>
 80076a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076a8:	6006      	str	r6, [r0, #0]
 80076aa:	60c6      	str	r6, [r0, #12]
 80076ac:	69e6      	ldr	r6, [r4, #28]
 80076ae:	68f3      	ldr	r3, [r6, #12]
 80076b0:	b183      	cbz	r3, 80076d4 <_Balloc+0x50>
 80076b2:	69e3      	ldr	r3, [r4, #28]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076ba:	b9b8      	cbnz	r0, 80076ec <_Balloc+0x68>
 80076bc:	2101      	movs	r1, #1
 80076be:	fa01 f605 	lsl.w	r6, r1, r5
 80076c2:	1d72      	adds	r2, r6, #5
 80076c4:	4620      	mov	r0, r4
 80076c6:	0092      	lsls	r2, r2, #2
 80076c8:	f001 f92c 	bl	8008924 <_calloc_r>
 80076cc:	b160      	cbz	r0, 80076e8 <_Balloc+0x64>
 80076ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076d2:	e00e      	b.n	80076f2 <_Balloc+0x6e>
 80076d4:	2221      	movs	r2, #33	@ 0x21
 80076d6:	2104      	movs	r1, #4
 80076d8:	4620      	mov	r0, r4
 80076da:	f001 f923 	bl	8008924 <_calloc_r>
 80076de:	69e3      	ldr	r3, [r4, #28]
 80076e0:	60f0      	str	r0, [r6, #12]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e4      	bne.n	80076b2 <_Balloc+0x2e>
 80076e8:	2000      	movs	r0, #0
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	6802      	ldr	r2, [r0, #0]
 80076ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076f2:	2300      	movs	r3, #0
 80076f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076f8:	e7f7      	b.n	80076ea <_Balloc+0x66>
 80076fa:	bf00      	nop
 80076fc:	080091f9 	.word	0x080091f9
 8007700:	08009279 	.word	0x08009279

08007704 <_Bfree>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	69c6      	ldr	r6, [r0, #28]
 8007708:	4605      	mov	r5, r0
 800770a:	460c      	mov	r4, r1
 800770c:	b976      	cbnz	r6, 800772c <_Bfree+0x28>
 800770e:	2010      	movs	r0, #16
 8007710:	f7ff ff02 	bl	8007518 <malloc>
 8007714:	4602      	mov	r2, r0
 8007716:	61e8      	str	r0, [r5, #28]
 8007718:	b920      	cbnz	r0, 8007724 <_Bfree+0x20>
 800771a:	218f      	movs	r1, #143	@ 0x8f
 800771c:	4b08      	ldr	r3, [pc, #32]	@ (8007740 <_Bfree+0x3c>)
 800771e:	4809      	ldr	r0, [pc, #36]	@ (8007744 <_Bfree+0x40>)
 8007720:	f001 f8e2 	bl	80088e8 <__assert_func>
 8007724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007728:	6006      	str	r6, [r0, #0]
 800772a:	60c6      	str	r6, [r0, #12]
 800772c:	b13c      	cbz	r4, 800773e <_Bfree+0x3a>
 800772e:	69eb      	ldr	r3, [r5, #28]
 8007730:	6862      	ldr	r2, [r4, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007738:	6021      	str	r1, [r4, #0]
 800773a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	080091f9 	.word	0x080091f9
 8007744:	08009279 	.word	0x08009279

08007748 <__multadd>:
 8007748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774c:	4607      	mov	r7, r0
 800774e:	460c      	mov	r4, r1
 8007750:	461e      	mov	r6, r3
 8007752:	2000      	movs	r0, #0
 8007754:	690d      	ldr	r5, [r1, #16]
 8007756:	f101 0c14 	add.w	ip, r1, #20
 800775a:	f8dc 3000 	ldr.w	r3, [ip]
 800775e:	3001      	adds	r0, #1
 8007760:	b299      	uxth	r1, r3
 8007762:	fb02 6101 	mla	r1, r2, r1, r6
 8007766:	0c1e      	lsrs	r6, r3, #16
 8007768:	0c0b      	lsrs	r3, r1, #16
 800776a:	fb02 3306 	mla	r3, r2, r6, r3
 800776e:	b289      	uxth	r1, r1
 8007770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007774:	4285      	cmp	r5, r0
 8007776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800777a:	f84c 1b04 	str.w	r1, [ip], #4
 800777e:	dcec      	bgt.n	800775a <__multadd+0x12>
 8007780:	b30e      	cbz	r6, 80077c6 <__multadd+0x7e>
 8007782:	68a3      	ldr	r3, [r4, #8]
 8007784:	42ab      	cmp	r3, r5
 8007786:	dc19      	bgt.n	80077bc <__multadd+0x74>
 8007788:	6861      	ldr	r1, [r4, #4]
 800778a:	4638      	mov	r0, r7
 800778c:	3101      	adds	r1, #1
 800778e:	f7ff ff79 	bl	8007684 <_Balloc>
 8007792:	4680      	mov	r8, r0
 8007794:	b928      	cbnz	r0, 80077a2 <__multadd+0x5a>
 8007796:	4602      	mov	r2, r0
 8007798:	21ba      	movs	r1, #186	@ 0xba
 800779a:	4b0c      	ldr	r3, [pc, #48]	@ (80077cc <__multadd+0x84>)
 800779c:	480c      	ldr	r0, [pc, #48]	@ (80077d0 <__multadd+0x88>)
 800779e:	f001 f8a3 	bl	80088e8 <__assert_func>
 80077a2:	6922      	ldr	r2, [r4, #16]
 80077a4:	f104 010c 	add.w	r1, r4, #12
 80077a8:	3202      	adds	r2, #2
 80077aa:	0092      	lsls	r2, r2, #2
 80077ac:	300c      	adds	r0, #12
 80077ae:	f7ff f80c 	bl	80067ca <memcpy>
 80077b2:	4621      	mov	r1, r4
 80077b4:	4638      	mov	r0, r7
 80077b6:	f7ff ffa5 	bl	8007704 <_Bfree>
 80077ba:	4644      	mov	r4, r8
 80077bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077c0:	3501      	adds	r5, #1
 80077c2:	615e      	str	r6, [r3, #20]
 80077c4:	6125      	str	r5, [r4, #16]
 80077c6:	4620      	mov	r0, r4
 80077c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077cc:	08009268 	.word	0x08009268
 80077d0:	08009279 	.word	0x08009279

080077d4 <__hi0bits>:
 80077d4:	4603      	mov	r3, r0
 80077d6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077da:	bf3a      	itte	cc
 80077dc:	0403      	lslcc	r3, r0, #16
 80077de:	2010      	movcc	r0, #16
 80077e0:	2000      	movcs	r0, #0
 80077e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077e6:	bf3c      	itt	cc
 80077e8:	021b      	lslcc	r3, r3, #8
 80077ea:	3008      	addcc	r0, #8
 80077ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077f0:	bf3c      	itt	cc
 80077f2:	011b      	lslcc	r3, r3, #4
 80077f4:	3004      	addcc	r0, #4
 80077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077fa:	bf3c      	itt	cc
 80077fc:	009b      	lslcc	r3, r3, #2
 80077fe:	3002      	addcc	r0, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	db05      	blt.n	8007810 <__hi0bits+0x3c>
 8007804:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007808:	f100 0001 	add.w	r0, r0, #1
 800780c:	bf08      	it	eq
 800780e:	2020      	moveq	r0, #32
 8007810:	4770      	bx	lr

08007812 <__lo0bits>:
 8007812:	6803      	ldr	r3, [r0, #0]
 8007814:	4602      	mov	r2, r0
 8007816:	f013 0007 	ands.w	r0, r3, #7
 800781a:	d00b      	beq.n	8007834 <__lo0bits+0x22>
 800781c:	07d9      	lsls	r1, r3, #31
 800781e:	d421      	bmi.n	8007864 <__lo0bits+0x52>
 8007820:	0798      	lsls	r0, r3, #30
 8007822:	bf49      	itett	mi
 8007824:	085b      	lsrmi	r3, r3, #1
 8007826:	089b      	lsrpl	r3, r3, #2
 8007828:	2001      	movmi	r0, #1
 800782a:	6013      	strmi	r3, [r2, #0]
 800782c:	bf5c      	itt	pl
 800782e:	2002      	movpl	r0, #2
 8007830:	6013      	strpl	r3, [r2, #0]
 8007832:	4770      	bx	lr
 8007834:	b299      	uxth	r1, r3
 8007836:	b909      	cbnz	r1, 800783c <__lo0bits+0x2a>
 8007838:	2010      	movs	r0, #16
 800783a:	0c1b      	lsrs	r3, r3, #16
 800783c:	b2d9      	uxtb	r1, r3
 800783e:	b909      	cbnz	r1, 8007844 <__lo0bits+0x32>
 8007840:	3008      	adds	r0, #8
 8007842:	0a1b      	lsrs	r3, r3, #8
 8007844:	0719      	lsls	r1, r3, #28
 8007846:	bf04      	itt	eq
 8007848:	091b      	lsreq	r3, r3, #4
 800784a:	3004      	addeq	r0, #4
 800784c:	0799      	lsls	r1, r3, #30
 800784e:	bf04      	itt	eq
 8007850:	089b      	lsreq	r3, r3, #2
 8007852:	3002      	addeq	r0, #2
 8007854:	07d9      	lsls	r1, r3, #31
 8007856:	d403      	bmi.n	8007860 <__lo0bits+0x4e>
 8007858:	085b      	lsrs	r3, r3, #1
 800785a:	f100 0001 	add.w	r0, r0, #1
 800785e:	d003      	beq.n	8007868 <__lo0bits+0x56>
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	4770      	bx	lr
 8007864:	2000      	movs	r0, #0
 8007866:	4770      	bx	lr
 8007868:	2020      	movs	r0, #32
 800786a:	4770      	bx	lr

0800786c <__i2b>:
 800786c:	b510      	push	{r4, lr}
 800786e:	460c      	mov	r4, r1
 8007870:	2101      	movs	r1, #1
 8007872:	f7ff ff07 	bl	8007684 <_Balloc>
 8007876:	4602      	mov	r2, r0
 8007878:	b928      	cbnz	r0, 8007886 <__i2b+0x1a>
 800787a:	f240 1145 	movw	r1, #325	@ 0x145
 800787e:	4b04      	ldr	r3, [pc, #16]	@ (8007890 <__i2b+0x24>)
 8007880:	4804      	ldr	r0, [pc, #16]	@ (8007894 <__i2b+0x28>)
 8007882:	f001 f831 	bl	80088e8 <__assert_func>
 8007886:	2301      	movs	r3, #1
 8007888:	6144      	str	r4, [r0, #20]
 800788a:	6103      	str	r3, [r0, #16]
 800788c:	bd10      	pop	{r4, pc}
 800788e:	bf00      	nop
 8007890:	08009268 	.word	0x08009268
 8007894:	08009279 	.word	0x08009279

08007898 <__multiply>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	4614      	mov	r4, r2
 800789e:	690a      	ldr	r2, [r1, #16]
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	460f      	mov	r7, r1
 80078a4:	429a      	cmp	r2, r3
 80078a6:	bfa2      	ittt	ge
 80078a8:	4623      	movge	r3, r4
 80078aa:	460c      	movge	r4, r1
 80078ac:	461f      	movge	r7, r3
 80078ae:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80078b2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80078b6:	68a3      	ldr	r3, [r4, #8]
 80078b8:	6861      	ldr	r1, [r4, #4]
 80078ba:	eb0a 0609 	add.w	r6, sl, r9
 80078be:	42b3      	cmp	r3, r6
 80078c0:	b085      	sub	sp, #20
 80078c2:	bfb8      	it	lt
 80078c4:	3101      	addlt	r1, #1
 80078c6:	f7ff fedd 	bl	8007684 <_Balloc>
 80078ca:	b930      	cbnz	r0, 80078da <__multiply+0x42>
 80078cc:	4602      	mov	r2, r0
 80078ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078d2:	4b43      	ldr	r3, [pc, #268]	@ (80079e0 <__multiply+0x148>)
 80078d4:	4843      	ldr	r0, [pc, #268]	@ (80079e4 <__multiply+0x14c>)
 80078d6:	f001 f807 	bl	80088e8 <__assert_func>
 80078da:	f100 0514 	add.w	r5, r0, #20
 80078de:	462b      	mov	r3, r5
 80078e0:	2200      	movs	r2, #0
 80078e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078e6:	4543      	cmp	r3, r8
 80078e8:	d321      	bcc.n	800792e <__multiply+0x96>
 80078ea:	f107 0114 	add.w	r1, r7, #20
 80078ee:	f104 0214 	add.w	r2, r4, #20
 80078f2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80078f6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80078fa:	9302      	str	r3, [sp, #8]
 80078fc:	1b13      	subs	r3, r2, r4
 80078fe:	3b15      	subs	r3, #21
 8007900:	f023 0303 	bic.w	r3, r3, #3
 8007904:	3304      	adds	r3, #4
 8007906:	f104 0715 	add.w	r7, r4, #21
 800790a:	42ba      	cmp	r2, r7
 800790c:	bf38      	it	cc
 800790e:	2304      	movcc	r3, #4
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	9b02      	ldr	r3, [sp, #8]
 8007914:	9103      	str	r1, [sp, #12]
 8007916:	428b      	cmp	r3, r1
 8007918:	d80c      	bhi.n	8007934 <__multiply+0x9c>
 800791a:	2e00      	cmp	r6, #0
 800791c:	dd03      	ble.n	8007926 <__multiply+0x8e>
 800791e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007922:	2b00      	cmp	r3, #0
 8007924:	d05a      	beq.n	80079dc <__multiply+0x144>
 8007926:	6106      	str	r6, [r0, #16]
 8007928:	b005      	add	sp, #20
 800792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792e:	f843 2b04 	str.w	r2, [r3], #4
 8007932:	e7d8      	b.n	80078e6 <__multiply+0x4e>
 8007934:	f8b1 a000 	ldrh.w	sl, [r1]
 8007938:	f1ba 0f00 	cmp.w	sl, #0
 800793c:	d023      	beq.n	8007986 <__multiply+0xee>
 800793e:	46a9      	mov	r9, r5
 8007940:	f04f 0c00 	mov.w	ip, #0
 8007944:	f104 0e14 	add.w	lr, r4, #20
 8007948:	f85e 7b04 	ldr.w	r7, [lr], #4
 800794c:	f8d9 3000 	ldr.w	r3, [r9]
 8007950:	fa1f fb87 	uxth.w	fp, r7
 8007954:	b29b      	uxth	r3, r3
 8007956:	fb0a 330b 	mla	r3, sl, fp, r3
 800795a:	4463      	add	r3, ip
 800795c:	f8d9 c000 	ldr.w	ip, [r9]
 8007960:	0c3f      	lsrs	r7, r7, #16
 8007962:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007966:	fb0a c707 	mla	r7, sl, r7, ip
 800796a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800796e:	b29b      	uxth	r3, r3
 8007970:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007974:	4572      	cmp	r2, lr
 8007976:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800797a:	f849 3b04 	str.w	r3, [r9], #4
 800797e:	d8e3      	bhi.n	8007948 <__multiply+0xb0>
 8007980:	9b01      	ldr	r3, [sp, #4]
 8007982:	f845 c003 	str.w	ip, [r5, r3]
 8007986:	9b03      	ldr	r3, [sp, #12]
 8007988:	3104      	adds	r1, #4
 800798a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800798e:	f1b9 0f00 	cmp.w	r9, #0
 8007992:	d021      	beq.n	80079d8 <__multiply+0x140>
 8007994:	46ae      	mov	lr, r5
 8007996:	f04f 0a00 	mov.w	sl, #0
 800799a:	682b      	ldr	r3, [r5, #0]
 800799c:	f104 0c14 	add.w	ip, r4, #20
 80079a0:	f8bc b000 	ldrh.w	fp, [ip]
 80079a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	fb09 770b 	mla	r7, r9, fp, r7
 80079ae:	4457      	add	r7, sl
 80079b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079b4:	f84e 3b04 	str.w	r3, [lr], #4
 80079b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079c0:	f8be 3000 	ldrh.w	r3, [lr]
 80079c4:	4562      	cmp	r2, ip
 80079c6:	fb09 330a 	mla	r3, r9, sl, r3
 80079ca:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80079ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079d2:	d8e5      	bhi.n	80079a0 <__multiply+0x108>
 80079d4:	9f01      	ldr	r7, [sp, #4]
 80079d6:	51eb      	str	r3, [r5, r7]
 80079d8:	3504      	adds	r5, #4
 80079da:	e79a      	b.n	8007912 <__multiply+0x7a>
 80079dc:	3e01      	subs	r6, #1
 80079de:	e79c      	b.n	800791a <__multiply+0x82>
 80079e0:	08009268 	.word	0x08009268
 80079e4:	08009279 	.word	0x08009279

080079e8 <__pow5mult>:
 80079e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ec:	4615      	mov	r5, r2
 80079ee:	f012 0203 	ands.w	r2, r2, #3
 80079f2:	4607      	mov	r7, r0
 80079f4:	460e      	mov	r6, r1
 80079f6:	d007      	beq.n	8007a08 <__pow5mult+0x20>
 80079f8:	4c25      	ldr	r4, [pc, #148]	@ (8007a90 <__pow5mult+0xa8>)
 80079fa:	3a01      	subs	r2, #1
 80079fc:	2300      	movs	r3, #0
 80079fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a02:	f7ff fea1 	bl	8007748 <__multadd>
 8007a06:	4606      	mov	r6, r0
 8007a08:	10ad      	asrs	r5, r5, #2
 8007a0a:	d03d      	beq.n	8007a88 <__pow5mult+0xa0>
 8007a0c:	69fc      	ldr	r4, [r7, #28]
 8007a0e:	b97c      	cbnz	r4, 8007a30 <__pow5mult+0x48>
 8007a10:	2010      	movs	r0, #16
 8007a12:	f7ff fd81 	bl	8007518 <malloc>
 8007a16:	4602      	mov	r2, r0
 8007a18:	61f8      	str	r0, [r7, #28]
 8007a1a:	b928      	cbnz	r0, 8007a28 <__pow5mult+0x40>
 8007a1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a20:	4b1c      	ldr	r3, [pc, #112]	@ (8007a94 <__pow5mult+0xac>)
 8007a22:	481d      	ldr	r0, [pc, #116]	@ (8007a98 <__pow5mult+0xb0>)
 8007a24:	f000 ff60 	bl	80088e8 <__assert_func>
 8007a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a2c:	6004      	str	r4, [r0, #0]
 8007a2e:	60c4      	str	r4, [r0, #12]
 8007a30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a38:	b94c      	cbnz	r4, 8007a4e <__pow5mult+0x66>
 8007a3a:	f240 2171 	movw	r1, #625	@ 0x271
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f7ff ff14 	bl	800786c <__i2b>
 8007a44:	2300      	movs	r3, #0
 8007a46:	4604      	mov	r4, r0
 8007a48:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	f04f 0900 	mov.w	r9, #0
 8007a52:	07eb      	lsls	r3, r5, #31
 8007a54:	d50a      	bpl.n	8007a6c <__pow5mult+0x84>
 8007a56:	4631      	mov	r1, r6
 8007a58:	4622      	mov	r2, r4
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f7ff ff1c 	bl	8007898 <__multiply>
 8007a60:	4680      	mov	r8, r0
 8007a62:	4631      	mov	r1, r6
 8007a64:	4638      	mov	r0, r7
 8007a66:	f7ff fe4d 	bl	8007704 <_Bfree>
 8007a6a:	4646      	mov	r6, r8
 8007a6c:	106d      	asrs	r5, r5, #1
 8007a6e:	d00b      	beq.n	8007a88 <__pow5mult+0xa0>
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	b938      	cbnz	r0, 8007a84 <__pow5mult+0x9c>
 8007a74:	4622      	mov	r2, r4
 8007a76:	4621      	mov	r1, r4
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f7ff ff0d 	bl	8007898 <__multiply>
 8007a7e:	6020      	str	r0, [r4, #0]
 8007a80:	f8c0 9000 	str.w	r9, [r0]
 8007a84:	4604      	mov	r4, r0
 8007a86:	e7e4      	b.n	8007a52 <__pow5mult+0x6a>
 8007a88:	4630      	mov	r0, r6
 8007a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a8e:	bf00      	nop
 8007a90:	080092d4 	.word	0x080092d4
 8007a94:	080091f9 	.word	0x080091f9
 8007a98:	08009279 	.word	0x08009279

08007a9c <__lshift>:
 8007a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	4607      	mov	r7, r0
 8007aa4:	4691      	mov	r9, r2
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	6849      	ldr	r1, [r1, #4]
 8007aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007aae:	68a3      	ldr	r3, [r4, #8]
 8007ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ab4:	f108 0601 	add.w	r6, r8, #1
 8007ab8:	42b3      	cmp	r3, r6
 8007aba:	db0b      	blt.n	8007ad4 <__lshift+0x38>
 8007abc:	4638      	mov	r0, r7
 8007abe:	f7ff fde1 	bl	8007684 <_Balloc>
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	b948      	cbnz	r0, 8007ada <__lshift+0x3e>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007acc:	4b27      	ldr	r3, [pc, #156]	@ (8007b6c <__lshift+0xd0>)
 8007ace:	4828      	ldr	r0, [pc, #160]	@ (8007b70 <__lshift+0xd4>)
 8007ad0:	f000 ff0a 	bl	80088e8 <__assert_func>
 8007ad4:	3101      	adds	r1, #1
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__lshift+0x1c>
 8007ada:	2300      	movs	r3, #0
 8007adc:	f100 0114 	add.w	r1, r0, #20
 8007ae0:	f100 0210 	add.w	r2, r0, #16
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	4553      	cmp	r3, sl
 8007ae8:	db33      	blt.n	8007b52 <__lshift+0xb6>
 8007aea:	6920      	ldr	r0, [r4, #16]
 8007aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007af0:	f104 0314 	add.w	r3, r4, #20
 8007af4:	f019 091f 	ands.w	r9, r9, #31
 8007af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b00:	d02b      	beq.n	8007b5a <__lshift+0xbe>
 8007b02:	468a      	mov	sl, r1
 8007b04:	2200      	movs	r2, #0
 8007b06:	f1c9 0e20 	rsb	lr, r9, #32
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007b10:	4310      	orrs	r0, r2
 8007b12:	f84a 0b04 	str.w	r0, [sl], #4
 8007b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b1a:	459c      	cmp	ip, r3
 8007b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b20:	d8f3      	bhi.n	8007b0a <__lshift+0x6e>
 8007b22:	ebac 0304 	sub.w	r3, ip, r4
 8007b26:	3b15      	subs	r3, #21
 8007b28:	f023 0303 	bic.w	r3, r3, #3
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	f104 0015 	add.w	r0, r4, #21
 8007b32:	4584      	cmp	ip, r0
 8007b34:	bf38      	it	cc
 8007b36:	2304      	movcc	r3, #4
 8007b38:	50ca      	str	r2, [r1, r3]
 8007b3a:	b10a      	cbz	r2, 8007b40 <__lshift+0xa4>
 8007b3c:	f108 0602 	add.w	r6, r8, #2
 8007b40:	3e01      	subs	r6, #1
 8007b42:	4638      	mov	r0, r7
 8007b44:	4621      	mov	r1, r4
 8007b46:	612e      	str	r6, [r5, #16]
 8007b48:	f7ff fddc 	bl	8007704 <_Bfree>
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b56:	3301      	adds	r3, #1
 8007b58:	e7c5      	b.n	8007ae6 <__lshift+0x4a>
 8007b5a:	3904      	subs	r1, #4
 8007b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b60:	459c      	cmp	ip, r3
 8007b62:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b66:	d8f9      	bhi.n	8007b5c <__lshift+0xc0>
 8007b68:	e7ea      	b.n	8007b40 <__lshift+0xa4>
 8007b6a:	bf00      	nop
 8007b6c:	08009268 	.word	0x08009268
 8007b70:	08009279 	.word	0x08009279

08007b74 <__mcmp>:
 8007b74:	4603      	mov	r3, r0
 8007b76:	690a      	ldr	r2, [r1, #16]
 8007b78:	6900      	ldr	r0, [r0, #16]
 8007b7a:	b530      	push	{r4, r5, lr}
 8007b7c:	1a80      	subs	r0, r0, r2
 8007b7e:	d10e      	bne.n	8007b9e <__mcmp+0x2a>
 8007b80:	3314      	adds	r3, #20
 8007b82:	3114      	adds	r1, #20
 8007b84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b94:	4295      	cmp	r5, r2
 8007b96:	d003      	beq.n	8007ba0 <__mcmp+0x2c>
 8007b98:	d205      	bcs.n	8007ba6 <__mcmp+0x32>
 8007b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9e:	bd30      	pop	{r4, r5, pc}
 8007ba0:	42a3      	cmp	r3, r4
 8007ba2:	d3f3      	bcc.n	8007b8c <__mcmp+0x18>
 8007ba4:	e7fb      	b.n	8007b9e <__mcmp+0x2a>
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	e7f9      	b.n	8007b9e <__mcmp+0x2a>
	...

08007bac <__mdiff>:
 8007bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	4689      	mov	r9, r1
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4648      	mov	r0, r9
 8007bb8:	4614      	mov	r4, r2
 8007bba:	f7ff ffdb 	bl	8007b74 <__mcmp>
 8007bbe:	1e05      	subs	r5, r0, #0
 8007bc0:	d112      	bne.n	8007be8 <__mdiff+0x3c>
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f7ff fd5d 	bl	8007684 <_Balloc>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <__mdiff+0x2e>
 8007bce:	f240 2137 	movw	r1, #567	@ 0x237
 8007bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8007ccc <__mdiff+0x120>)
 8007bd4:	483e      	ldr	r0, [pc, #248]	@ (8007cd0 <__mdiff+0x124>)
 8007bd6:	f000 fe87 	bl	80088e8 <__assert_func>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007be0:	4610      	mov	r0, r2
 8007be2:	b003      	add	sp, #12
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	bfbc      	itt	lt
 8007bea:	464b      	movlt	r3, r9
 8007bec:	46a1      	movlt	r9, r4
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bf4:	bfba      	itte	lt
 8007bf6:	461c      	movlt	r4, r3
 8007bf8:	2501      	movlt	r5, #1
 8007bfa:	2500      	movge	r5, #0
 8007bfc:	f7ff fd42 	bl	8007684 <_Balloc>
 8007c00:	4602      	mov	r2, r0
 8007c02:	b918      	cbnz	r0, 8007c0c <__mdiff+0x60>
 8007c04:	f240 2145 	movw	r1, #581	@ 0x245
 8007c08:	4b30      	ldr	r3, [pc, #192]	@ (8007ccc <__mdiff+0x120>)
 8007c0a:	e7e3      	b.n	8007bd4 <__mdiff+0x28>
 8007c0c:	f100 0b14 	add.w	fp, r0, #20
 8007c10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c14:	f109 0310 	add.w	r3, r9, #16
 8007c18:	60c5      	str	r5, [r0, #12]
 8007c1a:	f04f 0c00 	mov.w	ip, #0
 8007c1e:	f109 0514 	add.w	r5, r9, #20
 8007c22:	46d9      	mov	r9, fp
 8007c24:	6926      	ldr	r6, [r4, #16]
 8007c26:	f104 0e14 	add.w	lr, r4, #20
 8007c2a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c2e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c32:	9301      	str	r3, [sp, #4]
 8007c34:	9b01      	ldr	r3, [sp, #4]
 8007c36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c3e:	b281      	uxth	r1, r0
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	fa1f f38a 	uxth.w	r3, sl
 8007c46:	1a5b      	subs	r3, r3, r1
 8007c48:	0c00      	lsrs	r0, r0, #16
 8007c4a:	4463      	add	r3, ip
 8007c4c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c50:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c5a:	4576      	cmp	r6, lr
 8007c5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c60:	f849 3b04 	str.w	r3, [r9], #4
 8007c64:	d8e6      	bhi.n	8007c34 <__mdiff+0x88>
 8007c66:	1b33      	subs	r3, r6, r4
 8007c68:	3b15      	subs	r3, #21
 8007c6a:	f023 0303 	bic.w	r3, r3, #3
 8007c6e:	3415      	adds	r4, #21
 8007c70:	3304      	adds	r3, #4
 8007c72:	42a6      	cmp	r6, r4
 8007c74:	bf38      	it	cc
 8007c76:	2304      	movcc	r3, #4
 8007c78:	441d      	add	r5, r3
 8007c7a:	445b      	add	r3, fp
 8007c7c:	461e      	mov	r6, r3
 8007c7e:	462c      	mov	r4, r5
 8007c80:	4544      	cmp	r4, r8
 8007c82:	d30e      	bcc.n	8007ca2 <__mdiff+0xf6>
 8007c84:	f108 0103 	add.w	r1, r8, #3
 8007c88:	1b49      	subs	r1, r1, r5
 8007c8a:	f021 0103 	bic.w	r1, r1, #3
 8007c8e:	3d03      	subs	r5, #3
 8007c90:	45a8      	cmp	r8, r5
 8007c92:	bf38      	it	cc
 8007c94:	2100      	movcc	r1, #0
 8007c96:	440b      	add	r3, r1
 8007c98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c9c:	b199      	cbz	r1, 8007cc6 <__mdiff+0x11a>
 8007c9e:	6117      	str	r7, [r2, #16]
 8007ca0:	e79e      	b.n	8007be0 <__mdiff+0x34>
 8007ca2:	46e6      	mov	lr, ip
 8007ca4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ca8:	fa1f fc81 	uxth.w	ip, r1
 8007cac:	44f4      	add	ip, lr
 8007cae:	0c08      	lsrs	r0, r1, #16
 8007cb0:	4471      	add	r1, lr
 8007cb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cb6:	b289      	uxth	r1, r1
 8007cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cc0:	f846 1b04 	str.w	r1, [r6], #4
 8007cc4:	e7dc      	b.n	8007c80 <__mdiff+0xd4>
 8007cc6:	3f01      	subs	r7, #1
 8007cc8:	e7e6      	b.n	8007c98 <__mdiff+0xec>
 8007cca:	bf00      	nop
 8007ccc:	08009268 	.word	0x08009268
 8007cd0:	08009279 	.word	0x08009279

08007cd4 <__d2b>:
 8007cd4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007cd8:	2101      	movs	r1, #1
 8007cda:	4690      	mov	r8, r2
 8007cdc:	4699      	mov	r9, r3
 8007cde:	9e08      	ldr	r6, [sp, #32]
 8007ce0:	f7ff fcd0 	bl	8007684 <_Balloc>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	b930      	cbnz	r0, 8007cf6 <__d2b+0x22>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	f240 310f 	movw	r1, #783	@ 0x30f
 8007cee:	4b23      	ldr	r3, [pc, #140]	@ (8007d7c <__d2b+0xa8>)
 8007cf0:	4823      	ldr	r0, [pc, #140]	@ (8007d80 <__d2b+0xac>)
 8007cf2:	f000 fdf9 	bl	80088e8 <__assert_func>
 8007cf6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cfe:	b10d      	cbz	r5, 8007d04 <__d2b+0x30>
 8007d00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d04:	9301      	str	r3, [sp, #4]
 8007d06:	f1b8 0300 	subs.w	r3, r8, #0
 8007d0a:	d024      	beq.n	8007d56 <__d2b+0x82>
 8007d0c:	4668      	mov	r0, sp
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	f7ff fd7f 	bl	8007812 <__lo0bits>
 8007d14:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d18:	b1d8      	cbz	r0, 8007d52 <__d2b+0x7e>
 8007d1a:	f1c0 0320 	rsb	r3, r0, #32
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	430b      	orrs	r3, r1
 8007d24:	40c2      	lsrs	r2, r0
 8007d26:	6163      	str	r3, [r4, #20]
 8007d28:	9201      	str	r2, [sp, #4]
 8007d2a:	9b01      	ldr	r3, [sp, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	bf0c      	ite	eq
 8007d30:	2201      	moveq	r2, #1
 8007d32:	2202      	movne	r2, #2
 8007d34:	61a3      	str	r3, [r4, #24]
 8007d36:	6122      	str	r2, [r4, #16]
 8007d38:	b1ad      	cbz	r5, 8007d66 <__d2b+0x92>
 8007d3a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d3e:	4405      	add	r5, r0
 8007d40:	6035      	str	r5, [r6, #0]
 8007d42:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d48:	6018      	str	r0, [r3, #0]
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	b002      	add	sp, #8
 8007d4e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007d52:	6161      	str	r1, [r4, #20]
 8007d54:	e7e9      	b.n	8007d2a <__d2b+0x56>
 8007d56:	a801      	add	r0, sp, #4
 8007d58:	f7ff fd5b 	bl	8007812 <__lo0bits>
 8007d5c:	9b01      	ldr	r3, [sp, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	6163      	str	r3, [r4, #20]
 8007d62:	3020      	adds	r0, #32
 8007d64:	e7e7      	b.n	8007d36 <__d2b+0x62>
 8007d66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d6e:	6030      	str	r0, [r6, #0]
 8007d70:	6918      	ldr	r0, [r3, #16]
 8007d72:	f7ff fd2f 	bl	80077d4 <__hi0bits>
 8007d76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d7a:	e7e4      	b.n	8007d46 <__d2b+0x72>
 8007d7c:	08009268 	.word	0x08009268
 8007d80:	08009279 	.word	0x08009279

08007d84 <__ssputs_r>:
 8007d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	461f      	mov	r7, r3
 8007d8a:	688e      	ldr	r6, [r1, #8]
 8007d8c:	4682      	mov	sl, r0
 8007d8e:	42be      	cmp	r6, r7
 8007d90:	460c      	mov	r4, r1
 8007d92:	4690      	mov	r8, r2
 8007d94:	680b      	ldr	r3, [r1, #0]
 8007d96:	d82d      	bhi.n	8007df4 <__ssputs_r+0x70>
 8007d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007da0:	d026      	beq.n	8007df0 <__ssputs_r+0x6c>
 8007da2:	6965      	ldr	r5, [r4, #20]
 8007da4:	6909      	ldr	r1, [r1, #16]
 8007da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007daa:	eba3 0901 	sub.w	r9, r3, r1
 8007dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007db2:	1c7b      	adds	r3, r7, #1
 8007db4:	444b      	add	r3, r9
 8007db6:	106d      	asrs	r5, r5, #1
 8007db8:	429d      	cmp	r5, r3
 8007dba:	bf38      	it	cc
 8007dbc:	461d      	movcc	r5, r3
 8007dbe:	0553      	lsls	r3, r2, #21
 8007dc0:	d527      	bpl.n	8007e12 <__ssputs_r+0x8e>
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f7ff fbd2 	bl	800756c <_malloc_r>
 8007dc8:	4606      	mov	r6, r0
 8007dca:	b360      	cbz	r0, 8007e26 <__ssputs_r+0xa2>
 8007dcc:	464a      	mov	r2, r9
 8007dce:	6921      	ldr	r1, [r4, #16]
 8007dd0:	f7fe fcfb 	bl	80067ca <memcpy>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	6126      	str	r6, [r4, #16]
 8007de2:	444e      	add	r6, r9
 8007de4:	6026      	str	r6, [r4, #0]
 8007de6:	463e      	mov	r6, r7
 8007de8:	6165      	str	r5, [r4, #20]
 8007dea:	eba5 0509 	sub.w	r5, r5, r9
 8007dee:	60a5      	str	r5, [r4, #8]
 8007df0:	42be      	cmp	r6, r7
 8007df2:	d900      	bls.n	8007df6 <__ssputs_r+0x72>
 8007df4:	463e      	mov	r6, r7
 8007df6:	4632      	mov	r2, r6
 8007df8:	4641      	mov	r1, r8
 8007dfa:	6820      	ldr	r0, [r4, #0]
 8007dfc:	f000 fd49 	bl	8008892 <memmove>
 8007e00:	2000      	movs	r0, #0
 8007e02:	68a3      	ldr	r3, [r4, #8]
 8007e04:	1b9b      	subs	r3, r3, r6
 8007e06:	60a3      	str	r3, [r4, #8]
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	4433      	add	r3, r6
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e12:	462a      	mov	r2, r5
 8007e14:	f000 fdac 	bl	8008970 <_realloc_r>
 8007e18:	4606      	mov	r6, r0
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d1e0      	bne.n	8007de0 <__ssputs_r+0x5c>
 8007e1e:	4650      	mov	r0, sl
 8007e20:	6921      	ldr	r1, [r4, #16]
 8007e22:	f7ff fb31 	bl	8007488 <_free_r>
 8007e26:	230c      	movs	r3, #12
 8007e28:	f8ca 3000 	str.w	r3, [sl]
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e36:	81a3      	strh	r3, [r4, #12]
 8007e38:	e7e9      	b.n	8007e0e <__ssputs_r+0x8a>
	...

08007e3c <_svfiprintf_r>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	4698      	mov	r8, r3
 8007e42:	898b      	ldrh	r3, [r1, #12]
 8007e44:	4607      	mov	r7, r0
 8007e46:	061b      	lsls	r3, r3, #24
 8007e48:	460d      	mov	r5, r1
 8007e4a:	4614      	mov	r4, r2
 8007e4c:	b09d      	sub	sp, #116	@ 0x74
 8007e4e:	d510      	bpl.n	8007e72 <_svfiprintf_r+0x36>
 8007e50:	690b      	ldr	r3, [r1, #16]
 8007e52:	b973      	cbnz	r3, 8007e72 <_svfiprintf_r+0x36>
 8007e54:	2140      	movs	r1, #64	@ 0x40
 8007e56:	f7ff fb89 	bl	800756c <_malloc_r>
 8007e5a:	6028      	str	r0, [r5, #0]
 8007e5c:	6128      	str	r0, [r5, #16]
 8007e5e:	b930      	cbnz	r0, 8007e6e <_svfiprintf_r+0x32>
 8007e60:	230c      	movs	r3, #12
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	b01d      	add	sp, #116	@ 0x74
 8007e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6e:	2340      	movs	r3, #64	@ 0x40
 8007e70:	616b      	str	r3, [r5, #20]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e76:	2320      	movs	r3, #32
 8007e78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e7c:	2330      	movs	r3, #48	@ 0x30
 8007e7e:	f04f 0901 	mov.w	r9, #1
 8007e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008020 <_svfiprintf_r+0x1e4>
 8007e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e8e:	4623      	mov	r3, r4
 8007e90:	469a      	mov	sl, r3
 8007e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e96:	b10a      	cbz	r2, 8007e9c <_svfiprintf_r+0x60>
 8007e98:	2a25      	cmp	r2, #37	@ 0x25
 8007e9a:	d1f9      	bne.n	8007e90 <_svfiprintf_r+0x54>
 8007e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007ea0:	d00b      	beq.n	8007eba <_svfiprintf_r+0x7e>
 8007ea2:	465b      	mov	r3, fp
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f7ff ff6b 	bl	8007d84 <__ssputs_r>
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f000 80a7 	beq.w	8008002 <_svfiprintf_r+0x1c6>
 8007eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eb6:	445a      	add	r2, fp
 8007eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eba:	f89a 3000 	ldrb.w	r3, [sl]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 809f 	beq.w	8008002 <_svfiprintf_r+0x1c6>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ece:	f10a 0a01 	add.w	sl, sl, #1
 8007ed2:	9304      	str	r3, [sp, #16]
 8007ed4:	9307      	str	r3, [sp, #28]
 8007ed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007eda:	931a      	str	r3, [sp, #104]	@ 0x68
 8007edc:	4654      	mov	r4, sl
 8007ede:	2205      	movs	r2, #5
 8007ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee4:	484e      	ldr	r0, [pc, #312]	@ (8008020 <_svfiprintf_r+0x1e4>)
 8007ee6:	f7fe fc62 	bl	80067ae <memchr>
 8007eea:	9a04      	ldr	r2, [sp, #16]
 8007eec:	b9d8      	cbnz	r0, 8007f26 <_svfiprintf_r+0xea>
 8007eee:	06d0      	lsls	r0, r2, #27
 8007ef0:	bf44      	itt	mi
 8007ef2:	2320      	movmi	r3, #32
 8007ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ef8:	0711      	lsls	r1, r2, #28
 8007efa:	bf44      	itt	mi
 8007efc:	232b      	movmi	r3, #43	@ 0x2b
 8007efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f02:	f89a 3000 	ldrb.w	r3, [sl]
 8007f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f08:	d015      	beq.n	8007f36 <_svfiprintf_r+0xfa>
 8007f0a:	4654      	mov	r4, sl
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	f04f 0c0a 	mov.w	ip, #10
 8007f12:	9a07      	ldr	r2, [sp, #28]
 8007f14:	4621      	mov	r1, r4
 8007f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f1a:	3b30      	subs	r3, #48	@ 0x30
 8007f1c:	2b09      	cmp	r3, #9
 8007f1e:	d94b      	bls.n	8007fb8 <_svfiprintf_r+0x17c>
 8007f20:	b1b0      	cbz	r0, 8007f50 <_svfiprintf_r+0x114>
 8007f22:	9207      	str	r2, [sp, #28]
 8007f24:	e014      	b.n	8007f50 <_svfiprintf_r+0x114>
 8007f26:	eba0 0308 	sub.w	r3, r0, r8
 8007f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	46a2      	mov	sl, r4
 8007f32:	9304      	str	r3, [sp, #16]
 8007f34:	e7d2      	b.n	8007edc <_svfiprintf_r+0xa0>
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	1d19      	adds	r1, r3, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	9103      	str	r1, [sp, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bfbb      	ittet	lt
 8007f42:	425b      	neglt	r3, r3
 8007f44:	f042 0202 	orrlt.w	r2, r2, #2
 8007f48:	9307      	strge	r3, [sp, #28]
 8007f4a:	9307      	strlt	r3, [sp, #28]
 8007f4c:	bfb8      	it	lt
 8007f4e:	9204      	strlt	r2, [sp, #16]
 8007f50:	7823      	ldrb	r3, [r4, #0]
 8007f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f54:	d10a      	bne.n	8007f6c <_svfiprintf_r+0x130>
 8007f56:	7863      	ldrb	r3, [r4, #1]
 8007f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f5a:	d132      	bne.n	8007fc2 <_svfiprintf_r+0x186>
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	3402      	adds	r4, #2
 8007f60:	1d1a      	adds	r2, r3, #4
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	9203      	str	r2, [sp, #12]
 8007f66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f6a:	9305      	str	r3, [sp, #20]
 8007f6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008024 <_svfiprintf_r+0x1e8>
 8007f70:	2203      	movs	r2, #3
 8007f72:	4650      	mov	r0, sl
 8007f74:	7821      	ldrb	r1, [r4, #0]
 8007f76:	f7fe fc1a 	bl	80067ae <memchr>
 8007f7a:	b138      	cbz	r0, 8007f8c <_svfiprintf_r+0x150>
 8007f7c:	2240      	movs	r2, #64	@ 0x40
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	eba0 000a 	sub.w	r0, r0, sl
 8007f84:	4082      	lsls	r2, r0
 8007f86:	4313      	orrs	r3, r2
 8007f88:	3401      	adds	r4, #1
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f90:	2206      	movs	r2, #6
 8007f92:	4825      	ldr	r0, [pc, #148]	@ (8008028 <_svfiprintf_r+0x1ec>)
 8007f94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f98:	f7fe fc09 	bl	80067ae <memchr>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d036      	beq.n	800800e <_svfiprintf_r+0x1d2>
 8007fa0:	4b22      	ldr	r3, [pc, #136]	@ (800802c <_svfiprintf_r+0x1f0>)
 8007fa2:	bb1b      	cbnz	r3, 8007fec <_svfiprintf_r+0x1b0>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	3307      	adds	r3, #7
 8007fa8:	f023 0307 	bic.w	r3, r3, #7
 8007fac:	3308      	adds	r3, #8
 8007fae:	9303      	str	r3, [sp, #12]
 8007fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb2:	4433      	add	r3, r6
 8007fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fb6:	e76a      	b.n	8007e8e <_svfiprintf_r+0x52>
 8007fb8:	460c      	mov	r4, r1
 8007fba:	2001      	movs	r0, #1
 8007fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc0:	e7a8      	b.n	8007f14 <_svfiprintf_r+0xd8>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f04f 0c0a 	mov.w	ip, #10
 8007fc8:	4619      	mov	r1, r3
 8007fca:	3401      	adds	r4, #1
 8007fcc:	9305      	str	r3, [sp, #20]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd4:	3a30      	subs	r2, #48	@ 0x30
 8007fd6:	2a09      	cmp	r2, #9
 8007fd8:	d903      	bls.n	8007fe2 <_svfiprintf_r+0x1a6>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0c6      	beq.n	8007f6c <_svfiprintf_r+0x130>
 8007fde:	9105      	str	r1, [sp, #20]
 8007fe0:	e7c4      	b.n	8007f6c <_svfiprintf_r+0x130>
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fea:	e7f0      	b.n	8007fce <_svfiprintf_r+0x192>
 8007fec:	ab03      	add	r3, sp, #12
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	462a      	mov	r2, r5
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8008030 <_svfiprintf_r+0x1f4>)
 8007ff6:	a904      	add	r1, sp, #16
 8007ff8:	f7fd fe4a 	bl	8005c90 <_printf_float>
 8007ffc:	1c42      	adds	r2, r0, #1
 8007ffe:	4606      	mov	r6, r0
 8008000:	d1d6      	bne.n	8007fb0 <_svfiprintf_r+0x174>
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	065b      	lsls	r3, r3, #25
 8008006:	f53f af2d 	bmi.w	8007e64 <_svfiprintf_r+0x28>
 800800a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800800c:	e72c      	b.n	8007e68 <_svfiprintf_r+0x2c>
 800800e:	ab03      	add	r3, sp, #12
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	462a      	mov	r2, r5
 8008014:	4638      	mov	r0, r7
 8008016:	4b06      	ldr	r3, [pc, #24]	@ (8008030 <_svfiprintf_r+0x1f4>)
 8008018:	a904      	add	r1, sp, #16
 800801a:	f7fe f8d7 	bl	80061cc <_printf_i>
 800801e:	e7ed      	b.n	8007ffc <_svfiprintf_r+0x1c0>
 8008020:	080093d0 	.word	0x080093d0
 8008024:	080093d6 	.word	0x080093d6
 8008028:	080093da 	.word	0x080093da
 800802c:	08005c91 	.word	0x08005c91
 8008030:	08007d85 	.word	0x08007d85

08008034 <_sungetc_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	1c4b      	adds	r3, r1, #1
 8008038:	4614      	mov	r4, r2
 800803a:	d103      	bne.n	8008044 <_sungetc_r+0x10>
 800803c:	f04f 35ff 	mov.w	r5, #4294967295
 8008040:	4628      	mov	r0, r5
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	8993      	ldrh	r3, [r2, #12]
 8008046:	b2cd      	uxtb	r5, r1
 8008048:	f023 0320 	bic.w	r3, r3, #32
 800804c:	8193      	strh	r3, [r2, #12]
 800804e:	6853      	ldr	r3, [r2, #4]
 8008050:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008052:	b18a      	cbz	r2, 8008078 <_sungetc_r+0x44>
 8008054:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008056:	429a      	cmp	r2, r3
 8008058:	dd08      	ble.n	800806c <_sungetc_r+0x38>
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	1e5a      	subs	r2, r3, #1
 800805e:	6022      	str	r2, [r4, #0]
 8008060:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008064:	6863      	ldr	r3, [r4, #4]
 8008066:	3301      	adds	r3, #1
 8008068:	6063      	str	r3, [r4, #4]
 800806a:	e7e9      	b.n	8008040 <_sungetc_r+0xc>
 800806c:	4621      	mov	r1, r4
 800806e:	f000 fbd8 	bl	8008822 <__submore>
 8008072:	2800      	cmp	r0, #0
 8008074:	d0f1      	beq.n	800805a <_sungetc_r+0x26>
 8008076:	e7e1      	b.n	800803c <_sungetc_r+0x8>
 8008078:	6921      	ldr	r1, [r4, #16]
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	b141      	cbz	r1, 8008090 <_sungetc_r+0x5c>
 800807e:	4291      	cmp	r1, r2
 8008080:	d206      	bcs.n	8008090 <_sungetc_r+0x5c>
 8008082:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008086:	42a9      	cmp	r1, r5
 8008088:	d102      	bne.n	8008090 <_sungetc_r+0x5c>
 800808a:	3a01      	subs	r2, #1
 800808c:	6022      	str	r2, [r4, #0]
 800808e:	e7ea      	b.n	8008066 <_sungetc_r+0x32>
 8008090:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008098:	6363      	str	r3, [r4, #52]	@ 0x34
 800809a:	2303      	movs	r3, #3
 800809c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800809e:	4623      	mov	r3, r4
 80080a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	2301      	movs	r3, #1
 80080a8:	e7de      	b.n	8008068 <_sungetc_r+0x34>

080080aa <__ssrefill_r>:
 80080aa:	b510      	push	{r4, lr}
 80080ac:	460c      	mov	r4, r1
 80080ae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80080b0:	b169      	cbz	r1, 80080ce <__ssrefill_r+0x24>
 80080b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080b6:	4299      	cmp	r1, r3
 80080b8:	d001      	beq.n	80080be <__ssrefill_r+0x14>
 80080ba:	f7ff f9e5 	bl	8007488 <_free_r>
 80080be:	2000      	movs	r0, #0
 80080c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080c2:	6360      	str	r0, [r4, #52]	@ 0x34
 80080c4:	6063      	str	r3, [r4, #4]
 80080c6:	b113      	cbz	r3, 80080ce <__ssrefill_r+0x24>
 80080c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80080ca:	6023      	str	r3, [r4, #0]
 80080cc:	bd10      	pop	{r4, pc}
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	f04f 30ff 	mov.w	r0, #4294967295
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	2300      	movs	r3, #0
 80080d8:	6063      	str	r3, [r4, #4]
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	f043 0320 	orr.w	r3, r3, #32
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	e7f3      	b.n	80080cc <__ssrefill_r+0x22>

080080e4 <__ssvfiscanf_r>:
 80080e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e8:	460c      	mov	r4, r1
 80080ea:	2100      	movs	r1, #0
 80080ec:	4606      	mov	r6, r0
 80080ee:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80080f2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80080f6:	49aa      	ldr	r1, [pc, #680]	@ (80083a0 <__ssvfiscanf_r+0x2bc>)
 80080f8:	f10d 0804 	add.w	r8, sp, #4
 80080fc:	91a0      	str	r1, [sp, #640]	@ 0x280
 80080fe:	49a9      	ldr	r1, [pc, #676]	@ (80083a4 <__ssvfiscanf_r+0x2c0>)
 8008100:	4fa9      	ldr	r7, [pc, #676]	@ (80083a8 <__ssvfiscanf_r+0x2c4>)
 8008102:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008106:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	7813      	ldrb	r3, [r2, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 8159 	beq.w	80083c4 <__ssvfiscanf_r+0x2e0>
 8008112:	5cf9      	ldrb	r1, [r7, r3]
 8008114:	1c55      	adds	r5, r2, #1
 8008116:	f011 0108 	ands.w	r1, r1, #8
 800811a:	d019      	beq.n	8008150 <__ssvfiscanf_r+0x6c>
 800811c:	6863      	ldr	r3, [r4, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	dd0f      	ble.n	8008142 <__ssvfiscanf_r+0x5e>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	781a      	ldrb	r2, [r3, #0]
 8008126:	5cba      	ldrb	r2, [r7, r2]
 8008128:	0712      	lsls	r2, r2, #28
 800812a:	d401      	bmi.n	8008130 <__ssvfiscanf_r+0x4c>
 800812c:	462a      	mov	r2, r5
 800812e:	e7ec      	b.n	800810a <__ssvfiscanf_r+0x26>
 8008130:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008132:	3301      	adds	r3, #1
 8008134:	3201      	adds	r2, #1
 8008136:	9245      	str	r2, [sp, #276]	@ 0x114
 8008138:	6862      	ldr	r2, [r4, #4]
 800813a:	6023      	str	r3, [r4, #0]
 800813c:	3a01      	subs	r2, #1
 800813e:	6062      	str	r2, [r4, #4]
 8008140:	e7ec      	b.n	800811c <__ssvfiscanf_r+0x38>
 8008142:	4621      	mov	r1, r4
 8008144:	4630      	mov	r0, r6
 8008146:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008148:	4798      	blx	r3
 800814a:	2800      	cmp	r0, #0
 800814c:	d0e9      	beq.n	8008122 <__ssvfiscanf_r+0x3e>
 800814e:	e7ed      	b.n	800812c <__ssvfiscanf_r+0x48>
 8008150:	2b25      	cmp	r3, #37	@ 0x25
 8008152:	d012      	beq.n	800817a <__ssvfiscanf_r+0x96>
 8008154:	4699      	mov	r9, r3
 8008156:	6863      	ldr	r3, [r4, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f340 8094 	ble.w	8008286 <__ssvfiscanf_r+0x1a2>
 800815e:	6822      	ldr	r2, [r4, #0]
 8008160:	7813      	ldrb	r3, [r2, #0]
 8008162:	454b      	cmp	r3, r9
 8008164:	f040 812e 	bne.w	80083c4 <__ssvfiscanf_r+0x2e0>
 8008168:	6863      	ldr	r3, [r4, #4]
 800816a:	3201      	adds	r2, #1
 800816c:	3b01      	subs	r3, #1
 800816e:	6063      	str	r3, [r4, #4]
 8008170:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008172:	6022      	str	r2, [r4, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	9345      	str	r3, [sp, #276]	@ 0x114
 8008178:	e7d8      	b.n	800812c <__ssvfiscanf_r+0x48>
 800817a:	9141      	str	r1, [sp, #260]	@ 0x104
 800817c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800817e:	7853      	ldrb	r3, [r2, #1]
 8008180:	2b2a      	cmp	r3, #42	@ 0x2a
 8008182:	bf04      	itt	eq
 8008184:	2310      	moveq	r3, #16
 8008186:	1c95      	addeq	r5, r2, #2
 8008188:	f04f 020a 	mov.w	r2, #10
 800818c:	bf08      	it	eq
 800818e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008190:	46a9      	mov	r9, r5
 8008192:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008196:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800819a:	2b09      	cmp	r3, #9
 800819c:	d91e      	bls.n	80081dc <__ssvfiscanf_r+0xf8>
 800819e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80083ac <__ssvfiscanf_r+0x2c8>
 80081a2:	2203      	movs	r2, #3
 80081a4:	4650      	mov	r0, sl
 80081a6:	f7fe fb02 	bl	80067ae <memchr>
 80081aa:	b138      	cbz	r0, 80081bc <__ssvfiscanf_r+0xd8>
 80081ac:	2301      	movs	r3, #1
 80081ae:	464d      	mov	r5, r9
 80081b0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80081b2:	eba0 000a 	sub.w	r0, r0, sl
 80081b6:	4083      	lsls	r3, r0
 80081b8:	4313      	orrs	r3, r2
 80081ba:	9341      	str	r3, [sp, #260]	@ 0x104
 80081bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081c0:	2b78      	cmp	r3, #120	@ 0x78
 80081c2:	d806      	bhi.n	80081d2 <__ssvfiscanf_r+0xee>
 80081c4:	2b57      	cmp	r3, #87	@ 0x57
 80081c6:	d810      	bhi.n	80081ea <__ssvfiscanf_r+0x106>
 80081c8:	2b25      	cmp	r3, #37	@ 0x25
 80081ca:	d0c3      	beq.n	8008154 <__ssvfiscanf_r+0x70>
 80081cc:	d856      	bhi.n	800827c <__ssvfiscanf_r+0x198>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d064      	beq.n	800829c <__ssvfiscanf_r+0x1b8>
 80081d2:	2303      	movs	r3, #3
 80081d4:	9347      	str	r3, [sp, #284]	@ 0x11c
 80081d6:	230a      	movs	r3, #10
 80081d8:	9342      	str	r3, [sp, #264]	@ 0x108
 80081da:	e077      	b.n	80082cc <__ssvfiscanf_r+0x1e8>
 80081dc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80081de:	464d      	mov	r5, r9
 80081e0:	fb02 1103 	mla	r1, r2, r3, r1
 80081e4:	3930      	subs	r1, #48	@ 0x30
 80081e6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80081e8:	e7d2      	b.n	8008190 <__ssvfiscanf_r+0xac>
 80081ea:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80081ee:	2a20      	cmp	r2, #32
 80081f0:	d8ef      	bhi.n	80081d2 <__ssvfiscanf_r+0xee>
 80081f2:	a101      	add	r1, pc, #4	@ (adr r1, 80081f8 <__ssvfiscanf_r+0x114>)
 80081f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081f8:	080082ab 	.word	0x080082ab
 80081fc:	080081d3 	.word	0x080081d3
 8008200:	080081d3 	.word	0x080081d3
 8008204:	08008305 	.word	0x08008305
 8008208:	080081d3 	.word	0x080081d3
 800820c:	080081d3 	.word	0x080081d3
 8008210:	080081d3 	.word	0x080081d3
 8008214:	080081d3 	.word	0x080081d3
 8008218:	080081d3 	.word	0x080081d3
 800821c:	080081d3 	.word	0x080081d3
 8008220:	080081d3 	.word	0x080081d3
 8008224:	0800831b 	.word	0x0800831b
 8008228:	08008301 	.word	0x08008301
 800822c:	08008283 	.word	0x08008283
 8008230:	08008283 	.word	0x08008283
 8008234:	08008283 	.word	0x08008283
 8008238:	080081d3 	.word	0x080081d3
 800823c:	080082bd 	.word	0x080082bd
 8008240:	080081d3 	.word	0x080081d3
 8008244:	080081d3 	.word	0x080081d3
 8008248:	080081d3 	.word	0x080081d3
 800824c:	080081d3 	.word	0x080081d3
 8008250:	0800832b 	.word	0x0800832b
 8008254:	080082c5 	.word	0x080082c5
 8008258:	080082a3 	.word	0x080082a3
 800825c:	080081d3 	.word	0x080081d3
 8008260:	080081d3 	.word	0x080081d3
 8008264:	08008327 	.word	0x08008327
 8008268:	080081d3 	.word	0x080081d3
 800826c:	08008301 	.word	0x08008301
 8008270:	080081d3 	.word	0x080081d3
 8008274:	080081d3 	.word	0x080081d3
 8008278:	080082ab 	.word	0x080082ab
 800827c:	3b45      	subs	r3, #69	@ 0x45
 800827e:	2b02      	cmp	r3, #2
 8008280:	d8a7      	bhi.n	80081d2 <__ssvfiscanf_r+0xee>
 8008282:	2305      	movs	r3, #5
 8008284:	e021      	b.n	80082ca <__ssvfiscanf_r+0x1e6>
 8008286:	4621      	mov	r1, r4
 8008288:	4630      	mov	r0, r6
 800828a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800828c:	4798      	blx	r3
 800828e:	2800      	cmp	r0, #0
 8008290:	f43f af65 	beq.w	800815e <__ssvfiscanf_r+0x7a>
 8008294:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008296:	2800      	cmp	r0, #0
 8008298:	f040 808c 	bne.w	80083b4 <__ssvfiscanf_r+0x2d0>
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	e08c      	b.n	80083bc <__ssvfiscanf_r+0x2d8>
 80082a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80082a4:	f042 0220 	orr.w	r2, r2, #32
 80082a8:	9241      	str	r2, [sp, #260]	@ 0x104
 80082aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80082ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80082b2:	2210      	movs	r2, #16
 80082b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80082b6:	9242      	str	r2, [sp, #264]	@ 0x108
 80082b8:	d902      	bls.n	80082c0 <__ssvfiscanf_r+0x1dc>
 80082ba:	e005      	b.n	80082c8 <__ssvfiscanf_r+0x1e4>
 80082bc:	2300      	movs	r3, #0
 80082be:	9342      	str	r3, [sp, #264]	@ 0x108
 80082c0:	2303      	movs	r3, #3
 80082c2:	e002      	b.n	80082ca <__ssvfiscanf_r+0x1e6>
 80082c4:	2308      	movs	r3, #8
 80082c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80082c8:	2304      	movs	r3, #4
 80082ca:	9347      	str	r3, [sp, #284]	@ 0x11c
 80082cc:	6863      	ldr	r3, [r4, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dd39      	ble.n	8008346 <__ssvfiscanf_r+0x262>
 80082d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80082d4:	0659      	lsls	r1, r3, #25
 80082d6:	d404      	bmi.n	80082e2 <__ssvfiscanf_r+0x1fe>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	5cba      	ldrb	r2, [r7, r2]
 80082de:	0712      	lsls	r2, r2, #28
 80082e0:	d438      	bmi.n	8008354 <__ssvfiscanf_r+0x270>
 80082e2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	dc47      	bgt.n	8008378 <__ssvfiscanf_r+0x294>
 80082e8:	466b      	mov	r3, sp
 80082ea:	4622      	mov	r2, r4
 80082ec:	4630      	mov	r0, r6
 80082ee:	a941      	add	r1, sp, #260	@ 0x104
 80082f0:	f000 f86a 	bl	80083c8 <_scanf_chars>
 80082f4:	2801      	cmp	r0, #1
 80082f6:	d065      	beq.n	80083c4 <__ssvfiscanf_r+0x2e0>
 80082f8:	2802      	cmp	r0, #2
 80082fa:	f47f af17 	bne.w	800812c <__ssvfiscanf_r+0x48>
 80082fe:	e7c9      	b.n	8008294 <__ssvfiscanf_r+0x1b0>
 8008300:	220a      	movs	r2, #10
 8008302:	e7d7      	b.n	80082b4 <__ssvfiscanf_r+0x1d0>
 8008304:	4629      	mov	r1, r5
 8008306:	4640      	mov	r0, r8
 8008308:	f000 fa52 	bl	80087b0 <__sccl>
 800830c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800830e:	4605      	mov	r5, r0
 8008310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008314:	9341      	str	r3, [sp, #260]	@ 0x104
 8008316:	2301      	movs	r3, #1
 8008318:	e7d7      	b.n	80082ca <__ssvfiscanf_r+0x1e6>
 800831a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800831c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008320:	9341      	str	r3, [sp, #260]	@ 0x104
 8008322:	2300      	movs	r3, #0
 8008324:	e7d1      	b.n	80082ca <__ssvfiscanf_r+0x1e6>
 8008326:	2302      	movs	r3, #2
 8008328:	e7cf      	b.n	80082ca <__ssvfiscanf_r+0x1e6>
 800832a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800832c:	06c3      	lsls	r3, r0, #27
 800832e:	f53f aefd 	bmi.w	800812c <__ssvfiscanf_r+0x48>
 8008332:	9b00      	ldr	r3, [sp, #0]
 8008334:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008336:	1d19      	adds	r1, r3, #4
 8008338:	9100      	str	r1, [sp, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	07c0      	lsls	r0, r0, #31
 800833e:	bf4c      	ite	mi
 8008340:	801a      	strhmi	r2, [r3, #0]
 8008342:	601a      	strpl	r2, [r3, #0]
 8008344:	e6f2      	b.n	800812c <__ssvfiscanf_r+0x48>
 8008346:	4621      	mov	r1, r4
 8008348:	4630      	mov	r0, r6
 800834a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800834c:	4798      	blx	r3
 800834e:	2800      	cmp	r0, #0
 8008350:	d0bf      	beq.n	80082d2 <__ssvfiscanf_r+0x1ee>
 8008352:	e79f      	b.n	8008294 <__ssvfiscanf_r+0x1b0>
 8008354:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008356:	3201      	adds	r2, #1
 8008358:	9245      	str	r2, [sp, #276]	@ 0x114
 800835a:	6862      	ldr	r2, [r4, #4]
 800835c:	3a01      	subs	r2, #1
 800835e:	2a00      	cmp	r2, #0
 8008360:	6062      	str	r2, [r4, #4]
 8008362:	dd02      	ble.n	800836a <__ssvfiscanf_r+0x286>
 8008364:	3301      	adds	r3, #1
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	e7b6      	b.n	80082d8 <__ssvfiscanf_r+0x1f4>
 800836a:	4621      	mov	r1, r4
 800836c:	4630      	mov	r0, r6
 800836e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008370:	4798      	blx	r3
 8008372:	2800      	cmp	r0, #0
 8008374:	d0b0      	beq.n	80082d8 <__ssvfiscanf_r+0x1f4>
 8008376:	e78d      	b.n	8008294 <__ssvfiscanf_r+0x1b0>
 8008378:	2b04      	cmp	r3, #4
 800837a:	dc06      	bgt.n	800838a <__ssvfiscanf_r+0x2a6>
 800837c:	466b      	mov	r3, sp
 800837e:	4622      	mov	r2, r4
 8008380:	4630      	mov	r0, r6
 8008382:	a941      	add	r1, sp, #260	@ 0x104
 8008384:	f000 f87a 	bl	800847c <_scanf_i>
 8008388:	e7b4      	b.n	80082f4 <__ssvfiscanf_r+0x210>
 800838a:	4b09      	ldr	r3, [pc, #36]	@ (80083b0 <__ssvfiscanf_r+0x2cc>)
 800838c:	2b00      	cmp	r3, #0
 800838e:	f43f aecd 	beq.w	800812c <__ssvfiscanf_r+0x48>
 8008392:	466b      	mov	r3, sp
 8008394:	4622      	mov	r2, r4
 8008396:	4630      	mov	r0, r6
 8008398:	a941      	add	r1, sp, #260	@ 0x104
 800839a:	f3af 8000 	nop.w
 800839e:	e7a9      	b.n	80082f4 <__ssvfiscanf_r+0x210>
 80083a0:	08008035 	.word	0x08008035
 80083a4:	080080ab 	.word	0x080080ab
 80083a8:	08009443 	.word	0x08009443
 80083ac:	080093d6 	.word	0x080093d6
 80083b0:	00000000 	.word	0x00000000
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	065b      	lsls	r3, r3, #25
 80083b8:	f53f af70 	bmi.w	800829c <__ssvfiscanf_r+0x1b8>
 80083bc:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80083c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80083c6:	e7f9      	b.n	80083bc <__ssvfiscanf_r+0x2d8>

080083c8 <_scanf_chars>:
 80083c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083cc:	4615      	mov	r5, r2
 80083ce:	688a      	ldr	r2, [r1, #8]
 80083d0:	4680      	mov	r8, r0
 80083d2:	460c      	mov	r4, r1
 80083d4:	b932      	cbnz	r2, 80083e4 <_scanf_chars+0x1c>
 80083d6:	698a      	ldr	r2, [r1, #24]
 80083d8:	2a00      	cmp	r2, #0
 80083da:	bf14      	ite	ne
 80083dc:	f04f 32ff 	movne.w	r2, #4294967295
 80083e0:	2201      	moveq	r2, #1
 80083e2:	608a      	str	r2, [r1, #8]
 80083e4:	2700      	movs	r7, #0
 80083e6:	6822      	ldr	r2, [r4, #0]
 80083e8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008478 <_scanf_chars+0xb0>
 80083ec:	06d1      	lsls	r1, r2, #27
 80083ee:	bf5f      	itttt	pl
 80083f0:	681a      	ldrpl	r2, [r3, #0]
 80083f2:	1d11      	addpl	r1, r2, #4
 80083f4:	6019      	strpl	r1, [r3, #0]
 80083f6:	6816      	ldrpl	r6, [r2, #0]
 80083f8:	69a0      	ldr	r0, [r4, #24]
 80083fa:	b188      	cbz	r0, 8008420 <_scanf_chars+0x58>
 80083fc:	2801      	cmp	r0, #1
 80083fe:	d107      	bne.n	8008410 <_scanf_chars+0x48>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	781a      	ldrb	r2, [r3, #0]
 8008404:	6963      	ldr	r3, [r4, #20]
 8008406:	5c9b      	ldrb	r3, [r3, r2]
 8008408:	b953      	cbnz	r3, 8008420 <_scanf_chars+0x58>
 800840a:	2f00      	cmp	r7, #0
 800840c:	d031      	beq.n	8008472 <_scanf_chars+0xaa>
 800840e:	e022      	b.n	8008456 <_scanf_chars+0x8e>
 8008410:	2802      	cmp	r0, #2
 8008412:	d120      	bne.n	8008456 <_scanf_chars+0x8e>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f819 3003 	ldrb.w	r3, [r9, r3]
 800841c:	071b      	lsls	r3, r3, #28
 800841e:	d41a      	bmi.n	8008456 <_scanf_chars+0x8e>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	3701      	adds	r7, #1
 8008424:	06da      	lsls	r2, r3, #27
 8008426:	bf5e      	ittt	pl
 8008428:	682b      	ldrpl	r3, [r5, #0]
 800842a:	781b      	ldrbpl	r3, [r3, #0]
 800842c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008430:	682a      	ldr	r2, [r5, #0]
 8008432:	686b      	ldr	r3, [r5, #4]
 8008434:	3201      	adds	r2, #1
 8008436:	602a      	str	r2, [r5, #0]
 8008438:	68a2      	ldr	r2, [r4, #8]
 800843a:	3b01      	subs	r3, #1
 800843c:	3a01      	subs	r2, #1
 800843e:	606b      	str	r3, [r5, #4]
 8008440:	60a2      	str	r2, [r4, #8]
 8008442:	b142      	cbz	r2, 8008456 <_scanf_chars+0x8e>
 8008444:	2b00      	cmp	r3, #0
 8008446:	dcd7      	bgt.n	80083f8 <_scanf_chars+0x30>
 8008448:	4629      	mov	r1, r5
 800844a:	4640      	mov	r0, r8
 800844c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008450:	4798      	blx	r3
 8008452:	2800      	cmp	r0, #0
 8008454:	d0d0      	beq.n	80083f8 <_scanf_chars+0x30>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	f013 0310 	ands.w	r3, r3, #16
 800845c:	d105      	bne.n	800846a <_scanf_chars+0xa2>
 800845e:	68e2      	ldr	r2, [r4, #12]
 8008460:	3201      	adds	r2, #1
 8008462:	60e2      	str	r2, [r4, #12]
 8008464:	69a2      	ldr	r2, [r4, #24]
 8008466:	b102      	cbz	r2, 800846a <_scanf_chars+0xa2>
 8008468:	7033      	strb	r3, [r6, #0]
 800846a:	2000      	movs	r0, #0
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	443b      	add	r3, r7
 8008470:	6123      	str	r3, [r4, #16]
 8008472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008476:	bf00      	nop
 8008478:	08009443 	.word	0x08009443

0800847c <_scanf_i>:
 800847c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	460c      	mov	r4, r1
 8008482:	4698      	mov	r8, r3
 8008484:	4b72      	ldr	r3, [pc, #456]	@ (8008650 <_scanf_i+0x1d4>)
 8008486:	b087      	sub	sp, #28
 8008488:	4682      	mov	sl, r0
 800848a:	4616      	mov	r6, r2
 800848c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008490:	ab03      	add	r3, sp, #12
 8008492:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008496:	4b6f      	ldr	r3, [pc, #444]	@ (8008654 <_scanf_i+0x1d8>)
 8008498:	69a1      	ldr	r1, [r4, #24]
 800849a:	4a6f      	ldr	r2, [pc, #444]	@ (8008658 <_scanf_i+0x1dc>)
 800849c:	4627      	mov	r7, r4
 800849e:	2903      	cmp	r1, #3
 80084a0:	bf08      	it	eq
 80084a2:	461a      	moveq	r2, r3
 80084a4:	68a3      	ldr	r3, [r4, #8]
 80084a6:	9201      	str	r2, [sp, #4]
 80084a8:	1e5a      	subs	r2, r3, #1
 80084aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80084ae:	bf81      	itttt	hi
 80084b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80084b4:	eb03 0905 	addhi.w	r9, r3, r5
 80084b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80084bc:	60a3      	strhi	r3, [r4, #8]
 80084be:	f857 3b1c 	ldr.w	r3, [r7], #28
 80084c2:	bf98      	it	ls
 80084c4:	f04f 0900 	movls.w	r9, #0
 80084c8:	463d      	mov	r5, r7
 80084ca:	f04f 0b00 	mov.w	fp, #0
 80084ce:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80084d2:	6023      	str	r3, [r4, #0]
 80084d4:	6831      	ldr	r1, [r6, #0]
 80084d6:	ab03      	add	r3, sp, #12
 80084d8:	2202      	movs	r2, #2
 80084da:	7809      	ldrb	r1, [r1, #0]
 80084dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80084e0:	f7fe f965 	bl	80067ae <memchr>
 80084e4:	b328      	cbz	r0, 8008532 <_scanf_i+0xb6>
 80084e6:	f1bb 0f01 	cmp.w	fp, #1
 80084ea:	d159      	bne.n	80085a0 <_scanf_i+0x124>
 80084ec:	6862      	ldr	r2, [r4, #4]
 80084ee:	b92a      	cbnz	r2, 80084fc <_scanf_i+0x80>
 80084f0:	2108      	movs	r1, #8
 80084f2:	6822      	ldr	r2, [r4, #0]
 80084f4:	6061      	str	r1, [r4, #4]
 80084f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084fa:	6022      	str	r2, [r4, #0]
 80084fc:	6822      	ldr	r2, [r4, #0]
 80084fe:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008502:	6022      	str	r2, [r4, #0]
 8008504:	68a2      	ldr	r2, [r4, #8]
 8008506:	1e51      	subs	r1, r2, #1
 8008508:	60a1      	str	r1, [r4, #8]
 800850a:	b192      	cbz	r2, 8008532 <_scanf_i+0xb6>
 800850c:	6832      	ldr	r2, [r6, #0]
 800850e:	1c51      	adds	r1, r2, #1
 8008510:	6031      	str	r1, [r6, #0]
 8008512:	7812      	ldrb	r2, [r2, #0]
 8008514:	f805 2b01 	strb.w	r2, [r5], #1
 8008518:	6872      	ldr	r2, [r6, #4]
 800851a:	3a01      	subs	r2, #1
 800851c:	2a00      	cmp	r2, #0
 800851e:	6072      	str	r2, [r6, #4]
 8008520:	dc07      	bgt.n	8008532 <_scanf_i+0xb6>
 8008522:	4631      	mov	r1, r6
 8008524:	4650      	mov	r0, sl
 8008526:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800852a:	4790      	blx	r2
 800852c:	2800      	cmp	r0, #0
 800852e:	f040 8085 	bne.w	800863c <_scanf_i+0x1c0>
 8008532:	f10b 0b01 	add.w	fp, fp, #1
 8008536:	f1bb 0f03 	cmp.w	fp, #3
 800853a:	d1cb      	bne.n	80084d4 <_scanf_i+0x58>
 800853c:	6863      	ldr	r3, [r4, #4]
 800853e:	b90b      	cbnz	r3, 8008544 <_scanf_i+0xc8>
 8008540:	230a      	movs	r3, #10
 8008542:	6063      	str	r3, [r4, #4]
 8008544:	6863      	ldr	r3, [r4, #4]
 8008546:	4945      	ldr	r1, [pc, #276]	@ (800865c <_scanf_i+0x1e0>)
 8008548:	6960      	ldr	r0, [r4, #20]
 800854a:	1ac9      	subs	r1, r1, r3
 800854c:	f000 f930 	bl	80087b0 <__sccl>
 8008550:	f04f 0b00 	mov.w	fp, #0
 8008554:	68a3      	ldr	r3, [r4, #8]
 8008556:	6822      	ldr	r2, [r4, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d03d      	beq.n	80085d8 <_scanf_i+0x15c>
 800855c:	6831      	ldr	r1, [r6, #0]
 800855e:	6960      	ldr	r0, [r4, #20]
 8008560:	f891 c000 	ldrb.w	ip, [r1]
 8008564:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008568:	2800      	cmp	r0, #0
 800856a:	d035      	beq.n	80085d8 <_scanf_i+0x15c>
 800856c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008570:	d124      	bne.n	80085bc <_scanf_i+0x140>
 8008572:	0510      	lsls	r0, r2, #20
 8008574:	d522      	bpl.n	80085bc <_scanf_i+0x140>
 8008576:	f10b 0b01 	add.w	fp, fp, #1
 800857a:	f1b9 0f00 	cmp.w	r9, #0
 800857e:	d003      	beq.n	8008588 <_scanf_i+0x10c>
 8008580:	3301      	adds	r3, #1
 8008582:	f109 39ff 	add.w	r9, r9, #4294967295
 8008586:	60a3      	str	r3, [r4, #8]
 8008588:	6873      	ldr	r3, [r6, #4]
 800858a:	3b01      	subs	r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	6073      	str	r3, [r6, #4]
 8008590:	dd1b      	ble.n	80085ca <_scanf_i+0x14e>
 8008592:	6833      	ldr	r3, [r6, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	6033      	str	r3, [r6, #0]
 8008598:	68a3      	ldr	r3, [r4, #8]
 800859a:	3b01      	subs	r3, #1
 800859c:	60a3      	str	r3, [r4, #8]
 800859e:	e7d9      	b.n	8008554 <_scanf_i+0xd8>
 80085a0:	f1bb 0f02 	cmp.w	fp, #2
 80085a4:	d1ae      	bne.n	8008504 <_scanf_i+0x88>
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80085ac:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80085b0:	d1bf      	bne.n	8008532 <_scanf_i+0xb6>
 80085b2:	2110      	movs	r1, #16
 80085b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085b8:	6061      	str	r1, [r4, #4]
 80085ba:	e7a2      	b.n	8008502 <_scanf_i+0x86>
 80085bc:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80085c0:	6022      	str	r2, [r4, #0]
 80085c2:	780b      	ldrb	r3, [r1, #0]
 80085c4:	f805 3b01 	strb.w	r3, [r5], #1
 80085c8:	e7de      	b.n	8008588 <_scanf_i+0x10c>
 80085ca:	4631      	mov	r1, r6
 80085cc:	4650      	mov	r0, sl
 80085ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80085d2:	4798      	blx	r3
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d0df      	beq.n	8008598 <_scanf_i+0x11c>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	05d9      	lsls	r1, r3, #23
 80085dc:	d50d      	bpl.n	80085fa <_scanf_i+0x17e>
 80085de:	42bd      	cmp	r5, r7
 80085e0:	d909      	bls.n	80085f6 <_scanf_i+0x17a>
 80085e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80085e6:	4632      	mov	r2, r6
 80085e8:	4650      	mov	r0, sl
 80085ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085ee:	f105 39ff 	add.w	r9, r5, #4294967295
 80085f2:	4798      	blx	r3
 80085f4:	464d      	mov	r5, r9
 80085f6:	42bd      	cmp	r5, r7
 80085f8:	d028      	beq.n	800864c <_scanf_i+0x1d0>
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	f012 0210 	ands.w	r2, r2, #16
 8008600:	d113      	bne.n	800862a <_scanf_i+0x1ae>
 8008602:	702a      	strb	r2, [r5, #0]
 8008604:	4639      	mov	r1, r7
 8008606:	6863      	ldr	r3, [r4, #4]
 8008608:	4650      	mov	r0, sl
 800860a:	9e01      	ldr	r6, [sp, #4]
 800860c:	47b0      	blx	r6
 800860e:	f8d8 3000 	ldr.w	r3, [r8]
 8008612:	6821      	ldr	r1, [r4, #0]
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	f8c8 2000 	str.w	r2, [r8]
 800861a:	f011 0f20 	tst.w	r1, #32
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	d00f      	beq.n	8008642 <_scanf_i+0x1c6>
 8008622:	6018      	str	r0, [r3, #0]
 8008624:	68e3      	ldr	r3, [r4, #12]
 8008626:	3301      	adds	r3, #1
 8008628:	60e3      	str	r3, [r4, #12]
 800862a:	2000      	movs	r0, #0
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	1bed      	subs	r5, r5, r7
 8008630:	445d      	add	r5, fp
 8008632:	442b      	add	r3, r5
 8008634:	6123      	str	r3, [r4, #16]
 8008636:	b007      	add	sp, #28
 8008638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863c:	f04f 0b00 	mov.w	fp, #0
 8008640:	e7ca      	b.n	80085d8 <_scanf_i+0x15c>
 8008642:	07ca      	lsls	r2, r1, #31
 8008644:	bf4c      	ite	mi
 8008646:	8018      	strhmi	r0, [r3, #0]
 8008648:	6018      	strpl	r0, [r3, #0]
 800864a:	e7eb      	b.n	8008624 <_scanf_i+0x1a8>
 800864c:	2001      	movs	r0, #1
 800864e:	e7f2      	b.n	8008636 <_scanf_i+0x1ba>
 8008650:	08009164 	.word	0x08009164
 8008654:	08008ac1 	.word	0x08008ac1
 8008658:	08008ba1 	.word	0x08008ba1
 800865c:	080093f1 	.word	0x080093f1

08008660 <__sflush_r>:
 8008660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	0716      	lsls	r6, r2, #28
 8008668:	4605      	mov	r5, r0
 800866a:	460c      	mov	r4, r1
 800866c:	d454      	bmi.n	8008718 <__sflush_r+0xb8>
 800866e:	684b      	ldr	r3, [r1, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	dc02      	bgt.n	800867a <__sflush_r+0x1a>
 8008674:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008676:	2b00      	cmp	r3, #0
 8008678:	dd48      	ble.n	800870c <__sflush_r+0xac>
 800867a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800867c:	2e00      	cmp	r6, #0
 800867e:	d045      	beq.n	800870c <__sflush_r+0xac>
 8008680:	2300      	movs	r3, #0
 8008682:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008686:	682f      	ldr	r7, [r5, #0]
 8008688:	6a21      	ldr	r1, [r4, #32]
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	d030      	beq.n	80086f0 <__sflush_r+0x90>
 800868e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	0759      	lsls	r1, r3, #29
 8008694:	d505      	bpl.n	80086a2 <__sflush_r+0x42>
 8008696:	6863      	ldr	r3, [r4, #4]
 8008698:	1ad2      	subs	r2, r2, r3
 800869a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800869c:	b10b      	cbz	r3, 80086a2 <__sflush_r+0x42>
 800869e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086a0:	1ad2      	subs	r2, r2, r3
 80086a2:	2300      	movs	r3, #0
 80086a4:	4628      	mov	r0, r5
 80086a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086a8:	6a21      	ldr	r1, [r4, #32]
 80086aa:	47b0      	blx	r6
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	d106      	bne.n	80086c0 <__sflush_r+0x60>
 80086b2:	6829      	ldr	r1, [r5, #0]
 80086b4:	291d      	cmp	r1, #29
 80086b6:	d82b      	bhi.n	8008710 <__sflush_r+0xb0>
 80086b8:	4a28      	ldr	r2, [pc, #160]	@ (800875c <__sflush_r+0xfc>)
 80086ba:	410a      	asrs	r2, r1
 80086bc:	07d6      	lsls	r6, r2, #31
 80086be:	d427      	bmi.n	8008710 <__sflush_r+0xb0>
 80086c0:	2200      	movs	r2, #0
 80086c2:	6062      	str	r2, [r4, #4]
 80086c4:	6922      	ldr	r2, [r4, #16]
 80086c6:	04d9      	lsls	r1, r3, #19
 80086c8:	6022      	str	r2, [r4, #0]
 80086ca:	d504      	bpl.n	80086d6 <__sflush_r+0x76>
 80086cc:	1c42      	adds	r2, r0, #1
 80086ce:	d101      	bne.n	80086d4 <__sflush_r+0x74>
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	b903      	cbnz	r3, 80086d6 <__sflush_r+0x76>
 80086d4:	6560      	str	r0, [r4, #84]	@ 0x54
 80086d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086d8:	602f      	str	r7, [r5, #0]
 80086da:	b1b9      	cbz	r1, 800870c <__sflush_r+0xac>
 80086dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086e0:	4299      	cmp	r1, r3
 80086e2:	d002      	beq.n	80086ea <__sflush_r+0x8a>
 80086e4:	4628      	mov	r0, r5
 80086e6:	f7fe fecf 	bl	8007488 <_free_r>
 80086ea:	2300      	movs	r3, #0
 80086ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80086ee:	e00d      	b.n	800870c <__sflush_r+0xac>
 80086f0:	2301      	movs	r3, #1
 80086f2:	4628      	mov	r0, r5
 80086f4:	47b0      	blx	r6
 80086f6:	4602      	mov	r2, r0
 80086f8:	1c50      	adds	r0, r2, #1
 80086fa:	d1c9      	bne.n	8008690 <__sflush_r+0x30>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0c6      	beq.n	8008690 <__sflush_r+0x30>
 8008702:	2b1d      	cmp	r3, #29
 8008704:	d001      	beq.n	800870a <__sflush_r+0xaa>
 8008706:	2b16      	cmp	r3, #22
 8008708:	d11d      	bne.n	8008746 <__sflush_r+0xe6>
 800870a:	602f      	str	r7, [r5, #0]
 800870c:	2000      	movs	r0, #0
 800870e:	e021      	b.n	8008754 <__sflush_r+0xf4>
 8008710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008714:	b21b      	sxth	r3, r3
 8008716:	e01a      	b.n	800874e <__sflush_r+0xee>
 8008718:	690f      	ldr	r7, [r1, #16]
 800871a:	2f00      	cmp	r7, #0
 800871c:	d0f6      	beq.n	800870c <__sflush_r+0xac>
 800871e:	0793      	lsls	r3, r2, #30
 8008720:	bf18      	it	ne
 8008722:	2300      	movne	r3, #0
 8008724:	680e      	ldr	r6, [r1, #0]
 8008726:	bf08      	it	eq
 8008728:	694b      	ldreq	r3, [r1, #20]
 800872a:	1bf6      	subs	r6, r6, r7
 800872c:	600f      	str	r7, [r1, #0]
 800872e:	608b      	str	r3, [r1, #8]
 8008730:	2e00      	cmp	r6, #0
 8008732:	ddeb      	ble.n	800870c <__sflush_r+0xac>
 8008734:	4633      	mov	r3, r6
 8008736:	463a      	mov	r2, r7
 8008738:	4628      	mov	r0, r5
 800873a:	6a21      	ldr	r1, [r4, #32]
 800873c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008740:	47e0      	blx	ip
 8008742:	2800      	cmp	r0, #0
 8008744:	dc07      	bgt.n	8008756 <__sflush_r+0xf6>
 8008746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800874e:	f04f 30ff 	mov.w	r0, #4294967295
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008756:	4407      	add	r7, r0
 8008758:	1a36      	subs	r6, r6, r0
 800875a:	e7e9      	b.n	8008730 <__sflush_r+0xd0>
 800875c:	dfbffffe 	.word	0xdfbffffe

08008760 <_fflush_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	690b      	ldr	r3, [r1, #16]
 8008764:	4605      	mov	r5, r0
 8008766:	460c      	mov	r4, r1
 8008768:	b913      	cbnz	r3, 8008770 <_fflush_r+0x10>
 800876a:	2500      	movs	r5, #0
 800876c:	4628      	mov	r0, r5
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	b118      	cbz	r0, 800877a <_fflush_r+0x1a>
 8008772:	6a03      	ldr	r3, [r0, #32]
 8008774:	b90b      	cbnz	r3, 800877a <_fflush_r+0x1a>
 8008776:	f7fd fed5 	bl	8006524 <__sinit>
 800877a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f3      	beq.n	800876a <_fflush_r+0xa>
 8008782:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008784:	07d0      	lsls	r0, r2, #31
 8008786:	d404      	bmi.n	8008792 <_fflush_r+0x32>
 8008788:	0599      	lsls	r1, r3, #22
 800878a:	d402      	bmi.n	8008792 <_fflush_r+0x32>
 800878c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878e:	f7fe f80c 	bl	80067aa <__retarget_lock_acquire_recursive>
 8008792:	4628      	mov	r0, r5
 8008794:	4621      	mov	r1, r4
 8008796:	f7ff ff63 	bl	8008660 <__sflush_r>
 800879a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800879c:	4605      	mov	r5, r0
 800879e:	07da      	lsls	r2, r3, #31
 80087a0:	d4e4      	bmi.n	800876c <_fflush_r+0xc>
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	059b      	lsls	r3, r3, #22
 80087a6:	d4e1      	bmi.n	800876c <_fflush_r+0xc>
 80087a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087aa:	f7fd ffff 	bl	80067ac <__retarget_lock_release_recursive>
 80087ae:	e7dd      	b.n	800876c <_fflush_r+0xc>

080087b0 <__sccl>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	780b      	ldrb	r3, [r1, #0]
 80087b4:	4604      	mov	r4, r0
 80087b6:	2b5e      	cmp	r3, #94	@ 0x5e
 80087b8:	bf0b      	itete	eq
 80087ba:	784b      	ldrbeq	r3, [r1, #1]
 80087bc:	1c4a      	addne	r2, r1, #1
 80087be:	1c8a      	addeq	r2, r1, #2
 80087c0:	2100      	movne	r1, #0
 80087c2:	bf08      	it	eq
 80087c4:	2101      	moveq	r1, #1
 80087c6:	3801      	subs	r0, #1
 80087c8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80087cc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80087d0:	42a8      	cmp	r0, r5
 80087d2:	d1fb      	bne.n	80087cc <__sccl+0x1c>
 80087d4:	b90b      	cbnz	r3, 80087da <__sccl+0x2a>
 80087d6:	1e50      	subs	r0, r2, #1
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	f081 0101 	eor.w	r1, r1, #1
 80087de:	4610      	mov	r0, r2
 80087e0:	54e1      	strb	r1, [r4, r3]
 80087e2:	4602      	mov	r2, r0
 80087e4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80087e8:	2d2d      	cmp	r5, #45	@ 0x2d
 80087ea:	d005      	beq.n	80087f8 <__sccl+0x48>
 80087ec:	2d5d      	cmp	r5, #93	@ 0x5d
 80087ee:	d016      	beq.n	800881e <__sccl+0x6e>
 80087f0:	2d00      	cmp	r5, #0
 80087f2:	d0f1      	beq.n	80087d8 <__sccl+0x28>
 80087f4:	462b      	mov	r3, r5
 80087f6:	e7f2      	b.n	80087de <__sccl+0x2e>
 80087f8:	7846      	ldrb	r6, [r0, #1]
 80087fa:	2e5d      	cmp	r6, #93	@ 0x5d
 80087fc:	d0fa      	beq.n	80087f4 <__sccl+0x44>
 80087fe:	42b3      	cmp	r3, r6
 8008800:	dcf8      	bgt.n	80087f4 <__sccl+0x44>
 8008802:	461a      	mov	r2, r3
 8008804:	3002      	adds	r0, #2
 8008806:	3201      	adds	r2, #1
 8008808:	4296      	cmp	r6, r2
 800880a:	54a1      	strb	r1, [r4, r2]
 800880c:	dcfb      	bgt.n	8008806 <__sccl+0x56>
 800880e:	1af2      	subs	r2, r6, r3
 8008810:	3a01      	subs	r2, #1
 8008812:	42b3      	cmp	r3, r6
 8008814:	bfa8      	it	ge
 8008816:	2200      	movge	r2, #0
 8008818:	1c5d      	adds	r5, r3, #1
 800881a:	18ab      	adds	r3, r5, r2
 800881c:	e7e1      	b.n	80087e2 <__sccl+0x32>
 800881e:	4610      	mov	r0, r2
 8008820:	e7da      	b.n	80087d8 <__sccl+0x28>

08008822 <__submore>:
 8008822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008826:	460c      	mov	r4, r1
 8008828:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800882a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800882e:	4299      	cmp	r1, r3
 8008830:	d11b      	bne.n	800886a <__submore+0x48>
 8008832:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008836:	f7fe fe99 	bl	800756c <_malloc_r>
 800883a:	b918      	cbnz	r0, 8008844 <__submore+0x22>
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008848:	63a3      	str	r3, [r4, #56]	@ 0x38
 800884a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800884e:	6360      	str	r0, [r4, #52]	@ 0x34
 8008850:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008854:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008858:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800885c:	7043      	strb	r3, [r0, #1]
 800885e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008862:	7003      	strb	r3, [r0, #0]
 8008864:	6020      	str	r0, [r4, #0]
 8008866:	2000      	movs	r0, #0
 8008868:	e7ea      	b.n	8008840 <__submore+0x1e>
 800886a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800886c:	0077      	lsls	r7, r6, #1
 800886e:	463a      	mov	r2, r7
 8008870:	f000 f87e 	bl	8008970 <_realloc_r>
 8008874:	4605      	mov	r5, r0
 8008876:	2800      	cmp	r0, #0
 8008878:	d0e0      	beq.n	800883c <__submore+0x1a>
 800887a:	eb00 0806 	add.w	r8, r0, r6
 800887e:	4601      	mov	r1, r0
 8008880:	4632      	mov	r2, r6
 8008882:	4640      	mov	r0, r8
 8008884:	f7fd ffa1 	bl	80067ca <memcpy>
 8008888:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800888c:	f8c4 8000 	str.w	r8, [r4]
 8008890:	e7e9      	b.n	8008866 <__submore+0x44>

08008892 <memmove>:
 8008892:	4288      	cmp	r0, r1
 8008894:	b510      	push	{r4, lr}
 8008896:	eb01 0402 	add.w	r4, r1, r2
 800889a:	d902      	bls.n	80088a2 <memmove+0x10>
 800889c:	4284      	cmp	r4, r0
 800889e:	4623      	mov	r3, r4
 80088a0:	d807      	bhi.n	80088b2 <memmove+0x20>
 80088a2:	1e43      	subs	r3, r0, #1
 80088a4:	42a1      	cmp	r1, r4
 80088a6:	d008      	beq.n	80088ba <memmove+0x28>
 80088a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088b0:	e7f8      	b.n	80088a4 <memmove+0x12>
 80088b2:	4601      	mov	r1, r0
 80088b4:	4402      	add	r2, r0
 80088b6:	428a      	cmp	r2, r1
 80088b8:	d100      	bne.n	80088bc <memmove+0x2a>
 80088ba:	bd10      	pop	{r4, pc}
 80088bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088c4:	e7f7      	b.n	80088b6 <memmove+0x24>
	...

080088c8 <_sbrk_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	2300      	movs	r3, #0
 80088cc:	4d05      	ldr	r5, [pc, #20]	@ (80088e4 <_sbrk_r+0x1c>)
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	f7fa f81e 	bl	8002914 <_sbrk>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_sbrk_r+0x1a>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_sbrk_r+0x1a>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	20000970 	.word	0x20000970

080088e8 <__assert_func>:
 80088e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088ea:	4614      	mov	r4, r2
 80088ec:	461a      	mov	r2, r3
 80088ee:	4b09      	ldr	r3, [pc, #36]	@ (8008914 <__assert_func+0x2c>)
 80088f0:	4605      	mov	r5, r0
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68d8      	ldr	r0, [r3, #12]
 80088f6:	b954      	cbnz	r4, 800890e <__assert_func+0x26>
 80088f8:	4b07      	ldr	r3, [pc, #28]	@ (8008918 <__assert_func+0x30>)
 80088fa:	461c      	mov	r4, r3
 80088fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008900:	9100      	str	r1, [sp, #0]
 8008902:	462b      	mov	r3, r5
 8008904:	4905      	ldr	r1, [pc, #20]	@ (800891c <__assert_func+0x34>)
 8008906:	f000 f95b 	bl	8008bc0 <fiprintf>
 800890a:	f000 f96b 	bl	8008be4 <abort>
 800890e:	4b04      	ldr	r3, [pc, #16]	@ (8008920 <__assert_func+0x38>)
 8008910:	e7f4      	b.n	80088fc <__assert_func+0x14>
 8008912:	bf00      	nop
 8008914:	20000020 	.word	0x20000020
 8008918:	08009441 	.word	0x08009441
 800891c:	08009413 	.word	0x08009413
 8008920:	08009406 	.word	0x08009406

08008924 <_calloc_r>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	fba1 5402 	umull	r5, r4, r1, r2
 800892a:	b93c      	cbnz	r4, 800893c <_calloc_r+0x18>
 800892c:	4629      	mov	r1, r5
 800892e:	f7fe fe1d 	bl	800756c <_malloc_r>
 8008932:	4606      	mov	r6, r0
 8008934:	b928      	cbnz	r0, 8008942 <_calloc_r+0x1e>
 8008936:	2600      	movs	r6, #0
 8008938:	4630      	mov	r0, r6
 800893a:	bd70      	pop	{r4, r5, r6, pc}
 800893c:	220c      	movs	r2, #12
 800893e:	6002      	str	r2, [r0, #0]
 8008940:	e7f9      	b.n	8008936 <_calloc_r+0x12>
 8008942:	462a      	mov	r2, r5
 8008944:	4621      	mov	r1, r4
 8008946:	f7fd feb2 	bl	80066ae <memset>
 800894a:	e7f5      	b.n	8008938 <_calloc_r+0x14>

0800894c <__ascii_mbtowc>:
 800894c:	b082      	sub	sp, #8
 800894e:	b901      	cbnz	r1, 8008952 <__ascii_mbtowc+0x6>
 8008950:	a901      	add	r1, sp, #4
 8008952:	b142      	cbz	r2, 8008966 <__ascii_mbtowc+0x1a>
 8008954:	b14b      	cbz	r3, 800896a <__ascii_mbtowc+0x1e>
 8008956:	7813      	ldrb	r3, [r2, #0]
 8008958:	600b      	str	r3, [r1, #0]
 800895a:	7812      	ldrb	r2, [r2, #0]
 800895c:	1e10      	subs	r0, r2, #0
 800895e:	bf18      	it	ne
 8008960:	2001      	movne	r0, #1
 8008962:	b002      	add	sp, #8
 8008964:	4770      	bx	lr
 8008966:	4610      	mov	r0, r2
 8008968:	e7fb      	b.n	8008962 <__ascii_mbtowc+0x16>
 800896a:	f06f 0001 	mvn.w	r0, #1
 800896e:	e7f8      	b.n	8008962 <__ascii_mbtowc+0x16>

08008970 <_realloc_r>:
 8008970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008974:	4680      	mov	r8, r0
 8008976:	4615      	mov	r5, r2
 8008978:	460c      	mov	r4, r1
 800897a:	b921      	cbnz	r1, 8008986 <_realloc_r+0x16>
 800897c:	4611      	mov	r1, r2
 800897e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008982:	f7fe bdf3 	b.w	800756c <_malloc_r>
 8008986:	b92a      	cbnz	r2, 8008994 <_realloc_r+0x24>
 8008988:	f7fe fd7e 	bl	8007488 <_free_r>
 800898c:	2400      	movs	r4, #0
 800898e:	4620      	mov	r0, r4
 8008990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008994:	f000 f92d 	bl	8008bf2 <_malloc_usable_size_r>
 8008998:	4285      	cmp	r5, r0
 800899a:	4606      	mov	r6, r0
 800899c:	d802      	bhi.n	80089a4 <_realloc_r+0x34>
 800899e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80089a2:	d8f4      	bhi.n	800898e <_realloc_r+0x1e>
 80089a4:	4629      	mov	r1, r5
 80089a6:	4640      	mov	r0, r8
 80089a8:	f7fe fde0 	bl	800756c <_malloc_r>
 80089ac:	4607      	mov	r7, r0
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d0ec      	beq.n	800898c <_realloc_r+0x1c>
 80089b2:	42b5      	cmp	r5, r6
 80089b4:	462a      	mov	r2, r5
 80089b6:	4621      	mov	r1, r4
 80089b8:	bf28      	it	cs
 80089ba:	4632      	movcs	r2, r6
 80089bc:	f7fd ff05 	bl	80067ca <memcpy>
 80089c0:	4621      	mov	r1, r4
 80089c2:	4640      	mov	r0, r8
 80089c4:	f7fe fd60 	bl	8007488 <_free_r>
 80089c8:	463c      	mov	r4, r7
 80089ca:	e7e0      	b.n	800898e <_realloc_r+0x1e>

080089cc <_strtol_l.constprop.0>:
 80089cc:	2b24      	cmp	r3, #36	@ 0x24
 80089ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d2:	4686      	mov	lr, r0
 80089d4:	4690      	mov	r8, r2
 80089d6:	d801      	bhi.n	80089dc <_strtol_l.constprop.0+0x10>
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d106      	bne.n	80089ea <_strtol_l.constprop.0+0x1e>
 80089dc:	f7fd feba 	bl	8006754 <__errno>
 80089e0:	2316      	movs	r3, #22
 80089e2:	6003      	str	r3, [r0, #0]
 80089e4:	2000      	movs	r0, #0
 80089e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ea:	460d      	mov	r5, r1
 80089ec:	4833      	ldr	r0, [pc, #204]	@ (8008abc <_strtol_l.constprop.0+0xf0>)
 80089ee:	462a      	mov	r2, r5
 80089f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089f4:	5d06      	ldrb	r6, [r0, r4]
 80089f6:	f016 0608 	ands.w	r6, r6, #8
 80089fa:	d1f8      	bne.n	80089ee <_strtol_l.constprop.0+0x22>
 80089fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80089fe:	d12d      	bne.n	8008a5c <_strtol_l.constprop.0+0x90>
 8008a00:	2601      	movs	r6, #1
 8008a02:	782c      	ldrb	r4, [r5, #0]
 8008a04:	1c95      	adds	r5, r2, #2
 8008a06:	f033 0210 	bics.w	r2, r3, #16
 8008a0a:	d109      	bne.n	8008a20 <_strtol_l.constprop.0+0x54>
 8008a0c:	2c30      	cmp	r4, #48	@ 0x30
 8008a0e:	d12a      	bne.n	8008a66 <_strtol_l.constprop.0+0x9a>
 8008a10:	782a      	ldrb	r2, [r5, #0]
 8008a12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a16:	2a58      	cmp	r2, #88	@ 0x58
 8008a18:	d125      	bne.n	8008a66 <_strtol_l.constprop.0+0x9a>
 8008a1a:	2310      	movs	r3, #16
 8008a1c:	786c      	ldrb	r4, [r5, #1]
 8008a1e:	3502      	adds	r5, #2
 8008a20:	2200      	movs	r2, #0
 8008a22:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008a26:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a2a:	fbbc f9f3 	udiv	r9, ip, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008a38:	2f09      	cmp	r7, #9
 8008a3a:	d81b      	bhi.n	8008a74 <_strtol_l.constprop.0+0xa8>
 8008a3c:	463c      	mov	r4, r7
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	dd27      	ble.n	8008a92 <_strtol_l.constprop.0+0xc6>
 8008a42:	1c57      	adds	r7, r2, #1
 8008a44:	d007      	beq.n	8008a56 <_strtol_l.constprop.0+0x8a>
 8008a46:	4581      	cmp	r9, r0
 8008a48:	d320      	bcc.n	8008a8c <_strtol_l.constprop.0+0xc0>
 8008a4a:	d101      	bne.n	8008a50 <_strtol_l.constprop.0+0x84>
 8008a4c:	45a2      	cmp	sl, r4
 8008a4e:	db1d      	blt.n	8008a8c <_strtol_l.constprop.0+0xc0>
 8008a50:	2201      	movs	r2, #1
 8008a52:	fb00 4003 	mla	r0, r0, r3, r4
 8008a56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a5a:	e7eb      	b.n	8008a34 <_strtol_l.constprop.0+0x68>
 8008a5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a5e:	bf04      	itt	eq
 8008a60:	782c      	ldrbeq	r4, [r5, #0]
 8008a62:	1c95      	addeq	r5, r2, #2
 8008a64:	e7cf      	b.n	8008a06 <_strtol_l.constprop.0+0x3a>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1da      	bne.n	8008a20 <_strtol_l.constprop.0+0x54>
 8008a6a:	2c30      	cmp	r4, #48	@ 0x30
 8008a6c:	bf0c      	ite	eq
 8008a6e:	2308      	moveq	r3, #8
 8008a70:	230a      	movne	r3, #10
 8008a72:	e7d5      	b.n	8008a20 <_strtol_l.constprop.0+0x54>
 8008a74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008a78:	2f19      	cmp	r7, #25
 8008a7a:	d801      	bhi.n	8008a80 <_strtol_l.constprop.0+0xb4>
 8008a7c:	3c37      	subs	r4, #55	@ 0x37
 8008a7e:	e7de      	b.n	8008a3e <_strtol_l.constprop.0+0x72>
 8008a80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008a84:	2f19      	cmp	r7, #25
 8008a86:	d804      	bhi.n	8008a92 <_strtol_l.constprop.0+0xc6>
 8008a88:	3c57      	subs	r4, #87	@ 0x57
 8008a8a:	e7d8      	b.n	8008a3e <_strtol_l.constprop.0+0x72>
 8008a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a90:	e7e1      	b.n	8008a56 <_strtol_l.constprop.0+0x8a>
 8008a92:	1c53      	adds	r3, r2, #1
 8008a94:	d108      	bne.n	8008aa8 <_strtol_l.constprop.0+0xdc>
 8008a96:	2322      	movs	r3, #34	@ 0x22
 8008a98:	4660      	mov	r0, ip
 8008a9a:	f8ce 3000 	str.w	r3, [lr]
 8008a9e:	f1b8 0f00 	cmp.w	r8, #0
 8008aa2:	d0a0      	beq.n	80089e6 <_strtol_l.constprop.0+0x1a>
 8008aa4:	1e69      	subs	r1, r5, #1
 8008aa6:	e006      	b.n	8008ab6 <_strtol_l.constprop.0+0xea>
 8008aa8:	b106      	cbz	r6, 8008aac <_strtol_l.constprop.0+0xe0>
 8008aaa:	4240      	negs	r0, r0
 8008aac:	f1b8 0f00 	cmp.w	r8, #0
 8008ab0:	d099      	beq.n	80089e6 <_strtol_l.constprop.0+0x1a>
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	d1f6      	bne.n	8008aa4 <_strtol_l.constprop.0+0xd8>
 8008ab6:	f8c8 1000 	str.w	r1, [r8]
 8008aba:	e794      	b.n	80089e6 <_strtol_l.constprop.0+0x1a>
 8008abc:	08009443 	.word	0x08009443

08008ac0 <_strtol_r>:
 8008ac0:	f7ff bf84 	b.w	80089cc <_strtol_l.constprop.0>

08008ac4 <_strtoul_l.constprop.0>:
 8008ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ac8:	4686      	mov	lr, r0
 8008aca:	460d      	mov	r5, r1
 8008acc:	4e33      	ldr	r6, [pc, #204]	@ (8008b9c <_strtoul_l.constprop.0+0xd8>)
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ad4:	5d37      	ldrb	r7, [r6, r4]
 8008ad6:	f017 0708 	ands.w	r7, r7, #8
 8008ada:	d1f8      	bne.n	8008ace <_strtoul_l.constprop.0+0xa>
 8008adc:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ade:	d12f      	bne.n	8008b40 <_strtoul_l.constprop.0+0x7c>
 8008ae0:	2701      	movs	r7, #1
 8008ae2:	782c      	ldrb	r4, [r5, #0]
 8008ae4:	1c85      	adds	r5, r0, #2
 8008ae6:	f033 0010 	bics.w	r0, r3, #16
 8008aea:	d109      	bne.n	8008b00 <_strtoul_l.constprop.0+0x3c>
 8008aec:	2c30      	cmp	r4, #48	@ 0x30
 8008aee:	d12c      	bne.n	8008b4a <_strtoul_l.constprop.0+0x86>
 8008af0:	7828      	ldrb	r0, [r5, #0]
 8008af2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008af6:	2858      	cmp	r0, #88	@ 0x58
 8008af8:	d127      	bne.n	8008b4a <_strtoul_l.constprop.0+0x86>
 8008afa:	2310      	movs	r3, #16
 8008afc:	786c      	ldrb	r4, [r5, #1]
 8008afe:	3502      	adds	r5, #2
 8008b00:	f04f 38ff 	mov.w	r8, #4294967295
 8008b04:	fbb8 f8f3 	udiv	r8, r8, r3
 8008b08:	2600      	movs	r6, #0
 8008b0a:	fb03 f908 	mul.w	r9, r3, r8
 8008b0e:	4630      	mov	r0, r6
 8008b10:	ea6f 0909 	mvn.w	r9, r9
 8008b14:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008b18:	f1bc 0f09 	cmp.w	ip, #9
 8008b1c:	d81c      	bhi.n	8008b58 <_strtoul_l.constprop.0+0x94>
 8008b1e:	4664      	mov	r4, ip
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	dd2a      	ble.n	8008b7a <_strtoul_l.constprop.0+0xb6>
 8008b24:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008b28:	d007      	beq.n	8008b3a <_strtoul_l.constprop.0+0x76>
 8008b2a:	4580      	cmp	r8, r0
 8008b2c:	d322      	bcc.n	8008b74 <_strtoul_l.constprop.0+0xb0>
 8008b2e:	d101      	bne.n	8008b34 <_strtoul_l.constprop.0+0x70>
 8008b30:	45a1      	cmp	r9, r4
 8008b32:	db1f      	blt.n	8008b74 <_strtoul_l.constprop.0+0xb0>
 8008b34:	2601      	movs	r6, #1
 8008b36:	fb00 4003 	mla	r0, r0, r3, r4
 8008b3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b3e:	e7e9      	b.n	8008b14 <_strtoul_l.constprop.0+0x50>
 8008b40:	2c2b      	cmp	r4, #43	@ 0x2b
 8008b42:	bf04      	itt	eq
 8008b44:	782c      	ldrbeq	r4, [r5, #0]
 8008b46:	1c85      	addeq	r5, r0, #2
 8008b48:	e7cd      	b.n	8008ae6 <_strtoul_l.constprop.0+0x22>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1d8      	bne.n	8008b00 <_strtoul_l.constprop.0+0x3c>
 8008b4e:	2c30      	cmp	r4, #48	@ 0x30
 8008b50:	bf0c      	ite	eq
 8008b52:	2308      	moveq	r3, #8
 8008b54:	230a      	movne	r3, #10
 8008b56:	e7d3      	b.n	8008b00 <_strtoul_l.constprop.0+0x3c>
 8008b58:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008b5c:	f1bc 0f19 	cmp.w	ip, #25
 8008b60:	d801      	bhi.n	8008b66 <_strtoul_l.constprop.0+0xa2>
 8008b62:	3c37      	subs	r4, #55	@ 0x37
 8008b64:	e7dc      	b.n	8008b20 <_strtoul_l.constprop.0+0x5c>
 8008b66:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008b6a:	f1bc 0f19 	cmp.w	ip, #25
 8008b6e:	d804      	bhi.n	8008b7a <_strtoul_l.constprop.0+0xb6>
 8008b70:	3c57      	subs	r4, #87	@ 0x57
 8008b72:	e7d5      	b.n	8008b20 <_strtoul_l.constprop.0+0x5c>
 8008b74:	f04f 36ff 	mov.w	r6, #4294967295
 8008b78:	e7df      	b.n	8008b3a <_strtoul_l.constprop.0+0x76>
 8008b7a:	1c73      	adds	r3, r6, #1
 8008b7c:	d106      	bne.n	8008b8c <_strtoul_l.constprop.0+0xc8>
 8008b7e:	2322      	movs	r3, #34	@ 0x22
 8008b80:	4630      	mov	r0, r6
 8008b82:	f8ce 3000 	str.w	r3, [lr]
 8008b86:	b932      	cbnz	r2, 8008b96 <_strtoul_l.constprop.0+0xd2>
 8008b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b8c:	b107      	cbz	r7, 8008b90 <_strtoul_l.constprop.0+0xcc>
 8008b8e:	4240      	negs	r0, r0
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	d0f9      	beq.n	8008b88 <_strtoul_l.constprop.0+0xc4>
 8008b94:	b106      	cbz	r6, 8008b98 <_strtoul_l.constprop.0+0xd4>
 8008b96:	1e69      	subs	r1, r5, #1
 8008b98:	6011      	str	r1, [r2, #0]
 8008b9a:	e7f5      	b.n	8008b88 <_strtoul_l.constprop.0+0xc4>
 8008b9c:	08009443 	.word	0x08009443

08008ba0 <_strtoul_r>:
 8008ba0:	f7ff bf90 	b.w	8008ac4 <_strtoul_l.constprop.0>

08008ba4 <__ascii_wctomb>:
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	b141      	cbz	r1, 8008bbc <__ascii_wctomb+0x18>
 8008baa:	2aff      	cmp	r2, #255	@ 0xff
 8008bac:	d904      	bls.n	8008bb8 <__ascii_wctomb+0x14>
 8008bae:	228a      	movs	r2, #138	@ 0x8a
 8008bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	4770      	bx	lr
 8008bb8:	2001      	movs	r0, #1
 8008bba:	700a      	strb	r2, [r1, #0]
 8008bbc:	4770      	bx	lr
	...

08008bc0 <fiprintf>:
 8008bc0:	b40e      	push	{r1, r2, r3}
 8008bc2:	b503      	push	{r0, r1, lr}
 8008bc4:	4601      	mov	r1, r0
 8008bc6:	ab03      	add	r3, sp, #12
 8008bc8:	4805      	ldr	r0, [pc, #20]	@ (8008be0 <fiprintf+0x20>)
 8008bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bce:	6800      	ldr	r0, [r0, #0]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	f000 f83d 	bl	8008c50 <_vfiprintf_r>
 8008bd6:	b002      	add	sp, #8
 8008bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bdc:	b003      	add	sp, #12
 8008bde:	4770      	bx	lr
 8008be0:	20000020 	.word	0x20000020

08008be4 <abort>:
 8008be4:	2006      	movs	r0, #6
 8008be6:	b508      	push	{r3, lr}
 8008be8:	f000 fa06 	bl	8008ff8 <raise>
 8008bec:	2001      	movs	r0, #1
 8008bee:	f7f9 fe1d 	bl	800282c <_exit>

08008bf2 <_malloc_usable_size_r>:
 8008bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf6:	1f18      	subs	r0, r3, #4
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bfbc      	itt	lt
 8008bfc:	580b      	ldrlt	r3, [r1, r0]
 8008bfe:	18c0      	addlt	r0, r0, r3
 8008c00:	4770      	bx	lr

08008c02 <__sfputc_r>:
 8008c02:	6893      	ldr	r3, [r2, #8]
 8008c04:	b410      	push	{r4}
 8008c06:	3b01      	subs	r3, #1
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	6093      	str	r3, [r2, #8]
 8008c0c:	da07      	bge.n	8008c1e <__sfputc_r+0x1c>
 8008c0e:	6994      	ldr	r4, [r2, #24]
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	db01      	blt.n	8008c18 <__sfputc_r+0x16>
 8008c14:	290a      	cmp	r1, #10
 8008c16:	d102      	bne.n	8008c1e <__sfputc_r+0x1c>
 8008c18:	bc10      	pop	{r4}
 8008c1a:	f000 b931 	b.w	8008e80 <__swbuf_r>
 8008c1e:	6813      	ldr	r3, [r2, #0]
 8008c20:	1c58      	adds	r0, r3, #1
 8008c22:	6010      	str	r0, [r2, #0]
 8008c24:	7019      	strb	r1, [r3, #0]
 8008c26:	4608      	mov	r0, r1
 8008c28:	bc10      	pop	{r4}
 8008c2a:	4770      	bx	lr

08008c2c <__sfputs_r>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	4614      	mov	r4, r2
 8008c34:	18d5      	adds	r5, r2, r3
 8008c36:	42ac      	cmp	r4, r5
 8008c38:	d101      	bne.n	8008c3e <__sfputs_r+0x12>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e007      	b.n	8008c4e <__sfputs_r+0x22>
 8008c3e:	463a      	mov	r2, r7
 8008c40:	4630      	mov	r0, r6
 8008c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c46:	f7ff ffdc 	bl	8008c02 <__sfputc_r>
 8008c4a:	1c43      	adds	r3, r0, #1
 8008c4c:	d1f3      	bne.n	8008c36 <__sfputs_r+0xa>
 8008c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c50 <_vfiprintf_r>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	460d      	mov	r5, r1
 8008c56:	4614      	mov	r4, r2
 8008c58:	4698      	mov	r8, r3
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	b09d      	sub	sp, #116	@ 0x74
 8008c5e:	b118      	cbz	r0, 8008c68 <_vfiprintf_r+0x18>
 8008c60:	6a03      	ldr	r3, [r0, #32]
 8008c62:	b90b      	cbnz	r3, 8008c68 <_vfiprintf_r+0x18>
 8008c64:	f7fd fc5e 	bl	8006524 <__sinit>
 8008c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c6a:	07d9      	lsls	r1, r3, #31
 8008c6c:	d405      	bmi.n	8008c7a <_vfiprintf_r+0x2a>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	059a      	lsls	r2, r3, #22
 8008c72:	d402      	bmi.n	8008c7a <_vfiprintf_r+0x2a>
 8008c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c76:	f7fd fd98 	bl	80067aa <__retarget_lock_acquire_recursive>
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	071b      	lsls	r3, r3, #28
 8008c7e:	d501      	bpl.n	8008c84 <_vfiprintf_r+0x34>
 8008c80:	692b      	ldr	r3, [r5, #16]
 8008c82:	b99b      	cbnz	r3, 8008cac <_vfiprintf_r+0x5c>
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f000 f938 	bl	8008efc <__swsetup_r>
 8008c8c:	b170      	cbz	r0, 8008cac <_vfiprintf_r+0x5c>
 8008c8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c90:	07dc      	lsls	r4, r3, #31
 8008c92:	d504      	bpl.n	8008c9e <_vfiprintf_r+0x4e>
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	b01d      	add	sp, #116	@ 0x74
 8008c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	0598      	lsls	r0, r3, #22
 8008ca2:	d4f7      	bmi.n	8008c94 <_vfiprintf_r+0x44>
 8008ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ca6:	f7fd fd81 	bl	80067ac <__retarget_lock_release_recursive>
 8008caa:	e7f3      	b.n	8008c94 <_vfiprintf_r+0x44>
 8008cac:	2300      	movs	r3, #0
 8008cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cb0:	2320      	movs	r3, #32
 8008cb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cb6:	2330      	movs	r3, #48	@ 0x30
 8008cb8:	f04f 0901 	mov.w	r9, #1
 8008cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cc0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008e6c <_vfiprintf_r+0x21c>
 8008cc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cc8:	4623      	mov	r3, r4
 8008cca:	469a      	mov	sl, r3
 8008ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd0:	b10a      	cbz	r2, 8008cd6 <_vfiprintf_r+0x86>
 8008cd2:	2a25      	cmp	r2, #37	@ 0x25
 8008cd4:	d1f9      	bne.n	8008cca <_vfiprintf_r+0x7a>
 8008cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cda:	d00b      	beq.n	8008cf4 <_vfiprintf_r+0xa4>
 8008cdc:	465b      	mov	r3, fp
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff ffa2 	bl	8008c2c <__sfputs_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f000 80a7 	beq.w	8008e3c <_vfiprintf_r+0x1ec>
 8008cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf0:	445a      	add	r2, fp
 8008cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 809f 	beq.w	8008e3c <_vfiprintf_r+0x1ec>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d08:	f10a 0a01 	add.w	sl, sl, #1
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d16:	4654      	mov	r4, sl
 8008d18:	2205      	movs	r2, #5
 8008d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1e:	4853      	ldr	r0, [pc, #332]	@ (8008e6c <_vfiprintf_r+0x21c>)
 8008d20:	f7fd fd45 	bl	80067ae <memchr>
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	b9d8      	cbnz	r0, 8008d60 <_vfiprintf_r+0x110>
 8008d28:	06d1      	lsls	r1, r2, #27
 8008d2a:	bf44      	itt	mi
 8008d2c:	2320      	movmi	r3, #32
 8008d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d32:	0713      	lsls	r3, r2, #28
 8008d34:	bf44      	itt	mi
 8008d36:	232b      	movmi	r3, #43	@ 0x2b
 8008d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d42:	d015      	beq.n	8008d70 <_vfiprintf_r+0x120>
 8008d44:	4654      	mov	r4, sl
 8008d46:	2000      	movs	r0, #0
 8008d48:	f04f 0c0a 	mov.w	ip, #10
 8008d4c:	9a07      	ldr	r2, [sp, #28]
 8008d4e:	4621      	mov	r1, r4
 8008d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d54:	3b30      	subs	r3, #48	@ 0x30
 8008d56:	2b09      	cmp	r3, #9
 8008d58:	d94b      	bls.n	8008df2 <_vfiprintf_r+0x1a2>
 8008d5a:	b1b0      	cbz	r0, 8008d8a <_vfiprintf_r+0x13a>
 8008d5c:	9207      	str	r2, [sp, #28]
 8008d5e:	e014      	b.n	8008d8a <_vfiprintf_r+0x13a>
 8008d60:	eba0 0308 	sub.w	r3, r0, r8
 8008d64:	fa09 f303 	lsl.w	r3, r9, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	46a2      	mov	sl, r4
 8008d6c:	9304      	str	r3, [sp, #16]
 8008d6e:	e7d2      	b.n	8008d16 <_vfiprintf_r+0xc6>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	1d19      	adds	r1, r3, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	9103      	str	r1, [sp, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfbb      	ittet	lt
 8008d7c:	425b      	neglt	r3, r3
 8008d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d82:	9307      	strge	r3, [sp, #28]
 8008d84:	9307      	strlt	r3, [sp, #28]
 8008d86:	bfb8      	it	lt
 8008d88:	9204      	strlt	r2, [sp, #16]
 8008d8a:	7823      	ldrb	r3, [r4, #0]
 8008d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d8e:	d10a      	bne.n	8008da6 <_vfiprintf_r+0x156>
 8008d90:	7863      	ldrb	r3, [r4, #1]
 8008d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d94:	d132      	bne.n	8008dfc <_vfiprintf_r+0x1ac>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	3402      	adds	r4, #2
 8008d9a:	1d1a      	adds	r2, r3, #4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	9203      	str	r2, [sp, #12]
 8008da0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008da4:	9305      	str	r3, [sp, #20]
 8008da6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008e70 <_vfiprintf_r+0x220>
 8008daa:	2203      	movs	r2, #3
 8008dac:	4650      	mov	r0, sl
 8008dae:	7821      	ldrb	r1, [r4, #0]
 8008db0:	f7fd fcfd 	bl	80067ae <memchr>
 8008db4:	b138      	cbz	r0, 8008dc6 <_vfiprintf_r+0x176>
 8008db6:	2240      	movs	r2, #64	@ 0x40
 8008db8:	9b04      	ldr	r3, [sp, #16]
 8008dba:	eba0 000a 	sub.w	r0, r0, sl
 8008dbe:	4082      	lsls	r2, r0
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	3401      	adds	r4, #1
 8008dc4:	9304      	str	r3, [sp, #16]
 8008dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dca:	2206      	movs	r2, #6
 8008dcc:	4829      	ldr	r0, [pc, #164]	@ (8008e74 <_vfiprintf_r+0x224>)
 8008dce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dd2:	f7fd fcec 	bl	80067ae <memchr>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d03f      	beq.n	8008e5a <_vfiprintf_r+0x20a>
 8008dda:	4b27      	ldr	r3, [pc, #156]	@ (8008e78 <_vfiprintf_r+0x228>)
 8008ddc:	bb1b      	cbnz	r3, 8008e26 <_vfiprintf_r+0x1d6>
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	3307      	adds	r3, #7
 8008de2:	f023 0307 	bic.w	r3, r3, #7
 8008de6:	3308      	adds	r3, #8
 8008de8:	9303      	str	r3, [sp, #12]
 8008dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dec:	443b      	add	r3, r7
 8008dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df0:	e76a      	b.n	8008cc8 <_vfiprintf_r+0x78>
 8008df2:	460c      	mov	r4, r1
 8008df4:	2001      	movs	r0, #1
 8008df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dfa:	e7a8      	b.n	8008d4e <_vfiprintf_r+0xfe>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f04f 0c0a 	mov.w	ip, #10
 8008e02:	4619      	mov	r1, r3
 8008e04:	3401      	adds	r4, #1
 8008e06:	9305      	str	r3, [sp, #20]
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e0e:	3a30      	subs	r2, #48	@ 0x30
 8008e10:	2a09      	cmp	r2, #9
 8008e12:	d903      	bls.n	8008e1c <_vfiprintf_r+0x1cc>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0c6      	beq.n	8008da6 <_vfiprintf_r+0x156>
 8008e18:	9105      	str	r1, [sp, #20]
 8008e1a:	e7c4      	b.n	8008da6 <_vfiprintf_r+0x156>
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	2301      	movs	r3, #1
 8008e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e24:	e7f0      	b.n	8008e08 <_vfiprintf_r+0x1b8>
 8008e26:	ab03      	add	r3, sp, #12
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	462a      	mov	r2, r5
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	4b13      	ldr	r3, [pc, #76]	@ (8008e7c <_vfiprintf_r+0x22c>)
 8008e30:	a904      	add	r1, sp, #16
 8008e32:	f7fc ff2d 	bl	8005c90 <_printf_float>
 8008e36:	4607      	mov	r7, r0
 8008e38:	1c78      	adds	r0, r7, #1
 8008e3a:	d1d6      	bne.n	8008dea <_vfiprintf_r+0x19a>
 8008e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e3e:	07d9      	lsls	r1, r3, #31
 8008e40:	d405      	bmi.n	8008e4e <_vfiprintf_r+0x1fe>
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	059a      	lsls	r2, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_vfiprintf_r+0x1fe>
 8008e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e4a:	f7fd fcaf 	bl	80067ac <__retarget_lock_release_recursive>
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	065b      	lsls	r3, r3, #25
 8008e52:	f53f af1f 	bmi.w	8008c94 <_vfiprintf_r+0x44>
 8008e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e58:	e71e      	b.n	8008c98 <_vfiprintf_r+0x48>
 8008e5a:	ab03      	add	r3, sp, #12
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	462a      	mov	r2, r5
 8008e60:	4630      	mov	r0, r6
 8008e62:	4b06      	ldr	r3, [pc, #24]	@ (8008e7c <_vfiprintf_r+0x22c>)
 8008e64:	a904      	add	r1, sp, #16
 8008e66:	f7fd f9b1 	bl	80061cc <_printf_i>
 8008e6a:	e7e4      	b.n	8008e36 <_vfiprintf_r+0x1e6>
 8008e6c:	080093d0 	.word	0x080093d0
 8008e70:	080093d6 	.word	0x080093d6
 8008e74:	080093da 	.word	0x080093da
 8008e78:	08005c91 	.word	0x08005c91
 8008e7c:	08008c2d 	.word	0x08008c2d

08008e80 <__swbuf_r>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	460e      	mov	r6, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	4605      	mov	r5, r0
 8008e88:	b118      	cbz	r0, 8008e92 <__swbuf_r+0x12>
 8008e8a:	6a03      	ldr	r3, [r0, #32]
 8008e8c:	b90b      	cbnz	r3, 8008e92 <__swbuf_r+0x12>
 8008e8e:	f7fd fb49 	bl	8006524 <__sinit>
 8008e92:	69a3      	ldr	r3, [r4, #24]
 8008e94:	60a3      	str	r3, [r4, #8]
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	071a      	lsls	r2, r3, #28
 8008e9a:	d501      	bpl.n	8008ea0 <__swbuf_r+0x20>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	b943      	cbnz	r3, 8008eb2 <__swbuf_r+0x32>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f82a 	bl	8008efc <__swsetup_r>
 8008ea8:	b118      	cbz	r0, 8008eb2 <__swbuf_r+0x32>
 8008eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8008eae:	4638      	mov	r0, r7
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	6922      	ldr	r2, [r4, #16]
 8008eb6:	b2f6      	uxtb	r6, r6
 8008eb8:	1a98      	subs	r0, r3, r2
 8008eba:	6963      	ldr	r3, [r4, #20]
 8008ebc:	4637      	mov	r7, r6
 8008ebe:	4283      	cmp	r3, r0
 8008ec0:	dc05      	bgt.n	8008ece <__swbuf_r+0x4e>
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f7ff fc4b 	bl	8008760 <_fflush_r>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d1ed      	bne.n	8008eaa <__swbuf_r+0x2a>
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	60a3      	str	r3, [r4, #8]
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	701e      	strb	r6, [r3, #0]
 8008edc:	6962      	ldr	r2, [r4, #20]
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d004      	beq.n	8008eee <__swbuf_r+0x6e>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	07db      	lsls	r3, r3, #31
 8008ee8:	d5e1      	bpl.n	8008eae <__swbuf_r+0x2e>
 8008eea:	2e0a      	cmp	r6, #10
 8008eec:	d1df      	bne.n	8008eae <__swbuf_r+0x2e>
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f7ff fc35 	bl	8008760 <_fflush_r>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d0d9      	beq.n	8008eae <__swbuf_r+0x2e>
 8008efa:	e7d6      	b.n	8008eaa <__swbuf_r+0x2a>

08008efc <__swsetup_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4b29      	ldr	r3, [pc, #164]	@ (8008fa4 <__swsetup_r+0xa8>)
 8008f00:	4605      	mov	r5, r0
 8008f02:	6818      	ldr	r0, [r3, #0]
 8008f04:	460c      	mov	r4, r1
 8008f06:	b118      	cbz	r0, 8008f10 <__swsetup_r+0x14>
 8008f08:	6a03      	ldr	r3, [r0, #32]
 8008f0a:	b90b      	cbnz	r3, 8008f10 <__swsetup_r+0x14>
 8008f0c:	f7fd fb0a 	bl	8006524 <__sinit>
 8008f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f14:	0719      	lsls	r1, r3, #28
 8008f16:	d422      	bmi.n	8008f5e <__swsetup_r+0x62>
 8008f18:	06da      	lsls	r2, r3, #27
 8008f1a:	d407      	bmi.n	8008f2c <__swsetup_r+0x30>
 8008f1c:	2209      	movs	r2, #9
 8008f1e:	602a      	str	r2, [r5, #0]
 8008f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	81a3      	strh	r3, [r4, #12]
 8008f2a:	e033      	b.n	8008f94 <__swsetup_r+0x98>
 8008f2c:	0758      	lsls	r0, r3, #29
 8008f2e:	d512      	bpl.n	8008f56 <__swsetup_r+0x5a>
 8008f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f32:	b141      	cbz	r1, 8008f46 <__swsetup_r+0x4a>
 8008f34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	d002      	beq.n	8008f42 <__swsetup_r+0x46>
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f7fe faa3 	bl	8007488 <_free_r>
 8008f42:	2300      	movs	r3, #0
 8008f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	f043 0308 	orr.w	r3, r3, #8
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	b94b      	cbnz	r3, 8008f76 <__swsetup_r+0x7a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6c:	d003      	beq.n	8008f76 <__swsetup_r+0x7a>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f882 	bl	800907a <__smakebuf_r>
 8008f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7a:	f013 0201 	ands.w	r2, r3, #1
 8008f7e:	d00a      	beq.n	8008f96 <__swsetup_r+0x9a>
 8008f80:	2200      	movs	r2, #0
 8008f82:	60a2      	str	r2, [r4, #8]
 8008f84:	6962      	ldr	r2, [r4, #20]
 8008f86:	4252      	negs	r2, r2
 8008f88:	61a2      	str	r2, [r4, #24]
 8008f8a:	6922      	ldr	r2, [r4, #16]
 8008f8c:	b942      	cbnz	r2, 8008fa0 <__swsetup_r+0xa4>
 8008f8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f92:	d1c5      	bne.n	8008f20 <__swsetup_r+0x24>
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
 8008f96:	0799      	lsls	r1, r3, #30
 8008f98:	bf58      	it	pl
 8008f9a:	6962      	ldrpl	r2, [r4, #20]
 8008f9c:	60a2      	str	r2, [r4, #8]
 8008f9e:	e7f4      	b.n	8008f8a <__swsetup_r+0x8e>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e7f7      	b.n	8008f94 <__swsetup_r+0x98>
 8008fa4:	20000020 	.word	0x20000020

08008fa8 <_raise_r>:
 8008fa8:	291f      	cmp	r1, #31
 8008faa:	b538      	push	{r3, r4, r5, lr}
 8008fac:	4605      	mov	r5, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	d904      	bls.n	8008fbc <_raise_r+0x14>
 8008fb2:	2316      	movs	r3, #22
 8008fb4:	6003      	str	r3, [r0, #0]
 8008fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fbe:	b112      	cbz	r2, 8008fc6 <_raise_r+0x1e>
 8008fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc4:	b94b      	cbnz	r3, 8008fda <_raise_r+0x32>
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 f830 	bl	800902c <_getpid_r>
 8008fcc:	4622      	mov	r2, r4
 8008fce:	4601      	mov	r1, r0
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd6:	f000 b817 	b.w	8009008 <_kill_r>
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d00a      	beq.n	8008ff4 <_raise_r+0x4c>
 8008fde:	1c59      	adds	r1, r3, #1
 8008fe0:	d103      	bne.n	8008fea <_raise_r+0x42>
 8008fe2:	2316      	movs	r3, #22
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	e7e7      	b.n	8008fba <_raise_r+0x12>
 8008fea:	2100      	movs	r1, #0
 8008fec:	4620      	mov	r0, r4
 8008fee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ff2:	4798      	blx	r3
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e7e0      	b.n	8008fba <_raise_r+0x12>

08008ff8 <raise>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	@ (8009004 <raise+0xc>)
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f7ff bfd3 	b.w	8008fa8 <_raise_r>
 8009002:	bf00      	nop
 8009004:	20000020 	.word	0x20000020

08009008 <_kill_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	2300      	movs	r3, #0
 800900c:	4d06      	ldr	r5, [pc, #24]	@ (8009028 <_kill_r+0x20>)
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	4611      	mov	r1, r2
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	f7f9 fbf9 	bl	800280c <_kill>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	d102      	bne.n	8009024 <_kill_r+0x1c>
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	b103      	cbz	r3, 8009024 <_kill_r+0x1c>
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	bf00      	nop
 8009028:	20000970 	.word	0x20000970

0800902c <_getpid_r>:
 800902c:	f7f9 bbe7 	b.w	80027fe <_getpid>

08009030 <__swhatbuf_r>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	460c      	mov	r4, r1
 8009034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009038:	4615      	mov	r5, r2
 800903a:	2900      	cmp	r1, #0
 800903c:	461e      	mov	r6, r3
 800903e:	b096      	sub	sp, #88	@ 0x58
 8009040:	da0c      	bge.n	800905c <__swhatbuf_r+0x2c>
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	2100      	movs	r1, #0
 8009046:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800904a:	bf14      	ite	ne
 800904c:	2340      	movne	r3, #64	@ 0x40
 800904e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009052:	2000      	movs	r0, #0
 8009054:	6031      	str	r1, [r6, #0]
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	b016      	add	sp, #88	@ 0x58
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	466a      	mov	r2, sp
 800905e:	f000 f849 	bl	80090f4 <_fstat_r>
 8009062:	2800      	cmp	r0, #0
 8009064:	dbed      	blt.n	8009042 <__swhatbuf_r+0x12>
 8009066:	9901      	ldr	r1, [sp, #4]
 8009068:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800906c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009070:	4259      	negs	r1, r3
 8009072:	4159      	adcs	r1, r3
 8009074:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009078:	e7eb      	b.n	8009052 <__swhatbuf_r+0x22>

0800907a <__smakebuf_r>:
 800907a:	898b      	ldrh	r3, [r1, #12]
 800907c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800907e:	079d      	lsls	r5, r3, #30
 8009080:	4606      	mov	r6, r0
 8009082:	460c      	mov	r4, r1
 8009084:	d507      	bpl.n	8009096 <__smakebuf_r+0x1c>
 8009086:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800908a:	6023      	str	r3, [r4, #0]
 800908c:	6123      	str	r3, [r4, #16]
 800908e:	2301      	movs	r3, #1
 8009090:	6163      	str	r3, [r4, #20]
 8009092:	b003      	add	sp, #12
 8009094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009096:	466a      	mov	r2, sp
 8009098:	ab01      	add	r3, sp, #4
 800909a:	f7ff ffc9 	bl	8009030 <__swhatbuf_r>
 800909e:	9f00      	ldr	r7, [sp, #0]
 80090a0:	4605      	mov	r5, r0
 80090a2:	4639      	mov	r1, r7
 80090a4:	4630      	mov	r0, r6
 80090a6:	f7fe fa61 	bl	800756c <_malloc_r>
 80090aa:	b948      	cbnz	r0, 80090c0 <__smakebuf_r+0x46>
 80090ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b0:	059a      	lsls	r2, r3, #22
 80090b2:	d4ee      	bmi.n	8009092 <__smakebuf_r+0x18>
 80090b4:	f023 0303 	bic.w	r3, r3, #3
 80090b8:	f043 0302 	orr.w	r3, r3, #2
 80090bc:	81a3      	strh	r3, [r4, #12]
 80090be:	e7e2      	b.n	8009086 <__smakebuf_r+0xc>
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	9b01      	ldr	r3, [sp, #4]
 80090ce:	6020      	str	r0, [r4, #0]
 80090d0:	b15b      	cbz	r3, 80090ea <__smakebuf_r+0x70>
 80090d2:	4630      	mov	r0, r6
 80090d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090d8:	f000 f81e 	bl	8009118 <_isatty_r>
 80090dc:	b128      	cbz	r0, 80090ea <__smakebuf_r+0x70>
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	f023 0303 	bic.w	r3, r3, #3
 80090e4:	f043 0301 	orr.w	r3, r3, #1
 80090e8:	81a3      	strh	r3, [r4, #12]
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	431d      	orrs	r5, r3
 80090ee:	81a5      	strh	r5, [r4, #12]
 80090f0:	e7cf      	b.n	8009092 <__smakebuf_r+0x18>
	...

080090f4 <_fstat_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	2300      	movs	r3, #0
 80090f8:	4d06      	ldr	r5, [pc, #24]	@ (8009114 <_fstat_r+0x20>)
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	4611      	mov	r1, r2
 8009100:	602b      	str	r3, [r5, #0]
 8009102:	f7f9 fbe2 	bl	80028ca <_fstat>
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d102      	bne.n	8009110 <_fstat_r+0x1c>
 800910a:	682b      	ldr	r3, [r5, #0]
 800910c:	b103      	cbz	r3, 8009110 <_fstat_r+0x1c>
 800910e:	6023      	str	r3, [r4, #0]
 8009110:	bd38      	pop	{r3, r4, r5, pc}
 8009112:	bf00      	nop
 8009114:	20000970 	.word	0x20000970

08009118 <_isatty_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	2300      	movs	r3, #0
 800911c:	4d05      	ldr	r5, [pc, #20]	@ (8009134 <_isatty_r+0x1c>)
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	f7f9 fbe0 	bl	80028e8 <_isatty>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_isatty_r+0x1a>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_isatty_r+0x1a>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	20000970 	.word	0x20000970

08009138 <_init>:
 8009138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913a:	bf00      	nop
 800913c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913e:	bc08      	pop	{r3}
 8009140:	469e      	mov	lr, r3
 8009142:	4770      	bx	lr

08009144 <_fini>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr
