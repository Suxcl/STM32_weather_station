
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c4c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006d5c  08006d5c  00007d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007110  08007110  000090a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007110  08007110  00008110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007118  08007118  000090a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007118  08007118  00008118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800711c  0800711c  0000811c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08007120  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001818  200000a0  080071c0  000090a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200018b8  080071c0  000098b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de4c  00000000  00000000  000090c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002626  00000000  00000000  00016f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00019540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fa  00000000  00000000  0001a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188c9  00000000  00000000  0001ac2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012276  00000000  00000000  000334f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087cd7  00000000  00000000  00045769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd440  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e64  00000000  00000000  000cd484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000d12e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d44 	.word	0x08006d44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08006d44 	.word	0x08006d44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_f2iz>:
 800099c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80009a4:	d30f      	bcc.n	80009c6 <__aeabi_f2iz+0x2a>
 80009a6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80009aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ae:	d90d      	bls.n	80009cc <__aeabi_f2iz+0x30>
 80009b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009b8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009bc:	fa23 f002 	lsr.w	r0, r3, r2
 80009c0:	bf18      	it	ne
 80009c2:	4240      	negne	r0, r0
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr
 80009cc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80009d0:	d101      	bne.n	80009d6 <__aeabi_f2iz+0x3a>
 80009d2:	0242      	lsls	r2, r0, #9
 80009d4:	d105      	bne.n	80009e2 <__aeabi_f2iz+0x46>
 80009d6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80009da:	bf08      	it	eq
 80009dc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e0:	4770      	bx	lr
 80009e2:	f04f 0000 	mov.w	r0, #0
 80009e6:	4770      	bx	lr

080009e8 <__aeabi_uldivmod>:
 80009e8:	b953      	cbnz	r3, 8000a00 <__aeabi_uldivmod+0x18>
 80009ea:	b94a      	cbnz	r2, 8000a00 <__aeabi_uldivmod+0x18>
 80009ec:	2900      	cmp	r1, #0
 80009ee:	bf08      	it	eq
 80009f0:	2800      	cmpeq	r0, #0
 80009f2:	bf1c      	itt	ne
 80009f4:	f04f 31ff 	movne.w	r1, #4294967295
 80009f8:	f04f 30ff 	movne.w	r0, #4294967295
 80009fc:	f000 b968 	b.w	8000cd0 <__aeabi_idiv0>
 8000a00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a08:	f000 f806 	bl	8000a18 <__udivmoddi4>
 8000a0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a14:	b004      	add	sp, #16
 8000a16:	4770      	bx	lr

08000a18 <__udivmoddi4>:
 8000a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a1c:	9d08      	ldr	r5, [sp, #32]
 8000a1e:	460c      	mov	r4, r1
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d14e      	bne.n	8000ac2 <__udivmoddi4+0xaa>
 8000a24:	4694      	mov	ip, r2
 8000a26:	458c      	cmp	ip, r1
 8000a28:	4686      	mov	lr, r0
 8000a2a:	fab2 f282 	clz	r2, r2
 8000a2e:	d962      	bls.n	8000af6 <__udivmoddi4+0xde>
 8000a30:	b14a      	cbz	r2, 8000a46 <__udivmoddi4+0x2e>
 8000a32:	f1c2 0320 	rsb	r3, r2, #32
 8000a36:	4091      	lsls	r1, r2
 8000a38:	fa20 f303 	lsr.w	r3, r0, r3
 8000a3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a40:	4319      	orrs	r1, r3
 8000a42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a52:	fa1f f68c 	uxth.w	r6, ip
 8000a56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb04 f106 	mul.w	r1, r4, r6
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d90a      	bls.n	8000a7c <__udivmoddi4+0x64>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a6e:	f080 8110 	bcs.w	8000c92 <__udivmoddi4+0x27a>
 8000a72:	4299      	cmp	r1, r3
 8000a74:	f240 810d 	bls.w	8000c92 <__udivmoddi4+0x27a>
 8000a78:	3c02      	subs	r4, #2
 8000a7a:	4463      	add	r3, ip
 8000a7c:	1a59      	subs	r1, r3, r1
 8000a7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a82:	fb07 1110 	mls	r1, r7, r0, r1
 8000a86:	fb00 f606 	mul.w	r6, r0, r6
 8000a8a:	fa1f f38e 	uxth.w	r3, lr
 8000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a92:	429e      	cmp	r6, r3
 8000a94:	d90a      	bls.n	8000aac <__udivmoddi4+0x94>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a9e:	f080 80fa 	bcs.w	8000c96 <__udivmoddi4+0x27e>
 8000aa2:	429e      	cmp	r6, r3
 8000aa4:	f240 80f7 	bls.w	8000c96 <__udivmoddi4+0x27e>
 8000aa8:	4463      	add	r3, ip
 8000aaa:	3802      	subs	r0, #2
 8000aac:	2100      	movs	r1, #0
 8000aae:	1b9b      	subs	r3, r3, r6
 8000ab0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ab4:	b11d      	cbz	r5, 8000abe <__udivmoddi4+0xa6>
 8000ab6:	40d3      	lsrs	r3, r2
 8000ab8:	2200      	movs	r2, #0
 8000aba:	e9c5 3200 	strd	r3, r2, [r5]
 8000abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac2:	428b      	cmp	r3, r1
 8000ac4:	d905      	bls.n	8000ad2 <__udivmoddi4+0xba>
 8000ac6:	b10d      	cbz	r5, 8000acc <__udivmoddi4+0xb4>
 8000ac8:	e9c5 0100 	strd	r0, r1, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	4608      	mov	r0, r1
 8000ad0:	e7f5      	b.n	8000abe <__udivmoddi4+0xa6>
 8000ad2:	fab3 f183 	clz	r1, r3
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	d146      	bne.n	8000b68 <__udivmoddi4+0x150>
 8000ada:	42a3      	cmp	r3, r4
 8000adc:	d302      	bcc.n	8000ae4 <__udivmoddi4+0xcc>
 8000ade:	4290      	cmp	r0, r2
 8000ae0:	f0c0 80ee 	bcc.w	8000cc0 <__udivmoddi4+0x2a8>
 8000ae4:	1a86      	subs	r6, r0, r2
 8000ae6:	eb64 0303 	sbc.w	r3, r4, r3
 8000aea:	2001      	movs	r0, #1
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d0e6      	beq.n	8000abe <__udivmoddi4+0xa6>
 8000af0:	e9c5 6300 	strd	r6, r3, [r5]
 8000af4:	e7e3      	b.n	8000abe <__udivmoddi4+0xa6>
 8000af6:	2a00      	cmp	r2, #0
 8000af8:	f040 808f 	bne.w	8000c1a <__udivmoddi4+0x202>
 8000afc:	eba1 040c 	sub.w	r4, r1, ip
 8000b00:	2101      	movs	r1, #1
 8000b02:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b12:	fb07 f006 	mul.w	r0, r7, r6
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b1e:	4298      	cmp	r0, r3
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x11c>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x11a>
 8000b2c:	4298      	cmp	r0, r3
 8000b2e:	f200 80cb 	bhi.w	8000cc8 <__udivmoddi4+0x2b0>
 8000b32:	4626      	mov	r6, r4
 8000b34:	1a1c      	subs	r4, r3, r0
 8000b36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b3e:	fb00 f707 	mul.w	r7, r0, r7
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b4a:	429f      	cmp	r7, r3
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x148>
 8000b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x146>
 8000b58:	429f      	cmp	r7, r3
 8000b5a:	f200 80ae 	bhi.w	8000cba <__udivmoddi4+0x2a2>
 8000b5e:	4620      	mov	r0, r4
 8000b60:	1bdb      	subs	r3, r3, r7
 8000b62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b66:	e7a5      	b.n	8000ab4 <__udivmoddi4+0x9c>
 8000b68:	f1c1 0720 	rsb	r7, r1, #32
 8000b6c:	408b      	lsls	r3, r1
 8000b6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b76:	fa24 f607 	lsr.w	r6, r4, r7
 8000b7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7e:	fbb6 f8f9 	udiv	r8, r6, r9
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	fb09 6618 	mls	r6, r9, r8, r6
 8000b8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000b8e:	408c      	lsls	r4, r1
 8000b90:	fa00 fa01 	lsl.w	sl, r0, r1
 8000b94:	fb08 f00e 	mul.w	r0, r8, lr
 8000b98:	431c      	orrs	r4, r3
 8000b9a:	0c23      	lsrs	r3, r4, #16
 8000b9c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x1a6>
 8000ba8:	eb1c 0303 	adds.w	r3, ip, r3
 8000bac:	f108 36ff 	add.w	r6, r8, #4294967295
 8000bb0:	f080 8081 	bcs.w	8000cb6 <__udivmoddi4+0x29e>
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	d97e      	bls.n	8000cb6 <__udivmoddi4+0x29e>
 8000bb8:	f1a8 0802 	sub.w	r8, r8, #2
 8000bbc:	4463      	add	r3, ip
 8000bbe:	1a1e      	subs	r6, r3, r0
 8000bc0:	fbb6 f3f9 	udiv	r3, r6, r9
 8000bc4:	fb09 6613 	mls	r6, r9, r3, r6
 8000bc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bcc:	b2a4      	uxth	r4, r4
 8000bce:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x1d0>
 8000bd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bda:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bde:	d266      	bcs.n	8000cae <__udivmoddi4+0x296>
 8000be0:	45a6      	cmp	lr, r4
 8000be2:	d964      	bls.n	8000cae <__udivmoddi4+0x296>
 8000be4:	3b02      	subs	r3, #2
 8000be6:	4464      	add	r4, ip
 8000be8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000bec:	fba0 8302 	umull	r8, r3, r0, r2
 8000bf0:	eba4 040e 	sub.w	r4, r4, lr
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	46c6      	mov	lr, r8
 8000bf8:	461e      	mov	r6, r3
 8000bfa:	d350      	bcc.n	8000c9e <__udivmoddi4+0x286>
 8000bfc:	d04d      	beq.n	8000c9a <__udivmoddi4+0x282>
 8000bfe:	b155      	cbz	r5, 8000c16 <__udivmoddi4+0x1fe>
 8000c00:	ebba 030e 	subs.w	r3, sl, lr
 8000c04:	eb64 0406 	sbc.w	r4, r4, r6
 8000c08:	fa04 f707 	lsl.w	r7, r4, r7
 8000c0c:	40cb      	lsrs	r3, r1
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	40cc      	lsrs	r4, r1
 8000c12:	e9c5 7400 	strd	r7, r4, [r5]
 8000c16:	2100      	movs	r1, #0
 8000c18:	e751      	b.n	8000abe <__udivmoddi4+0xa6>
 8000c1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1e:	f1c2 0320 	rsb	r3, r2, #32
 8000c22:	40d9      	lsrs	r1, r3
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c30:	fbb1 f0f8 	udiv	r0, r1, r8
 8000c34:	fb08 1110 	mls	r1, r8, r0, r1
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	fa1f f78c 	uxth.w	r7, ip
 8000c40:	0c23      	lsrs	r3, r4, #16
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f107 	mul.w	r1, r0, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x248>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c56:	d22c      	bcs.n	8000cb2 <__udivmoddi4+0x29a>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d92a      	bls.n	8000cb2 <__udivmoddi4+0x29a>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c66:	fb08 3311 	mls	r3, r8, r1, r3
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb01 f307 	mul.w	r3, r1, r7
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x272>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c80:	d213      	bcs.n	8000caa <__udivmoddi4+0x292>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d911      	bls.n	8000caa <__udivmoddi4+0x292>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4464      	add	r4, ip
 8000c8a:	1ae4      	subs	r4, r4, r3
 8000c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c90:	e73b      	b.n	8000b0a <__udivmoddi4+0xf2>
 8000c92:	4604      	mov	r4, r0
 8000c94:	e6f2      	b.n	8000a7c <__udivmoddi4+0x64>
 8000c96:	4608      	mov	r0, r1
 8000c98:	e708      	b.n	8000aac <__udivmoddi4+0x94>
 8000c9a:	45c2      	cmp	sl, r8
 8000c9c:	d2af      	bcs.n	8000bfe <__udivmoddi4+0x1e6>
 8000c9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ca2:	eb63 060c 	sbc.w	r6, r3, ip
 8000ca6:	3801      	subs	r0, #1
 8000ca8:	e7a9      	b.n	8000bfe <__udivmoddi4+0x1e6>
 8000caa:	4631      	mov	r1, r6
 8000cac:	e7ed      	b.n	8000c8a <__udivmoddi4+0x272>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	e79a      	b.n	8000be8 <__udivmoddi4+0x1d0>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e7d4      	b.n	8000c60 <__udivmoddi4+0x248>
 8000cb6:	46b0      	mov	r8, r6
 8000cb8:	e781      	b.n	8000bbe <__udivmoddi4+0x1a6>
 8000cba:	4463      	add	r3, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	e74f      	b.n	8000b60 <__udivmoddi4+0x148>
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e711      	b.n	8000aec <__udivmoddi4+0xd4>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	e732      	b.n	8000b34 <__udivmoddi4+0x11c>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_idiv0>:
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	78fa      	ldrb	r2, [r7, #3]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fbd0 	bl	800148e <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fbeb 	bl	80014ce <SX1278_hw_SPIReadByte>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fb88 	bl	8001418 <SX1278_hw_SetNSS>
	return tmp;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	70fb      	strb	r3, [r7, #3]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fb75 	bl	8001418 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	f000 fba6 	bl	800148e <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	78ba      	ldrb	r2, [r7, #2]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fb9f 	bl	800148e <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fb5e 	bl	8001418 <SX1278_hw_SetNSS>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	72fb      	strb	r3, [r7, #11]
 8000d74:	4613      	mov	r3, r2
 8000d76:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000d78:	7abb      	ldrb	r3, [r7, #10]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d927      	bls.n	8000dce <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fb47 	bl	8001418 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	7afa      	ldrb	r2, [r7, #11]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fb7b 	bl	800148e <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	75fb      	strb	r3, [r7, #23]
 8000d9c:	e00c      	b.n	8000db8 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6819      	ldr	r1, [r3, #0]
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	18d4      	adds	r4, r2, r3
 8000da8:	4608      	mov	r0, r1
 8000daa:	f000 fb90 	bl	80014ce <SX1278_hw_SPIReadByte>
 8000dae:	4603      	mov	r3, r0
 8000db0:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000db2:	7dfb      	ldrb	r3, [r7, #23]
 8000db4:	3301      	adds	r3, #1
 8000db6:	75fb      	strb	r3, [r7, #23]
 8000db8:	7dfa      	ldrb	r2, [r7, #23]
 8000dba:	7abb      	ldrb	r3, [r7, #10]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d3ee      	bcc.n	8000d9e <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fb26 	bl	8001418 <SX1278_hw_SetNSS>
 8000dcc:	e000      	b.n	8000dd0 <SX1278_SPIBurstRead+0x6c>
		return;
 8000dce:	bf00      	nop
	}
}
 8000dd0:	371c      	adds	r7, #28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd90      	pop	{r4, r7, pc}

08000dd6 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	461a      	mov	r2, r3
 8000de2:	460b      	mov	r3, r1
 8000de4:	72fb      	strb	r3, [r7, #11]
 8000de6:	4613      	mov	r3, r2
 8000de8:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000dea:	7abb      	ldrb	r3, [r7, #10]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d929      	bls.n	8000e44 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fb0e 	bl	8001418 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	7afb      	ldrb	r3, [r7, #11]
 8000e02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	f000 fb3f 	bl	800148e <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	75fb      	strb	r3, [r7, #23]
 8000e14:	e00b      	b.n	8000e2e <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	f000 fb33 	bl	800148e <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	75fb      	strb	r3, [r7, #23]
 8000e2e:	7dfa      	ldrb	r2, [r7, #23]
 8000e30:	7abb      	ldrb	r3, [r7, #10]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d3ef      	bcc.n	8000e16 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 faeb 	bl	8001418 <SX1278_hw_SetNSS>
 8000e42:	e000      	b.n	8000e46 <SX1278_SPIBurstWrite+0x70>
		return;
 8000e44:	bf00      	nop
	}
}
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f90d 	bl	8001074 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f000 fb5d 	bl	800151a <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f917 	bl	8001094 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e6c:	f04f 0000 	mov.w	r0, #0
 8000e70:	f04f 0100 	mov.w	r1, #0
 8000e74:	04d9      	lsls	r1, r3, #19
 8000e76:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000e7a:	04d0      	lsls	r0, r2, #19
 8000e7c:	4a6f      	ldr	r2, [pc, #444]	@ (800103c <SX1278_config+0x1f0>)
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	f7ff fdb1 	bl	80009e8 <__aeabi_uldivmod>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000e8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	0c02      	lsrs	r2, r0, #16
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	0c0b      	lsrs	r3, r1, #16
 8000ea2:	b2d3      	uxtb	r3, r2
 8000ea4:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000ea6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	0a02      	lsrs	r2, r0, #8
 8000eb4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000eb8:	0a0b      	lsrs	r3, r1, #8
 8000eba:	b2d3      	uxtb	r3, r2
 8000ebc:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000ebe:	7c3b      	ldrb	r3, [r7, #16]
 8000ec0:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	2106      	movs	r1, #6
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ff83 	bl	8000dd6 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000ed0:	2234      	movs	r2, #52	@ 0x34
 8000ed2:	2139      	movs	r1, #57	@ 0x39
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff1c 	bl	8000d12 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7c1b      	ldrb	r3, [r3, #16]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b57      	ldr	r3, [pc, #348]	@ (8001040 <SX1278_config+0x1f4>)
 8000ee2:	5c9b      	ldrb	r3, [r3, r2]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	2109      	movs	r1, #9
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff12 	bl	8000d12 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000eee:	220b      	movs	r2, #11
 8000ef0:	210b      	movs	r1, #11
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff0d 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000ef8:	2223      	movs	r2, #35	@ 0x23
 8000efa:	210c      	movs	r1, #12
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff08 	bl	8000d12 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7c5b      	ldrb	r3, [r3, #17]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b4e      	ldr	r3, [pc, #312]	@ (8001044 <SX1278_config+0x1f8>)
 8000f0a:	5c9b      	ldrb	r3, [r3, r2]
 8000f0c:	2b06      	cmp	r3, #6
 8000f0e:	d147      	bne.n	8000fa0 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7c9b      	ldrb	r3, [r3, #18]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b4c      	ldr	r3, [pc, #304]	@ (8001048 <SX1278_config+0x1fc>)
 8000f18:	5c9b      	ldrb	r3, [r3, r2]
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7cdb      	ldrb	r3, [r3, #19]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4b49      	ldr	r3, [pc, #292]	@ (800104c <SX1278_config+0x200>)
 8000f26:	5c5b      	ldrb	r3, [r3, r1]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	211d      	movs	r1, #29
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff feea 	bl	8000d12 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7c5b      	ldrb	r3, [r3, #17]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <SX1278_config+0x1f8>)
 8000f46:	5c9b      	ldrb	r3, [r3, r2]
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7d1b      	ldrb	r3, [r3, #20]
 8000f50:	4619      	mov	r1, r3
 8000f52:	4b3f      	ldr	r3, [pc, #252]	@ (8001050 <SX1278_config+0x204>)
 8000f54:	5c5b      	ldrb	r3, [r3, r1]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000f5e:	3303      	adds	r3, #3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	211e      	movs	r1, #30
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fed3 	bl	8000d12 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000f6c:	2131      	movs	r1, #49	@ 0x31
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff feb0 	bl	8000cd4 <SX1278_SPIRead>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	f023 0307 	bic.w	r3, r3, #7
 8000f7e:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f043 0305 	orr.w	r3, r3, #5
 8000f86:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2131      	movs	r1, #49	@ 0x31
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff febf 	bl	8000d12 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000f94:	220c      	movs	r2, #12
 8000f96:	2137      	movs	r1, #55	@ 0x37
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff feba 	bl	8000d12 <SX1278_SPIWrite>
 8000f9e:	e029      	b.n	8000ff4 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7c9b      	ldrb	r3, [r3, #18]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <SX1278_config+0x1fc>)
 8000fa8:	5c9b      	ldrb	r3, [r3, r2]
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7cdb      	ldrb	r3, [r3, #19]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4b25      	ldr	r3, [pc, #148]	@ (800104c <SX1278_config+0x200>)
 8000fb6:	5c5b      	ldrb	r3, [r3, r1]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	211d      	movs	r1, #29
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff fea4 	bl	8000d12 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7c5b      	ldrb	r3, [r3, #17]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <SX1278_config+0x1f8>)
 8000fd2:	5c9b      	ldrb	r3, [r3, r2]
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7d1b      	ldrb	r3, [r3, #20]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <SX1278_config+0x204>)
 8000fe0:	5c5b      	ldrb	r3, [r3, r1]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	211e      	movs	r1, #30
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fe8f 	bl	8000d12 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	2126      	movs	r1, #38	@ 0x26
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fe8a 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000ffe:	2208      	movs	r2, #8
 8001000:	211f      	movs	r1, #31
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fe85 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001008:	2200      	movs	r2, #0
 800100a:	2120      	movs	r1, #32
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fe80 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8001012:	2208      	movs	r2, #8
 8001014:	2121      	movs	r1, #33	@ 0x21
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fe7b 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800101c:	2201      	movs	r2, #1
 800101e:	2141      	movs	r1, #65	@ 0x41
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff fe76 	bl	8000d12 <SX1278_SPIWrite>
	module->readBytes = 0;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f810 	bl	8001054 <SX1278_standby>
}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	01e84800 	.word	0x01e84800
 8001040:	08006f74 	.word	0x08006f74
 8001044:	08006f78 	.word	0x08006f78
 8001048:	08006f80 	.word	0x08006f80
 800104c:	08006f8c 	.word	0x08006f8c
 8001050:	08006f90 	.word	0x08006f90

08001054 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 800105c:	2209      	movs	r2, #9
 800105e:	2101      	movs	r1, #1
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fe56 	bl	8000d12 <SX1278_SPIWrite>
	module->status = STANDBY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	759a      	strb	r2, [r3, #22]
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 800107c:	2208      	movs	r2, #8
 800107e:	2101      	movs	r1, #1
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fe46 	bl	8000d12 <SX1278_SPIWrite>
	module->status = SLEEP;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	759a      	strb	r2, [r3, #22]
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 800109c:	2288      	movs	r2, #136	@ 0x88
 800109e:	2101      	movs	r1, #1
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fe36 	bl	8000d12 <SX1278_SPIWrite>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80010b6:	22ff      	movs	r2, #255	@ 0xff
 80010b8:	2112      	movs	r1, #18
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fe29 	bl	8000d12 <SX1278_SPIWrite>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	460b      	mov	r3, r1
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	7afa      	ldrb	r2, [r7, #11]
 80010da:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff feb5 	bl	8000e4c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80010e2:	2284      	movs	r2, #132	@ 0x84
 80010e4:	214d      	movs	r1, #77	@ 0x4d
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f7ff fe13 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80010ec:	22ff      	movs	r2, #255	@ 0xff
 80010ee:	2124      	movs	r1, #36	@ 0x24
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff fe0e 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80010f6:	2201      	movs	r2, #1
 80010f8:	2140      	movs	r1, #64	@ 0x40
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff fe09 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8001100:	223f      	movs	r2, #63	@ 0x3f
 8001102:	2111      	movs	r1, #17
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff fe04 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7ff ffcf 	bl	80010ae <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	461a      	mov	r2, r3
 8001114:	2122      	movs	r1, #34	@ 0x22
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fdfb 	bl	8000d12 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 800111c:	210f      	movs	r1, #15
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff fdd8 	bl	8000cd4 <SX1278_SPIRead>
 8001124:	4603      	mov	r3, r0
 8001126:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	461a      	mov	r2, r3
 800112c:	210d      	movs	r1, #13
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f7ff fdef 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001134:	228d      	movs	r2, #141	@ 0x8d
 8001136:	2101      	movs	r1, #1
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff fdea 	bl	8000d12 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001146:	2118      	movs	r1, #24
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff fdc3 	bl	8000cd4 <SX1278_SPIRead>
 800114e:	4603      	mov	r3, r0
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b04      	cmp	r3, #4
 8001156:	d104      	bne.n	8001162 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2203      	movs	r2, #3
 800115c:	759a      	strb	r2, [r3, #22]
			return 1;
 800115e:	2301      	movs	r3, #1
 8001160:	e013      	b.n	800118a <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3b01      	subs	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d109      	bne.n	8001182 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f967 	bl	8001446 <SX1278_hw_Reset>
			SX1278_config(module);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f7ff fe67 	bl	8000e4c <SX1278_config>
			return 0;
 800117e:	2300      	movs	r3, #0
 8001180:	e003      	b.n	800118a <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f000 f9c9 	bl	800151a <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001188:	e7dd      	b.n	8001146 <SX1278_LoRaEntryRx+0x7e>
	}
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f9c6 	bl	8001530 <SX1278_hw_GetDIO0>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d030      	beq.n	800120c <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3317      	adds	r3, #23
 80011ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 fc9d 	bl	8005af4 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80011ba:	2110      	movs	r1, #16
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff fd89 	bl	8000cd4 <SX1278_SPIRead>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	461a      	mov	r2, r3
 80011ca:	210d      	movs	r1, #13
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fda0 	bl	8000d12 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7c5b      	ldrb	r3, [r3, #17]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d103      	bne.n	80011e2 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7d5b      	ldrb	r3, [r3, #21]
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e005      	b.n	80011ee <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80011e2:	2113      	movs	r1, #19
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff fd75 	bl	8000cd4 <SX1278_SPIRead>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f103 0217 	add.w	r2, r3, #23
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2100      	movs	r1, #0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fdb3 	bl	8000d64 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff51 	bl	80010ae <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	460b      	mov	r3, r1
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	7afa      	ldrb	r2, [r7, #11]
 800122c:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fe0c 	bl	8000e4c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8001234:	2287      	movs	r2, #135	@ 0x87
 8001236:	214d      	movs	r1, #77	@ 0x4d
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff fd6a 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800123e:	2200      	movs	r2, #0
 8001240:	2124      	movs	r1, #36	@ 0x24
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f7ff fd65 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001248:	2241      	movs	r2, #65	@ 0x41
 800124a:	2140      	movs	r1, #64	@ 0x40
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff fd60 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff ff2b 	bl	80010ae <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8001258:	22f7      	movs	r2, #247	@ 0xf7
 800125a:	2111      	movs	r1, #17
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff fd58 	bl	8000d12 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	461a      	mov	r2, r3
 8001266:	2122      	movs	r1, #34	@ 0x22
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff fd52 	bl	8000d12 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 800126e:	210e      	movs	r1, #14
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff fd2f 	bl	8000cd4 <SX1278_SPIRead>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	461a      	mov	r2, r3
 800127e:	210d      	movs	r1, #13
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f7ff fd46 	bl	8000d12 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8001286:	2122      	movs	r1, #34	@ 0x22
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff fd23 	bl	8000cd4 <SX1278_SPIRead>
 800128e:	4603      	mov	r3, r0
 8001290:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8001292:	7dba      	ldrb	r2, [r7, #22]
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	429a      	cmp	r2, r3
 8001298:	d104      	bne.n	80012a4 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2202      	movs	r2, #2
 800129e:	759a      	strb	r2, [r3, #22]
			return 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e00e      	b.n	80012c2 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1ea      	bne.n	8001286 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f8c6 	bl	8001446 <SX1278_hw_Reset>
			SX1278_config(module);
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff fdc6 	bl	8000e4c <SX1278_config>
			return 0;
 80012c0:	2300      	movs	r3, #0
		}
	}
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4613      	mov	r3, r2
 80012d8:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	2100      	movs	r1, #0
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff fd78 	bl	8000dd6 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80012e6:	228b      	movs	r2, #139	@ 0x8b
 80012e8:	2101      	movs	r1, #1
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff fd11 	bl	8000d12 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f91b 	bl	8001530 <SX1278_hw_GetDIO0>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8001300:	2112      	movs	r1, #18
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff fce6 	bl	8000cd4 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f7ff fed0 	bl	80010ae <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f7ff fea0 	bl	8001054 <SX1278_standby>
			return 1;
 8001314:	2301      	movs	r3, #1
 8001316:	e013      	b.n	8001340 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	3b01      	subs	r3, #1
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d109      	bne.n	8001338 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f88c 	bl	8001446 <SX1278_hw_Reset>
			SX1278_config(module);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff fd8c 	bl	8000e4c <SX1278_config>
			return 0;
 8001334:	2300      	movs	r3, #0
 8001336:	e003      	b.n	8001340 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f000 f8ee 	bl	800151a <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800133e:	e7d7      	b.n	80012f0 <SX1278_LoRaTxPacket+0x26>
	}
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f848 	bl	80013ee <SX1278_hw_init>
	module->frequency = frequency;
 800135e:	68f9      	ldr	r1, [r7, #12]
 8001360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001364:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	7e3a      	ldrb	r2, [r7, #24]
 800136c:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	7f3a      	ldrb	r2, [r7, #28]
 8001372:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f897 2020 	ldrb.w	r2, [r7, #32]
 800137a:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001382:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800138a:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001392:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f7ff fd59 	bl	8000e4c <SX1278_config>
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	4613      	mov	r3, r2
 80013ae:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 80013b6:	79fa      	ldrb	r2, [r7, #7]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d003      	beq.n	80013c4 <SX1278_read+0x22>
		length = module->readBytes;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 80013c2:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3317      	adds	r3, #23
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	4619      	mov	r1, r3
 80013cc:	68b8      	ldr	r0, [r7, #8]
 80013ce:	f004 fbe9 	bl	8005ba4 <memcpy>
	rxBuf[length] = '\0';
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	4413      	add	r3, r2
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 80013e4:	79fb      	ldrb	r3, [r7, #7]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80013f6:	2101      	movs	r1, #1
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f80d 	bl	8001418 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6858      	ldr	r0, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	2201      	movs	r2, #1
 800140a:	4619      	mov	r1, r3
 800140c:	f001 fc59 	bl	8002cc2 <HAL_GPIO_WritePin>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6958      	ldr	r0, [r3, #20]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	b299      	uxth	r1, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	bf0c      	ite	eq
 8001432:	2301      	moveq	r3, #1
 8001434:	2300      	movne	r3, #0
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	f001 fc42 	bl	8002cc2 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800144e:	2101      	movs	r1, #1
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ffe1 	bl	8001418 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6858      	ldr	r0, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	2200      	movs	r2, #0
 8001462:	4619      	mov	r1, r3
 8001464:	f001 fc2d 	bl	8002cc2 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f000 f856 	bl	800151a <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6858      	ldr	r0, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	2201      	movs	r2, #1
 800147a:	4619      	mov	r1, r3
 800147c:	f001 fc21 	bl	8002cc2 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001480:	2064      	movs	r0, #100	@ 0x64
 8001482:	f000 f84a 	bl	800151a <SX1278_hw_DelayMs>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800149a:	2100      	movs	r1, #0
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ffbb 	bl	8001418 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6998      	ldr	r0, [r3, #24]
 80014a6:	1cf9      	adds	r1, r7, #3
 80014a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ac:	2201      	movs	r2, #1
 80014ae:	f003 fc67 	bl	8004d80 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80014b2:	bf00      	nop
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 ff4e 	bl	800535a <HAL_SPI_GetState>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d1f7      	bne.n	80014b4 <SX1278_hw_SPICommand+0x26>
		;
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af02      	add	r7, sp, #8
 80014d4:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80014da:	2300      	movs	r3, #0
 80014dc:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80014de:	2100      	movs	r1, #0
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff99 	bl	8001418 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6998      	ldr	r0, [r3, #24]
 80014ea:	f107 020e 	add.w	r2, r7, #14
 80014ee:	f107 010f 	add.w	r1, r7, #15
 80014f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	f003 fd85 	bl	8005008 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80014fe:	bf00      	nop
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4618      	mov	r0, r3
 8001506:	f003 ff28 	bl	800535a <HAL_SPI_GetState>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d1f7      	bne.n	8001500 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001510:	7bbb      	ldrb	r3, [r7, #14]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f001 f900 	bl	8002728 <HAL_Delay>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4619      	mov	r1, r3
 8001544:	4610      	mov	r0, r2
 8001546:	f001 fba5 	bl	8002c94 <HAL_GPIO_ReadPin>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <clearBuffers>:
	return rand() % (max - min + 1) + min;
}


// fill buffers with 0's
void clearBuffers(Esp01s* esp){
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	memset(esp->RxBuffer,0,sizeof(esp->RxBuffer));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800156c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fabe 	bl	8005af4 <memset>
	memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f004 fab7 	bl	8005af4 <memset>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <newEsp01s>:


Esp01s newEsp01s(UART_HandleTypeDef* _UART){
 800158e:	b580      	push	{r7, lr}
 8001590:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800159c:	f843 0c54 	str.w	r0, [r3, #-84]
 80015a0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015a4:	f843 1c58 	str.w	r1, [r3, #-88]
	Esp01s new_ESP;
	new_ESP.esp_uart = _UART;
 80015a8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015ac:	461a      	mov	r2, r3
 80015ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015b2:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80015b6:	f8c2 3fb8 	str.w	r3, [r2, #4024]	@ 0xfb8
	new_ESP.RxSize = 512;
 80015ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015be:	461a      	mov	r2, r3
 80015c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015c4:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
	clearBuffers(&new_ESP);
 80015c8:	f107 0318 	add.w	r3, r7, #24
 80015cc:	3b0c      	subs	r3, #12
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ffc5 	bl	800155e <clearBuffers>

	return new_ESP;
 80015d4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015e0:	4610      	mov	r0, r2
 80015e2:	3b4c      	subs	r3, #76	@ 0x4c
 80015e4:	f241 024c 	movw	r2, #4172	@ 0x104c
 80015e8:	4619      	mov	r1, r3
 80015ea:	f004 fadb 	bl	8005ba4 <memcpy>
}
 80015ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015f2:	f853 0c54 	ldr.w	r0, [r3, #-84]
 80015f6:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <esp_transmit>:

void esp_transmit(Esp01s* esp, char* c, int delay){
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(esp->esp_uart, (uint8_t *)c, strlen(c),delay);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001612:	685c      	ldr	r4, [r3, #4]
 8001614:	68b8      	ldr	r0, [r7, #8]
 8001616:	f7fe fd9b 	bl	8000150 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	4620      	mov	r0, r4
 8001624:	f003 ffaf 	bl	8005586 <HAL_UART_Transmit>
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}

08001630 <esp_receive>:
void esp_receive(Esp01s* esp, int delay){
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
	memset(esp->RxBuffer,0,sizeof(esp->RxBuffer));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f004 fa54 	bl	8005af4 <memset>
	HAL_UART_Receive(esp->esp_uart, esp->RxBuffer, esp->RxSize,delay);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001652:	6858      	ldr	r0, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f503 7100 	add.w	r1, r3, #512	@ 0x200
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8001660:	b29a      	uxth	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f004 f81a 	bl	800569c <HAL_UART_Receive>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <check_at>:

void check_at(Esp01s* esp){
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, AT_cmd, 1000);
 8001678:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800167c:	4913      	ldr	r1, [pc, #76]	@ (80016cc <check_at+0x5c>)
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffbe 	bl	8001600 <esp_transmit>
	esp_receive(esp, 1000);
 8001684:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ffd1 	bl	8001630 <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001694:	490e      	ldr	r1, [pc, #56]	@ (80016d0 <check_at+0x60>)
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fa41 	bl	8005b1e <strstr>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <check_at+0x40>
		esp->ok_status = AT_OK;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a8:	461a      	mov	r2, r3
 80016aa:	2300      	movs	r3, #0
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	e006      	b.n	80016be <check_at+0x4e>
	}else{
		esp->ok_status = AT_FAIL;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b6:	461a      	mov	r2, r3
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	HAL_Delay(100);
 80016be:	2064      	movs	r0, #100	@ 0x64
 80016c0:	f001 f832 	bl	8002728 <HAL_Delay>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	08006d5c 	.word	0x08006d5c
 80016d0:	08006d64 	.word	0x08006d64

080016d4 <reset_by_wire>:

void reset_by_wire(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	// restart the esp by changing ESP_01S_RST pin to LOW
	HAL_GPIO_WritePin(ESP_01S_RST_GPIO_Port,ESP_01S_RST_Pin , GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016de:	4809      	ldr	r0, [pc, #36]	@ (8001704 <reset_by_wire+0x30>)
 80016e0:	f001 faef 	bl	8002cc2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80016e4:	2064      	movs	r0, #100	@ 0x64
 80016e6:	f001 f81f 	bl	8002728 <HAL_Delay>
	// tour it on and give it time to reset
	HAL_GPIO_WritePin(ESP_01S_RST_GPIO_Port,ESP_01S_RST_Pin , GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <reset_by_wire+0x30>)
 80016f2:	f001 fae6 	bl	8002cc2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80016f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016fa:	f001 f815 	bl	8002728 <HAL_Delay>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40010800 	.word	0x40010800

08001708 <mode_set_station>:
//	HAL_Delay(1000);
//}


// station mode
void mode_set_station(Esp01s* esp){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, MODE_STATION_cmd, 1000);
 8001710:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001714:	4912      	ldr	r1, [pc, #72]	@ (8001760 <mode_set_station+0x58>)
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff72 	bl	8001600 <esp_transmit>
	esp_receive(esp, 1000);
 800171c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff85 	bl	8001630 <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800172c:	490d      	ldr	r1, [pc, #52]	@ (8001764 <mode_set_station+0x5c>)
 800172e:	4618      	mov	r0, r3
 8001730:	f004 f9f5 	bl	8005b1e <strstr>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <mode_set_station+0x40>
		esp->station_status = STATION_MODE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001740:	461a      	mov	r2, r3
 8001742:	2301      	movs	r3, #1
 8001744:	6353      	str	r3, [r2, #52]	@ 0x34
	}else{
		esp->station_status = MODE_ERR;
	}
}
 8001746:	e006      	b.n	8001756 <mode_set_station+0x4e>
		esp->station_status = MODE_ERR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800174e:	461a      	mov	r2, r3
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	08006d68 	.word	0x08006d68
 8001764:	08006d64 	.word	0x08006d64

08001768 <connect_to_ap>:

void connect_to_ap(Esp01s* esp){
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f004 f9bb 	bl	8005af4 <memset>
//	sprintf(esp->TxBuffer,"AT+CWJAP_CUR=\"ARRIS-7A66\",\"ucNEjnjBqc6J\"\r\n");
	// To nie działało u matiego
//	sprintf(esp->TxBuffer,%s,%s\r\n", ssid, password);

//	sprintf(esp->TxBuffer,"AT+CWJAP_CUR=%s,%s\r\n", ssid, password);
	sprintf(esp->TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, password);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4b31      	ldr	r3, [pc, #196]	@ (8001848 <connect_to_ap+0xe0>)
 8001782:	4a32      	ldr	r2, [pc, #200]	@ (800184c <connect_to_ap+0xe4>)
 8001784:	4932      	ldr	r1, [pc, #200]	@ (8001850 <connect_to_ap+0xe8>)
 8001786:	f004 f969 	bl	8005a5c <siprintf>

	esp_transmit(esp, esp->TxBuffer,1000);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ff34 	bl	8001600 <esp_transmit>
	esp_receive(esp, 10000);
 8001798:	f242 7110 	movw	r1, #10000	@ 0x2710
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff47 	bl	8001630 <esp_receive>
	if(strstr((char *)esp->RxBuffer,"CONNECTED")){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017a8:	492a      	ldr	r1, [pc, #168]	@ (8001854 <connect_to_ap+0xec>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 f9b7 	bl	8005b1e <strstr>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <connect_to_ap+0x5c>
		esp->wifi_status = CWJAP_CUR_OK;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017bc:	461a      	mov	r2, r3
 80017be:	2300      	movs	r3, #0
 80017c0:	6393      	str	r3, [r2, #56]	@ 0x38
	}
	else{
		esp->wifi_status = CWJAP_CUR_BAD_AP;
	}

}
 80017c2:	e03c      	b.n	800183e <connect_to_ap+0xd6>
	else if(strstr((char *)esp->RxBuffer,"TIMEOUT")){
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017ca:	4923      	ldr	r1, [pc, #140]	@ (8001858 <connect_to_ap+0xf0>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 f9a6 	bl	8005b1e <strstr>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <connect_to_ap+0x80>
		esp->wifi_status = CWJAP_CUR_TIMEOUT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017de:	461a      	mov	r2, r3
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
 80017e4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80017e6:	e02a      	b.n	800183e <connect_to_ap+0xd6>
	else if(strstr((char *)esp->RxBuffer,"PASS")){
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017ee:	491b      	ldr	r1, [pc, #108]	@ (800185c <connect_to_ap+0xf4>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 f994 	bl	8005b1e <strstr>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <connect_to_ap+0xa4>
		esp->wifi_status = CWJAP_CUR_WRONG_PASS;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001802:	461a      	mov	r2, r3
 8001804:	f06f 0301 	mvn.w	r3, #1
 8001808:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800180a:	e018      	b.n	800183e <connect_to_ap+0xd6>
	else if(strstr((char *)esp->RxBuffer,"BAD")){
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001812:	4913      	ldr	r1, [pc, #76]	@ (8001860 <connect_to_ap+0xf8>)
 8001814:	4618      	mov	r0, r3
 8001816:	f004 f982 	bl	8005b1e <strstr>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <connect_to_ap+0xc8>
		esp->wifi_status = CWJAP_CUR_BAD_AP;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001826:	461a      	mov	r2, r3
 8001828:	f06f 0302 	mvn.w	r3, #2
 800182c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800182e:	e006      	b.n	800183e <connect_to_ap+0xd6>
		esp->wifi_status = CWJAP_CUR_BAD_AP;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001836:	461a      	mov	r2, r3
 8001838:	f06f 0302 	mvn.w	r3, #2
 800183c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008
 800184c:	20000000 	.word	0x20000000
 8001850:	08006d7c 	.word	0x08006d7c
 8001854:	08006d98 	.word	0x08006d98
 8001858:	08006da4 	.word	0x08006da4
 800185c:	08006dac 	.word	0x08006dac
 8001860:	08006db4 	.word	0x08006db4

08001864 <set_max_one_con>:

void set_max_one_con(Esp01s* esp){
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, SET_ONE_CON_cmd,1000);
 800186c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001870:	4912      	ldr	r1, [pc, #72]	@ (80018bc <set_max_one_con+0x58>)
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fec4 	bl	8001600 <esp_transmit>
	esp_receive(esp, 1000);
 8001878:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fed7 	bl	8001630 <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001888:	490d      	ldr	r1, [pc, #52]	@ (80018c0 <set_max_one_con+0x5c>)
 800188a:	4618      	mov	r0, r3
 800188c:	f004 f947 	bl	8005b1e <strstr>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <set_max_one_con+0x40>
		esp->con_count_status = CIPMUX_ONE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800189c:	461a      	mov	r2, r3
 800189e:	2300      	movs	r3, #0
 80018a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	}else{
		esp->con_count_status = CIPMUX_ERR;
	}
}
 80018a2:	e006      	b.n	80018b2 <set_max_one_con+0x4e>
		esp->con_count_status = CIPMUX_ERR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018aa:	461a      	mov	r2, r3
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	08006db8 	.word	0x08006db8
 80018c0:	08006d64 	.word	0x08006d64

080018c4 <get_ip_from_wifi>:

void get_ip_from_wifi(Esp01s* esp){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, GET_IP_cmd, 1000);
 80018cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018d0:	4907      	ldr	r1, [pc, #28]	@ (80018f0 <get_ip_from_wifi+0x2c>)
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fe94 	bl	8001600 <esp_transmit>
	esp_receive(esp, 1000);
 80018d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff fea7 	bl	8001630 <esp_receive>
//	if(NULL==strstr())
	HAL_Delay(100);
 80018e2:	2064      	movs	r0, #100	@ 0x64
 80018e4:	f000 ff20 	bl	8002728 <HAL_Delay>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	08006dc8 	.word	0x08006dc8

080018f4 <check_status>:

void check_status(Esp01s* esp){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, CHECK_STATUS_cmd, 1000);
 80018fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001900:	4907      	ldr	r1, [pc, #28]	@ (8001920 <check_status+0x2c>)
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fe7c 	bl	8001600 <esp_transmit>
	esp_receive(esp, 1000);
 8001908:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff fe8f 	bl	8001630 <esp_receive>
	HAL_Delay(100);
 8001912:	2064      	movs	r0, #100	@ 0x64
 8001914:	f000 ff08 	bl	8002728 <HAL_Delay>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08006dd4 	.word	0x08006dd4

08001924 <start_connection>:

void start_connection(Esp01s* esp){
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af02      	add	r7, sp, #8
 800192a:	6078      	str	r0, [r7, #4]
	memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f004 f8dd 	bl	8005af4 <memset>
	sprintf(esp->TxBuffer,"AT+CIPSTART=\"%s\",\"%s\",%d\r\n",
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <start_connection+0x78>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <start_connection+0x7c>)
 8001944:	4a17      	ldr	r2, [pc, #92]	@ (80019a4 <start_connection+0x80>)
 8001946:	4918      	ldr	r1, [pc, #96]	@ (80019a8 <start_connection+0x84>)
 8001948:	f004 f888 	bl	8005a5c <siprintf>
			server_protocol,
			server_ip,
			server_port);
//	sprintf(ATcommand,"AT+CIPSTART=\"TCP\",\"192.168.1.2\",8000\r\n");

	esp_transmit(esp,esp->TxBuffer, 1000);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fe53 	bl	8001600 <esp_transmit>
	esp_receive(esp, 1000);
 800195a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fe66 	bl	8001630 <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800196a:	4910      	ldr	r1, [pc, #64]	@ (80019ac <start_connection+0x88>)
 800196c:	4618      	mov	r0, r3
 800196e:	f004 f8d6 	bl	8005b1e <strstr>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <start_connection+0x62>
		esp->tcp_con_status = TCP_CON_STARTED;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800197e:	461a      	mov	r2, r3
 8001980:	2300      	movs	r3, #0
 8001982:	6413      	str	r3, [r2, #64]	@ 0x40
	}else{
		esp->tcp_con_status = TCP_CON_START_ERR;
	}
}
 8001984:	e006      	b.n	8001994 <start_connection+0x70>
		esp->tcp_con_status = TCP_CON_START_ERR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800198c:	461a      	mov	r2, r3
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000028 	.word	0x20000028
 80019a0:	20000018 	.word	0x20000018
 80019a4:	20000014 	.word	0x20000014
 80019a8:	08006de4 	.word	0x08006de4
 80019ac:	08006d64 	.word	0x08006d64

080019b0 <send_post_req>:
}

void send_post_req(Esp01s* esp,
		int t1,int h1, int p1,
		int t2,int h2, int p2,
		int t3,int h3, int p3){
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b096      	sub	sp, #88	@ 0x58
 80019b4:	af08      	add	r7, sp, #32
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
//	int pres_val_1 = giveRandom(1018, 1020);
//	int pres_val_2 = giveRandom(1018, 1020);
//	int pres_val_3 = giveRandom(1018, 1020);


	int temp_val_1 = t1;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	637b      	str	r3, [r7, #52]	@ 0x34
	int temp_val_2 = t2;
 80019c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019c4:	633b      	str	r3, [r7, #48]	@ 0x30
	int temp_val_3 = t3;
 80019c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int humi_val_1 = h1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	int humi_val_2 = h2;
 80019ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
	int humi_val_3 = h3;
 80019d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019d4:	623b      	str	r3, [r7, #32]
	int pres_val_1 = p1;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	61fb      	str	r3, [r7, #28]
	int pres_val_2 = p2;
 80019da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019dc:	61bb      	str	r3, [r7, #24]
	int pres_val_3 = p3;
 80019de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019e0:	617b      	str	r3, [r7, #20]


	sprintf(esp->PostBody,
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f603 4004 	addw	r0, r3, #3076	@ 0xc04
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	9306      	str	r3, [sp, #24]
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	9305      	str	r3, [sp, #20]
 80019f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f2:	9304      	str	r3, [sp, #16]
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	9303      	str	r3, [sp, #12]
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	9302      	str	r3, [sp, #8]
 80019fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a08:	4938      	ldr	r1, [pc, #224]	@ (8001aec <send_post_req+0x13c>)
 8001a0a:	f004 f827 	bl	8005a5c <siprintf>
	"}",
	temp_val_1, humi_val_1, pres_val_1,
	temp_val_2, humi_val_2, pres_val_2,
	temp_val_3, humi_val_3, pres_val_3);

	sprintf(esp->PostReq,
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f203 4504 	addw	r5, r3, #1028	@ 0x404
 8001a14:	4b36      	ldr	r3, [pc, #216]	@ (8001af0 <send_post_req+0x140>)
 8001a16:	681c      	ldr	r4, [r3, #0]
			"Host: %s:%d\r\n"
			"Content-Type: application/json\r\n"
			"Content-Length: %d\r\n\r\n"
			"%s\r\n\r\n",
			api_post_path, server_ip, server_port,
			strlen(esp->PostBody), esp->PostBody);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f603 4304 	addw	r3, r3, #3076	@ 0xc04
	sprintf(esp->PostReq,
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fb96 	bl	8000150 <strlen>
 8001a24:	4602      	mov	r2, r0
			strlen(esp->PostBody), esp->PostBody);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f603 4304 	addw	r3, r3, #3076	@ 0xc04
	sprintf(esp->PostReq,
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	9201      	str	r2, [sp, #4]
 8001a30:	9400      	str	r4, [sp, #0]
 8001a32:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <send_post_req+0x144>)
 8001a34:	4a30      	ldr	r2, [pc, #192]	@ (8001af8 <send_post_req+0x148>)
 8001a36:	4931      	ldr	r1, [pc, #196]	@ (8001afc <send_post_req+0x14c>)
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f004 f80f 	bl	8005a5c <siprintf>


	sprintf(esp->TxBuffer,"AT+CIPSEND=%d\r\n", strlen(esp->PostReq));
 8001a3e:	68fc      	ldr	r4, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fb82 	bl	8000150 <strlen>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	492b      	ldr	r1, [pc, #172]	@ (8001b00 <send_post_req+0x150>)
 8001a52:	4620      	mov	r0, r4
 8001a54:	f004 f802 	bl	8005a5c <siprintf>
	//	sending CIPSEND with length of PostReg
	esp_transmit(esp, esp->TxBuffer, 1000);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a5e:	4619      	mov	r1, r3
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff fdcd 	bl	8001600 <esp_transmit>
	esp_receive(esp, 1000);
 8001a66:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff fde0 	bl	8001630 <esp_receive>
	//	searching for > char in response stating that esp is ready for post req
	if(strstr((char *)esp->RxBuffer,">")){
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001a76:	213e      	movs	r1, #62	@ 0x3e
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 f843 	bl	8005b04 <strchr>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d02e      	beq.n	8001ae2 <send_post_req+0x132>
//		memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
		memset(esp->RxBuffer,0,sizeof(esp->RxBuffer));
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f004 f82f 	bl	8005af4 <memset>
		esp_transmit(esp,esp->PostReq,1000);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001a9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7ff fdac 	bl	8001600 <esp_transmit>
		esp_receive(esp, 5000);
 8001aa8:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7ff fdbf 	bl	8001630 <esp_receive>
		if(strstr((char *)esp->RxBuffer,"SUCCESS")){
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001ab8:	4912      	ldr	r1, [pc, #72]	@ (8001b04 <send_post_req+0x154>)
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 f82f 	bl	8005b1e <strstr>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <send_post_req+0x124>
			esp->post_req_status = POST_SEND_OK;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001acc:	461a      	mov	r2, r3
 8001ace:	2300      	movs	r3, #0
 8001ad0:	6493      	str	r3, [r2, #72]	@ 0x48
		}else{
			esp->post_req_status = POST_SEND_ERR;
		}
	}
}
 8001ad2:	e006      	b.n	8001ae2 <send_post_req+0x132>
			esp->post_req_status = POST_SEND_ERR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ada:	461a      	mov	r2, r3
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae0:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001ae2:	bf00      	nop
 8001ae4:	3738      	adds	r7, #56	@ 0x38
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	08006e10 	.word	0x08006e10
 8001af0:	20000028 	.word	0x20000028
 8001af4:	20000018 	.word	0x20000018
 8001af8:	2000002c 	.word	0x2000002c
 8001afc:	08006ed8 	.word	0x08006ed8
 8001b00:	08006f34 	.word	0x08006f34
 8001b04:	08006f44 	.word	0x08006f44

08001b08 <esp_setup>:
/*
 * 	This setup
 *
 */

void esp_setup(Esp01s* esp){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	check_at(esp);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fdad 	bl	8001670 <check_at>
	while(esp->ok_status != AT_OK){
 8001b16:	e004      	b.n	8001b22 <esp_setup+0x1a>
		reset_by_wire();
 8001b18:	f7ff fddc 	bl	80016d4 <reset_by_wire>
		check_at(esp);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fda7 	bl	8001670 <check_at>
	while(esp->ok_status != AT_OK){
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f4      	bne.n	8001b18 <esp_setup+0x10>
		// fatal error no communication with board
	}
	mode_set_station(esp);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fdea 	bl	8001708 <mode_set_station>
	connect_to_ap(esp);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff fe17 	bl	8001768 <connect_to_ap>
	set_max_one_con(esp);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fe92 	bl	8001864 <set_max_one_con>
	get_ip_from_wifi(esp);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff febf 	bl	80018c4 <get_ip_from_wifi>
	check_status(esp);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fed4 	bl	80018f4 <check_status>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	4b42      	ldr	r3, [pc, #264]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a41      	ldr	r2, [pc, #260]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b3f      	ldr	r3, [pc, #252]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b80:	4b3c      	ldr	r3, [pc, #240]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a3b      	ldr	r2, [pc, #236]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001b86:	f043 0320 	orr.w	r3, r3, #32
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b39      	ldr	r3, [pc, #228]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b36      	ldr	r3, [pc, #216]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a35      	ldr	r2, [pc, #212]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <MX_GPIO_Init+0x120>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bce:	482a      	ldr	r0, [pc, #168]	@ (8001c78 <MX_GPIO_Init+0x124>)
 8001bd0:	f001 f877 	bl	8002cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|ESP_01S_RST_Pin, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001bda:	4828      	ldr	r0, [pc, #160]	@ (8001c7c <MX_GPIO_Init+0x128>)
 8001bdc:	f001 f871 	bl	8002cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	2101      	movs	r1, #1
 8001be4:	4826      	ldr	r0, [pc, #152]	@ (8001c80 <MX_GPIO_Init+0x12c>)
 8001be6:	f001 f86c 	bl	8002cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001bea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	481d      	ldr	r0, [pc, #116]	@ (8001c78 <MX_GPIO_Init+0x124>)
 8001c04:	f000 fec2 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin ESP_01S_RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|ESP_01S_RST_Pin;
 8001c08:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4816      	ldr	r0, [pc, #88]	@ (8001c7c <MX_GPIO_Init+0x128>)
 8001c22:	f000 feb3 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001c26:	2301      	movs	r3, #1
 8001c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4810      	ldr	r0, [pc, #64]	@ (8001c80 <MX_GPIO_Init+0x12c>)
 8001c3e:	f000 fea5 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001c42:	2302      	movs	r3, #2
 8001c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <MX_GPIO_Init+0x130>)
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	4619      	mov	r1, r3
 8001c54:	480a      	ldr	r0, [pc, #40]	@ (8001c80 <MX_GPIO_Init+0x12c>)
 8001c56:	f000 fe99 	bl	800298c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2007      	movs	r0, #7
 8001c60:	f000 fe5d 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c64:	2007      	movs	r0, #7
 8001c66:	f000 fe76 	bl	8002956 <HAL_NVIC_EnableIRQ>

}
 8001c6a:	bf00      	nop
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40011000 	.word	0x40011000
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	10110000 	.word	0x10110000

08001c88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <MX_I2C1_Init+0x50>)
 8001c8e:	4a13      	ldr	r2, [pc, #76]	@ (8001cdc <MX_I2C1_Init+0x54>)
 8001c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <MX_I2C1_Init+0x50>)
 8001c94:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <MX_I2C1_Init+0x58>)
 8001c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <MX_I2C1_Init+0x50>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <MX_I2C1_Init+0x50>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <MX_I2C1_Init+0x50>)
 8001ca6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001caa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <MX_I2C1_Init+0x50>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <MX_I2C1_Init+0x50>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <MX_I2C1_Init+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <MX_I2C1_Init+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	@ (8001cd8 <MX_I2C1_Init+0x50>)
 8001cc6:	f001 f837 	bl	8002d38 <HAL_I2C_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cd0:	f000 fb03 	bl	80022da <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200000bc 	.word	0x200000bc
 8001cdc:	40005400 	.word	0x40005400
 8001ce0:	000186a0 	.word	0x000186a0

08001ce4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a15      	ldr	r2, [pc, #84]	@ (8001d54 <HAL_I2C_MspInit+0x70>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d123      	bne.n	8001d4c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d04:	4b14      	ldr	r3, [pc, #80]	@ (8001d58 <HAL_I2C_MspInit+0x74>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a13      	ldr	r2, [pc, #76]	@ (8001d58 <HAL_I2C_MspInit+0x74>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <HAL_I2C_MspInit+0x74>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d1c:	23c0      	movs	r3, #192	@ 0xc0
 8001d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d20:	2312      	movs	r3, #18
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480b      	ldr	r0, [pc, #44]	@ (8001d5c <HAL_I2C_MspInit+0x78>)
 8001d30:	f000 fe2c 	bl	800298c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d34:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <HAL_I2C_MspInit+0x74>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	4a07      	ldr	r2, [pc, #28]	@ (8001d58 <HAL_I2C_MspInit+0x74>)
 8001d3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d3e:	61d3      	str	r3, [r2, #28]
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_I2C_MspInit+0x74>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40005400 	.word	0x40005400
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010c00 	.word	0x40010c00

08001d60 <AHT20_Read>:

#define AHT_ADDR	0x38<<1
#define HI2C      hi2c1

void AHT20_Read(float* Temp, float* Humid)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	@ 0x28
 8001d64:	af04      	add	r7, sp, #16
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
	uint8_t dum[6];
	HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 8001d6a:	2364      	movs	r3, #100	@ 0x64
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	2271      	movs	r2, #113	@ 0x71
 8001d7c:	2170      	movs	r1, #112	@ 0x70
 8001d7e:	484c      	ldr	r0, [pc, #304]	@ (8001eb0 <AHT20_Read+0x150>)
 8001d80:	f001 fc88 	bl	8003694 <HAL_I2C_Mem_Read>

	if(!(dum[0]&(1<<3)))
 8001d84:	7a3b      	ldrb	r3, [r7, #8]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d111      	bne.n	8001db2 <AHT20_Read+0x52>
	{
		dum[0] = 0xBE, dum[1] = 0x08, dum[2] = 0x00;
 8001d8e:	23be      	movs	r3, #190	@ 0xbe
 8001d90:	723b      	strb	r3, [r7, #8]
 8001d92:	2308      	movs	r3, #8
 8001d94:	727b      	strb	r3, [r7, #9]
 8001d96:	2300      	movs	r3, #0
 8001d98:	72bb      	strb	r3, [r7, #10]
		HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 8001d9a:	f107 0208 	add.w	r2, r7, #8
 8001d9e:	2364      	movs	r3, #100	@ 0x64
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2303      	movs	r3, #3
 8001da4:	2170      	movs	r1, #112	@ 0x70
 8001da6:	4842      	ldr	r0, [pc, #264]	@ (8001eb0 <AHT20_Read+0x150>)
 8001da8:	f001 f90a 	bl	8002fc0 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8001dac:	200a      	movs	r0, #10
 8001dae:	f000 fcbb 	bl	8002728 <HAL_Delay>
	}

	dum[0] = 0xAC, dum[1] = 0x33, dum[2] = 0x00;
 8001db2:	23ac      	movs	r3, #172	@ 0xac
 8001db4:	723b      	strb	r3, [r7, #8]
 8001db6:	2333      	movs	r3, #51	@ 0x33
 8001db8:	727b      	strb	r3, [r7, #9]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 8001dbe:	f107 0208 	add.w	r2, r7, #8
 8001dc2:	2364      	movs	r3, #100	@ 0x64
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	2170      	movs	r1, #112	@ 0x70
 8001dca:	4839      	ldr	r0, [pc, #228]	@ (8001eb0 <AHT20_Read+0x150>)
 8001dcc:	f001 f8f8 	bl	8002fc0 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8001dd0:	2050      	movs	r0, #80	@ 0x50
 8001dd2:	f000 fca9 	bl	8002728 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 8001dd6:	2364      	movs	r3, #100	@ 0x64
 8001dd8:	9302      	str	r3, [sp, #8]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2301      	movs	r3, #1
 8001de6:	2271      	movs	r2, #113	@ 0x71
 8001de8:	2170      	movs	r1, #112	@ 0x70
 8001dea:	4831      	ldr	r0, [pc, #196]	@ (8001eb0 <AHT20_Read+0x150>)
 8001dec:	f001 fc52 	bl	8003694 <HAL_I2C_Mem_Read>
		HAL_Delay(1);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f000 fc99 	bl	8002728 <HAL_Delay>
	} while(dum[0]&(1<<7));
 8001df6:	7a3b      	ldrb	r3, [r7, #8]
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	dbeb      	blt.n	8001dd6 <AHT20_Read+0x76>

	HAL_I2C_Master_Receive(&HI2C, AHT_ADDR, dum, 6, 100);
 8001dfe:	f107 0208 	add.w	r2, r7, #8
 8001e02:	2364      	movs	r3, #100	@ 0x64
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2306      	movs	r3, #6
 8001e08:	2170      	movs	r1, #112	@ 0x70
 8001e0a:	4829      	ldr	r0, [pc, #164]	@ (8001eb0 <AHT20_Read+0x150>)
 8001e0c:	f001 f9d6 	bl	80031bc <HAL_I2C_Master_Receive>
	uint32_t h20 = (dum[1])<<12 | (dum[2])<<4 | (dum[3]>>4);
 8001e10:	7a7b      	ldrb	r3, [r7, #9]
 8001e12:	031a      	lsls	r2, r3, #12
 8001e14:	7abb      	ldrb	r3, [r7, #10]
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	7afa      	ldrb	r2, [r7, #11]
 8001e1c:	0912      	lsrs	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
	uint32_t t20 = (dum[3]&0x0F)<<16 | (dum[4])<<8 | dum[5];
 8001e24:	7afb      	ldrb	r3, [r7, #11]
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001e2c:	7b3b      	ldrb	r3, [r7, #12]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	4313      	orrs	r3, r2
 8001e32:	7b7a      	ldrb	r2, [r7, #13]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
	*Temp = (t20 / 1048576.0)*200.0 - 50.0;
 8001e38:	6938      	ldr	r0, [r7, #16]
 8001e3a:	f7fe fad3 	bl	80003e4 <__aeabi_ui2d>
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <AHT20_Read+0x154>)
 8001e44:	f7fe fc72 	bl	800072c <__aeabi_ddiv>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <AHT20_Read+0x158>)
 8001e56:	f7fe fb3f 	bl	80004d8 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <AHT20_Read+0x15c>)
 8001e68:	f7fe f97e 	bl	8000168 <__aeabi_dsub>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7fe fd42 	bl	80008fc <__aeabi_d2f>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	601a      	str	r2, [r3, #0]
	*Humid = h20 / 10485.76;
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7fe fab0 	bl	80003e4 <__aeabi_ui2d>
 8001e84:	a308      	add	r3, pc, #32	@ (adr r3, 8001ea8 <AHT20_Read+0x148>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	f7fe fc4f 	bl	800072c <__aeabi_ddiv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7fe fd31 	bl	80008fc <__aeabi_d2f>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	47ae147b 	.word	0x47ae147b
 8001eac:	40c47ae1 	.word	0x40c47ae1
 8001eb0:	200000bc 	.word	0x200000bc
 8001eb4:	41300000 	.word	0x41300000
 8001eb8:	40690000 	.word	0x40690000
 8001ebc:	40490000 	.word	0x40490000

08001ec0 <clearTx>:
/*  ----------------------------------
 * 		LoRa Functions
 *  ----------------------------------
 */
void clearTx(){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	memset(LoRaTxBuffer,0,sizeof(LoRaTxBuffer));
 8001ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <clearTx+0x14>)
 8001ecc:	f003 fe12 	bl	8005af4 <memset>
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000258 	.word	0x20000258

08001ed8 <clearRx>:

void clearRx(){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	memset(LoRaRxBuffer,0,sizeof(LoRaTxBuffer));
 8001edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4802      	ldr	r0, [pc, #8]	@ (8001eec <clearRx+0x14>)
 8001ee4:	f003 fe06 	bl	8005af4 <memset>
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000458 	.word	0x20000458

08001ef0 <LoRaSetRxMode>:
// Puts LoRa module in receive mode
// -- LED should be off --
void LoRaSetRxMode(){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	clearRx();
 8001ef4:	f7ff fff0 	bl	8001ed8 <clearRx>
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8001ef8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001efc:	2110      	movs	r1, #16
 8001efe:	4808      	ldr	r0, [pc, #32]	@ (8001f20 <LoRaSetRxMode+0x30>)
 8001f00:	f7ff f8e2 	bl	80010c8 <SX1278_LoRaEntryRx>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <LoRaSetRxMode+0x34>)
 8001f08:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f10:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <LoRaSetRxMode+0x38>)
 8001f12:	f000 fed6 	bl	8002cc2 <HAL_GPIO_WritePin>
	master = 1;
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <LoRaSetRxMode+0x3c>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000138 	.word	0x20000138
 8001f24:	20000254 	.word	0x20000254
 8001f28:	40011000 	.word	0x40011000
 8001f2c:	20000250 	.word	0x20000250

08001f30 <LoRaSetTxMode>:

// Puts LoRa module in transmit mode
// -- LED should be on --
void LoRaSetTxMode(){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	clearTx();
 8001f34:	f7ff ffc4 	bl	8001ec0 <clearTx>
	ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8001f38:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	4808      	ldr	r0, [pc, #32]	@ (8001f60 <LoRaSetTxMode+0x30>)
 8001f40:	f7ff f96b 	bl	800121a <SX1278_LoRaEntryTx>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <LoRaSetTxMode+0x34>)
 8001f48:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f50:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <LoRaSetTxMode+0x38>)
 8001f52:	f000 feb6 	bl	8002cc2 <HAL_GPIO_WritePin>
	master = 0;
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <LoRaSetTxMode+0x3c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000138 	.word	0x20000138
 8001f64:	20000254 	.word	0x20000254
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	20000250 	.word	0x20000250

08001f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8001f76:	b087      	sub	sp, #28
 8001f78:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7a:	f000 fb73 	bl	8002664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f7e:	f000 f967 	bl	8002250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f82:	f7ff fde7 	bl	8001b54 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001f86:	f000 f9af 	bl	80022e8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001f8a:	f000 facf 	bl	800252c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001f8e:	f7ff fe7b 	bl	8001c88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /*	=====================
   * 		  	LoRa
   * 	=====================
   */
  master = 1;
 8001f92:	4b95      	ldr	r3, [pc, #596]	@ (80021e8 <main+0x278>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  control_val++;
 8001f98:	4b94      	ldr	r3, [pc, #592]	@ (80021ec <main+0x27c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	4a93      	ldr	r2, [pc, #588]	@ (80021ec <main+0x27c>)
 8001fa0:	6013      	str	r3, [r2, #0]
  // Setup port and pins for LoRa
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001fa2:	4b93      	ldr	r3, [pc, #588]	@ (80021f0 <main+0x280>)
 8001fa4:	4a93      	ldr	r2, [pc, #588]	@ (80021f4 <main+0x284>)
 8001fa6:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8001fa8:	4b91      	ldr	r3, [pc, #580]	@ (80021f0 <main+0x280>)
 8001faa:	2202      	movs	r2, #2
 8001fac:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8001fae:	4b90      	ldr	r3, [pc, #576]	@ (80021f0 <main+0x280>)
 8001fb0:	4a91      	ldr	r2, [pc, #580]	@ (80021f8 <main+0x288>)
 8001fb2:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8001fb4:	4b8e      	ldr	r3, [pc, #568]	@ (80021f0 <main+0x280>)
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RST_GPIO_Port;
 8001fba:	4b8d      	ldr	r3, [pc, #564]	@ (80021f0 <main+0x280>)
 8001fbc:	4a8d      	ldr	r2, [pc, #564]	@ (80021f4 <main+0x284>)
 8001fbe:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RST_Pin;
 8001fc0:	4b8b      	ldr	r3, [pc, #556]	@ (80021f0 <main+0x280>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8001fc6:	4b8a      	ldr	r3, [pc, #552]	@ (80021f0 <main+0x280>)
 8001fc8:	4a8c      	ldr	r2, [pc, #560]	@ (80021fc <main+0x28c>)
 8001fca:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	@ (8002200 <main+0x290>)
 8001fce:	4a88      	ldr	r2, [pc, #544]	@ (80021f0 <main+0x280>)
 8001fd0:	601a      	str	r2, [r3, #0]

  // Init function
  control_val++;
 8001fd2:	4b86      	ldr	r3, [pc, #536]	@ (80021ec <main+0x27c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	4a84      	ldr	r2, [pc, #528]	@ (80021ec <main+0x27c>)
 8001fda:	6013      	str	r3, [r2, #0]
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8001fdc:	230a      	movs	r3, #10
 8001fde:	9305      	str	r3, [sp, #20]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	9304      	str	r3, [sp, #16]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9303      	str	r3, [sp, #12]
 8001fe8:	2307      	movs	r3, #7
 8001fea:	9302      	str	r3, [sp, #8]
 8001fec:	2301      	movs	r3, #1
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	a37a      	add	r3, pc, #488	@ (adr r3, 80021e0 <main+0x270>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	4881      	ldr	r0, [pc, #516]	@ (8002200 <main+0x290>)
 8001ffc:	f7ff f9a4 	bl	8001348 <SX1278_init>
		  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  control_val++;
 8002000:	4b7a      	ldr	r3, [pc, #488]	@ (80021ec <main+0x27c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	4a79      	ldr	r2, [pc, #484]	@ (80021ec <main+0x27c>)
 8002008:	6013      	str	r3, [r2, #0]


  LoRaSetTxMode();						// Set mode to TX
 800200a:	f7ff ff91 	bl	8001f30 <LoRaSetTxMode>
  control_val++;
 800200e:	4b77      	ldr	r3, [pc, #476]	@ (80021ec <main+0x27c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	4a75      	ldr	r2, [pc, #468]	@ (80021ec <main+0x27c>)
 8002016:	6013      	str	r3, [r2, #0]
  /*	=====================
   * 		  	ESP
   * 	=====================
   */
  Esp = newEsp01s(&huart1);				// Define new ESP typedef
 8002018:	4c7a      	ldr	r4, [pc, #488]	@ (8002204 <main+0x294>)
 800201a:	463b      	mov	r3, r7
 800201c:	497a      	ldr	r1, [pc, #488]	@ (8002208 <main+0x298>)
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fab5 	bl	800158e <newEsp01s>
 8002024:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002028:	4620      	mov	r0, r4
 800202a:	3b60      	subs	r3, #96	@ 0x60
 800202c:	f241 024c 	movw	r2, #4172	@ 0x104c
 8002030:	4619      	mov	r1, r3
 8002032:	f003 fdb7 	bl	8005ba4 <memcpy>
  esp_setup(&Esp);						// Run setup for ESP
 8002036:	4873      	ldr	r0, [pc, #460]	@ (8002204 <main+0x294>)
 8002038:	f7ff fd66 	bl	8001b08 <esp_setup>
  start_connection(&Esp);				// Start connection with data sever
 800203c:	4871      	ldr	r0, [pc, #452]	@ (8002204 <main+0x294>)
 800203e:	f7ff fc71 	bl	8001924 <start_connection>

  /*	=====================
   * 		   Timers
   * 	=====================
   */
  timeout = 10;
 8002042:	4b72      	ldr	r3, [pc, #456]	@ (800220c <main+0x29c>)
 8002044:	220a      	movs	r2, #10
 8002046:	601a      	str	r2, [r3, #0]
  reverse_mode_time = 5;
 8002048:	4b71      	ldr	r3, [pc, #452]	@ (8002210 <main+0x2a0>)
 800204a:	2205      	movs	r2, #5
 800204c:	601a      	str	r2, [r3, #0]

  current_time = HAL_GetTick();
 800204e:	f000 fb61 	bl	8002714 <HAL_GetTick>
 8002052:	4603      	mov	r3, r0
 8002054:	4a6f      	ldr	r2, [pc, #444]	@ (8002214 <main+0x2a4>)
 8002056:	6013      	str	r3, [r2, #0]
  timestamp_s1 = current_time;
 8002058:	4b6e      	ldr	r3, [pc, #440]	@ (8002214 <main+0x2a4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6e      	ldr	r2, [pc, #440]	@ (8002218 <main+0x2a8>)
 800205e:	6013      	str	r3, [r2, #0]
  timestamp_s2 = current_time;
 8002060:	4b6c      	ldr	r3, [pc, #432]	@ (8002214 <main+0x2a4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a6d      	ldr	r2, [pc, #436]	@ (800221c <main+0x2ac>)
 8002066:	6013      	str	r3, [r2, #0]

  sensor_2_wakeup = sensor_2_timeout + current_time;
 8002068:	4b6d      	ldr	r3, [pc, #436]	@ (8002220 <main+0x2b0>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b69      	ldr	r3, [pc, #420]	@ (8002214 <main+0x2a4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4413      	add	r3, r2
 8002072:	4a6c      	ldr	r2, [pc, #432]	@ (8002224 <main+0x2b4>)
 8002074:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  current_time = HAL_GetTick();
 8002076:	f000 fb4d 	bl	8002714 <HAL_GetTick>
 800207a:	4603      	mov	r3, r0
 800207c:	4a65      	ldr	r2, [pc, #404]	@ (8002214 <main+0x2a4>)
 800207e:	6013      	str	r3, [r2, #0]

	  // sum of timestamp + timout timer
	  if((sensor_2_wakeup<=current_time)){
 8002080:	4b68      	ldr	r3, [pc, #416]	@ (8002224 <main+0x2b4>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b63      	ldr	r3, [pc, #396]	@ (8002214 <main+0x2a4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f4      	bhi.n	8002076 <main+0x106>

		  // Set Timestamp and wakeup value for another data request
		  timestamp_s2 = HAL_GetTick();
 800208c:	f000 fb42 	bl	8002714 <HAL_GetTick>
 8002090:	4603      	mov	r3, r0
 8002092:	4a62      	ldr	r2, [pc, #392]	@ (800221c <main+0x2ac>)
 8002094:	6013      	str	r3, [r2, #0]
		  sensor_2_wakeup = sensor_2_timeout + HAL_GetTick();
 8002096:	f000 fb3d 	bl	8002714 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	4b60      	ldr	r3, [pc, #384]	@ (8002220 <main+0x2b0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a60      	ldr	r2, [pc, #384]	@ (8002224 <main+0x2b4>)
 80020a4:	6013      	str	r3, [r2, #0]

		  // Set counter for sending info to 5sec

		  inside_counter = HAL_GetTick() + 5000;
 80020a6:	f000 fb35 	bl	8002714 <HAL_GetTick>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80020b0:	3308      	adds	r3, #8
 80020b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002228 <main+0x2b8>)
 80020b4:	6013      	str	r3, [r2, #0]

		  // Send info to sensor_1

		  tx_len = sprintf(LoRaTxBuffer, "%s,%d","S1", 3);
 80020b6:	2303      	movs	r3, #3
 80020b8:	4a5c      	ldr	r2, [pc, #368]	@ (800222c <main+0x2bc>)
 80020ba:	495d      	ldr	r1, [pc, #372]	@ (8002230 <main+0x2c0>)
 80020bc:	485d      	ldr	r0, [pc, #372]	@ (8002234 <main+0x2c4>)
 80020be:	f003 fccd 	bl	8005a5c <siprintf>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002238 <main+0x2c8>)
 80020c6:	6013      	str	r3, [r2, #0]
		  ret = SX1278_LoRaEntryTx(&SX1278, tx_len, 1000);
 80020c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002238 <main+0x2c8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020d2:	4619      	mov	r1, r3
 80020d4:	484a      	ldr	r0, [pc, #296]	@ (8002200 <main+0x290>)
 80020d6:	f7ff f8a0 	bl	800121a <SX1278_LoRaEntryTx>
 80020da:	4603      	mov	r3, r0
 80020dc:	4a57      	ldr	r2, [pc, #348]	@ (800223c <main+0x2cc>)
 80020de:	6013      	str	r3, [r2, #0]
		  ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) LoRaTxBuffer,
 80020e0:	4b55      	ldr	r3, [pc, #340]	@ (8002238 <main+0x2c8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ea:	4952      	ldr	r1, [pc, #328]	@ (8002234 <main+0x2c4>)
 80020ec:	4844      	ldr	r0, [pc, #272]	@ (8002200 <main+0x290>)
 80020ee:	f7ff f8ec 	bl	80012ca <SX1278_LoRaTxPacket>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a51      	ldr	r2, [pc, #324]	@ (800223c <main+0x2cc>)
 80020f6:	6013      	str	r3, [r2, #0]
												tx_len, 1000);


		  // Set RX mode
		  // Read sensor data
		  LoRaSetRxMode();
 80020f8:	f7ff fefa 	bl	8001ef0 <LoRaSetRxMode>
		  AHT20_Read(&temp, &humi);
 80020fc:	4950      	ldr	r1, [pc, #320]	@ (8002240 <main+0x2d0>)
 80020fe:	4851      	ldr	r0, [pc, #324]	@ (8002244 <main+0x2d4>)
 8002100:	f7ff fe2e 	bl	8001d60 <AHT20_Read>
		  HAL_Delay(1000);
 8002104:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002108:	f000 fb0e 	bl	8002728 <HAL_Delay>


		  // For 5 sec wait for value from sensor
		  inside_counter = HAL_GetTick()+5000;
 800210c:	f000 fb02 	bl	8002714 <HAL_GetTick>
 8002110:	4603      	mov	r3, r0
 8002112:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002116:	3308      	adds	r3, #8
 8002118:	4a43      	ldr	r2, [pc, #268]	@ (8002228 <main+0x2b8>)
 800211a:	6013      	str	r3, [r2, #0]

		  while(HAL_GetTick()<=inside_counter){
 800211c:	e056      	b.n	80021cc <main+0x25c>
			  ret = SX1278_LoRaRxPacket(&SX1278);		// ret gives length of received data
 800211e:	4838      	ldr	r0, [pc, #224]	@ (8002200 <main+0x290>)
 8002120:	f7ff f837 	bl	8001192 <SX1278_LoRaRxPacket>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	4b44      	ldr	r3, [pc, #272]	@ (800223c <main+0x2cc>)
 800212a:	601a      	str	r2, [r3, #0]
			  if(ret > 0){
 800212c:	4b43      	ldr	r3, [pc, #268]	@ (800223c <main+0x2cc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	dd4b      	ble.n	80021cc <main+0x25c>
				  SX1278_read(&SX1278, (uint8_t*) LoRaRxBuffer, ret); // read data send
 8002134:	4b41      	ldr	r3, [pc, #260]	@ (800223c <main+0x2cc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	4942      	ldr	r1, [pc, #264]	@ (8002248 <main+0x2d8>)
 800213e:	4830      	ldr	r0, [pc, #192]	@ (8002200 <main+0x290>)
 8002140:	f7ff f92f 	bl	80013a2 <SX1278_read>
				  // --- To change ---
				  // Give each sensor endpoint to
				  // send request each timeout for sensor
				  char s_id[3];
				  int temp2, humi2, pres3;
				  sscanf(LoRaRxBuffer, "%[^,],%d,%d,%d",
 8002144:	f507 5182 	add.w	r1, r7, #4160	@ 0x1040
 8002148:	f101 0118 	add.w	r1, r1, #24
 800214c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002150:	f102 021c 	add.w	r2, r2, #28
 8002154:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002158:	f103 0310 	add.w	r3, r3, #16
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002162:	f103 0314 	add.w	r3, r3, #20
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	460b      	mov	r3, r1
 800216a:	4938      	ldr	r1, [pc, #224]	@ (800224c <main+0x2dc>)
 800216c:	4836      	ldr	r0, [pc, #216]	@ (8002248 <main+0x2d8>)
 800216e:	f003 fc95 	bl	8005a9c <siscanf>
						  s_id, &temp2, &humi2, &pres3);

				  // send post request
				  send_post_req(&Esp, (int)temp, (int)humi, 1021 ,  // station values
 8002172:	4b34      	ldr	r3, [pc, #208]	@ (8002244 <main+0x2d4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fc10 	bl	800099c <__aeabi_f2iz>
 800217c:	4604      	mov	r4, r0
 800217e:	4b30      	ldr	r3, [pc, #192]	@ (8002240 <main+0x2d0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fc0a 	bl	800099c <__aeabi_f2iz>
 8002188:	4601      	mov	r1, r0
 800218a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800218e:	f103 0318 	add.w	r3, r3, #24
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002198:	f102 0214 	add.w	r2, r2, #20
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	2000      	movs	r0, #0
 80021a0:	9005      	str	r0, [sp, #20]
 80021a2:	2000      	movs	r0, #0
 80021a4:	9004      	str	r0, [sp, #16]
 80021a6:	2000      	movs	r0, #0
 80021a8:	9003      	str	r0, [sp, #12]
 80021aa:	f240 30fd 	movw	r0, #1021	@ 0x3fd
 80021ae:	9002      	str	r0, [sp, #8]
 80021b0:	9201      	str	r2, [sp, #4]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 80021b8:	460a      	mov	r2, r1
 80021ba:	4621      	mov	r1, r4
 80021bc:	4811      	ldr	r0, [pc, #68]	@ (8002204 <main+0x294>)
 80021be:	f7ff fbf7 	bl	80019b0 <send_post_req>
						  	  	  	  temp2, humi2, 1021 ,			// sensor_1 values
									  0, 0, 0);					// sensor_2 values

				  // -----------------
				  control_val++;
 80021c2:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <main+0x27c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3301      	adds	r3, #1
 80021c8:	4a08      	ldr	r2, [pc, #32]	@ (80021ec <main+0x27c>)
 80021ca:	6013      	str	r3, [r2, #0]
		  while(HAL_GetTick()<=inside_counter){
 80021cc:	f000 faa2 	bl	8002714 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <main+0x2b8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d9a1      	bls.n	800211e <main+0x1ae>
			  }
		  }



		  LoRaSetTxMode();
 80021da:	f7ff fea9 	bl	8001f30 <LoRaSetTxMode>
	  current_time = HAL_GetTick();
 80021de:	e74a      	b.n	8002076 <main+0x106>
 80021e0:	19de5080 	.word	0x19de5080
 80021e4:	00000000 	.word	0x00000000
 80021e8:	20000250 	.word	0x20000250
 80021ec:	20000664 	.word	0x20000664
 80021f0:	20000118 	.word	0x20000118
 80021f4:	40010c00 	.word	0x40010c00
 80021f8:	40010800 	.word	0x40010800
 80021fc:	200016c8 	.word	0x200016c8
 8002200:	20000138 	.word	0x20000138
 8002204:	20000668 	.word	0x20000668
 8002208:	20001724 	.word	0x20001724
 800220c:	2000065c 	.word	0x2000065c
 8002210:	20000660 	.word	0x20000660
 8002214:	200016b4 	.word	0x200016b4
 8002218:	200016b8 	.word	0x200016b8
 800221c:	200016bc 	.word	0x200016bc
 8002220:	20000040 	.word	0x20000040
 8002224:	200016c0 	.word	0x200016c0
 8002228:	200016c4 	.word	0x200016c4
 800222c:	08006f4c 	.word	0x08006f4c
 8002230:	08006f50 	.word	0x08006f50
 8002234:	20000258 	.word	0x20000258
 8002238:	20000658 	.word	0x20000658
 800223c:	20000254 	.word	0x20000254
 8002240:	20000114 	.word	0x20000114
 8002244:	20000110 	.word	0x20000110
 8002248:	20000458 	.word	0x20000458
 800224c:	08006f58 	.word	0x08006f58

08002250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b090      	sub	sp, #64	@ 0x40
 8002254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002256:	f107 0318 	add.w	r3, r7, #24
 800225a:	2228      	movs	r2, #40	@ 0x28
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f003 fc48 	bl	8005af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002272:	2301      	movs	r3, #1
 8002274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800227a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800227c:	2300      	movs	r3, #0
 800227e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002280:	2301      	movs	r3, #1
 8002282:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002284:	2302      	movs	r3, #2
 8002286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800228c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800228e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002294:	f107 0318 	add.w	r3, r7, #24
 8002298:	4618      	mov	r0, r3
 800229a:	f002 f8dd 	bl	8004458 <HAL_RCC_OscConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022a4:	f000 f819 	bl	80022da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a8:	230f      	movs	r3, #15
 80022aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ac:	2302      	movs	r3, #2
 80022ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2102      	movs	r1, #2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fb4a 	bl	800495c <HAL_RCC_ClockConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80022ce:	f000 f804 	bl	80022da <Error_Handler>
  }
}
 80022d2:	bf00      	nop
 80022d4:	3740      	adds	r7, #64	@ 0x40
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022de:	b672      	cpsid	i
}
 80022e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e2:	bf00      	nop
 80022e4:	e7fd      	b.n	80022e2 <Error_Handler+0x8>
	...

080022e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022ec:	4b17      	ldr	r3, [pc, #92]	@ (800234c <MX_SPI1_Init+0x64>)
 80022ee:	4a18      	ldr	r2, [pc, #96]	@ (8002350 <MX_SPI1_Init+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022f2:	4b16      	ldr	r3, [pc, #88]	@ (800234c <MX_SPI1_Init+0x64>)
 80022f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022fa:	4b14      	ldr	r3, [pc, #80]	@ (800234c <MX_SPI1_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <MX_SPI1_Init+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002306:	4b11      	ldr	r3, [pc, #68]	@ (800234c <MX_SPI1_Init+0x64>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800230c:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <MX_SPI1_Init+0x64>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <MX_SPI1_Init+0x64>)
 8002314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800231a:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <MX_SPI1_Init+0x64>)
 800231c:	2210      	movs	r2, #16
 800231e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002320:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <MX_SPI1_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <MX_SPI1_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800232c:	4b07      	ldr	r3, [pc, #28]	@ (800234c <MX_SPI1_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <MX_SPI1_Init+0x64>)
 8002334:	220a      	movs	r2, #10
 8002336:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	@ (800234c <MX_SPI1_Init+0x64>)
 800233a:	f002 fc9d 	bl	8004c78 <HAL_SPI_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002344:	f7ff ffc9 	bl	80022da <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200016c8 	.word	0x200016c8
 8002350:	40013000 	.word	0x40013000

08002354 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0310 	add.w	r3, r7, #16
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1b      	ldr	r2, [pc, #108]	@ (80023dc <HAL_SPI_MspInit+0x88>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d12f      	bne.n	80023d4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002374:	4b1a      	ldr	r3, [pc, #104]	@ (80023e0 <HAL_SPI_MspInit+0x8c>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a19      	ldr	r2, [pc, #100]	@ (80023e0 <HAL_SPI_MspInit+0x8c>)
 800237a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <HAL_SPI_MspInit+0x8c>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <HAL_SPI_MspInit+0x8c>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a13      	ldr	r2, [pc, #76]	@ (80023e0 <HAL_SPI_MspInit+0x8c>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_SPI_MspInit+0x8c>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023a4:	23a0      	movs	r3, #160	@ 0xa0
 80023a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4619      	mov	r1, r3
 80023b6:	480b      	ldr	r0, [pc, #44]	@ (80023e4 <HAL_SPI_MspInit+0x90>)
 80023b8:	f000 fae8 	bl	800298c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023bc:	2340      	movs	r3, #64	@ 0x40
 80023be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4619      	mov	r1, r3
 80023ce:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <HAL_SPI_MspInit+0x90>)
 80023d0:	f000 fadc 	bl	800298c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40013000 	.word	0x40013000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010800 	.word	0x40010800

080023e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_MspInit+0x5c>)
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <HAL_MspInit+0x5c>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6193      	str	r3, [r2, #24]
 80023fa:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_MspInit+0x5c>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <HAL_MspInit+0x5c>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	4a0e      	ldr	r2, [pc, #56]	@ (8002444 <HAL_MspInit+0x5c>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	61d3      	str	r3, [r2, #28]
 8002412:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <HAL_MspInit+0x5c>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_MspInit+0x60>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_MspInit+0x60>)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40021000 	.word	0x40021000
 8002448:	40010000 	.word	0x40010000

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <NMI_Handler+0x4>

08002454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <MemManage_Handler+0x4>

08002464 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <BusFault_Handler+0x4>

0800246c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <UsageFault_Handler+0x4>

08002474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249c:	f000 f928 	bl	80026f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80024a8:	2002      	movs	r0, #2
 80024aa:	f000 fc23 	bl	8002cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024bc:	4a14      	ldr	r2, [pc, #80]	@ (8002510 <_sbrk+0x5c>)
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <_sbrk+0x60>)
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d0:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <_sbrk+0x64>)
 80024d2:	4a12      	ldr	r2, [pc, #72]	@ (800251c <_sbrk+0x68>)
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d6:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d207      	bcs.n	80024f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e4:	f003 fb32 	bl	8005b4c <__errno>
 80024e8:	4603      	mov	r3, r0
 80024ea:	220c      	movs	r2, #12
 80024ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
 80024f2:	e009      	b.n	8002508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <_sbrk+0x64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	4a05      	ldr	r2, [pc, #20]	@ (8002518 <_sbrk+0x64>)
 8002504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20005000 	.word	0x20005000
 8002514:	00000400 	.word	0x00000400
 8002518:	20001720 	.word	0x20001720
 800251c:	200018b8 	.word	0x200018b8

08002520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002530:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <MX_USART1_UART_Init+0x4c>)
 8002532:	4a12      	ldr	r2, [pc, #72]	@ (800257c <MX_USART1_UART_Init+0x50>)
 8002534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002536:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <MX_USART1_UART_Init+0x4c>)
 8002538:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800253c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800253e:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <MX_USART1_UART_Init+0x4c>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <MX_USART1_UART_Init+0x4c>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <MX_USART1_UART_Init+0x4c>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002550:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <MX_USART1_UART_Init+0x4c>)
 8002552:	220c      	movs	r2, #12
 8002554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <MX_USART1_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <MX_USART1_UART_Init+0x4c>)
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002562:	4805      	ldr	r0, [pc, #20]	@ (8002578 <MX_USART1_UART_Init+0x4c>)
 8002564:	f002 ffbf 	bl	80054e6 <HAL_UART_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800256e:	f7ff feb4 	bl	80022da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20001724 	.word	0x20001724
 800257c:	40013800 	.word	0x40013800

08002580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1c      	ldr	r2, [pc, #112]	@ (800260c <HAL_UART_MspInit+0x8c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d131      	bne.n	8002604 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <HAL_UART_MspInit+0x90>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002610 <HAL_UART_MspInit+0x90>)
 80025a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025aa:	6193      	str	r3, [r2, #24]
 80025ac:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <HAL_UART_MspInit+0x90>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b8:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_UART_MspInit+0x90>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <HAL_UART_MspInit+0x90>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	6193      	str	r3, [r2, #24]
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_UART_MspInit+0x90>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    */
    GPIO_InitStruct.Pin = ESP_01S_TX_Pin;
 80025d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESP_01S_TX_GPIO_Port, &GPIO_InitStruct);
 80025de:	f107 0310 	add.w	r3, r7, #16
 80025e2:	4619      	mov	r1, r3
 80025e4:	480b      	ldr	r0, [pc, #44]	@ (8002614 <HAL_UART_MspInit+0x94>)
 80025e6:	f000 f9d1 	bl	800298c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_01S_RX_Pin|RTC_ALARM_Pin;
 80025ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	4619      	mov	r1, r3
 80025fe:	4805      	ldr	r0, [pc, #20]	@ (8002614 <HAL_UART_MspInit+0x94>)
 8002600:	f000 f9c4 	bl	800298c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002604:	bf00      	nop
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40013800 	.word	0x40013800
 8002610:	40021000 	.word	0x40021000
 8002614:	40010800 	.word	0x40010800

08002618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002618:	f7ff ff82 	bl	8002520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800261c:	480b      	ldr	r0, [pc, #44]	@ (800264c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800261e:	490c      	ldr	r1, [pc, #48]	@ (8002650 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002620:	4a0c      	ldr	r2, [pc, #48]	@ (8002654 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002624:	e002      	b.n	800262c <LoopCopyDataInit>

08002626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262a:	3304      	adds	r3, #4

0800262c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800262c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002630:	d3f9      	bcc.n	8002626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002632:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002634:	4c09      	ldr	r4, [pc, #36]	@ (800265c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002638:	e001      	b.n	800263e <LoopFillZerobss>

0800263a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800263c:	3204      	adds	r2, #4

0800263e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002640:	d3fb      	bcc.n	800263a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002642:	f003 fa89 	bl	8005b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002646:	f7ff fc93 	bl	8001f70 <main>
  bx lr
 800264a:	4770      	bx	lr
  ldr r0, =_sdata
 800264c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002650:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002654:	08007120 	.word	0x08007120
  ldr r2, =_sbss
 8002658:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800265c:	200018b8 	.word	0x200018b8

08002660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC1_2_IRQHandler>
	...

08002664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <HAL_Init+0x28>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a07      	ldr	r2, [pc, #28]	@ (800268c <HAL_Init+0x28>)
 800266e:	f043 0310 	orr.w	r3, r3, #16
 8002672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002674:	2003      	movs	r0, #3
 8002676:	f000 f947 	bl	8002908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267a:	200f      	movs	r0, #15
 800267c:	f000 f808 	bl	8002690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002680:	f7ff feb2 	bl	80023e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002698:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_InitTick+0x54>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_InitTick+0x58>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f95f 	bl	8002972 <HAL_SYSTICK_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00e      	b.n	80026dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	d80a      	bhi.n	80026da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c4:	2200      	movs	r2, #0
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f000 f927 	bl	800291e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d0:	4a06      	ldr	r2, [pc, #24]	@ (80026ec <HAL_InitTick+0x5c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000044 	.word	0x20000044
 80026e8:	2000004c 	.word	0x2000004c
 80026ec:	20000048 	.word	0x20000048

080026f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_IncTick+0x1c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_IncTick+0x20>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	4a03      	ldr	r2, [pc, #12]	@ (8002710 <HAL_IncTick+0x20>)
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	2000004c 	.word	0x2000004c
 8002710:	2000176c 	.word	0x2000176c

08002714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b02      	ldr	r3, [pc, #8]	@ (8002724 <HAL_GetTick+0x10>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	2000176c 	.word	0x2000176c

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff fff0 	bl	8002714 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002742:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <HAL_Delay+0x44>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274e:	bf00      	nop
 8002750:	f7ff ffe0 	bl	8002714 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	2000004c 	.word	0x2000004c

08002770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800278c:	4013      	ands	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002798:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800279c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a2:	4a04      	ldr	r2, [pc, #16]	@ (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	60d3      	str	r3, [r2, #12]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027bc:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <__NVIC_GetPriorityGrouping+0x18>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	f003 0307 	and.w	r3, r3, #7
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	db0b      	blt.n	80027fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	4906      	ldr	r1, [pc, #24]	@ (8002808 <__NVIC_EnableIRQ+0x34>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2001      	movs	r0, #1
 80027f6:	fa00 f202 	lsl.w	r2, r0, r2
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100

0800280c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	2b00      	cmp	r3, #0
 800281e:	db0a      	blt.n	8002836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	490c      	ldr	r1, [pc, #48]	@ (8002858 <__NVIC_SetPriority+0x4c>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	0112      	lsls	r2, r2, #4
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	440b      	add	r3, r1
 8002830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002834:	e00a      	b.n	800284c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4908      	ldr	r1, [pc, #32]	@ (800285c <__NVIC_SetPriority+0x50>)
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3b04      	subs	r3, #4
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	440b      	add	r3, r1
 800284a:	761a      	strb	r2, [r3, #24]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	@ 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f1c3 0307 	rsb	r3, r3, #7
 800287a:	2b04      	cmp	r3, #4
 800287c:	bf28      	it	cs
 800287e:	2304      	movcs	r3, #4
 8002880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3304      	adds	r3, #4
 8002886:	2b06      	cmp	r3, #6
 8002888:	d902      	bls.n	8002890 <NVIC_EncodePriority+0x30>
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3b03      	subs	r3, #3
 800288e:	e000      	b.n	8002892 <NVIC_EncodePriority+0x32>
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	401a      	ands	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	43d9      	mvns	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	4313      	orrs	r3, r2
         );
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	@ 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d4:	d301      	bcc.n	80028da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00f      	b.n	80028fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028da:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <SysTick_Config+0x40>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e2:	210f      	movs	r1, #15
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f7ff ff90 	bl	800280c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <SysTick_Config+0x40>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f2:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <SysTick_Config+0x40>)
 80028f4:	2207      	movs	r2, #7
 80028f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	e000e010 	.word	0xe000e010

08002908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ff2d 	bl	8002770 <__NVIC_SetPriorityGrouping>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002930:	f7ff ff42 	bl	80027b8 <__NVIC_GetPriorityGrouping>
 8002934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7ff ff90 	bl	8002860 <NVIC_EncodePriority>
 8002940:	4602      	mov	r2, r0
 8002942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff5f 	bl	800280c <__NVIC_SetPriority>
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff35 	bl	80027d4 <__NVIC_EnableIRQ>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ffa2 	bl	80028c4 <SysTick_Config>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800298c:	b480      	push	{r7}
 800298e:	b08b      	sub	sp, #44	@ 0x2c
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299e:	e169      	b.n	8002c74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029a0:	2201      	movs	r2, #1
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	f040 8158 	bne.w	8002c6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a9a      	ldr	r2, [pc, #616]	@ (8002c2c <HAL_GPIO_Init+0x2a0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d05e      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
 80029c8:	4a98      	ldr	r2, [pc, #608]	@ (8002c2c <HAL_GPIO_Init+0x2a0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d875      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 80029ce:	4a98      	ldr	r2, [pc, #608]	@ (8002c30 <HAL_GPIO_Init+0x2a4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d058      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
 80029d4:	4a96      	ldr	r2, [pc, #600]	@ (8002c30 <HAL_GPIO_Init+0x2a4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d86f      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 80029da:	4a96      	ldr	r2, [pc, #600]	@ (8002c34 <HAL_GPIO_Init+0x2a8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d052      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
 80029e0:	4a94      	ldr	r2, [pc, #592]	@ (8002c34 <HAL_GPIO_Init+0x2a8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d869      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 80029e6:	4a94      	ldr	r2, [pc, #592]	@ (8002c38 <HAL_GPIO_Init+0x2ac>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d04c      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
 80029ec:	4a92      	ldr	r2, [pc, #584]	@ (8002c38 <HAL_GPIO_Init+0x2ac>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d863      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 80029f2:	4a92      	ldr	r2, [pc, #584]	@ (8002c3c <HAL_GPIO_Init+0x2b0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d046      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
 80029f8:	4a90      	ldr	r2, [pc, #576]	@ (8002c3c <HAL_GPIO_Init+0x2b0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d85d      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 80029fe:	2b12      	cmp	r3, #18
 8002a00:	d82a      	bhi.n	8002a58 <HAL_GPIO_Init+0xcc>
 8002a02:	2b12      	cmp	r3, #18
 8002a04:	d859      	bhi.n	8002aba <HAL_GPIO_Init+0x12e>
 8002a06:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <HAL_GPIO_Init+0x80>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a87 	.word	0x08002a87
 8002a10:	08002a61 	.word	0x08002a61
 8002a14:	08002a73 	.word	0x08002a73
 8002a18:	08002ab5 	.word	0x08002ab5
 8002a1c:	08002abb 	.word	0x08002abb
 8002a20:	08002abb 	.word	0x08002abb
 8002a24:	08002abb 	.word	0x08002abb
 8002a28:	08002abb 	.word	0x08002abb
 8002a2c:	08002abb 	.word	0x08002abb
 8002a30:	08002abb 	.word	0x08002abb
 8002a34:	08002abb 	.word	0x08002abb
 8002a38:	08002abb 	.word	0x08002abb
 8002a3c:	08002abb 	.word	0x08002abb
 8002a40:	08002abb 	.word	0x08002abb
 8002a44:	08002abb 	.word	0x08002abb
 8002a48:	08002abb 	.word	0x08002abb
 8002a4c:	08002abb 	.word	0x08002abb
 8002a50:	08002a69 	.word	0x08002a69
 8002a54:	08002a7d 	.word	0x08002a7d
 8002a58:	4a79      	ldr	r2, [pc, #484]	@ (8002c40 <HAL_GPIO_Init+0x2b4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a5e:	e02c      	b.n	8002aba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	623b      	str	r3, [r7, #32]
          break;
 8002a66:	e029      	b.n	8002abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	623b      	str	r3, [r7, #32]
          break;
 8002a70:	e024      	b.n	8002abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	3308      	adds	r3, #8
 8002a78:	623b      	str	r3, [r7, #32]
          break;
 8002a7a:	e01f      	b.n	8002abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	330c      	adds	r3, #12
 8002a82:	623b      	str	r3, [r7, #32]
          break;
 8002a84:	e01a      	b.n	8002abc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a8e:	2304      	movs	r3, #4
 8002a90:	623b      	str	r3, [r7, #32]
          break;
 8002a92:	e013      	b.n	8002abc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	611a      	str	r2, [r3, #16]
          break;
 8002aa6:	e009      	b.n	8002abc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	615a      	str	r2, [r3, #20]
          break;
 8002ab2:	e003      	b.n	8002abc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
          break;
 8002ab8:	e000      	b.n	8002abc <HAL_GPIO_Init+0x130>
          break;
 8002aba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2bff      	cmp	r3, #255	@ 0xff
 8002ac0:	d801      	bhi.n	8002ac6 <HAL_GPIO_Init+0x13a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	e001      	b.n	8002aca <HAL_GPIO_Init+0x13e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2bff      	cmp	r3, #255	@ 0xff
 8002ad0:	d802      	bhi.n	8002ad8 <HAL_GPIO_Init+0x14c>
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	e002      	b.n	8002ade <HAL_GPIO_Init+0x152>
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	3b08      	subs	r3, #8
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	210f      	movs	r1, #15
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	401a      	ands	r2, r3
 8002af0:	6a39      	ldr	r1, [r7, #32]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	431a      	orrs	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80b1 	beq.w	8002c6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c44 <HAL_GPIO_Init+0x2b8>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	4a4c      	ldr	r2, [pc, #304]	@ (8002c44 <HAL_GPIO_Init+0x2b8>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6193      	str	r3, [r2, #24]
 8002b18:	4b4a      	ldr	r3, [pc, #296]	@ (8002c44 <HAL_GPIO_Init+0x2b8>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b24:	4a48      	ldr	r2, [pc, #288]	@ (8002c48 <HAL_GPIO_Init+0x2bc>)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a40      	ldr	r2, [pc, #256]	@ (8002c4c <HAL_GPIO_Init+0x2c0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d013      	beq.n	8002b78 <HAL_GPIO_Init+0x1ec>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a3f      	ldr	r2, [pc, #252]	@ (8002c50 <HAL_GPIO_Init+0x2c4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d00d      	beq.n	8002b74 <HAL_GPIO_Init+0x1e8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c54 <HAL_GPIO_Init+0x2c8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d007      	beq.n	8002b70 <HAL_GPIO_Init+0x1e4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a3d      	ldr	r2, [pc, #244]	@ (8002c58 <HAL_GPIO_Init+0x2cc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_GPIO_Init+0x1e0>
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e006      	b.n	8002b7a <HAL_GPIO_Init+0x1ee>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	e004      	b.n	8002b7a <HAL_GPIO_Init+0x1ee>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e002      	b.n	8002b7a <HAL_GPIO_Init+0x1ee>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_GPIO_Init+0x1ee>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7c:	f002 0203 	and.w	r2, r2, #3
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	4093      	lsls	r3, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b8a:	492f      	ldr	r1, [pc, #188]	@ (8002c48 <HAL_GPIO_Init+0x2bc>)
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	492c      	ldr	r1, [pc, #176]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	4928      	ldr	r1, [pc, #160]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bcc:	4b23      	ldr	r3, [pc, #140]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	4922      	ldr	r1, [pc, #136]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
 8002bd8:	e006      	b.n	8002be8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bda:	4b20      	ldr	r3, [pc, #128]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	491e      	ldr	r1, [pc, #120]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d006      	beq.n	8002c02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bf4:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4918      	ldr	r1, [pc, #96]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c02:	4b16      	ldr	r3, [pc, #88]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	4914      	ldr	r1, [pc, #80]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d021      	beq.n	8002c60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	490e      	ldr	r1, [pc, #56]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]
 8002c28:	e021      	b.n	8002c6e <HAL_GPIO_Init+0x2e2>
 8002c2a:	bf00      	nop
 8002c2c:	10320000 	.word	0x10320000
 8002c30:	10310000 	.word	0x10310000
 8002c34:	10220000 	.word	0x10220000
 8002c38:	10210000 	.word	0x10210000
 8002c3c:	10120000 	.word	0x10120000
 8002c40:	10110000 	.word	0x10110000
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40010800 	.word	0x40010800
 8002c50:	40010c00 	.word	0x40010c00
 8002c54:	40011000 	.word	0x40011000
 8002c58:	40011400 	.word	0x40011400
 8002c5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_GPIO_Init+0x304>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	4909      	ldr	r1, [pc, #36]	@ (8002c90 <HAL_GPIO_Init+0x304>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	3301      	adds	r3, #1
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f47f ae8e 	bne.w	80029a0 <HAL_GPIO_Init+0x14>
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	372c      	adds	r7, #44	@ 0x2c
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	40010400 	.word	0x40010400

08002c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e001      	b.n	8002cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	807b      	strh	r3, [r7, #2]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd2:	787b      	ldrb	r3, [r7, #1]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd8:	887a      	ldrh	r2, [r7, #2]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cde:	e003      	b.n	8002ce8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	041a      	lsls	r2, r3, #16
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	611a      	str	r2, [r3, #16]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cfe:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d0a:	4a05      	ldr	r2, [pc, #20]	@ (8002d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f806 	bl	8002d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40010400 	.word	0x40010400

08002d24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e12b      	b.n	8002fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe ffc0 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2224      	movs	r2, #36	@ 0x24
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f001 ff26 	bl	8004bec <HAL_RCC_GetPCLK1Freq>
 8002da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a81      	ldr	r2, [pc, #516]	@ (8002fac <HAL_I2C_Init+0x274>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d807      	bhi.n	8002dbc <HAL_I2C_Init+0x84>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a80      	ldr	r2, [pc, #512]	@ (8002fb0 <HAL_I2C_Init+0x278>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	bf94      	ite	ls
 8002db4:	2301      	movls	r3, #1
 8002db6:	2300      	movhi	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e006      	b.n	8002dca <HAL_I2C_Init+0x92>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a7d      	ldr	r2, [pc, #500]	@ (8002fb4 <HAL_I2C_Init+0x27c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	bf94      	ite	ls
 8002dc4:	2301      	movls	r3, #1
 8002dc6:	2300      	movhi	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0e7      	b.n	8002fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a78      	ldr	r2, [pc, #480]	@ (8002fb8 <HAL_I2C_Init+0x280>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0c9b      	lsrs	r3, r3, #18
 8002ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a6a      	ldr	r2, [pc, #424]	@ (8002fac <HAL_I2C_Init+0x274>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d802      	bhi.n	8002e0c <HAL_I2C_Init+0xd4>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	e009      	b.n	8002e20 <HAL_I2C_Init+0xe8>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	4a69      	ldr	r2, [pc, #420]	@ (8002fbc <HAL_I2C_Init+0x284>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	3301      	adds	r3, #1
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	495c      	ldr	r1, [pc, #368]	@ (8002fac <HAL_I2C_Init+0x274>)
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	d819      	bhi.n	8002e74 <HAL_I2C_Init+0x13c>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e59      	subs	r1, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4e:	1c59      	adds	r1, r3, #1
 8002e50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e54:	400b      	ands	r3, r1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_I2C_Init+0x138>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1e59      	subs	r1, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6e:	e051      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002e70:	2304      	movs	r3, #4
 8002e72:	e04f      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d111      	bne.n	8002ea0 <HAL_I2C_Init+0x168>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e58      	subs	r0, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e012      	b.n	8002ec6 <HAL_I2C_Init+0x18e>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e58      	subs	r0, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	0099      	lsls	r1, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Init+0x196>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e022      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_I2C_Init+0x1bc>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e58      	subs	r0, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	440b      	add	r3, r1
 8002ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ef2:	e00f      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	6809      	ldr	r1, [r1, #0]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6911      	ldr	r1, [r2, #16]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	4311      	orrs	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	000186a0 	.word	0x000186a0
 8002fb0:	001e847f 	.word	0x001e847f
 8002fb4:	003d08ff 	.word	0x003d08ff
 8002fb8:	431bde83 	.word	0x431bde83
 8002fbc:	10624dd3 	.word	0x10624dd3

08002fc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	460b      	mov	r3, r1
 8002fce:	817b      	strh	r3, [r7, #10]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd4:	f7ff fb9e 	bl	8002714 <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	f040 80e0 	bne.w	80031a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2319      	movs	r3, #25
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4970      	ldr	r1, [pc, #448]	@ (80031b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fffa 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
 8003000:	e0d3      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_I2C_Master_Transmit+0x50>
 800300c:	2302      	movs	r3, #2
 800300e:	e0cc      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d007      	beq.n	8003036 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2221      	movs	r2, #33	@ 0x21
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2210      	movs	r2, #16
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	893a      	ldrh	r2, [r7, #8]
 8003066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4a50      	ldr	r2, [pc, #320]	@ (80031b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003076:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003078:	8979      	ldrh	r1, [r7, #10]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	6a3a      	ldr	r2, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fd7c 	bl	8003b7c <I2C_MasterRequestWrite>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e08d      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030a4:	e066      	b.n	8003174 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	6a39      	ldr	r1, [r7, #32]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f001 f8b8 	bl	8004220 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d107      	bne.n	80030ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e06b      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b04      	cmp	r3, #4
 800310e:	d11b      	bne.n	8003148 <HAL_I2C_Master_Transmit+0x188>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	d017      	beq.n	8003148 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	6a39      	ldr	r1, [r7, #32]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f001 f8af 	bl	80042b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	2b04      	cmp	r3, #4
 800315e:	d107      	bne.n	8003170 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e01a      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d194      	bne.n	80030a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	00100002 	.word	0x00100002
 80031b8:	ffff0000 	.word	0xffff0000

080031bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	@ 0x30
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	461a      	mov	r2, r3
 80031c8:	460b      	mov	r3, r1
 80031ca:	817b      	strh	r3, [r7, #10]
 80031cc:	4613      	mov	r3, r2
 80031ce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7ff fa9e 	bl	8002714 <HAL_GetTick>
 80031d8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	f040 824b 	bne.w	800367e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2319      	movs	r3, #25
 80031ee:	2201      	movs	r2, #1
 80031f0:	497f      	ldr	r1, [pc, #508]	@ (80033f0 <HAL_I2C_Master_Receive+0x234>)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fefa 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	e23e      	b.n	8003680 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_I2C_Master_Receive+0x54>
 800320c:	2302      	movs	r3, #2
 800320e:	e237      	b.n	8003680 <HAL_I2C_Master_Receive+0x4c4>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d007      	beq.n	8003236 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003244:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2222      	movs	r2, #34	@ 0x22
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2210      	movs	r2, #16
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	893a      	ldrh	r2, [r7, #8]
 8003266:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a5f      	ldr	r2, [pc, #380]	@ (80033f4 <HAL_I2C_Master_Receive+0x238>)
 8003276:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003278:	8979      	ldrh	r1, [r7, #10]
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fcfe 	bl	8003c80 <I2C_MasterRequestRead>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e1f8      	b.n	8003680 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003292:	2b00      	cmp	r3, #0
 8003294:	d113      	bne.n	80032be <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e1cc      	b.n	8003658 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d11e      	bne.n	8003304 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032d6:	b672      	cpsid	i
}
 80032d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003300:	b662      	cpsie	i
}
 8003302:	e035      	b.n	8003370 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	2b02      	cmp	r3, #2
 800330a:	d11e      	bne.n	800334a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800331a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800331c:	b672      	cpsid	i
}
 800331e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003344:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003346:	b662      	cpsie	i
}
 8003348:	e012      	b.n	8003370 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003358:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003370:	e172      	b.n	8003658 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003376:	2b03      	cmp	r3, #3
 8003378:	f200 811f 	bhi.w	80035ba <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	2b01      	cmp	r3, #1
 8003382:	d123      	bne.n	80033cc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003386:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 ffd9 	bl	8004340 <I2C_WaitOnRXNEFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e173      	b.n	8003680 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033ca:	e145      	b.n	8003658 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d152      	bne.n	800347a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033da:	2200      	movs	r2, #0
 80033dc:	4906      	ldr	r1, [pc, #24]	@ (80033f8 <HAL_I2C_Master_Receive+0x23c>)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 fe04 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e148      	b.n	8003680 <HAL_I2C_Master_Receive+0x4c4>
 80033ee:	bf00      	nop
 80033f0:	00100002 	.word	0x00100002
 80033f4:	ffff0000 	.word	0xffff0000
 80033f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033fc:	b672      	cpsid	i
}
 80033fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003442:	b662      	cpsie	i
}
 8003444:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003478:	e0ee      	b.n	8003658 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003480:	2200      	movs	r2, #0
 8003482:	4981      	ldr	r1, [pc, #516]	@ (8003688 <HAL_I2C_Master_Receive+0x4cc>)
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fdb1 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0f5      	b.n	8003680 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034a4:	b672      	cpsid	i
}
 80034a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034da:	4b6c      	ldr	r3, [pc, #432]	@ (800368c <HAL_I2C_Master_Receive+0x4d0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	08db      	lsrs	r3, r3, #3
 80034e0:	4a6b      	ldr	r2, [pc, #428]	@ (8003690 <HAL_I2C_Master_Receive+0x4d4>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	0a1a      	lsrs	r2, r3, #8
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00da      	lsls	r2, r3, #3
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d118      	bne.n	8003532 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003522:	b662      	cpsie	i
}
 8003524:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0a6      	b.n	8003680 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d1d9      	bne.n	80034f4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003582:	b662      	cpsie	i
}
 8003584:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035b8:	e04e      	b.n	8003658 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 febe 	bl	8004340 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e058      	b.n	8003680 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b04      	cmp	r3, #4
 800360c:	d124      	bne.n	8003658 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003612:	2b03      	cmp	r3, #3
 8003614:	d107      	bne.n	8003626 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003624:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	f47f ae88 	bne.w	8003372 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	e000      	b.n	8003680 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800367e:	2302      	movs	r3, #2
  }
}
 8003680:	4618      	mov	r0, r3
 8003682:	3728      	adds	r7, #40	@ 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	00010004 	.word	0x00010004
 800368c:	20000044 	.word	0x20000044
 8003690:	14f8b589 	.word	0x14f8b589

08003694 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08c      	sub	sp, #48	@ 0x30
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	4608      	mov	r0, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	817b      	strh	r3, [r7, #10]
 80036a6:	460b      	mov	r3, r1
 80036a8:	813b      	strh	r3, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036b2:	f7ff f82f 	bl	8002714 <HAL_GetTick>
 80036b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	f040 8250 	bne.w	8003b66 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2319      	movs	r3, #25
 80036cc:	2201      	movs	r2, #1
 80036ce:	4982      	ldr	r1, [pc, #520]	@ (80038d8 <HAL_I2C_Mem_Read+0x244>)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fc8b 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80036dc:	2302      	movs	r3, #2
 80036de:	e243      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Mem_Read+0x5a>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e23c      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4d4>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d007      	beq.n	8003714 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2222      	movs	r2, #34	@ 0x22
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2240      	movs	r2, #64	@ 0x40
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800373e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003744:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a62      	ldr	r2, [pc, #392]	@ (80038dc <HAL_I2C_Mem_Read+0x248>)
 8003754:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003756:	88f8      	ldrh	r0, [r7, #6]
 8003758:	893a      	ldrh	r2, [r7, #8]
 800375a:	8979      	ldrh	r1, [r7, #10]
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4603      	mov	r3, r0
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fb58 	bl	8003e1c <I2C_RequestMemoryRead>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e1f8      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d113      	bne.n	80037a6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e1cc      	b.n	8003b40 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d11e      	bne.n	80037ec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037be:	b672      	cpsid	i
}
 80037c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037e8:	b662      	cpsie	i
}
 80037ea:	e035      	b.n	8003858 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d11e      	bne.n	8003832 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003802:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003804:	b672      	cpsid	i
}
 8003806:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800382c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800382e:	b662      	cpsie	i
}
 8003830:	e012      	b.n	8003858 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003840:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003858:	e172      	b.n	8003b40 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	2b03      	cmp	r3, #3
 8003860:	f200 811f 	bhi.w	8003aa2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003868:	2b01      	cmp	r3, #1
 800386a:	d123      	bne.n	80038b4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800386e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fd65 	bl	8004340 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e173      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038b2:	e145      	b.n	8003b40 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d152      	bne.n	8003962 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c2:	2200      	movs	r2, #0
 80038c4:	4906      	ldr	r1, [pc, #24]	@ (80038e0 <HAL_I2C_Mem_Read+0x24c>)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fb90 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e148      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4d4>
 80038d6:	bf00      	nop
 80038d8:	00100002 	.word	0x00100002
 80038dc:	ffff0000 	.word	0xffff0000
 80038e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038e4:	b672      	cpsid	i
}
 80038e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800392a:	b662      	cpsie	i
}
 800392c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003960:	e0ee      	b.n	8003b40 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	2200      	movs	r2, #0
 800396a:	4981      	ldr	r1, [pc, #516]	@ (8003b70 <HAL_I2C_Mem_Read+0x4dc>)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fb3d 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0f5      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800398a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800398c:	b672      	cpsid	i
}
 800398e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003b74 <HAL_I2C_Mem_Read+0x4e0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	08db      	lsrs	r3, r3, #3
 80039c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003b78 <HAL_I2C_Mem_Read+0x4e4>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0a1a      	lsrs	r2, r3, #8
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00da      	lsls	r2, r3, #3
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	3b01      	subs	r3, #1
 80039e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d118      	bne.n	8003a1a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a0a:	b662      	cpsie	i
}
 8003a0c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0a6      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d1d9      	bne.n	80039dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a6a:	b662      	cpsie	i
}
 8003a6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aa0:	e04e      	b.n	8003b40 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fc4a 	bl	8004340 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e058      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d124      	bne.n	8003b40 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d107      	bne.n	8003b0e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b0c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f47f ae88 	bne.w	800385a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3728      	adds	r7, #40	@ 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	00010004 	.word	0x00010004
 8003b74:	20000044 	.word	0x20000044
 8003b78:	14f8b589 	.word	0x14f8b589

08003b7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d006      	beq.n	8003ba6 <I2C_MasterRequestWrite+0x2a>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d003      	beq.n	8003ba6 <I2C_MasterRequestWrite+0x2a>
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ba4:	d108      	bne.n	8003bb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e00b      	b.n	8003bd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbc:	2b12      	cmp	r3, #18
 8003bbe:	d107      	bne.n	8003bd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fa05 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00d      	beq.n	8003c04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf6:	d103      	bne.n	8003c00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e035      	b.n	8003c70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c0c:	d108      	bne.n	8003c20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c0e:	897b      	ldrh	r3, [r7, #10]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c1c:	611a      	str	r2, [r3, #16]
 8003c1e:	e01b      	b.n	8003c58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c20:	897b      	ldrh	r3, [r7, #10]
 8003c22:	11db      	asrs	r3, r3, #7
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 0306 	and.w	r3, r3, #6
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f063 030f 	orn	r3, r3, #15
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	490e      	ldr	r1, [pc, #56]	@ (8003c78 <I2C_MasterRequestWrite+0xfc>)
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fa4e 	bl	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e010      	b.n	8003c70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c4e:	897b      	ldrh	r3, [r7, #10]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4907      	ldr	r1, [pc, #28]	@ (8003c7c <I2C_MasterRequestWrite+0x100>)
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fa3e 	bl	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	00010008 	.word	0x00010008
 8003c7c:	00010002 	.word	0x00010002

08003c80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d006      	beq.n	8003cba <I2C_MasterRequestRead+0x3a>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d003      	beq.n	8003cba <I2C_MasterRequestRead+0x3a>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cb8:	d108      	bne.n	8003ccc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e00b      	b.n	8003ce4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	2b11      	cmp	r3, #17
 8003cd2:	d107      	bne.n	8003ce4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f97b 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00d      	beq.n	8003d18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d0a:	d103      	bne.n	8003d14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e079      	b.n	8003e0c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d20:	d108      	bne.n	8003d34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d22:	897b      	ldrh	r3, [r7, #10]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	611a      	str	r2, [r3, #16]
 8003d32:	e05f      	b.n	8003df4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d34:	897b      	ldrh	r3, [r7, #10]
 8003d36:	11db      	asrs	r3, r3, #7
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 0306 	and.w	r3, r3, #6
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f063 030f 	orn	r3, r3, #15
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4930      	ldr	r1, [pc, #192]	@ (8003e14 <I2C_MasterRequestRead+0x194>)
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f9c4 	bl	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e054      	b.n	8003e0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d62:	897b      	ldrh	r3, [r7, #10]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4929      	ldr	r1, [pc, #164]	@ (8003e18 <I2C_MasterRequestRead+0x198>)
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f9b4 	bl	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e044      	b.n	8003e0c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f919 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dce:	d103      	bne.n	8003dd8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e017      	b.n	8003e0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ddc:	897b      	ldrh	r3, [r7, #10]
 8003dde:	11db      	asrs	r3, r3, #7
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0306 	and.w	r3, r3, #6
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f063 030e 	orn	r3, r3, #14
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4907      	ldr	r1, [pc, #28]	@ (8003e18 <I2C_MasterRequestRead+0x198>)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f970 	bl	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	00010008 	.word	0x00010008
 8003e18:	00010002 	.word	0x00010002

08003e1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	4608      	mov	r0, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	817b      	strh	r3, [r7, #10]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	813b      	strh	r3, [r7, #8]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f8c2 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00d      	beq.n	8003e8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e7c:	d103      	bne.n	8003e86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e0aa      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	4952      	ldr	r1, [pc, #328]	@ (8003fe8 <I2C_RequestMemoryRead+0x1cc>)
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f91d 	bl	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e097      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f9a8 	bl	8004220 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d107      	bne.n	8003eee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e076      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d105      	bne.n	8003f04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef8:	893b      	ldrh	r3, [r7, #8]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]
 8003f02:	e021      	b.n	8003f48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f04:	893b      	ldrh	r3, [r7, #8]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f14:	6a39      	ldr	r1, [r7, #32]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f982 	bl	8004220 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d107      	bne.n	8003f3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e050      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f3e:	893b      	ldrh	r3, [r7, #8]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4a:	6a39      	ldr	r1, [r7, #32]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f967 	bl	8004220 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d107      	bne.n	8003f70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e035      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f82b 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00d      	beq.n	8003fb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003faa:	d103      	bne.n	8003fb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e013      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fb8:	897b      	ldrh	r3, [r7, #10]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	6a3a      	ldr	r2, [r7, #32]
 8003fcc:	4906      	ldr	r1, [pc, #24]	@ (8003fe8 <I2C_RequestMemoryRead+0x1cc>)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f886 	bl	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00010002 	.word	0x00010002

08003fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffc:	e048      	b.n	8004090 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d044      	beq.n	8004090 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004006:	f7fe fb85 	bl	8002714 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d139      	bne.n	8004090 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	0c1b      	lsrs	r3, r3, #16
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d10d      	bne.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	43da      	mvns	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	e00c      	b.n	800405c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	43da      	mvns	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4013      	ands	r3, r2
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	429a      	cmp	r2, r3
 8004060:	d116      	bne.n	8004090 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e023      	b.n	80040d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10d      	bne.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	43da      	mvns	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	e00c      	b.n	80040d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	43da      	mvns	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d093      	beq.n	8003ffe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040ee:	e071      	b.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fe:	d123      	bne.n	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800410e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004118:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	f043 0204 	orr.w	r2, r3, #4
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e067      	b.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d041      	beq.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004150:	f7fe fae0 	bl	8002714 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d136      	bne.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10c      	bne.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e00b      	b.n	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	43da      	mvns	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e021      	b.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	0c1b      	lsrs	r3, r3, #16
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10c      	bne.n	80041f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	43da      	mvns	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	4013      	ands	r3, r2
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e00b      	b.n	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	43da      	mvns	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f af6d 	bne.w	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800422c:	e034      	b.n	8004298 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f8e3 	bl	80043fa <I2C_IsAcknowledgeFailed>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e034      	b.n	80042a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d028      	beq.n	8004298 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004246:	f7fe fa65 	bl	8002714 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	d302      	bcc.n	800425c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11d      	bne.n	8004298 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b80      	cmp	r3, #128	@ 0x80
 8004268:	d016      	beq.n	8004298 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	f043 0220 	orr.w	r2, r3, #32
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e007      	b.n	80042a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a2:	2b80      	cmp	r3, #128	@ 0x80
 80042a4:	d1c3      	bne.n	800422e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042bc:	e034      	b.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f89b 	bl	80043fa <I2C_IsAcknowledgeFailed>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e034      	b.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d028      	beq.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fe fa1d 	bl	8002714 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d11d      	bne.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d016      	beq.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e007      	b.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b04      	cmp	r3, #4
 8004334:	d1c3      	bne.n	80042be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800434c:	e049      	b.n	80043e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b10      	cmp	r3, #16
 800435a:	d119      	bne.n	8004390 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0210 	mvn.w	r2, #16
 8004364:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e030      	b.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004390:	f7fe f9c0 	bl	8002714 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	429a      	cmp	r2, r3
 800439e:	d302      	bcc.n	80043a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d11d      	bne.n	80043e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b40      	cmp	r3, #64	@ 0x40
 80043b2:	d016      	beq.n	80043e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e007      	b.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ec:	2b40      	cmp	r3, #64	@ 0x40
 80043ee:	d1ae      	bne.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004410:	d11b      	bne.n	800444a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800441a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	f043 0204 	orr.w	r2, r3, #4
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
	...

08004458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e272      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8087 	beq.w	8004586 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004478:	4b92      	ldr	r3, [pc, #584]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	2b04      	cmp	r3, #4
 8004482:	d00c      	beq.n	800449e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004484:	4b8f      	ldr	r3, [pc, #572]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b08      	cmp	r3, #8
 800448e:	d112      	bne.n	80044b6 <HAL_RCC_OscConfig+0x5e>
 8004490:	4b8c      	ldr	r3, [pc, #560]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800449c:	d10b      	bne.n	80044b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449e:	4b89      	ldr	r3, [pc, #548]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d06c      	beq.n	8004584 <HAL_RCC_OscConfig+0x12c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d168      	bne.n	8004584 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e24c      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x76>
 80044c0:	4b80      	ldr	r3, [pc, #512]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a7f      	ldr	r2, [pc, #508]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	e02e      	b.n	800452c <HAL_RCC_OscConfig+0xd4>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x98>
 80044d6:	4b7b      	ldr	r3, [pc, #492]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a7a      	ldr	r2, [pc, #488]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b78      	ldr	r3, [pc, #480]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a77      	ldr	r2, [pc, #476]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e01d      	b.n	800452c <HAL_RCC_OscConfig+0xd4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0xbc>
 80044fa:	4b72      	ldr	r3, [pc, #456]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a71      	ldr	r2, [pc, #452]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4b6f      	ldr	r3, [pc, #444]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a6e      	ldr	r2, [pc, #440]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0xd4>
 8004514:	4b6b      	ldr	r3, [pc, #428]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a6a      	ldr	r2, [pc, #424]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 800451a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	4b68      	ldr	r3, [pc, #416]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a67      	ldr	r2, [pc, #412]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800452a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fe f8ee 	bl	8002714 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800453c:	f7fe f8ea 	bl	8002714 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	@ 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e200      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4b5d      	ldr	r3, [pc, #372]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0xe4>
 800455a:	e014      	b.n	8004586 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fe f8da 	bl	8002714 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004564:	f7fe f8d6 	bl	8002714 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	@ 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e1ec      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004576:	4b53      	ldr	r3, [pc, #332]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x10c>
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d063      	beq.n	800465a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004592:	4b4c      	ldr	r3, [pc, #304]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800459e:	4b49      	ldr	r3, [pc, #292]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d11c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x18c>
 80045aa:	4b46      	ldr	r3, [pc, #280]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d116      	bne.n	80045e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b6:	4b43      	ldr	r3, [pc, #268]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_RCC_OscConfig+0x176>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e1c0      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	4b3d      	ldr	r3, [pc, #244]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4939      	ldr	r1, [pc, #228]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e2:	e03a      	b.n	800465a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d020      	beq.n	800462e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ec:	4b36      	ldr	r3, [pc, #216]	@ (80046c8 <HAL_RCC_OscConfig+0x270>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f2:	f7fe f88f 	bl	8002714 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fa:	f7fe f88b 	bl	8002714 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e1a1      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	4b2d      	ldr	r3, [pc, #180]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b2a      	ldr	r3, [pc, #168]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4927      	ldr	r1, [pc, #156]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	600b      	str	r3, [r1, #0]
 800462c:	e015      	b.n	800465a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462e:	4b26      	ldr	r3, [pc, #152]	@ (80046c8 <HAL_RCC_OscConfig+0x270>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fe f86e 	bl	8002714 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463c:	f7fe f86a 	bl	8002714 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e180      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	4b1d      	ldr	r3, [pc, #116]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d03a      	beq.n	80046dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d019      	beq.n	80046a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466e:	4b17      	ldr	r3, [pc, #92]	@ (80046cc <HAL_RCC_OscConfig+0x274>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004674:	f7fe f84e 	bl	8002714 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467c:	f7fe f84a 	bl	8002714 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e160      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800469a:	2001      	movs	r0, #1
 800469c:	f000 face 	bl	8004c3c <RCC_Delay>
 80046a0:	e01c      	b.n	80046dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <HAL_RCC_OscConfig+0x274>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a8:	f7fe f834 	bl	8002714 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ae:	e00f      	b.n	80046d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fe f830 	bl	8002714 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d908      	bls.n	80046d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e146      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	42420000 	.word	0x42420000
 80046cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d0:	4b92      	ldr	r3, [pc, #584]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e9      	bne.n	80046b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80a6 	beq.w	8004836 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ee:	4b8b      	ldr	r3, [pc, #556]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10d      	bne.n	8004716 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	4b88      	ldr	r3, [pc, #544]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	4a87      	ldr	r2, [pc, #540]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004704:	61d3      	str	r3, [r2, #28]
 8004706:	4b85      	ldr	r3, [pc, #532]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004712:	2301      	movs	r3, #1
 8004714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004716:	4b82      	ldr	r3, [pc, #520]	@ (8004920 <HAL_RCC_OscConfig+0x4c8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d118      	bne.n	8004754 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004722:	4b7f      	ldr	r3, [pc, #508]	@ (8004920 <HAL_RCC_OscConfig+0x4c8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a7e      	ldr	r2, [pc, #504]	@ (8004920 <HAL_RCC_OscConfig+0x4c8>)
 8004728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800472c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472e:	f7fd fff1 	bl	8002714 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004736:	f7fd ffed 	bl	8002714 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b64      	cmp	r3, #100	@ 0x64
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e103      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	4b75      	ldr	r3, [pc, #468]	@ (8004920 <HAL_RCC_OscConfig+0x4c8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0x312>
 800475c:	4b6f      	ldr	r3, [pc, #444]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	4a6e      	ldr	r2, [pc, #440]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	6213      	str	r3, [r2, #32]
 8004768:	e02d      	b.n	80047c6 <HAL_RCC_OscConfig+0x36e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0x334>
 8004772:	4b6a      	ldr	r3, [pc, #424]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4a69      	ldr	r2, [pc, #420]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	6213      	str	r3, [r2, #32]
 800477e:	4b67      	ldr	r3, [pc, #412]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	4a66      	ldr	r2, [pc, #408]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004784:	f023 0304 	bic.w	r3, r3, #4
 8004788:	6213      	str	r3, [r2, #32]
 800478a:	e01c      	b.n	80047c6 <HAL_RCC_OscConfig+0x36e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b05      	cmp	r3, #5
 8004792:	d10c      	bne.n	80047ae <HAL_RCC_OscConfig+0x356>
 8004794:	4b61      	ldr	r3, [pc, #388]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4a60      	ldr	r2, [pc, #384]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800479a:	f043 0304 	orr.w	r3, r3, #4
 800479e:	6213      	str	r3, [r2, #32]
 80047a0:	4b5e      	ldr	r3, [pc, #376]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4a5d      	ldr	r2, [pc, #372]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	6213      	str	r3, [r2, #32]
 80047ac:	e00b      	b.n	80047c6 <HAL_RCC_OscConfig+0x36e>
 80047ae:	4b5b      	ldr	r3, [pc, #364]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4a5a      	ldr	r2, [pc, #360]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	6213      	str	r3, [r2, #32]
 80047ba:	4b58      	ldr	r3, [pc, #352]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	4a57      	ldr	r2, [pc, #348]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	f023 0304 	bic.w	r3, r3, #4
 80047c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d015      	beq.n	80047fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ce:	f7fd ffa1 	bl	8002714 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d4:	e00a      	b.n	80047ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d6:	f7fd ff9d 	bl	8002714 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e0b1      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ec:	4b4b      	ldr	r3, [pc, #300]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ee      	beq.n	80047d6 <HAL_RCC_OscConfig+0x37e>
 80047f8:	e014      	b.n	8004824 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fa:	f7fd ff8b 	bl	8002714 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004800:	e00a      	b.n	8004818 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004802:	f7fd ff87 	bl	8002714 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004810:	4293      	cmp	r3, r2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e09b      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004818:	4b40      	ldr	r3, [pc, #256]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1ee      	bne.n	8004802 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d105      	bne.n	8004836 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482a:	4b3c      	ldr	r3, [pc, #240]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	4a3b      	ldr	r2, [pc, #236]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004834:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8087 	beq.w	800494e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004840:	4b36      	ldr	r3, [pc, #216]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b08      	cmp	r3, #8
 800484a:	d061      	beq.n	8004910 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d146      	bne.n	80048e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004854:	4b33      	ldr	r3, [pc, #204]	@ (8004924 <HAL_RCC_OscConfig+0x4cc>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485a:	f7fd ff5b 	bl	8002714 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004862:	f7fd ff57 	bl	8002714 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e06d      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004874:	4b29      	ldr	r3, [pc, #164]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f0      	bne.n	8004862 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004888:	d108      	bne.n	800489c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800488a:	4b24      	ldr	r3, [pc, #144]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	4921      	ldr	r1, [pc, #132]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800489c:	4b1f      	ldr	r3, [pc, #124]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a19      	ldr	r1, [r3, #32]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	430b      	orrs	r3, r1
 80048ae:	491b      	ldr	r1, [pc, #108]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004924 <HAL_RCC_OscConfig+0x4cc>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ba:	f7fd ff2b 	bl	8002714 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c2:	f7fd ff27 	bl	8002714 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e03d      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d4:	4b11      	ldr	r3, [pc, #68]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x46a>
 80048e0:	e035      	b.n	800494e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e2:	4b10      	ldr	r3, [pc, #64]	@ (8004924 <HAL_RCC_OscConfig+0x4cc>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fd ff14 	bl	8002714 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fd ff10 	bl	8002714 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e026      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x498>
 800490e:	e01e      	b.n	800494e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d107      	bne.n	8004928 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e019      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 800491c:	40021000 	.word	0x40021000
 8004920:	40007000 	.word	0x40007000
 8004924:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004928:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <HAL_RCC_OscConfig+0x500>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	429a      	cmp	r2, r3
 800493a:	d106      	bne.n	800494a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d001      	beq.n	800494e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40021000 	.word	0x40021000

0800495c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0d0      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004970:	4b6a      	ldr	r3, [pc, #424]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d910      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b67      	ldr	r3, [pc, #412]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 0207 	bic.w	r2, r3, #7
 8004986:	4965      	ldr	r1, [pc, #404]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b63      	ldr	r3, [pc, #396]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0b8      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b8:	4b59      	ldr	r3, [pc, #356]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	4a58      	ldr	r2, [pc, #352]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d0:	4b53      	ldr	r3, [pc, #332]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	4a52      	ldr	r2, [pc, #328]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049dc:	4b50      	ldr	r3, [pc, #320]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	494d      	ldr	r1, [pc, #308]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d040      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d107      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b47      	ldr	r3, [pc, #284]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d115      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e07f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1a:	4b41      	ldr	r3, [pc, #260]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e073      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e06b      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3a:	4b39      	ldr	r3, [pc, #228]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f023 0203 	bic.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4936      	ldr	r1, [pc, #216]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a4c:	f7fd fe62 	bl	8002714 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a54:	f7fd fe5e 	bl	8002714 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e053      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 020c 	and.w	r2, r3, #12
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1eb      	bne.n	8004a54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b27      	ldr	r3, [pc, #156]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d210      	bcs.n	8004aac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 0207 	bic.w	r2, r3, #7
 8004a92:	4922      	ldr	r1, [pc, #136]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b20      	ldr	r3, [pc, #128]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e032      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab8:	4b19      	ldr	r3, [pc, #100]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4916      	ldr	r1, [pc, #88]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ad6:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	490e      	ldr	r1, [pc, #56]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aea:	f000 f821 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	490a      	ldr	r1, [pc, #40]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c8>)
 8004afc:	5ccb      	ldrb	r3, [r1, r3]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	4a09      	ldr	r2, [pc, #36]	@ (8004b28 <HAL_RCC_ClockConfig+0x1cc>)
 8004b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b06:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <HAL_RCC_ClockConfig+0x1d0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fd fdc0 	bl	8002690 <HAL_InitTick>

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40022000 	.word	0x40022000
 8004b20:	40021000 	.word	0x40021000
 8004b24:	08006f94 	.word	0x08006f94
 8004b28:	20000044 	.word	0x20000044
 8004b2c:	20000048 	.word	0x20000048

08004b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	2300      	movs	r3, #0
 8004b44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d002      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x30>
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_GetSysClockFreq+0x36>
 8004b5e:	e027      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b60:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b62:	613b      	str	r3, [r7, #16]
      break;
 8004b64:	e027      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	0c9b      	lsrs	r3, r3, #18
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	4a17      	ldr	r2, [pc, #92]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b70:	5cd3      	ldrb	r3, [r2, r3]
 8004b72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d010      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b7e:	4b11      	ldr	r3, [pc, #68]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	0c5b      	lsrs	r3, r3, #17
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	4a11      	ldr	r2, [pc, #68]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b8a:	5cd3      	ldrb	r3, [r2, r3]
 8004b8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b92:	fb03 f202 	mul.w	r2, r3, r2
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e004      	b.n	8004baa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	613b      	str	r3, [r7, #16]
      break;
 8004bae:	e002      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bb2:	613b      	str	r3, [r7, #16]
      break;
 8004bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb6:	693b      	ldr	r3, [r7, #16]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	007a1200 	.word	0x007a1200
 8004bcc:	08006fac 	.word	0x08006fac
 8004bd0:	08006fbc 	.word	0x08006fbc
 8004bd4:	003d0900 	.word	0x003d0900

08004bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bdc:	4b02      	ldr	r3, [pc, #8]	@ (8004be8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr
 8004be8:	20000044 	.word	0x20000044

08004bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf0:	f7ff fff2 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	4903      	ldr	r1, [pc, #12]	@ (8004c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c02:	5ccb      	ldrb	r3, [r1, r3]
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	08006fa4 	.word	0x08006fa4

08004c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c18:	f7ff ffde 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b05      	ldr	r3, [pc, #20]	@ (8004c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	0adb      	lsrs	r3, r3, #11
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4903      	ldr	r1, [pc, #12]	@ (8004c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	08006fa4 	.word	0x08006fa4

08004c3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c44:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <RCC_Delay+0x34>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a0a      	ldr	r2, [pc, #40]	@ (8004c74 <RCC_Delay+0x38>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	0a5b      	lsrs	r3, r3, #9
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c58:	bf00      	nop
  }
  while (Delay --);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1e5a      	subs	r2, r3, #1
 8004c5e:	60fa      	str	r2, [r7, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f9      	bne.n	8004c58 <RCC_Delay+0x1c>
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr
 8004c70:	20000044 	.word	0x20000044
 8004c74:	10624dd3 	.word	0x10624dd3

08004c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e076      	b.n	8004d78 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c9a:	d009      	beq.n	8004cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	61da      	str	r2, [r3, #28]
 8004ca2:	e005      	b.n	8004cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fd fb42 	bl	8002354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ce6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	0c1a      	lsrs	r2, r3, #16
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f002 0204 	and.w	r2, r2, #4
 8004d56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69da      	ldr	r2, [r3, #28]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d90:	f7fd fcc0 	bl	8002714 <HAL_GetTick>
 8004d94:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d001      	beq.n	8004daa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004da6:	2302      	movs	r3, #2
 8004da8:	e12a      	b.n	8005000 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <HAL_SPI_Transmit+0x36>
 8004db0:	88fb      	ldrh	r3, [r7, #6]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e122      	b.n	8005000 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_SPI_Transmit+0x48>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e11b      	b.n	8005000 <HAL_SPI_Transmit+0x280>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	88fa      	ldrh	r2, [r7, #6]
 8004dee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e16:	d10f      	bne.n	8004e38 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e42:	2b40      	cmp	r3, #64	@ 0x40
 8004e44:	d007      	beq.n	8004e56 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e5e:	d152      	bne.n	8004f06 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_SPI_Transmit+0xee>
 8004e68:	8b7b      	ldrh	r3, [r7, #26]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d145      	bne.n	8004efa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e72:	881a      	ldrh	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7e:	1c9a      	adds	r2, r3, #2
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e92:	e032      	b.n	8004efa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d112      	bne.n	8004ec8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	881a      	ldrh	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	1c9a      	adds	r2, r3, #2
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ec6:	e018      	b.n	8004efa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec8:	f7fd fc24 	bl	8002714 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d803      	bhi.n	8004ee0 <HAL_SPI_Transmit+0x160>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d102      	bne.n	8004ee6 <HAL_SPI_Transmit+0x166>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e082      	b.n	8005000 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1c7      	bne.n	8004e94 <HAL_SPI_Transmit+0x114>
 8004f04:	e053      	b.n	8004fae <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_SPI_Transmit+0x194>
 8004f0e:	8b7b      	ldrh	r3, [r7, #26]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d147      	bne.n	8004fa4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	7812      	ldrb	r2, [r2, #0]
 8004f20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f3a:	e033      	b.n	8004fa4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d113      	bne.n	8004f72 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f70:	e018      	b.n	8004fa4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f72:	f7fd fbcf 	bl	8002714 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d803      	bhi.n	8004f8a <HAL_SPI_Transmit+0x20a>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d102      	bne.n	8004f90 <HAL_SPI_Transmit+0x210>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e02d      	b.n	8005000 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1c6      	bne.n	8004f3c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fa66 	bl	8005484 <SPI_EndRxTxTransaction>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
  }
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	@ 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005016:	2301      	movs	r3, #1
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800501a:	f7fd fb7b 	bl	8002714 <HAL_GetTick>
 800501e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005026:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005032:	7ffb      	ldrb	r3, [r7, #31]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d00c      	beq.n	8005052 <HAL_SPI_TransmitReceive+0x4a>
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800503e:	d106      	bne.n	800504e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <HAL_SPI_TransmitReceive+0x46>
 8005048:	7ffb      	ldrb	r3, [r7, #31]
 800504a:	2b04      	cmp	r3, #4
 800504c:	d001      	beq.n	8005052 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800504e:	2302      	movs	r3, #2
 8005050:	e17f      	b.n	8005352 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x5c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x5c>
 800505e:	887b      	ldrh	r3, [r7, #2]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e174      	b.n	8005352 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_SPI_TransmitReceive+0x6e>
 8005072:	2302      	movs	r3, #2
 8005074:	e16d      	b.n	8005352 <HAL_SPI_TransmitReceive+0x34a>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b04      	cmp	r3, #4
 8005088:	d003      	beq.n	8005092 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2205      	movs	r2, #5
 800508e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	887a      	ldrh	r2, [r7, #2]
 80050a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	887a      	ldrh	r2, [r7, #2]
 80050a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	887a      	ldrh	r2, [r7, #2]
 80050b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	887a      	ldrh	r2, [r7, #2]
 80050ba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d2:	2b40      	cmp	r3, #64	@ 0x40
 80050d4:	d007      	beq.n	80050e6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ee:	d17e      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_SPI_TransmitReceive+0xf6>
 80050f8:	8afb      	ldrh	r3, [r7, #22]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d16c      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005102:	881a      	ldrh	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	1c9a      	adds	r2, r3, #2
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005122:	e059      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b02      	cmp	r3, #2
 8005130:	d11b      	bne.n	800516a <HAL_SPI_TransmitReceive+0x162>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d016      	beq.n	800516a <HAL_SPI_TransmitReceive+0x162>
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	2b01      	cmp	r3, #1
 8005140:	d113      	bne.n	800516a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005146:	881a      	ldrh	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b01      	cmp	r3, #1
 8005176:	d119      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x1a4>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d014      	beq.n	80051ac <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	b292      	uxth	r2, r2
 800518e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005194:	1c9a      	adds	r2, r3, #2
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051a8:	2301      	movs	r3, #1
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051ac:	f7fd fab2 	bl	8002714 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d80d      	bhi.n	80051d8 <HAL_SPI_TransmitReceive+0x1d0>
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c2:	d009      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e0bc      	b.n	8005352 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1a0      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x11c>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d19b      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x11c>
 80051ec:	e082      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_SPI_TransmitReceive+0x1f4>
 80051f6:	8afb      	ldrh	r3, [r7, #22]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d171      	bne.n	80052e0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	7812      	ldrb	r2, [r2, #0]
 8005208:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005222:	e05d      	b.n	80052e0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b02      	cmp	r3, #2
 8005230:	d11c      	bne.n	800526c <HAL_SPI_TransmitReceive+0x264>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d017      	beq.n	800526c <HAL_SPI_TransmitReceive+0x264>
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	2b01      	cmp	r3, #1
 8005240:	d114      	bne.n	800526c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	330c      	adds	r3, #12
 800524c:	7812      	ldrb	r2, [r2, #0]
 800524e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b01      	cmp	r3, #1
 8005278:	d119      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x2a6>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d014      	beq.n	80052ae <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052aa:	2301      	movs	r3, #1
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052ae:	f7fd fa31 	bl	8002714 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d803      	bhi.n	80052c6 <HAL_SPI_TransmitReceive+0x2be>
 80052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c4:	d102      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x2c4>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e038      	b.n	8005352 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d19c      	bne.n	8005224 <HAL_SPI_TransmitReceive+0x21c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d197      	bne.n	8005224 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052f4:	6a3a      	ldr	r2, [r7, #32]
 80052f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f8c3 	bl	8005484 <SPI_EndRxTxTransaction>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e01d      	b.n	8005352 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005350:	2300      	movs	r3, #0
  }
}
 8005352:	4618      	mov	r0, r3
 8005354:	3728      	adds	r7, #40	@ 0x28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005368:	b2db      	uxtb	r3, r3
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	4613      	mov	r3, r2
 8005382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005384:	f7fd f9c6 	bl	8002714 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	4413      	add	r3, r2
 8005392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005394:	f7fd f9be 	bl	8002714 <HAL_GetTick>
 8005398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800539a:	4b39      	ldr	r3, [pc, #228]	@ (8005480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	015b      	lsls	r3, r3, #5
 80053a0:	0d1b      	lsrs	r3, r3, #20
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	fb02 f303 	mul.w	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053aa:	e054      	b.n	8005456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d050      	beq.n	8005456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053b4:	f7fd f9ae 	bl	8002714 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d902      	bls.n	80053ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d13d      	bne.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053e2:	d111      	bne.n	8005408 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ec:	d004      	beq.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f6:	d107      	bne.n	8005408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005410:	d10f      	bne.n	8005432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e017      	b.n	8005476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3b01      	subs	r3, #1
 8005454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4013      	ands	r3, r2
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	bf0c      	ite	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	2300      	movne	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	429a      	cmp	r2, r3
 8005472:	d19b      	bne.n	80053ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000044 	.word	0x20000044

08005484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2201      	movs	r2, #1
 8005498:	2102      	movs	r1, #2
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f7ff ff6a 	bl	8005374 <SPI_WaitFlagStateUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054aa:	f043 0220 	orr.w	r2, r3, #32
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e013      	b.n	80054de <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	2180      	movs	r1, #128	@ 0x80
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f7ff ff57 	bl	8005374 <SPI_WaitFlagStateUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d0:	f043 0220 	orr.w	r2, r3, #32
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e000      	b.n	80054de <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e042      	b.n	800557e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fd f837 	bl	8002580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2224      	movs	r2, #36	@ 0x24
 8005516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005528:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fa08 	bl	8005940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800553e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800554e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800555e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b08a      	sub	sp, #40	@ 0x28
 800558a:	af02      	add	r7, sp, #8
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d175      	bne.n	8005692 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_UART_Transmit+0x2c>
 80055ac:	88fb      	ldrh	r3, [r7, #6]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e06e      	b.n	8005694 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2221      	movs	r2, #33	@ 0x21
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055c4:	f7fd f8a6 	bl	8002714 <HAL_GetTick>
 80055c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055de:	d108      	bne.n	80055f2 <HAL_UART_Transmit+0x6c>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	e003      	b.n	80055fa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055fa:	e02e      	b.n	800565a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2200      	movs	r2, #0
 8005604:	2180      	movs	r1, #128	@ 0x80
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f8df 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e03a      	b.n	8005694 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10b      	bne.n	800563c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005632:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	3302      	adds	r3, #2
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	e007      	b.n	800564c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	3301      	adds	r3, #1
 800564a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1cb      	bne.n	80055fc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2200      	movs	r2, #0
 800566c:	2140      	movs	r1, #64	@ 0x40
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f8ab 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e006      	b.n	8005694 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	e000      	b.n	8005694 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005692:	2302      	movs	r3, #2
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	@ 0x28
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	4613      	mov	r3, r2
 80056aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	f040 8081 	bne.w	80057c0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_UART_Receive+0x2e>
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e079      	b.n	80057c2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2222      	movs	r2, #34	@ 0x22
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056e2:	f7fd f817 	bl	8002714 <HAL_GetTick>
 80056e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	88fa      	ldrh	r2, [r7, #6]
 80056ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056fc:	d108      	bne.n	8005710 <HAL_UART_Receive+0x74>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d104      	bne.n	8005710 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	e003      	b.n	8005718 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005718:	e047      	b.n	80057aa <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	2120      	movs	r1, #32
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f850 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e042      	b.n	80057c2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10c      	bne.n	800575c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	b29b      	uxth	r3, r3
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	b29a      	uxth	r2, r3
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	3302      	adds	r3, #2
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	e01f      	b.n	800579c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005764:	d007      	beq.n	8005776 <HAL_UART_Receive+0xda>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <HAL_UART_Receive+0xe8>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	e008      	b.n	8005796 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005790:	b2da      	uxtb	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3301      	adds	r3, #1
 800579a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1b2      	bne.n	800571a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e000      	b.n	80057c2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
  }
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b086      	sub	sp, #24
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057da:	e03b      	b.n	8005854 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d037      	beq.n	8005854 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e4:	f7fc ff96 	bl	8002714 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	6a3a      	ldr	r2, [r7, #32]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d302      	bcc.n	80057fa <UART_WaitOnFlagUntilTimeout+0x30>
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e03a      	b.n	8005874 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d023      	beq.n	8005854 <UART_WaitOnFlagUntilTimeout+0x8a>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b80      	cmp	r3, #128	@ 0x80
 8005810:	d020      	beq.n	8005854 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b40      	cmp	r3, #64	@ 0x40
 8005816:	d01d      	beq.n	8005854 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b08      	cmp	r3, #8
 8005824:	d116      	bne.n	8005854 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f81d 	bl	800587c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2208      	movs	r2, #8
 8005846:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e00f      	b.n	8005874 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4013      	ands	r3, r2
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	bf0c      	ite	eq
 8005864:	2301      	moveq	r3, #1
 8005866:	2300      	movne	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	429a      	cmp	r2, r3
 8005870:	d0b4      	beq.n	80057dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b095      	sub	sp, #84	@ 0x54
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800589a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80058a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e5      	bne.n	8005884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3314      	adds	r3, #20
 80058be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d119      	bne.n	8005928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	330c      	adds	r3, #12
 80058fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	60bb      	str	r3, [r7, #8]
   return(result);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f023 0310 	bic.w	r3, r3, #16
 800590a:	647b      	str	r3, [r7, #68]	@ 0x44
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005914:	61ba      	str	r2, [r7, #24]
 8005916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6979      	ldr	r1, [r7, #20]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	613b      	str	r3, [r7, #16]
   return(result);
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e5      	bne.n	80058f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005936:	bf00      	nop
 8005938:	3754      	adds	r7, #84	@ 0x54
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800597a:	f023 030c 	bic.w	r3, r3, #12
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	430b      	orrs	r3, r1
 8005986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a54 <UART_SetConfig+0x114>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d103      	bne.n	80059b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059a8:	f7ff f934 	bl	8004c14 <HAL_RCC_GetPCLK2Freq>
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	e002      	b.n	80059b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7ff f91c 	bl	8004bec <HAL_RCC_GetPCLK1Freq>
 80059b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	009a      	lsls	r2, r3, #2
 80059c0:	441a      	add	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	4a22      	ldr	r2, [pc, #136]	@ (8005a58 <UART_SetConfig+0x118>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	0119      	lsls	r1, r3, #4
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009a      	lsls	r2, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005a58 <UART_SetConfig+0x118>)
 80059ee:	fba3 0302 	umull	r0, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2064      	movs	r0, #100	@ 0x64
 80059f6:	fb00 f303 	mul.w	r3, r0, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	3332      	adds	r3, #50	@ 0x32
 8005a00:	4a15      	ldr	r2, [pc, #84]	@ (8005a58 <UART_SetConfig+0x118>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a0c:	4419      	add	r1, r3
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009a      	lsls	r2, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a24:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <UART_SetConfig+0x118>)
 8005a26:	fba3 0302 	umull	r0, r3, r3, r2
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	2064      	movs	r0, #100	@ 0x64
 8005a2e:	fb00 f303 	mul.w	r3, r0, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	3332      	adds	r3, #50	@ 0x32
 8005a38:	4a07      	ldr	r2, [pc, #28]	@ (8005a58 <UART_SetConfig+0x118>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f003 020f 	and.w	r2, r3, #15
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	440a      	add	r2, r1
 8005a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a4c:	bf00      	nop
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40013800 	.word	0x40013800
 8005a58:	51eb851f 	.word	0x51eb851f

08005a5c <siprintf>:
 8005a5c:	b40e      	push	{r1, r2, r3}
 8005a5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a62:	b500      	push	{lr}
 8005a64:	b09c      	sub	sp, #112	@ 0x70
 8005a66:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a68:	9002      	str	r0, [sp, #8]
 8005a6a:	9006      	str	r0, [sp, #24]
 8005a6c:	9107      	str	r1, [sp, #28]
 8005a6e:	9104      	str	r1, [sp, #16]
 8005a70:	4808      	ldr	r0, [pc, #32]	@ (8005a94 <siprintf+0x38>)
 8005a72:	4909      	ldr	r1, [pc, #36]	@ (8005a98 <siprintf+0x3c>)
 8005a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a78:	9105      	str	r1, [sp, #20]
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	a902      	add	r1, sp, #8
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	f000 f9f0 	bl	8005e64 <_svfiprintf_r>
 8005a84:	2200      	movs	r2, #0
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	b01c      	add	sp, #112	@ 0x70
 8005a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a90:	b003      	add	sp, #12
 8005a92:	4770      	bx	lr
 8005a94:	20000050 	.word	0x20000050
 8005a98:	ffff0208 	.word	0xffff0208

08005a9c <siscanf>:
 8005a9c:	b40e      	push	{r1, r2, r3}
 8005a9e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005aa2:	b530      	push	{r4, r5, lr}
 8005aa4:	b09c      	sub	sp, #112	@ 0x70
 8005aa6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005aa8:	f854 5b04 	ldr.w	r5, [r4], #4
 8005aac:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005ab0:	9002      	str	r0, [sp, #8]
 8005ab2:	9006      	str	r0, [sp, #24]
 8005ab4:	f7fa fb4c 	bl	8000150 <strlen>
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <siscanf+0x4c>)
 8005aba:	9003      	str	r0, [sp, #12]
 8005abc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005abe:	2300      	movs	r3, #0
 8005ac0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ac2:	9314      	str	r3, [sp, #80]	@ 0x50
 8005ac4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ac8:	9007      	str	r0, [sp, #28]
 8005aca:	4808      	ldr	r0, [pc, #32]	@ (8005aec <siscanf+0x50>)
 8005acc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4623      	mov	r3, r4
 8005ad4:	a902      	add	r1, sp, #8
 8005ad6:	6800      	ldr	r0, [r0, #0]
 8005ad8:	9401      	str	r4, [sp, #4]
 8005ada:	f000 fb17 	bl	800610c <__ssvfiscanf_r>
 8005ade:	b01c      	add	sp, #112	@ 0x70
 8005ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ae4:	b003      	add	sp, #12
 8005ae6:	4770      	bx	lr
 8005ae8:	08005af1 	.word	0x08005af1
 8005aec:	20000050 	.word	0x20000050

08005af0 <__seofread>:
 8005af0:	2000      	movs	r0, #0
 8005af2:	4770      	bx	lr

08005af4 <memset>:
 8005af4:	4603      	mov	r3, r0
 8005af6:	4402      	add	r2, r0
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d100      	bne.n	8005afe <memset+0xa>
 8005afc:	4770      	bx	lr
 8005afe:	f803 1b01 	strb.w	r1, [r3], #1
 8005b02:	e7f9      	b.n	8005af8 <memset+0x4>

08005b04 <strchr>:
 8005b04:	4603      	mov	r3, r0
 8005b06:	b2c9      	uxtb	r1, r1
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b0e:	b112      	cbz	r2, 8005b16 <strchr+0x12>
 8005b10:	428a      	cmp	r2, r1
 8005b12:	d1f9      	bne.n	8005b08 <strchr+0x4>
 8005b14:	4770      	bx	lr
 8005b16:	2900      	cmp	r1, #0
 8005b18:	bf18      	it	ne
 8005b1a:	2000      	movne	r0, #0
 8005b1c:	4770      	bx	lr

08005b1e <strstr>:
 8005b1e:	780a      	ldrb	r2, [r1, #0]
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	b96a      	cbnz	r2, 8005b40 <strstr+0x22>
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d109      	bne.n	8005b3e <strstr+0x20>
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f6      	beq.n	8005b24 <strstr+0x6>
 8005b36:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005b3a:	429e      	cmp	r6, r3
 8005b3c:	d0f7      	beq.n	8005b2e <strstr+0x10>
 8005b3e:	3001      	adds	r0, #1
 8005b40:	7803      	ldrb	r3, [r0, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1ef      	bne.n	8005b26 <strstr+0x8>
 8005b46:	4618      	mov	r0, r3
 8005b48:	e7ec      	b.n	8005b24 <strstr+0x6>
	...

08005b4c <__errno>:
 8005b4c:	4b01      	ldr	r3, [pc, #4]	@ (8005b54 <__errno+0x8>)
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000050 	.word	0x20000050

08005b58 <__libc_init_array>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	2600      	movs	r6, #0
 8005b5c:	4d0c      	ldr	r5, [pc, #48]	@ (8005b90 <__libc_init_array+0x38>)
 8005b5e:	4c0d      	ldr	r4, [pc, #52]	@ (8005b94 <__libc_init_array+0x3c>)
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	42a6      	cmp	r6, r4
 8005b66:	d109      	bne.n	8005b7c <__libc_init_array+0x24>
 8005b68:	f001 f8ec 	bl	8006d44 <_init>
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	4d0a      	ldr	r5, [pc, #40]	@ (8005b98 <__libc_init_array+0x40>)
 8005b70:	4c0a      	ldr	r4, [pc, #40]	@ (8005b9c <__libc_init_array+0x44>)
 8005b72:	1b64      	subs	r4, r4, r5
 8005b74:	10a4      	asrs	r4, r4, #2
 8005b76:	42a6      	cmp	r6, r4
 8005b78:	d105      	bne.n	8005b86 <__libc_init_array+0x2e>
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b80:	4798      	blx	r3
 8005b82:	3601      	adds	r6, #1
 8005b84:	e7ee      	b.n	8005b64 <__libc_init_array+0xc>
 8005b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8a:	4798      	blx	r3
 8005b8c:	3601      	adds	r6, #1
 8005b8e:	e7f2      	b.n	8005b76 <__libc_init_array+0x1e>
 8005b90:	08007118 	.word	0x08007118
 8005b94:	08007118 	.word	0x08007118
 8005b98:	08007118 	.word	0x08007118
 8005b9c:	0800711c 	.word	0x0800711c

08005ba0 <__retarget_lock_acquire_recursive>:
 8005ba0:	4770      	bx	lr

08005ba2 <__retarget_lock_release_recursive>:
 8005ba2:	4770      	bx	lr

08005ba4 <memcpy>:
 8005ba4:	440a      	add	r2, r1
 8005ba6:	4291      	cmp	r1, r2
 8005ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bac:	d100      	bne.n	8005bb0 <memcpy+0xc>
 8005bae:	4770      	bx	lr
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bbc:	d1f9      	bne.n	8005bb2 <memcpy+0xe>
 8005bbe:	bd10      	pop	{r4, pc}

08005bc0 <_free_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	d040      	beq.n	8005c4a <_free_r+0x8a>
 8005bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bcc:	1f0c      	subs	r4, r1, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfb8      	it	lt
 8005bd2:	18e4      	addlt	r4, r4, r3
 8005bd4:	f000 f8de 	bl	8005d94 <__malloc_lock>
 8005bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c4c <_free_r+0x8c>)
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	b933      	cbnz	r3, 8005bec <_free_r+0x2c>
 8005bde:	6063      	str	r3, [r4, #4]
 8005be0:	6014      	str	r4, [r2, #0]
 8005be2:	4628      	mov	r0, r5
 8005be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005be8:	f000 b8da 	b.w	8005da0 <__malloc_unlock>
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	d908      	bls.n	8005c02 <_free_r+0x42>
 8005bf0:	6820      	ldr	r0, [r4, #0]
 8005bf2:	1821      	adds	r1, r4, r0
 8005bf4:	428b      	cmp	r3, r1
 8005bf6:	bf01      	itttt	eq
 8005bf8:	6819      	ldreq	r1, [r3, #0]
 8005bfa:	685b      	ldreq	r3, [r3, #4]
 8005bfc:	1809      	addeq	r1, r1, r0
 8005bfe:	6021      	streq	r1, [r4, #0]
 8005c00:	e7ed      	b.n	8005bde <_free_r+0x1e>
 8005c02:	461a      	mov	r2, r3
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	b10b      	cbz	r3, 8005c0c <_free_r+0x4c>
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d9fa      	bls.n	8005c02 <_free_r+0x42>
 8005c0c:	6811      	ldr	r1, [r2, #0]
 8005c0e:	1850      	adds	r0, r2, r1
 8005c10:	42a0      	cmp	r0, r4
 8005c12:	d10b      	bne.n	8005c2c <_free_r+0x6c>
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	4401      	add	r1, r0
 8005c18:	1850      	adds	r0, r2, r1
 8005c1a:	4283      	cmp	r3, r0
 8005c1c:	6011      	str	r1, [r2, #0]
 8005c1e:	d1e0      	bne.n	8005be2 <_free_r+0x22>
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4408      	add	r0, r1
 8005c26:	6010      	str	r0, [r2, #0]
 8005c28:	6053      	str	r3, [r2, #4]
 8005c2a:	e7da      	b.n	8005be2 <_free_r+0x22>
 8005c2c:	d902      	bls.n	8005c34 <_free_r+0x74>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	602b      	str	r3, [r5, #0]
 8005c32:	e7d6      	b.n	8005be2 <_free_r+0x22>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	1821      	adds	r1, r4, r0
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	bf01      	itttt	eq
 8005c3c:	6819      	ldreq	r1, [r3, #0]
 8005c3e:	685b      	ldreq	r3, [r3, #4]
 8005c40:	1809      	addeq	r1, r1, r0
 8005c42:	6021      	streq	r1, [r4, #0]
 8005c44:	6063      	str	r3, [r4, #4]
 8005c46:	6054      	str	r4, [r2, #4]
 8005c48:	e7cb      	b.n	8005be2 <_free_r+0x22>
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	200018b4 	.word	0x200018b4

08005c50 <sbrk_aligned>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	4e0f      	ldr	r6, [pc, #60]	@ (8005c90 <sbrk_aligned+0x40>)
 8005c54:	460c      	mov	r4, r1
 8005c56:	6831      	ldr	r1, [r6, #0]
 8005c58:	4605      	mov	r5, r0
 8005c5a:	b911      	cbnz	r1, 8005c62 <sbrk_aligned+0x12>
 8005c5c:	f000 ff32 	bl	8006ac4 <_sbrk_r>
 8005c60:	6030      	str	r0, [r6, #0]
 8005c62:	4621      	mov	r1, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 ff2d 	bl	8006ac4 <_sbrk_r>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	d103      	bne.n	8005c76 <sbrk_aligned+0x26>
 8005c6e:	f04f 34ff 	mov.w	r4, #4294967295
 8005c72:	4620      	mov	r0, r4
 8005c74:	bd70      	pop	{r4, r5, r6, pc}
 8005c76:	1cc4      	adds	r4, r0, #3
 8005c78:	f024 0403 	bic.w	r4, r4, #3
 8005c7c:	42a0      	cmp	r0, r4
 8005c7e:	d0f8      	beq.n	8005c72 <sbrk_aligned+0x22>
 8005c80:	1a21      	subs	r1, r4, r0
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 ff1e 	bl	8006ac4 <_sbrk_r>
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d1f2      	bne.n	8005c72 <sbrk_aligned+0x22>
 8005c8c:	e7ef      	b.n	8005c6e <sbrk_aligned+0x1e>
 8005c8e:	bf00      	nop
 8005c90:	200018b0 	.word	0x200018b0

08005c94 <_malloc_r>:
 8005c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c98:	1ccd      	adds	r5, r1, #3
 8005c9a:	f025 0503 	bic.w	r5, r5, #3
 8005c9e:	3508      	adds	r5, #8
 8005ca0:	2d0c      	cmp	r5, #12
 8005ca2:	bf38      	it	cc
 8005ca4:	250c      	movcc	r5, #12
 8005ca6:	2d00      	cmp	r5, #0
 8005ca8:	4606      	mov	r6, r0
 8005caa:	db01      	blt.n	8005cb0 <_malloc_r+0x1c>
 8005cac:	42a9      	cmp	r1, r5
 8005cae:	d904      	bls.n	8005cba <_malloc_r+0x26>
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	6033      	str	r3, [r6, #0]
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d90 <_malloc_r+0xfc>
 8005cbe:	f000 f869 	bl	8005d94 <__malloc_lock>
 8005cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8005cc6:	461c      	mov	r4, r3
 8005cc8:	bb44      	cbnz	r4, 8005d1c <_malloc_r+0x88>
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f7ff ffbf 	bl	8005c50 <sbrk_aligned>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	d158      	bne.n	8005d8a <_malloc_r+0xf6>
 8005cd8:	f8d8 4000 	ldr.w	r4, [r8]
 8005cdc:	4627      	mov	r7, r4
 8005cde:	2f00      	cmp	r7, #0
 8005ce0:	d143      	bne.n	8005d6a <_malloc_r+0xd6>
 8005ce2:	2c00      	cmp	r4, #0
 8005ce4:	d04b      	beq.n	8005d7e <_malloc_r+0xea>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	4639      	mov	r1, r7
 8005cea:	4630      	mov	r0, r6
 8005cec:	eb04 0903 	add.w	r9, r4, r3
 8005cf0:	f000 fee8 	bl	8006ac4 <_sbrk_r>
 8005cf4:	4581      	cmp	r9, r0
 8005cf6:	d142      	bne.n	8005d7e <_malloc_r+0xea>
 8005cf8:	6821      	ldr	r1, [r4, #0]
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	1a6d      	subs	r5, r5, r1
 8005cfe:	4629      	mov	r1, r5
 8005d00:	f7ff ffa6 	bl	8005c50 <sbrk_aligned>
 8005d04:	3001      	adds	r0, #1
 8005d06:	d03a      	beq.n	8005d7e <_malloc_r+0xea>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	442b      	add	r3, r5
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	bb62      	cbnz	r2, 8005d70 <_malloc_r+0xdc>
 8005d16:	f8c8 7000 	str.w	r7, [r8]
 8005d1a:	e00f      	b.n	8005d3c <_malloc_r+0xa8>
 8005d1c:	6822      	ldr	r2, [r4, #0]
 8005d1e:	1b52      	subs	r2, r2, r5
 8005d20:	d420      	bmi.n	8005d64 <_malloc_r+0xd0>
 8005d22:	2a0b      	cmp	r2, #11
 8005d24:	d917      	bls.n	8005d56 <_malloc_r+0xc2>
 8005d26:	1961      	adds	r1, r4, r5
 8005d28:	42a3      	cmp	r3, r4
 8005d2a:	6025      	str	r5, [r4, #0]
 8005d2c:	bf18      	it	ne
 8005d2e:	6059      	strne	r1, [r3, #4]
 8005d30:	6863      	ldr	r3, [r4, #4]
 8005d32:	bf08      	it	eq
 8005d34:	f8c8 1000 	streq.w	r1, [r8]
 8005d38:	5162      	str	r2, [r4, r5]
 8005d3a:	604b      	str	r3, [r1, #4]
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f000 f82f 	bl	8005da0 <__malloc_unlock>
 8005d42:	f104 000b 	add.w	r0, r4, #11
 8005d46:	1d23      	adds	r3, r4, #4
 8005d48:	f020 0007 	bic.w	r0, r0, #7
 8005d4c:	1ac2      	subs	r2, r0, r3
 8005d4e:	bf1c      	itt	ne
 8005d50:	1a1b      	subne	r3, r3, r0
 8005d52:	50a3      	strne	r3, [r4, r2]
 8005d54:	e7af      	b.n	8005cb6 <_malloc_r+0x22>
 8005d56:	6862      	ldr	r2, [r4, #4]
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	bf0c      	ite	eq
 8005d5c:	f8c8 2000 	streq.w	r2, [r8]
 8005d60:	605a      	strne	r2, [r3, #4]
 8005d62:	e7eb      	b.n	8005d3c <_malloc_r+0xa8>
 8005d64:	4623      	mov	r3, r4
 8005d66:	6864      	ldr	r4, [r4, #4]
 8005d68:	e7ae      	b.n	8005cc8 <_malloc_r+0x34>
 8005d6a:	463c      	mov	r4, r7
 8005d6c:	687f      	ldr	r7, [r7, #4]
 8005d6e:	e7b6      	b.n	8005cde <_malloc_r+0x4a>
 8005d70:	461a      	mov	r2, r3
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	42a3      	cmp	r3, r4
 8005d76:	d1fb      	bne.n	8005d70 <_malloc_r+0xdc>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6053      	str	r3, [r2, #4]
 8005d7c:	e7de      	b.n	8005d3c <_malloc_r+0xa8>
 8005d7e:	230c      	movs	r3, #12
 8005d80:	4630      	mov	r0, r6
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	f000 f80c 	bl	8005da0 <__malloc_unlock>
 8005d88:	e794      	b.n	8005cb4 <_malloc_r+0x20>
 8005d8a:	6005      	str	r5, [r0, #0]
 8005d8c:	e7d6      	b.n	8005d3c <_malloc_r+0xa8>
 8005d8e:	bf00      	nop
 8005d90:	200018b4 	.word	0x200018b4

08005d94 <__malloc_lock>:
 8005d94:	4801      	ldr	r0, [pc, #4]	@ (8005d9c <__malloc_lock+0x8>)
 8005d96:	f7ff bf03 	b.w	8005ba0 <__retarget_lock_acquire_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	200018ac 	.word	0x200018ac

08005da0 <__malloc_unlock>:
 8005da0:	4801      	ldr	r0, [pc, #4]	@ (8005da8 <__malloc_unlock+0x8>)
 8005da2:	f7ff befe 	b.w	8005ba2 <__retarget_lock_release_recursive>
 8005da6:	bf00      	nop
 8005da8:	200018ac 	.word	0x200018ac

08005dac <__ssputs_r>:
 8005dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	461f      	mov	r7, r3
 8005db2:	688e      	ldr	r6, [r1, #8]
 8005db4:	4682      	mov	sl, r0
 8005db6:	42be      	cmp	r6, r7
 8005db8:	460c      	mov	r4, r1
 8005dba:	4690      	mov	r8, r2
 8005dbc:	680b      	ldr	r3, [r1, #0]
 8005dbe:	d82d      	bhi.n	8005e1c <__ssputs_r+0x70>
 8005dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005dc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005dc8:	d026      	beq.n	8005e18 <__ssputs_r+0x6c>
 8005dca:	6965      	ldr	r5, [r4, #20]
 8005dcc:	6909      	ldr	r1, [r1, #16]
 8005dce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dd2:	eba3 0901 	sub.w	r9, r3, r1
 8005dd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dda:	1c7b      	adds	r3, r7, #1
 8005ddc:	444b      	add	r3, r9
 8005dde:	106d      	asrs	r5, r5, #1
 8005de0:	429d      	cmp	r5, r3
 8005de2:	bf38      	it	cc
 8005de4:	461d      	movcc	r5, r3
 8005de6:	0553      	lsls	r3, r2, #21
 8005de8:	d527      	bpl.n	8005e3a <__ssputs_r+0x8e>
 8005dea:	4629      	mov	r1, r5
 8005dec:	f7ff ff52 	bl	8005c94 <_malloc_r>
 8005df0:	4606      	mov	r6, r0
 8005df2:	b360      	cbz	r0, 8005e4e <__ssputs_r+0xa2>
 8005df4:	464a      	mov	r2, r9
 8005df6:	6921      	ldr	r1, [r4, #16]
 8005df8:	f7ff fed4 	bl	8005ba4 <memcpy>
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	6126      	str	r6, [r4, #16]
 8005e0a:	444e      	add	r6, r9
 8005e0c:	6026      	str	r6, [r4, #0]
 8005e0e:	463e      	mov	r6, r7
 8005e10:	6165      	str	r5, [r4, #20]
 8005e12:	eba5 0509 	sub.w	r5, r5, r9
 8005e16:	60a5      	str	r5, [r4, #8]
 8005e18:	42be      	cmp	r6, r7
 8005e1a:	d900      	bls.n	8005e1e <__ssputs_r+0x72>
 8005e1c:	463e      	mov	r6, r7
 8005e1e:	4632      	mov	r2, r6
 8005e20:	4641      	mov	r1, r8
 8005e22:	6820      	ldr	r0, [r4, #0]
 8005e24:	f000 fe33 	bl	8006a8e <memmove>
 8005e28:	2000      	movs	r0, #0
 8005e2a:	68a3      	ldr	r3, [r4, #8]
 8005e2c:	1b9b      	subs	r3, r3, r6
 8005e2e:	60a3      	str	r3, [r4, #8]
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	4433      	add	r3, r6
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3a:	462a      	mov	r2, r5
 8005e3c:	f000 fe60 	bl	8006b00 <_realloc_r>
 8005e40:	4606      	mov	r6, r0
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d1e0      	bne.n	8005e08 <__ssputs_r+0x5c>
 8005e46:	4650      	mov	r0, sl
 8005e48:	6921      	ldr	r1, [r4, #16]
 8005e4a:	f7ff feb9 	bl	8005bc0 <_free_r>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	f8ca 3000 	str.w	r3, [sl]
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e5e:	81a3      	strh	r3, [r4, #12]
 8005e60:	e7e9      	b.n	8005e36 <__ssputs_r+0x8a>
	...

08005e64 <_svfiprintf_r>:
 8005e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	4698      	mov	r8, r3
 8005e6a:	898b      	ldrh	r3, [r1, #12]
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	061b      	lsls	r3, r3, #24
 8005e70:	460d      	mov	r5, r1
 8005e72:	4614      	mov	r4, r2
 8005e74:	b09d      	sub	sp, #116	@ 0x74
 8005e76:	d510      	bpl.n	8005e9a <_svfiprintf_r+0x36>
 8005e78:	690b      	ldr	r3, [r1, #16]
 8005e7a:	b973      	cbnz	r3, 8005e9a <_svfiprintf_r+0x36>
 8005e7c:	2140      	movs	r1, #64	@ 0x40
 8005e7e:	f7ff ff09 	bl	8005c94 <_malloc_r>
 8005e82:	6028      	str	r0, [r5, #0]
 8005e84:	6128      	str	r0, [r5, #16]
 8005e86:	b930      	cbnz	r0, 8005e96 <_svfiprintf_r+0x32>
 8005e88:	230c      	movs	r3, #12
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e90:	b01d      	add	sp, #116	@ 0x74
 8005e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e96:	2340      	movs	r3, #64	@ 0x40
 8005e98:	616b      	str	r3, [r5, #20]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e9e:	2320      	movs	r3, #32
 8005ea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ea4:	2330      	movs	r3, #48	@ 0x30
 8005ea6:	f04f 0901 	mov.w	r9, #1
 8005eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006048 <_svfiprintf_r+0x1e4>
 8005eb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005eb6:	4623      	mov	r3, r4
 8005eb8:	469a      	mov	sl, r3
 8005eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ebe:	b10a      	cbz	r2, 8005ec4 <_svfiprintf_r+0x60>
 8005ec0:	2a25      	cmp	r2, #37	@ 0x25
 8005ec2:	d1f9      	bne.n	8005eb8 <_svfiprintf_r+0x54>
 8005ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ec8:	d00b      	beq.n	8005ee2 <_svfiprintf_r+0x7e>
 8005eca:	465b      	mov	r3, fp
 8005ecc:	4622      	mov	r2, r4
 8005ece:	4629      	mov	r1, r5
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f7ff ff6b 	bl	8005dac <__ssputs_r>
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	f000 80a7 	beq.w	800602a <_svfiprintf_r+0x1c6>
 8005edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ede:	445a      	add	r2, fp
 8005ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 809f 	beq.w	800602a <_svfiprintf_r+0x1c6>
 8005eec:	2300      	movs	r3, #0
 8005eee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ef6:	f10a 0a01 	add.w	sl, sl, #1
 8005efa:	9304      	str	r3, [sp, #16]
 8005efc:	9307      	str	r3, [sp, #28]
 8005efe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f02:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f04:	4654      	mov	r4, sl
 8005f06:	2205      	movs	r2, #5
 8005f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0c:	484e      	ldr	r0, [pc, #312]	@ (8006048 <_svfiprintf_r+0x1e4>)
 8005f0e:	f000 fde9 	bl	8006ae4 <memchr>
 8005f12:	9a04      	ldr	r2, [sp, #16]
 8005f14:	b9d8      	cbnz	r0, 8005f4e <_svfiprintf_r+0xea>
 8005f16:	06d0      	lsls	r0, r2, #27
 8005f18:	bf44      	itt	mi
 8005f1a:	2320      	movmi	r3, #32
 8005f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f20:	0711      	lsls	r1, r2, #28
 8005f22:	bf44      	itt	mi
 8005f24:	232b      	movmi	r3, #43	@ 0x2b
 8005f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f30:	d015      	beq.n	8005f5e <_svfiprintf_r+0xfa>
 8005f32:	4654      	mov	r4, sl
 8005f34:	2000      	movs	r0, #0
 8005f36:	f04f 0c0a 	mov.w	ip, #10
 8005f3a:	9a07      	ldr	r2, [sp, #28]
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f42:	3b30      	subs	r3, #48	@ 0x30
 8005f44:	2b09      	cmp	r3, #9
 8005f46:	d94b      	bls.n	8005fe0 <_svfiprintf_r+0x17c>
 8005f48:	b1b0      	cbz	r0, 8005f78 <_svfiprintf_r+0x114>
 8005f4a:	9207      	str	r2, [sp, #28]
 8005f4c:	e014      	b.n	8005f78 <_svfiprintf_r+0x114>
 8005f4e:	eba0 0308 	sub.w	r3, r0, r8
 8005f52:	fa09 f303 	lsl.w	r3, r9, r3
 8005f56:	4313      	orrs	r3, r2
 8005f58:	46a2      	mov	sl, r4
 8005f5a:	9304      	str	r3, [sp, #16]
 8005f5c:	e7d2      	b.n	8005f04 <_svfiprintf_r+0xa0>
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	1d19      	adds	r1, r3, #4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	9103      	str	r1, [sp, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bfbb      	ittet	lt
 8005f6a:	425b      	neglt	r3, r3
 8005f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f70:	9307      	strge	r3, [sp, #28]
 8005f72:	9307      	strlt	r3, [sp, #28]
 8005f74:	bfb8      	it	lt
 8005f76:	9204      	strlt	r2, [sp, #16]
 8005f78:	7823      	ldrb	r3, [r4, #0]
 8005f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f7c:	d10a      	bne.n	8005f94 <_svfiprintf_r+0x130>
 8005f7e:	7863      	ldrb	r3, [r4, #1]
 8005f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f82:	d132      	bne.n	8005fea <_svfiprintf_r+0x186>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	3402      	adds	r4, #2
 8005f88:	1d1a      	adds	r2, r3, #4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	9203      	str	r2, [sp, #12]
 8005f8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f92:	9305      	str	r3, [sp, #20]
 8005f94:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800604c <_svfiprintf_r+0x1e8>
 8005f98:	2203      	movs	r2, #3
 8005f9a:	4650      	mov	r0, sl
 8005f9c:	7821      	ldrb	r1, [r4, #0]
 8005f9e:	f000 fda1 	bl	8006ae4 <memchr>
 8005fa2:	b138      	cbz	r0, 8005fb4 <_svfiprintf_r+0x150>
 8005fa4:	2240      	movs	r2, #64	@ 0x40
 8005fa6:	9b04      	ldr	r3, [sp, #16]
 8005fa8:	eba0 000a 	sub.w	r0, r0, sl
 8005fac:	4082      	lsls	r2, r0
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	3401      	adds	r4, #1
 8005fb2:	9304      	str	r3, [sp, #16]
 8005fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb8:	2206      	movs	r2, #6
 8005fba:	4825      	ldr	r0, [pc, #148]	@ (8006050 <_svfiprintf_r+0x1ec>)
 8005fbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fc0:	f000 fd90 	bl	8006ae4 <memchr>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d036      	beq.n	8006036 <_svfiprintf_r+0x1d2>
 8005fc8:	4b22      	ldr	r3, [pc, #136]	@ (8006054 <_svfiprintf_r+0x1f0>)
 8005fca:	bb1b      	cbnz	r3, 8006014 <_svfiprintf_r+0x1b0>
 8005fcc:	9b03      	ldr	r3, [sp, #12]
 8005fce:	3307      	adds	r3, #7
 8005fd0:	f023 0307 	bic.w	r3, r3, #7
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	9303      	str	r3, [sp, #12]
 8005fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fda:	4433      	add	r3, r6
 8005fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fde:	e76a      	b.n	8005eb6 <_svfiprintf_r+0x52>
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fe8:	e7a8      	b.n	8005f3c <_svfiprintf_r+0xd8>
 8005fea:	2300      	movs	r3, #0
 8005fec:	f04f 0c0a 	mov.w	ip, #10
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	3401      	adds	r4, #1
 8005ff4:	9305      	str	r3, [sp, #20]
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ffc:	3a30      	subs	r2, #48	@ 0x30
 8005ffe:	2a09      	cmp	r2, #9
 8006000:	d903      	bls.n	800600a <_svfiprintf_r+0x1a6>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0c6      	beq.n	8005f94 <_svfiprintf_r+0x130>
 8006006:	9105      	str	r1, [sp, #20]
 8006008:	e7c4      	b.n	8005f94 <_svfiprintf_r+0x130>
 800600a:	4604      	mov	r4, r0
 800600c:	2301      	movs	r3, #1
 800600e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006012:	e7f0      	b.n	8005ff6 <_svfiprintf_r+0x192>
 8006014:	ab03      	add	r3, sp, #12
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	462a      	mov	r2, r5
 800601a:	4638      	mov	r0, r7
 800601c:	4b0e      	ldr	r3, [pc, #56]	@ (8006058 <_svfiprintf_r+0x1f4>)
 800601e:	a904      	add	r1, sp, #16
 8006020:	f3af 8000 	nop.w
 8006024:	1c42      	adds	r2, r0, #1
 8006026:	4606      	mov	r6, r0
 8006028:	d1d6      	bne.n	8005fd8 <_svfiprintf_r+0x174>
 800602a:	89ab      	ldrh	r3, [r5, #12]
 800602c:	065b      	lsls	r3, r3, #25
 800602e:	f53f af2d 	bmi.w	8005e8c <_svfiprintf_r+0x28>
 8006032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006034:	e72c      	b.n	8005e90 <_svfiprintf_r+0x2c>
 8006036:	ab03      	add	r3, sp, #12
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	462a      	mov	r2, r5
 800603c:	4638      	mov	r0, r7
 800603e:	4b06      	ldr	r3, [pc, #24]	@ (8006058 <_svfiprintf_r+0x1f4>)
 8006040:	a904      	add	r1, sp, #16
 8006042:	f000 fa47 	bl	80064d4 <_printf_i>
 8006046:	e7ed      	b.n	8006024 <_svfiprintf_r+0x1c0>
 8006048:	08006fbe 	.word	0x08006fbe
 800604c:	08006fc4 	.word	0x08006fc4
 8006050:	08006fc8 	.word	0x08006fc8
 8006054:	00000000 	.word	0x00000000
 8006058:	08005dad 	.word	0x08005dad

0800605c <_sungetc_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	1c4b      	adds	r3, r1, #1
 8006060:	4614      	mov	r4, r2
 8006062:	d103      	bne.n	800606c <_sungetc_r+0x10>
 8006064:	f04f 35ff 	mov.w	r5, #4294967295
 8006068:	4628      	mov	r0, r5
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	8993      	ldrh	r3, [r2, #12]
 800606e:	b2cd      	uxtb	r5, r1
 8006070:	f023 0320 	bic.w	r3, r3, #32
 8006074:	8193      	strh	r3, [r2, #12]
 8006076:	6853      	ldr	r3, [r2, #4]
 8006078:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800607a:	b18a      	cbz	r2, 80060a0 <_sungetc_r+0x44>
 800607c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800607e:	429a      	cmp	r2, r3
 8006080:	dd08      	ble.n	8006094 <_sungetc_r+0x38>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	1e5a      	subs	r2, r3, #1
 8006086:	6022      	str	r2, [r4, #0]
 8006088:	f803 5c01 	strb.w	r5, [r3, #-1]
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	3301      	adds	r3, #1
 8006090:	6063      	str	r3, [r4, #4]
 8006092:	e7e9      	b.n	8006068 <_sungetc_r+0xc>
 8006094:	4621      	mov	r1, r4
 8006096:	f000 fcc2 	bl	8006a1e <__submore>
 800609a:	2800      	cmp	r0, #0
 800609c:	d0f1      	beq.n	8006082 <_sungetc_r+0x26>
 800609e:	e7e1      	b.n	8006064 <_sungetc_r+0x8>
 80060a0:	6921      	ldr	r1, [r4, #16]
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	b141      	cbz	r1, 80060b8 <_sungetc_r+0x5c>
 80060a6:	4291      	cmp	r1, r2
 80060a8:	d206      	bcs.n	80060b8 <_sungetc_r+0x5c>
 80060aa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80060ae:	42a9      	cmp	r1, r5
 80060b0:	d102      	bne.n	80060b8 <_sungetc_r+0x5c>
 80060b2:	3a01      	subs	r2, #1
 80060b4:	6022      	str	r2, [r4, #0]
 80060b6:	e7ea      	b.n	800608e <_sungetc_r+0x32>
 80060b8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80060bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80060c2:	2303      	movs	r3, #3
 80060c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80060c6:	4623      	mov	r3, r4
 80060c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	2301      	movs	r3, #1
 80060d0:	e7de      	b.n	8006090 <_sungetc_r+0x34>

080060d2 <__ssrefill_r>:
 80060d2:	b510      	push	{r4, lr}
 80060d4:	460c      	mov	r4, r1
 80060d6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80060d8:	b169      	cbz	r1, 80060f6 <__ssrefill_r+0x24>
 80060da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060de:	4299      	cmp	r1, r3
 80060e0:	d001      	beq.n	80060e6 <__ssrefill_r+0x14>
 80060e2:	f7ff fd6d 	bl	8005bc0 <_free_r>
 80060e6:	2000      	movs	r0, #0
 80060e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060ea:	6360      	str	r0, [r4, #52]	@ 0x34
 80060ec:	6063      	str	r3, [r4, #4]
 80060ee:	b113      	cbz	r3, 80060f6 <__ssrefill_r+0x24>
 80060f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80060f2:	6023      	str	r3, [r4, #0]
 80060f4:	bd10      	pop	{r4, pc}
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	2300      	movs	r3, #0
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	f043 0320 	orr.w	r3, r3, #32
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	e7f3      	b.n	80060f4 <__ssrefill_r+0x22>

0800610c <__ssvfiscanf_r>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	460c      	mov	r4, r1
 8006112:	2100      	movs	r1, #0
 8006114:	4606      	mov	r6, r0
 8006116:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800611a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800611e:	49aa      	ldr	r1, [pc, #680]	@ (80063c8 <__ssvfiscanf_r+0x2bc>)
 8006120:	f10d 0804 	add.w	r8, sp, #4
 8006124:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006126:	49a9      	ldr	r1, [pc, #676]	@ (80063cc <__ssvfiscanf_r+0x2c0>)
 8006128:	4fa9      	ldr	r7, [pc, #676]	@ (80063d0 <__ssvfiscanf_r+0x2c4>)
 800612a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800612e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	7813      	ldrb	r3, [r2, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 8159 	beq.w	80063ec <__ssvfiscanf_r+0x2e0>
 800613a:	5cf9      	ldrb	r1, [r7, r3]
 800613c:	1c55      	adds	r5, r2, #1
 800613e:	f011 0108 	ands.w	r1, r1, #8
 8006142:	d019      	beq.n	8006178 <__ssvfiscanf_r+0x6c>
 8006144:	6863      	ldr	r3, [r4, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	dd0f      	ble.n	800616a <__ssvfiscanf_r+0x5e>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	781a      	ldrb	r2, [r3, #0]
 800614e:	5cba      	ldrb	r2, [r7, r2]
 8006150:	0712      	lsls	r2, r2, #28
 8006152:	d401      	bmi.n	8006158 <__ssvfiscanf_r+0x4c>
 8006154:	462a      	mov	r2, r5
 8006156:	e7ec      	b.n	8006132 <__ssvfiscanf_r+0x26>
 8006158:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800615a:	3301      	adds	r3, #1
 800615c:	3201      	adds	r2, #1
 800615e:	9245      	str	r2, [sp, #276]	@ 0x114
 8006160:	6862      	ldr	r2, [r4, #4]
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	3a01      	subs	r2, #1
 8006166:	6062      	str	r2, [r4, #4]
 8006168:	e7ec      	b.n	8006144 <__ssvfiscanf_r+0x38>
 800616a:	4621      	mov	r1, r4
 800616c:	4630      	mov	r0, r6
 800616e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006170:	4798      	blx	r3
 8006172:	2800      	cmp	r0, #0
 8006174:	d0e9      	beq.n	800614a <__ssvfiscanf_r+0x3e>
 8006176:	e7ed      	b.n	8006154 <__ssvfiscanf_r+0x48>
 8006178:	2b25      	cmp	r3, #37	@ 0x25
 800617a:	d012      	beq.n	80061a2 <__ssvfiscanf_r+0x96>
 800617c:	4699      	mov	r9, r3
 800617e:	6863      	ldr	r3, [r4, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f340 8094 	ble.w	80062ae <__ssvfiscanf_r+0x1a2>
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	7813      	ldrb	r3, [r2, #0]
 800618a:	454b      	cmp	r3, r9
 800618c:	f040 812e 	bne.w	80063ec <__ssvfiscanf_r+0x2e0>
 8006190:	6863      	ldr	r3, [r4, #4]
 8006192:	3201      	adds	r2, #1
 8006194:	3b01      	subs	r3, #1
 8006196:	6063      	str	r3, [r4, #4]
 8006198:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800619a:	6022      	str	r2, [r4, #0]
 800619c:	3301      	adds	r3, #1
 800619e:	9345      	str	r3, [sp, #276]	@ 0x114
 80061a0:	e7d8      	b.n	8006154 <__ssvfiscanf_r+0x48>
 80061a2:	9141      	str	r1, [sp, #260]	@ 0x104
 80061a4:	9143      	str	r1, [sp, #268]	@ 0x10c
 80061a6:	7853      	ldrb	r3, [r2, #1]
 80061a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80061aa:	bf04      	itt	eq
 80061ac:	2310      	moveq	r3, #16
 80061ae:	1c95      	addeq	r5, r2, #2
 80061b0:	f04f 020a 	mov.w	r2, #10
 80061b4:	bf08      	it	eq
 80061b6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80061b8:	46a9      	mov	r9, r5
 80061ba:	f819 1b01 	ldrb.w	r1, [r9], #1
 80061be:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80061c2:	2b09      	cmp	r3, #9
 80061c4:	d91e      	bls.n	8006204 <__ssvfiscanf_r+0xf8>
 80061c6:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80063d4 <__ssvfiscanf_r+0x2c8>
 80061ca:	2203      	movs	r2, #3
 80061cc:	4650      	mov	r0, sl
 80061ce:	f000 fc89 	bl	8006ae4 <memchr>
 80061d2:	b138      	cbz	r0, 80061e4 <__ssvfiscanf_r+0xd8>
 80061d4:	2301      	movs	r3, #1
 80061d6:	464d      	mov	r5, r9
 80061d8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80061da:	eba0 000a 	sub.w	r0, r0, sl
 80061de:	4083      	lsls	r3, r0
 80061e0:	4313      	orrs	r3, r2
 80061e2:	9341      	str	r3, [sp, #260]	@ 0x104
 80061e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061e8:	2b78      	cmp	r3, #120	@ 0x78
 80061ea:	d806      	bhi.n	80061fa <__ssvfiscanf_r+0xee>
 80061ec:	2b57      	cmp	r3, #87	@ 0x57
 80061ee:	d810      	bhi.n	8006212 <__ssvfiscanf_r+0x106>
 80061f0:	2b25      	cmp	r3, #37	@ 0x25
 80061f2:	d0c3      	beq.n	800617c <__ssvfiscanf_r+0x70>
 80061f4:	d856      	bhi.n	80062a4 <__ssvfiscanf_r+0x198>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d064      	beq.n	80062c4 <__ssvfiscanf_r+0x1b8>
 80061fa:	2303      	movs	r3, #3
 80061fc:	9347      	str	r3, [sp, #284]	@ 0x11c
 80061fe:	230a      	movs	r3, #10
 8006200:	9342      	str	r3, [sp, #264]	@ 0x108
 8006202:	e077      	b.n	80062f4 <__ssvfiscanf_r+0x1e8>
 8006204:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006206:	464d      	mov	r5, r9
 8006208:	fb02 1103 	mla	r1, r2, r3, r1
 800620c:	3930      	subs	r1, #48	@ 0x30
 800620e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006210:	e7d2      	b.n	80061b8 <__ssvfiscanf_r+0xac>
 8006212:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006216:	2a20      	cmp	r2, #32
 8006218:	d8ef      	bhi.n	80061fa <__ssvfiscanf_r+0xee>
 800621a:	a101      	add	r1, pc, #4	@ (adr r1, 8006220 <__ssvfiscanf_r+0x114>)
 800621c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006220:	080062d3 	.word	0x080062d3
 8006224:	080061fb 	.word	0x080061fb
 8006228:	080061fb 	.word	0x080061fb
 800622c:	0800632d 	.word	0x0800632d
 8006230:	080061fb 	.word	0x080061fb
 8006234:	080061fb 	.word	0x080061fb
 8006238:	080061fb 	.word	0x080061fb
 800623c:	080061fb 	.word	0x080061fb
 8006240:	080061fb 	.word	0x080061fb
 8006244:	080061fb 	.word	0x080061fb
 8006248:	080061fb 	.word	0x080061fb
 800624c:	08006343 	.word	0x08006343
 8006250:	08006329 	.word	0x08006329
 8006254:	080062ab 	.word	0x080062ab
 8006258:	080062ab 	.word	0x080062ab
 800625c:	080062ab 	.word	0x080062ab
 8006260:	080061fb 	.word	0x080061fb
 8006264:	080062e5 	.word	0x080062e5
 8006268:	080061fb 	.word	0x080061fb
 800626c:	080061fb 	.word	0x080061fb
 8006270:	080061fb 	.word	0x080061fb
 8006274:	080061fb 	.word	0x080061fb
 8006278:	08006353 	.word	0x08006353
 800627c:	080062ed 	.word	0x080062ed
 8006280:	080062cb 	.word	0x080062cb
 8006284:	080061fb 	.word	0x080061fb
 8006288:	080061fb 	.word	0x080061fb
 800628c:	0800634f 	.word	0x0800634f
 8006290:	080061fb 	.word	0x080061fb
 8006294:	08006329 	.word	0x08006329
 8006298:	080061fb 	.word	0x080061fb
 800629c:	080061fb 	.word	0x080061fb
 80062a0:	080062d3 	.word	0x080062d3
 80062a4:	3b45      	subs	r3, #69	@ 0x45
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d8a7      	bhi.n	80061fa <__ssvfiscanf_r+0xee>
 80062aa:	2305      	movs	r3, #5
 80062ac:	e021      	b.n	80062f2 <__ssvfiscanf_r+0x1e6>
 80062ae:	4621      	mov	r1, r4
 80062b0:	4630      	mov	r0, r6
 80062b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80062b4:	4798      	blx	r3
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f43f af65 	beq.w	8006186 <__ssvfiscanf_r+0x7a>
 80062bc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80062be:	2800      	cmp	r0, #0
 80062c0:	f040 808c 	bne.w	80063dc <__ssvfiscanf_r+0x2d0>
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295
 80062c8:	e08c      	b.n	80063e4 <__ssvfiscanf_r+0x2d8>
 80062ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80062cc:	f042 0220 	orr.w	r2, r2, #32
 80062d0:	9241      	str	r2, [sp, #260]	@ 0x104
 80062d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80062d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d8:	9241      	str	r2, [sp, #260]	@ 0x104
 80062da:	2210      	movs	r2, #16
 80062dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80062de:	9242      	str	r2, [sp, #264]	@ 0x108
 80062e0:	d902      	bls.n	80062e8 <__ssvfiscanf_r+0x1dc>
 80062e2:	e005      	b.n	80062f0 <__ssvfiscanf_r+0x1e4>
 80062e4:	2300      	movs	r3, #0
 80062e6:	9342      	str	r3, [sp, #264]	@ 0x108
 80062e8:	2303      	movs	r3, #3
 80062ea:	e002      	b.n	80062f2 <__ssvfiscanf_r+0x1e6>
 80062ec:	2308      	movs	r3, #8
 80062ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80062f0:	2304      	movs	r3, #4
 80062f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80062f4:	6863      	ldr	r3, [r4, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd39      	ble.n	800636e <__ssvfiscanf_r+0x262>
 80062fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80062fc:	0659      	lsls	r1, r3, #25
 80062fe:	d404      	bmi.n	800630a <__ssvfiscanf_r+0x1fe>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	5cba      	ldrb	r2, [r7, r2]
 8006306:	0712      	lsls	r2, r2, #28
 8006308:	d438      	bmi.n	800637c <__ssvfiscanf_r+0x270>
 800630a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800630c:	2b02      	cmp	r3, #2
 800630e:	dc47      	bgt.n	80063a0 <__ssvfiscanf_r+0x294>
 8006310:	466b      	mov	r3, sp
 8006312:	4622      	mov	r2, r4
 8006314:	4630      	mov	r0, r6
 8006316:	a941      	add	r1, sp, #260	@ 0x104
 8006318:	f000 f9fc 	bl	8006714 <_scanf_chars>
 800631c:	2801      	cmp	r0, #1
 800631e:	d065      	beq.n	80063ec <__ssvfiscanf_r+0x2e0>
 8006320:	2802      	cmp	r0, #2
 8006322:	f47f af17 	bne.w	8006154 <__ssvfiscanf_r+0x48>
 8006326:	e7c9      	b.n	80062bc <__ssvfiscanf_r+0x1b0>
 8006328:	220a      	movs	r2, #10
 800632a:	e7d7      	b.n	80062dc <__ssvfiscanf_r+0x1d0>
 800632c:	4629      	mov	r1, r5
 800632e:	4640      	mov	r0, r8
 8006330:	f000 fb3c 	bl	80069ac <__sccl>
 8006334:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006336:	4605      	mov	r5, r0
 8006338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800633c:	9341      	str	r3, [sp, #260]	@ 0x104
 800633e:	2301      	movs	r3, #1
 8006340:	e7d7      	b.n	80062f2 <__ssvfiscanf_r+0x1e6>
 8006342:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006348:	9341      	str	r3, [sp, #260]	@ 0x104
 800634a:	2300      	movs	r3, #0
 800634c:	e7d1      	b.n	80062f2 <__ssvfiscanf_r+0x1e6>
 800634e:	2302      	movs	r3, #2
 8006350:	e7cf      	b.n	80062f2 <__ssvfiscanf_r+0x1e6>
 8006352:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006354:	06c3      	lsls	r3, r0, #27
 8006356:	f53f aefd 	bmi.w	8006154 <__ssvfiscanf_r+0x48>
 800635a:	9b00      	ldr	r3, [sp, #0]
 800635c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800635e:	1d19      	adds	r1, r3, #4
 8006360:	9100      	str	r1, [sp, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	07c0      	lsls	r0, r0, #31
 8006366:	bf4c      	ite	mi
 8006368:	801a      	strhmi	r2, [r3, #0]
 800636a:	601a      	strpl	r2, [r3, #0]
 800636c:	e6f2      	b.n	8006154 <__ssvfiscanf_r+0x48>
 800636e:	4621      	mov	r1, r4
 8006370:	4630      	mov	r0, r6
 8006372:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006374:	4798      	blx	r3
 8006376:	2800      	cmp	r0, #0
 8006378:	d0bf      	beq.n	80062fa <__ssvfiscanf_r+0x1ee>
 800637a:	e79f      	b.n	80062bc <__ssvfiscanf_r+0x1b0>
 800637c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800637e:	3201      	adds	r2, #1
 8006380:	9245      	str	r2, [sp, #276]	@ 0x114
 8006382:	6862      	ldr	r2, [r4, #4]
 8006384:	3a01      	subs	r2, #1
 8006386:	2a00      	cmp	r2, #0
 8006388:	6062      	str	r2, [r4, #4]
 800638a:	dd02      	ble.n	8006392 <__ssvfiscanf_r+0x286>
 800638c:	3301      	adds	r3, #1
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	e7b6      	b.n	8006300 <__ssvfiscanf_r+0x1f4>
 8006392:	4621      	mov	r1, r4
 8006394:	4630      	mov	r0, r6
 8006396:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006398:	4798      	blx	r3
 800639a:	2800      	cmp	r0, #0
 800639c:	d0b0      	beq.n	8006300 <__ssvfiscanf_r+0x1f4>
 800639e:	e78d      	b.n	80062bc <__ssvfiscanf_r+0x1b0>
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	dc06      	bgt.n	80063b2 <__ssvfiscanf_r+0x2a6>
 80063a4:	466b      	mov	r3, sp
 80063a6:	4622      	mov	r2, r4
 80063a8:	4630      	mov	r0, r6
 80063aa:	a941      	add	r1, sp, #260	@ 0x104
 80063ac:	f000 fa0c 	bl	80067c8 <_scanf_i>
 80063b0:	e7b4      	b.n	800631c <__ssvfiscanf_r+0x210>
 80063b2:	4b09      	ldr	r3, [pc, #36]	@ (80063d8 <__ssvfiscanf_r+0x2cc>)
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f43f aecd 	beq.w	8006154 <__ssvfiscanf_r+0x48>
 80063ba:	466b      	mov	r3, sp
 80063bc:	4622      	mov	r2, r4
 80063be:	4630      	mov	r0, r6
 80063c0:	a941      	add	r1, sp, #260	@ 0x104
 80063c2:	f3af 8000 	nop.w
 80063c6:	e7a9      	b.n	800631c <__ssvfiscanf_r+0x210>
 80063c8:	0800605d 	.word	0x0800605d
 80063cc:	080060d3 	.word	0x080060d3
 80063d0:	0800700d 	.word	0x0800700d
 80063d4:	08006fc4 	.word	0x08006fc4
 80063d8:	00000000 	.word	0x00000000
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	065b      	lsls	r3, r3, #25
 80063e0:	f53f af70 	bmi.w	80062c4 <__ssvfiscanf_r+0x1b8>
 80063e4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80063e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ec:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80063ee:	e7f9      	b.n	80063e4 <__ssvfiscanf_r+0x2d8>

080063f0 <_printf_common>:
 80063f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	4616      	mov	r6, r2
 80063f6:	4698      	mov	r8, r3
 80063f8:	688a      	ldr	r2, [r1, #8]
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	4607      	mov	r7, r0
 80063fe:	4293      	cmp	r3, r2
 8006400:	bfb8      	it	lt
 8006402:	4613      	movlt	r3, r2
 8006404:	6033      	str	r3, [r6, #0]
 8006406:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800640a:	460c      	mov	r4, r1
 800640c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006410:	b10a      	cbz	r2, 8006416 <_printf_common+0x26>
 8006412:	3301      	adds	r3, #1
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	0699      	lsls	r1, r3, #26
 800641a:	bf42      	ittt	mi
 800641c:	6833      	ldrmi	r3, [r6, #0]
 800641e:	3302      	addmi	r3, #2
 8006420:	6033      	strmi	r3, [r6, #0]
 8006422:	6825      	ldr	r5, [r4, #0]
 8006424:	f015 0506 	ands.w	r5, r5, #6
 8006428:	d106      	bne.n	8006438 <_printf_common+0x48>
 800642a:	f104 0a19 	add.w	sl, r4, #25
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	6832      	ldr	r2, [r6, #0]
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	42ab      	cmp	r3, r5
 8006436:	dc2b      	bgt.n	8006490 <_printf_common+0xa0>
 8006438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800643c:	6822      	ldr	r2, [r4, #0]
 800643e:	3b00      	subs	r3, #0
 8006440:	bf18      	it	ne
 8006442:	2301      	movne	r3, #1
 8006444:	0692      	lsls	r2, r2, #26
 8006446:	d430      	bmi.n	80064aa <_printf_common+0xba>
 8006448:	4641      	mov	r1, r8
 800644a:	4638      	mov	r0, r7
 800644c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006450:	47c8      	blx	r9
 8006452:	3001      	adds	r0, #1
 8006454:	d023      	beq.n	800649e <_printf_common+0xae>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	6922      	ldr	r2, [r4, #16]
 800645a:	f003 0306 	and.w	r3, r3, #6
 800645e:	2b04      	cmp	r3, #4
 8006460:	bf14      	ite	ne
 8006462:	2500      	movne	r5, #0
 8006464:	6833      	ldreq	r3, [r6, #0]
 8006466:	f04f 0600 	mov.w	r6, #0
 800646a:	bf08      	it	eq
 800646c:	68e5      	ldreq	r5, [r4, #12]
 800646e:	f104 041a 	add.w	r4, r4, #26
 8006472:	bf08      	it	eq
 8006474:	1aed      	subeq	r5, r5, r3
 8006476:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800647a:	bf08      	it	eq
 800647c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006480:	4293      	cmp	r3, r2
 8006482:	bfc4      	itt	gt
 8006484:	1a9b      	subgt	r3, r3, r2
 8006486:	18ed      	addgt	r5, r5, r3
 8006488:	42b5      	cmp	r5, r6
 800648a:	d11a      	bne.n	80064c2 <_printf_common+0xd2>
 800648c:	2000      	movs	r0, #0
 800648e:	e008      	b.n	80064a2 <_printf_common+0xb2>
 8006490:	2301      	movs	r3, #1
 8006492:	4652      	mov	r2, sl
 8006494:	4641      	mov	r1, r8
 8006496:	4638      	mov	r0, r7
 8006498:	47c8      	blx	r9
 800649a:	3001      	adds	r0, #1
 800649c:	d103      	bne.n	80064a6 <_printf_common+0xb6>
 800649e:	f04f 30ff 	mov.w	r0, #4294967295
 80064a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a6:	3501      	adds	r5, #1
 80064a8:	e7c1      	b.n	800642e <_printf_common+0x3e>
 80064aa:	2030      	movs	r0, #48	@ 0x30
 80064ac:	18e1      	adds	r1, r4, r3
 80064ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064b8:	4422      	add	r2, r4
 80064ba:	3302      	adds	r3, #2
 80064bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064c0:	e7c2      	b.n	8006448 <_printf_common+0x58>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4622      	mov	r2, r4
 80064c6:	4641      	mov	r1, r8
 80064c8:	4638      	mov	r0, r7
 80064ca:	47c8      	blx	r9
 80064cc:	3001      	adds	r0, #1
 80064ce:	d0e6      	beq.n	800649e <_printf_common+0xae>
 80064d0:	3601      	adds	r6, #1
 80064d2:	e7d9      	b.n	8006488 <_printf_common+0x98>

080064d4 <_printf_i>:
 80064d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	7e0f      	ldrb	r7, [r1, #24]
 80064da:	4691      	mov	r9, r2
 80064dc:	2f78      	cmp	r7, #120	@ 0x78
 80064de:	4680      	mov	r8, r0
 80064e0:	460c      	mov	r4, r1
 80064e2:	469a      	mov	sl, r3
 80064e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064ea:	d807      	bhi.n	80064fc <_printf_i+0x28>
 80064ec:	2f62      	cmp	r7, #98	@ 0x62
 80064ee:	d80a      	bhi.n	8006506 <_printf_i+0x32>
 80064f0:	2f00      	cmp	r7, #0
 80064f2:	f000 80d3 	beq.w	800669c <_printf_i+0x1c8>
 80064f6:	2f58      	cmp	r7, #88	@ 0x58
 80064f8:	f000 80ba 	beq.w	8006670 <_printf_i+0x19c>
 80064fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006504:	e03a      	b.n	800657c <_printf_i+0xa8>
 8006506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800650a:	2b15      	cmp	r3, #21
 800650c:	d8f6      	bhi.n	80064fc <_printf_i+0x28>
 800650e:	a101      	add	r1, pc, #4	@ (adr r1, 8006514 <_printf_i+0x40>)
 8006510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006514:	0800656d 	.word	0x0800656d
 8006518:	08006581 	.word	0x08006581
 800651c:	080064fd 	.word	0x080064fd
 8006520:	080064fd 	.word	0x080064fd
 8006524:	080064fd 	.word	0x080064fd
 8006528:	080064fd 	.word	0x080064fd
 800652c:	08006581 	.word	0x08006581
 8006530:	080064fd 	.word	0x080064fd
 8006534:	080064fd 	.word	0x080064fd
 8006538:	080064fd 	.word	0x080064fd
 800653c:	080064fd 	.word	0x080064fd
 8006540:	08006683 	.word	0x08006683
 8006544:	080065ab 	.word	0x080065ab
 8006548:	0800663d 	.word	0x0800663d
 800654c:	080064fd 	.word	0x080064fd
 8006550:	080064fd 	.word	0x080064fd
 8006554:	080066a5 	.word	0x080066a5
 8006558:	080064fd 	.word	0x080064fd
 800655c:	080065ab 	.word	0x080065ab
 8006560:	080064fd 	.word	0x080064fd
 8006564:	080064fd 	.word	0x080064fd
 8006568:	08006645 	.word	0x08006645
 800656c:	6833      	ldr	r3, [r6, #0]
 800656e:	1d1a      	adds	r2, r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6032      	str	r2, [r6, #0]
 8006574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800657c:	2301      	movs	r3, #1
 800657e:	e09e      	b.n	80066be <_printf_i+0x1ea>
 8006580:	6833      	ldr	r3, [r6, #0]
 8006582:	6820      	ldr	r0, [r4, #0]
 8006584:	1d19      	adds	r1, r3, #4
 8006586:	6031      	str	r1, [r6, #0]
 8006588:	0606      	lsls	r6, r0, #24
 800658a:	d501      	bpl.n	8006590 <_printf_i+0xbc>
 800658c:	681d      	ldr	r5, [r3, #0]
 800658e:	e003      	b.n	8006598 <_printf_i+0xc4>
 8006590:	0645      	lsls	r5, r0, #25
 8006592:	d5fb      	bpl.n	800658c <_printf_i+0xb8>
 8006594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006598:	2d00      	cmp	r5, #0
 800659a:	da03      	bge.n	80065a4 <_printf_i+0xd0>
 800659c:	232d      	movs	r3, #45	@ 0x2d
 800659e:	426d      	negs	r5, r5
 80065a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065a4:	230a      	movs	r3, #10
 80065a6:	4859      	ldr	r0, [pc, #356]	@ (800670c <_printf_i+0x238>)
 80065a8:	e011      	b.n	80065ce <_printf_i+0xfa>
 80065aa:	6821      	ldr	r1, [r4, #0]
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	0608      	lsls	r0, r1, #24
 80065b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80065b4:	d402      	bmi.n	80065bc <_printf_i+0xe8>
 80065b6:	0649      	lsls	r1, r1, #25
 80065b8:	bf48      	it	mi
 80065ba:	b2ad      	uxthmi	r5, r5
 80065bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80065be:	6033      	str	r3, [r6, #0]
 80065c0:	bf14      	ite	ne
 80065c2:	230a      	movne	r3, #10
 80065c4:	2308      	moveq	r3, #8
 80065c6:	4851      	ldr	r0, [pc, #324]	@ (800670c <_printf_i+0x238>)
 80065c8:	2100      	movs	r1, #0
 80065ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065ce:	6866      	ldr	r6, [r4, #4]
 80065d0:	2e00      	cmp	r6, #0
 80065d2:	bfa8      	it	ge
 80065d4:	6821      	ldrge	r1, [r4, #0]
 80065d6:	60a6      	str	r6, [r4, #8]
 80065d8:	bfa4      	itt	ge
 80065da:	f021 0104 	bicge.w	r1, r1, #4
 80065de:	6021      	strge	r1, [r4, #0]
 80065e0:	b90d      	cbnz	r5, 80065e6 <_printf_i+0x112>
 80065e2:	2e00      	cmp	r6, #0
 80065e4:	d04b      	beq.n	800667e <_printf_i+0x1aa>
 80065e6:	4616      	mov	r6, r2
 80065e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80065ec:	fb03 5711 	mls	r7, r3, r1, r5
 80065f0:	5dc7      	ldrb	r7, [r0, r7]
 80065f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065f6:	462f      	mov	r7, r5
 80065f8:	42bb      	cmp	r3, r7
 80065fa:	460d      	mov	r5, r1
 80065fc:	d9f4      	bls.n	80065e8 <_printf_i+0x114>
 80065fe:	2b08      	cmp	r3, #8
 8006600:	d10b      	bne.n	800661a <_printf_i+0x146>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	07df      	lsls	r7, r3, #31
 8006606:	d508      	bpl.n	800661a <_printf_i+0x146>
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	6861      	ldr	r1, [r4, #4]
 800660c:	4299      	cmp	r1, r3
 800660e:	bfde      	ittt	le
 8006610:	2330      	movle	r3, #48	@ 0x30
 8006612:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006616:	f106 36ff 	addle.w	r6, r6, #4294967295
 800661a:	1b92      	subs	r2, r2, r6
 800661c:	6122      	str	r2, [r4, #16]
 800661e:	464b      	mov	r3, r9
 8006620:	4621      	mov	r1, r4
 8006622:	4640      	mov	r0, r8
 8006624:	f8cd a000 	str.w	sl, [sp]
 8006628:	aa03      	add	r2, sp, #12
 800662a:	f7ff fee1 	bl	80063f0 <_printf_common>
 800662e:	3001      	adds	r0, #1
 8006630:	d14a      	bne.n	80066c8 <_printf_i+0x1f4>
 8006632:	f04f 30ff 	mov.w	r0, #4294967295
 8006636:	b004      	add	sp, #16
 8006638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	f043 0320 	orr.w	r3, r3, #32
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	2778      	movs	r7, #120	@ 0x78
 8006646:	4832      	ldr	r0, [pc, #200]	@ (8006710 <_printf_i+0x23c>)
 8006648:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	6831      	ldr	r1, [r6, #0]
 8006650:	061f      	lsls	r7, r3, #24
 8006652:	f851 5b04 	ldr.w	r5, [r1], #4
 8006656:	d402      	bmi.n	800665e <_printf_i+0x18a>
 8006658:	065f      	lsls	r7, r3, #25
 800665a:	bf48      	it	mi
 800665c:	b2ad      	uxthmi	r5, r5
 800665e:	6031      	str	r1, [r6, #0]
 8006660:	07d9      	lsls	r1, r3, #31
 8006662:	bf44      	itt	mi
 8006664:	f043 0320 	orrmi.w	r3, r3, #32
 8006668:	6023      	strmi	r3, [r4, #0]
 800666a:	b11d      	cbz	r5, 8006674 <_printf_i+0x1a0>
 800666c:	2310      	movs	r3, #16
 800666e:	e7ab      	b.n	80065c8 <_printf_i+0xf4>
 8006670:	4826      	ldr	r0, [pc, #152]	@ (800670c <_printf_i+0x238>)
 8006672:	e7e9      	b.n	8006648 <_printf_i+0x174>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	f023 0320 	bic.w	r3, r3, #32
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	e7f6      	b.n	800666c <_printf_i+0x198>
 800667e:	4616      	mov	r6, r2
 8006680:	e7bd      	b.n	80065fe <_printf_i+0x12a>
 8006682:	6833      	ldr	r3, [r6, #0]
 8006684:	6825      	ldr	r5, [r4, #0]
 8006686:	1d18      	adds	r0, r3, #4
 8006688:	6961      	ldr	r1, [r4, #20]
 800668a:	6030      	str	r0, [r6, #0]
 800668c:	062e      	lsls	r6, r5, #24
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	d501      	bpl.n	8006696 <_printf_i+0x1c2>
 8006692:	6019      	str	r1, [r3, #0]
 8006694:	e002      	b.n	800669c <_printf_i+0x1c8>
 8006696:	0668      	lsls	r0, r5, #25
 8006698:	d5fb      	bpl.n	8006692 <_printf_i+0x1be>
 800669a:	8019      	strh	r1, [r3, #0]
 800669c:	2300      	movs	r3, #0
 800669e:	4616      	mov	r6, r2
 80066a0:	6123      	str	r3, [r4, #16]
 80066a2:	e7bc      	b.n	800661e <_printf_i+0x14a>
 80066a4:	6833      	ldr	r3, [r6, #0]
 80066a6:	2100      	movs	r1, #0
 80066a8:	1d1a      	adds	r2, r3, #4
 80066aa:	6032      	str	r2, [r6, #0]
 80066ac:	681e      	ldr	r6, [r3, #0]
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 fa17 	bl	8006ae4 <memchr>
 80066b6:	b108      	cbz	r0, 80066bc <_printf_i+0x1e8>
 80066b8:	1b80      	subs	r0, r0, r6
 80066ba:	6060      	str	r0, [r4, #4]
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	2300      	movs	r3, #0
 80066c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066c6:	e7aa      	b.n	800661e <_printf_i+0x14a>
 80066c8:	4632      	mov	r2, r6
 80066ca:	4649      	mov	r1, r9
 80066cc:	4640      	mov	r0, r8
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	47d0      	blx	sl
 80066d2:	3001      	adds	r0, #1
 80066d4:	d0ad      	beq.n	8006632 <_printf_i+0x15e>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	079b      	lsls	r3, r3, #30
 80066da:	d413      	bmi.n	8006704 <_printf_i+0x230>
 80066dc:	68e0      	ldr	r0, [r4, #12]
 80066de:	9b03      	ldr	r3, [sp, #12]
 80066e0:	4298      	cmp	r0, r3
 80066e2:	bfb8      	it	lt
 80066e4:	4618      	movlt	r0, r3
 80066e6:	e7a6      	b.n	8006636 <_printf_i+0x162>
 80066e8:	2301      	movs	r3, #1
 80066ea:	4632      	mov	r2, r6
 80066ec:	4649      	mov	r1, r9
 80066ee:	4640      	mov	r0, r8
 80066f0:	47d0      	blx	sl
 80066f2:	3001      	adds	r0, #1
 80066f4:	d09d      	beq.n	8006632 <_printf_i+0x15e>
 80066f6:	3501      	adds	r5, #1
 80066f8:	68e3      	ldr	r3, [r4, #12]
 80066fa:	9903      	ldr	r1, [sp, #12]
 80066fc:	1a5b      	subs	r3, r3, r1
 80066fe:	42ab      	cmp	r3, r5
 8006700:	dcf2      	bgt.n	80066e8 <_printf_i+0x214>
 8006702:	e7eb      	b.n	80066dc <_printf_i+0x208>
 8006704:	2500      	movs	r5, #0
 8006706:	f104 0619 	add.w	r6, r4, #25
 800670a:	e7f5      	b.n	80066f8 <_printf_i+0x224>
 800670c:	08006fcf 	.word	0x08006fcf
 8006710:	08006fe0 	.word	0x08006fe0

08006714 <_scanf_chars>:
 8006714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006718:	4615      	mov	r5, r2
 800671a:	688a      	ldr	r2, [r1, #8]
 800671c:	4680      	mov	r8, r0
 800671e:	460c      	mov	r4, r1
 8006720:	b932      	cbnz	r2, 8006730 <_scanf_chars+0x1c>
 8006722:	698a      	ldr	r2, [r1, #24]
 8006724:	2a00      	cmp	r2, #0
 8006726:	bf14      	ite	ne
 8006728:	f04f 32ff 	movne.w	r2, #4294967295
 800672c:	2201      	moveq	r2, #1
 800672e:	608a      	str	r2, [r1, #8]
 8006730:	2700      	movs	r7, #0
 8006732:	6822      	ldr	r2, [r4, #0]
 8006734:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80067c4 <_scanf_chars+0xb0>
 8006738:	06d1      	lsls	r1, r2, #27
 800673a:	bf5f      	itttt	pl
 800673c:	681a      	ldrpl	r2, [r3, #0]
 800673e:	1d11      	addpl	r1, r2, #4
 8006740:	6019      	strpl	r1, [r3, #0]
 8006742:	6816      	ldrpl	r6, [r2, #0]
 8006744:	69a0      	ldr	r0, [r4, #24]
 8006746:	b188      	cbz	r0, 800676c <_scanf_chars+0x58>
 8006748:	2801      	cmp	r0, #1
 800674a:	d107      	bne.n	800675c <_scanf_chars+0x48>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	6963      	ldr	r3, [r4, #20]
 8006752:	5c9b      	ldrb	r3, [r3, r2]
 8006754:	b953      	cbnz	r3, 800676c <_scanf_chars+0x58>
 8006756:	2f00      	cmp	r7, #0
 8006758:	d031      	beq.n	80067be <_scanf_chars+0xaa>
 800675a:	e022      	b.n	80067a2 <_scanf_chars+0x8e>
 800675c:	2802      	cmp	r0, #2
 800675e:	d120      	bne.n	80067a2 <_scanf_chars+0x8e>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006768:	071b      	lsls	r3, r3, #28
 800676a:	d41a      	bmi.n	80067a2 <_scanf_chars+0x8e>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	3701      	adds	r7, #1
 8006770:	06da      	lsls	r2, r3, #27
 8006772:	bf5e      	ittt	pl
 8006774:	682b      	ldrpl	r3, [r5, #0]
 8006776:	781b      	ldrbpl	r3, [r3, #0]
 8006778:	f806 3b01 	strbpl.w	r3, [r6], #1
 800677c:	682a      	ldr	r2, [r5, #0]
 800677e:	686b      	ldr	r3, [r5, #4]
 8006780:	3201      	adds	r2, #1
 8006782:	602a      	str	r2, [r5, #0]
 8006784:	68a2      	ldr	r2, [r4, #8]
 8006786:	3b01      	subs	r3, #1
 8006788:	3a01      	subs	r2, #1
 800678a:	606b      	str	r3, [r5, #4]
 800678c:	60a2      	str	r2, [r4, #8]
 800678e:	b142      	cbz	r2, 80067a2 <_scanf_chars+0x8e>
 8006790:	2b00      	cmp	r3, #0
 8006792:	dcd7      	bgt.n	8006744 <_scanf_chars+0x30>
 8006794:	4629      	mov	r1, r5
 8006796:	4640      	mov	r0, r8
 8006798:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800679c:	4798      	blx	r3
 800679e:	2800      	cmp	r0, #0
 80067a0:	d0d0      	beq.n	8006744 <_scanf_chars+0x30>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	f013 0310 	ands.w	r3, r3, #16
 80067a8:	d105      	bne.n	80067b6 <_scanf_chars+0xa2>
 80067aa:	68e2      	ldr	r2, [r4, #12]
 80067ac:	3201      	adds	r2, #1
 80067ae:	60e2      	str	r2, [r4, #12]
 80067b0:	69a2      	ldr	r2, [r4, #24]
 80067b2:	b102      	cbz	r2, 80067b6 <_scanf_chars+0xa2>
 80067b4:	7033      	strb	r3, [r6, #0]
 80067b6:	2000      	movs	r0, #0
 80067b8:	6923      	ldr	r3, [r4, #16]
 80067ba:	443b      	add	r3, r7
 80067bc:	6123      	str	r3, [r4, #16]
 80067be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c2:	bf00      	nop
 80067c4:	0800700d 	.word	0x0800700d

080067c8 <_scanf_i>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	460c      	mov	r4, r1
 80067ce:	4698      	mov	r8, r3
 80067d0:	4b72      	ldr	r3, [pc, #456]	@ (800699c <_scanf_i+0x1d4>)
 80067d2:	b087      	sub	sp, #28
 80067d4:	4682      	mov	sl, r0
 80067d6:	4616      	mov	r6, r2
 80067d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067dc:	ab03      	add	r3, sp, #12
 80067de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80067e2:	4b6f      	ldr	r3, [pc, #444]	@ (80069a0 <_scanf_i+0x1d8>)
 80067e4:	69a1      	ldr	r1, [r4, #24]
 80067e6:	4a6f      	ldr	r2, [pc, #444]	@ (80069a4 <_scanf_i+0x1dc>)
 80067e8:	4627      	mov	r7, r4
 80067ea:	2903      	cmp	r1, #3
 80067ec:	bf08      	it	eq
 80067ee:	461a      	moveq	r2, r3
 80067f0:	68a3      	ldr	r3, [r4, #8]
 80067f2:	9201      	str	r2, [sp, #4]
 80067f4:	1e5a      	subs	r2, r3, #1
 80067f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80067fa:	bf81      	itttt	hi
 80067fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006800:	eb03 0905 	addhi.w	r9, r3, r5
 8006804:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006808:	60a3      	strhi	r3, [r4, #8]
 800680a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800680e:	bf98      	it	ls
 8006810:	f04f 0900 	movls.w	r9, #0
 8006814:	463d      	mov	r5, r7
 8006816:	f04f 0b00 	mov.w	fp, #0
 800681a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	6831      	ldr	r1, [r6, #0]
 8006822:	ab03      	add	r3, sp, #12
 8006824:	2202      	movs	r2, #2
 8006826:	7809      	ldrb	r1, [r1, #0]
 8006828:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800682c:	f000 f95a 	bl	8006ae4 <memchr>
 8006830:	b328      	cbz	r0, 800687e <_scanf_i+0xb6>
 8006832:	f1bb 0f01 	cmp.w	fp, #1
 8006836:	d159      	bne.n	80068ec <_scanf_i+0x124>
 8006838:	6862      	ldr	r2, [r4, #4]
 800683a:	b92a      	cbnz	r2, 8006848 <_scanf_i+0x80>
 800683c:	2108      	movs	r1, #8
 800683e:	6822      	ldr	r2, [r4, #0]
 8006840:	6061      	str	r1, [r4, #4]
 8006842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006846:	6022      	str	r2, [r4, #0]
 8006848:	6822      	ldr	r2, [r4, #0]
 800684a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800684e:	6022      	str	r2, [r4, #0]
 8006850:	68a2      	ldr	r2, [r4, #8]
 8006852:	1e51      	subs	r1, r2, #1
 8006854:	60a1      	str	r1, [r4, #8]
 8006856:	b192      	cbz	r2, 800687e <_scanf_i+0xb6>
 8006858:	6832      	ldr	r2, [r6, #0]
 800685a:	1c51      	adds	r1, r2, #1
 800685c:	6031      	str	r1, [r6, #0]
 800685e:	7812      	ldrb	r2, [r2, #0]
 8006860:	f805 2b01 	strb.w	r2, [r5], #1
 8006864:	6872      	ldr	r2, [r6, #4]
 8006866:	3a01      	subs	r2, #1
 8006868:	2a00      	cmp	r2, #0
 800686a:	6072      	str	r2, [r6, #4]
 800686c:	dc07      	bgt.n	800687e <_scanf_i+0xb6>
 800686e:	4631      	mov	r1, r6
 8006870:	4650      	mov	r0, sl
 8006872:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006876:	4790      	blx	r2
 8006878:	2800      	cmp	r0, #0
 800687a:	f040 8085 	bne.w	8006988 <_scanf_i+0x1c0>
 800687e:	f10b 0b01 	add.w	fp, fp, #1
 8006882:	f1bb 0f03 	cmp.w	fp, #3
 8006886:	d1cb      	bne.n	8006820 <_scanf_i+0x58>
 8006888:	6863      	ldr	r3, [r4, #4]
 800688a:	b90b      	cbnz	r3, 8006890 <_scanf_i+0xc8>
 800688c:	230a      	movs	r3, #10
 800688e:	6063      	str	r3, [r4, #4]
 8006890:	6863      	ldr	r3, [r4, #4]
 8006892:	4945      	ldr	r1, [pc, #276]	@ (80069a8 <_scanf_i+0x1e0>)
 8006894:	6960      	ldr	r0, [r4, #20]
 8006896:	1ac9      	subs	r1, r1, r3
 8006898:	f000 f888 	bl	80069ac <__sccl>
 800689c:	f04f 0b00 	mov.w	fp, #0
 80068a0:	68a3      	ldr	r3, [r4, #8]
 80068a2:	6822      	ldr	r2, [r4, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d03d      	beq.n	8006924 <_scanf_i+0x15c>
 80068a8:	6831      	ldr	r1, [r6, #0]
 80068aa:	6960      	ldr	r0, [r4, #20]
 80068ac:	f891 c000 	ldrb.w	ip, [r1]
 80068b0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d035      	beq.n	8006924 <_scanf_i+0x15c>
 80068b8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80068bc:	d124      	bne.n	8006908 <_scanf_i+0x140>
 80068be:	0510      	lsls	r0, r2, #20
 80068c0:	d522      	bpl.n	8006908 <_scanf_i+0x140>
 80068c2:	f10b 0b01 	add.w	fp, fp, #1
 80068c6:	f1b9 0f00 	cmp.w	r9, #0
 80068ca:	d003      	beq.n	80068d4 <_scanf_i+0x10c>
 80068cc:	3301      	adds	r3, #1
 80068ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80068d2:	60a3      	str	r3, [r4, #8]
 80068d4:	6873      	ldr	r3, [r6, #4]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	6073      	str	r3, [r6, #4]
 80068dc:	dd1b      	ble.n	8006916 <_scanf_i+0x14e>
 80068de:	6833      	ldr	r3, [r6, #0]
 80068e0:	3301      	adds	r3, #1
 80068e2:	6033      	str	r3, [r6, #0]
 80068e4:	68a3      	ldr	r3, [r4, #8]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	60a3      	str	r3, [r4, #8]
 80068ea:	e7d9      	b.n	80068a0 <_scanf_i+0xd8>
 80068ec:	f1bb 0f02 	cmp.w	fp, #2
 80068f0:	d1ae      	bne.n	8006850 <_scanf_i+0x88>
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80068f8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80068fc:	d1bf      	bne.n	800687e <_scanf_i+0xb6>
 80068fe:	2110      	movs	r1, #16
 8006900:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006904:	6061      	str	r1, [r4, #4]
 8006906:	e7a2      	b.n	800684e <_scanf_i+0x86>
 8006908:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800690c:	6022      	str	r2, [r4, #0]
 800690e:	780b      	ldrb	r3, [r1, #0]
 8006910:	f805 3b01 	strb.w	r3, [r5], #1
 8006914:	e7de      	b.n	80068d4 <_scanf_i+0x10c>
 8006916:	4631      	mov	r1, r6
 8006918:	4650      	mov	r0, sl
 800691a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800691e:	4798      	blx	r3
 8006920:	2800      	cmp	r0, #0
 8006922:	d0df      	beq.n	80068e4 <_scanf_i+0x11c>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	05d9      	lsls	r1, r3, #23
 8006928:	d50d      	bpl.n	8006946 <_scanf_i+0x17e>
 800692a:	42bd      	cmp	r5, r7
 800692c:	d909      	bls.n	8006942 <_scanf_i+0x17a>
 800692e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006932:	4632      	mov	r2, r6
 8006934:	4650      	mov	r0, sl
 8006936:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800693a:	f105 39ff 	add.w	r9, r5, #4294967295
 800693e:	4798      	blx	r3
 8006940:	464d      	mov	r5, r9
 8006942:	42bd      	cmp	r5, r7
 8006944:	d028      	beq.n	8006998 <_scanf_i+0x1d0>
 8006946:	6822      	ldr	r2, [r4, #0]
 8006948:	f012 0210 	ands.w	r2, r2, #16
 800694c:	d113      	bne.n	8006976 <_scanf_i+0x1ae>
 800694e:	702a      	strb	r2, [r5, #0]
 8006950:	4639      	mov	r1, r7
 8006952:	6863      	ldr	r3, [r4, #4]
 8006954:	4650      	mov	r0, sl
 8006956:	9e01      	ldr	r6, [sp, #4]
 8006958:	47b0      	blx	r6
 800695a:	f8d8 3000 	ldr.w	r3, [r8]
 800695e:	6821      	ldr	r1, [r4, #0]
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	f8c8 2000 	str.w	r2, [r8]
 8006966:	f011 0f20 	tst.w	r1, #32
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	d00f      	beq.n	800698e <_scanf_i+0x1c6>
 800696e:	6018      	str	r0, [r3, #0]
 8006970:	68e3      	ldr	r3, [r4, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	60e3      	str	r3, [r4, #12]
 8006976:	2000      	movs	r0, #0
 8006978:	6923      	ldr	r3, [r4, #16]
 800697a:	1bed      	subs	r5, r5, r7
 800697c:	445d      	add	r5, fp
 800697e:	442b      	add	r3, r5
 8006980:	6123      	str	r3, [r4, #16]
 8006982:	b007      	add	sp, #28
 8006984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006988:	f04f 0b00 	mov.w	fp, #0
 800698c:	e7ca      	b.n	8006924 <_scanf_i+0x15c>
 800698e:	07ca      	lsls	r2, r1, #31
 8006990:	bf4c      	ite	mi
 8006992:	8018      	strhmi	r0, [r3, #0]
 8006994:	6018      	strpl	r0, [r3, #0]
 8006996:	e7eb      	b.n	8006970 <_scanf_i+0x1a8>
 8006998:	2001      	movs	r0, #1
 800699a:	e7f2      	b.n	8006982 <_scanf_i+0x1ba>
 800699c:	08006f68 	.word	0x08006f68
 80069a0:	08006c51 	.word	0x08006c51
 80069a4:	08006d31 	.word	0x08006d31
 80069a8:	08007001 	.word	0x08007001

080069ac <__sccl>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	780b      	ldrb	r3, [r1, #0]
 80069b0:	4604      	mov	r4, r0
 80069b2:	2b5e      	cmp	r3, #94	@ 0x5e
 80069b4:	bf0b      	itete	eq
 80069b6:	784b      	ldrbeq	r3, [r1, #1]
 80069b8:	1c4a      	addne	r2, r1, #1
 80069ba:	1c8a      	addeq	r2, r1, #2
 80069bc:	2100      	movne	r1, #0
 80069be:	bf08      	it	eq
 80069c0:	2101      	moveq	r1, #1
 80069c2:	3801      	subs	r0, #1
 80069c4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80069c8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80069cc:	42a8      	cmp	r0, r5
 80069ce:	d1fb      	bne.n	80069c8 <__sccl+0x1c>
 80069d0:	b90b      	cbnz	r3, 80069d6 <__sccl+0x2a>
 80069d2:	1e50      	subs	r0, r2, #1
 80069d4:	bd70      	pop	{r4, r5, r6, pc}
 80069d6:	f081 0101 	eor.w	r1, r1, #1
 80069da:	4610      	mov	r0, r2
 80069dc:	54e1      	strb	r1, [r4, r3]
 80069de:	4602      	mov	r2, r0
 80069e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80069e4:	2d2d      	cmp	r5, #45	@ 0x2d
 80069e6:	d005      	beq.n	80069f4 <__sccl+0x48>
 80069e8:	2d5d      	cmp	r5, #93	@ 0x5d
 80069ea:	d016      	beq.n	8006a1a <__sccl+0x6e>
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	d0f1      	beq.n	80069d4 <__sccl+0x28>
 80069f0:	462b      	mov	r3, r5
 80069f2:	e7f2      	b.n	80069da <__sccl+0x2e>
 80069f4:	7846      	ldrb	r6, [r0, #1]
 80069f6:	2e5d      	cmp	r6, #93	@ 0x5d
 80069f8:	d0fa      	beq.n	80069f0 <__sccl+0x44>
 80069fa:	42b3      	cmp	r3, r6
 80069fc:	dcf8      	bgt.n	80069f0 <__sccl+0x44>
 80069fe:	461a      	mov	r2, r3
 8006a00:	3002      	adds	r0, #2
 8006a02:	3201      	adds	r2, #1
 8006a04:	4296      	cmp	r6, r2
 8006a06:	54a1      	strb	r1, [r4, r2]
 8006a08:	dcfb      	bgt.n	8006a02 <__sccl+0x56>
 8006a0a:	1af2      	subs	r2, r6, r3
 8006a0c:	3a01      	subs	r2, #1
 8006a0e:	42b3      	cmp	r3, r6
 8006a10:	bfa8      	it	ge
 8006a12:	2200      	movge	r2, #0
 8006a14:	1c5d      	adds	r5, r3, #1
 8006a16:	18ab      	adds	r3, r5, r2
 8006a18:	e7e1      	b.n	80069de <__sccl+0x32>
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	e7da      	b.n	80069d4 <__sccl+0x28>

08006a1e <__submore>:
 8006a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a22:	460c      	mov	r4, r1
 8006a24:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006a26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a2a:	4299      	cmp	r1, r3
 8006a2c:	d11b      	bne.n	8006a66 <__submore+0x48>
 8006a2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006a32:	f7ff f92f 	bl	8005c94 <_malloc_r>
 8006a36:	b918      	cbnz	r0, 8006a40 <__submore+0x22>
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a44:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006a46:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006a4a:	6360      	str	r0, [r4, #52]	@ 0x34
 8006a4c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006a50:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006a54:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006a58:	7043      	strb	r3, [r0, #1]
 8006a5a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006a5e:	7003      	strb	r3, [r0, #0]
 8006a60:	6020      	str	r0, [r4, #0]
 8006a62:	2000      	movs	r0, #0
 8006a64:	e7ea      	b.n	8006a3c <__submore+0x1e>
 8006a66:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006a68:	0077      	lsls	r7, r6, #1
 8006a6a:	463a      	mov	r2, r7
 8006a6c:	f000 f848 	bl	8006b00 <_realloc_r>
 8006a70:	4605      	mov	r5, r0
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d0e0      	beq.n	8006a38 <__submore+0x1a>
 8006a76:	eb00 0806 	add.w	r8, r0, r6
 8006a7a:	4601      	mov	r1, r0
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	4640      	mov	r0, r8
 8006a80:	f7ff f890 	bl	8005ba4 <memcpy>
 8006a84:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006a88:	f8c4 8000 	str.w	r8, [r4]
 8006a8c:	e7e9      	b.n	8006a62 <__submore+0x44>

08006a8e <memmove>:
 8006a8e:	4288      	cmp	r0, r1
 8006a90:	b510      	push	{r4, lr}
 8006a92:	eb01 0402 	add.w	r4, r1, r2
 8006a96:	d902      	bls.n	8006a9e <memmove+0x10>
 8006a98:	4284      	cmp	r4, r0
 8006a9a:	4623      	mov	r3, r4
 8006a9c:	d807      	bhi.n	8006aae <memmove+0x20>
 8006a9e:	1e43      	subs	r3, r0, #1
 8006aa0:	42a1      	cmp	r1, r4
 8006aa2:	d008      	beq.n	8006ab6 <memmove+0x28>
 8006aa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aa8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006aac:	e7f8      	b.n	8006aa0 <memmove+0x12>
 8006aae:	4601      	mov	r1, r0
 8006ab0:	4402      	add	r2, r0
 8006ab2:	428a      	cmp	r2, r1
 8006ab4:	d100      	bne.n	8006ab8 <memmove+0x2a>
 8006ab6:	bd10      	pop	{r4, pc}
 8006ab8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006abc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ac0:	e7f7      	b.n	8006ab2 <memmove+0x24>
	...

08006ac4 <_sbrk_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	4d05      	ldr	r5, [pc, #20]	@ (8006ae0 <_sbrk_r+0x1c>)
 8006aca:	4604      	mov	r4, r0
 8006acc:	4608      	mov	r0, r1
 8006ace:	602b      	str	r3, [r5, #0]
 8006ad0:	f7fb fcf0 	bl	80024b4 <_sbrk>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_sbrk_r+0x1a>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_sbrk_r+0x1a>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	200018a8 	.word	0x200018a8

08006ae4 <memchr>:
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	b2c9      	uxtb	r1, r1
 8006aea:	4402      	add	r2, r0
 8006aec:	4293      	cmp	r3, r2
 8006aee:	4618      	mov	r0, r3
 8006af0:	d101      	bne.n	8006af6 <memchr+0x12>
 8006af2:	2000      	movs	r0, #0
 8006af4:	e003      	b.n	8006afe <memchr+0x1a>
 8006af6:	7804      	ldrb	r4, [r0, #0]
 8006af8:	3301      	adds	r3, #1
 8006afa:	428c      	cmp	r4, r1
 8006afc:	d1f6      	bne.n	8006aec <memchr+0x8>
 8006afe:	bd10      	pop	{r4, pc}

08006b00 <_realloc_r>:
 8006b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b04:	4680      	mov	r8, r0
 8006b06:	4615      	mov	r5, r2
 8006b08:	460c      	mov	r4, r1
 8006b0a:	b921      	cbnz	r1, 8006b16 <_realloc_r+0x16>
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b12:	f7ff b8bf 	b.w	8005c94 <_malloc_r>
 8006b16:	b92a      	cbnz	r2, 8006b24 <_realloc_r+0x24>
 8006b18:	f7ff f852 	bl	8005bc0 <_free_r>
 8006b1c:	2400      	movs	r4, #0
 8006b1e:	4620      	mov	r0, r4
 8006b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b24:	f000 f906 	bl	8006d34 <_malloc_usable_size_r>
 8006b28:	4285      	cmp	r5, r0
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	d802      	bhi.n	8006b34 <_realloc_r+0x34>
 8006b2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b32:	d8f4      	bhi.n	8006b1e <_realloc_r+0x1e>
 8006b34:	4629      	mov	r1, r5
 8006b36:	4640      	mov	r0, r8
 8006b38:	f7ff f8ac 	bl	8005c94 <_malloc_r>
 8006b3c:	4607      	mov	r7, r0
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d0ec      	beq.n	8006b1c <_realloc_r+0x1c>
 8006b42:	42b5      	cmp	r5, r6
 8006b44:	462a      	mov	r2, r5
 8006b46:	4621      	mov	r1, r4
 8006b48:	bf28      	it	cs
 8006b4a:	4632      	movcs	r2, r6
 8006b4c:	f7ff f82a 	bl	8005ba4 <memcpy>
 8006b50:	4621      	mov	r1, r4
 8006b52:	4640      	mov	r0, r8
 8006b54:	f7ff f834 	bl	8005bc0 <_free_r>
 8006b58:	463c      	mov	r4, r7
 8006b5a:	e7e0      	b.n	8006b1e <_realloc_r+0x1e>

08006b5c <_strtol_l.constprop.0>:
 8006b5c:	2b24      	cmp	r3, #36	@ 0x24
 8006b5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b62:	4686      	mov	lr, r0
 8006b64:	4690      	mov	r8, r2
 8006b66:	d801      	bhi.n	8006b6c <_strtol_l.constprop.0+0x10>
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d106      	bne.n	8006b7a <_strtol_l.constprop.0+0x1e>
 8006b6c:	f7fe ffee 	bl	8005b4c <__errno>
 8006b70:	2316      	movs	r3, #22
 8006b72:	6003      	str	r3, [r0, #0]
 8006b74:	2000      	movs	r0, #0
 8006b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	4833      	ldr	r0, [pc, #204]	@ (8006c4c <_strtol_l.constprop.0+0xf0>)
 8006b7e:	462a      	mov	r2, r5
 8006b80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b84:	5d06      	ldrb	r6, [r0, r4]
 8006b86:	f016 0608 	ands.w	r6, r6, #8
 8006b8a:	d1f8      	bne.n	8006b7e <_strtol_l.constprop.0+0x22>
 8006b8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006b8e:	d12d      	bne.n	8006bec <_strtol_l.constprop.0+0x90>
 8006b90:	2601      	movs	r6, #1
 8006b92:	782c      	ldrb	r4, [r5, #0]
 8006b94:	1c95      	adds	r5, r2, #2
 8006b96:	f033 0210 	bics.w	r2, r3, #16
 8006b9a:	d109      	bne.n	8006bb0 <_strtol_l.constprop.0+0x54>
 8006b9c:	2c30      	cmp	r4, #48	@ 0x30
 8006b9e:	d12a      	bne.n	8006bf6 <_strtol_l.constprop.0+0x9a>
 8006ba0:	782a      	ldrb	r2, [r5, #0]
 8006ba2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ba6:	2a58      	cmp	r2, #88	@ 0x58
 8006ba8:	d125      	bne.n	8006bf6 <_strtol_l.constprop.0+0x9a>
 8006baa:	2310      	movs	r3, #16
 8006bac:	786c      	ldrb	r4, [r5, #1]
 8006bae:	3502      	adds	r5, #2
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006bb6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006bba:	fbbc f9f3 	udiv	r9, ip, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	fb03 ca19 	mls	sl, r3, r9, ip
 8006bc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006bc8:	2f09      	cmp	r7, #9
 8006bca:	d81b      	bhi.n	8006c04 <_strtol_l.constprop.0+0xa8>
 8006bcc:	463c      	mov	r4, r7
 8006bce:	42a3      	cmp	r3, r4
 8006bd0:	dd27      	ble.n	8006c22 <_strtol_l.constprop.0+0xc6>
 8006bd2:	1c57      	adds	r7, r2, #1
 8006bd4:	d007      	beq.n	8006be6 <_strtol_l.constprop.0+0x8a>
 8006bd6:	4581      	cmp	r9, r0
 8006bd8:	d320      	bcc.n	8006c1c <_strtol_l.constprop.0+0xc0>
 8006bda:	d101      	bne.n	8006be0 <_strtol_l.constprop.0+0x84>
 8006bdc:	45a2      	cmp	sl, r4
 8006bde:	db1d      	blt.n	8006c1c <_strtol_l.constprop.0+0xc0>
 8006be0:	2201      	movs	r2, #1
 8006be2:	fb00 4003 	mla	r0, r0, r3, r4
 8006be6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bea:	e7eb      	b.n	8006bc4 <_strtol_l.constprop.0+0x68>
 8006bec:	2c2b      	cmp	r4, #43	@ 0x2b
 8006bee:	bf04      	itt	eq
 8006bf0:	782c      	ldrbeq	r4, [r5, #0]
 8006bf2:	1c95      	addeq	r5, r2, #2
 8006bf4:	e7cf      	b.n	8006b96 <_strtol_l.constprop.0+0x3a>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1da      	bne.n	8006bb0 <_strtol_l.constprop.0+0x54>
 8006bfa:	2c30      	cmp	r4, #48	@ 0x30
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2308      	moveq	r3, #8
 8006c00:	230a      	movne	r3, #10
 8006c02:	e7d5      	b.n	8006bb0 <_strtol_l.constprop.0+0x54>
 8006c04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006c08:	2f19      	cmp	r7, #25
 8006c0a:	d801      	bhi.n	8006c10 <_strtol_l.constprop.0+0xb4>
 8006c0c:	3c37      	subs	r4, #55	@ 0x37
 8006c0e:	e7de      	b.n	8006bce <_strtol_l.constprop.0+0x72>
 8006c10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006c14:	2f19      	cmp	r7, #25
 8006c16:	d804      	bhi.n	8006c22 <_strtol_l.constprop.0+0xc6>
 8006c18:	3c57      	subs	r4, #87	@ 0x57
 8006c1a:	e7d8      	b.n	8006bce <_strtol_l.constprop.0+0x72>
 8006c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c20:	e7e1      	b.n	8006be6 <_strtol_l.constprop.0+0x8a>
 8006c22:	1c53      	adds	r3, r2, #1
 8006c24:	d108      	bne.n	8006c38 <_strtol_l.constprop.0+0xdc>
 8006c26:	2322      	movs	r3, #34	@ 0x22
 8006c28:	4660      	mov	r0, ip
 8006c2a:	f8ce 3000 	str.w	r3, [lr]
 8006c2e:	f1b8 0f00 	cmp.w	r8, #0
 8006c32:	d0a0      	beq.n	8006b76 <_strtol_l.constprop.0+0x1a>
 8006c34:	1e69      	subs	r1, r5, #1
 8006c36:	e006      	b.n	8006c46 <_strtol_l.constprop.0+0xea>
 8006c38:	b106      	cbz	r6, 8006c3c <_strtol_l.constprop.0+0xe0>
 8006c3a:	4240      	negs	r0, r0
 8006c3c:	f1b8 0f00 	cmp.w	r8, #0
 8006c40:	d099      	beq.n	8006b76 <_strtol_l.constprop.0+0x1a>
 8006c42:	2a00      	cmp	r2, #0
 8006c44:	d1f6      	bne.n	8006c34 <_strtol_l.constprop.0+0xd8>
 8006c46:	f8c8 1000 	str.w	r1, [r8]
 8006c4a:	e794      	b.n	8006b76 <_strtol_l.constprop.0+0x1a>
 8006c4c:	0800700d 	.word	0x0800700d

08006c50 <_strtol_r>:
 8006c50:	f7ff bf84 	b.w	8006b5c <_strtol_l.constprop.0>

08006c54 <_strtoul_l.constprop.0>:
 8006c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c58:	4686      	mov	lr, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	4e33      	ldr	r6, [pc, #204]	@ (8006d2c <_strtoul_l.constprop.0+0xd8>)
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c64:	5d37      	ldrb	r7, [r6, r4]
 8006c66:	f017 0708 	ands.w	r7, r7, #8
 8006c6a:	d1f8      	bne.n	8006c5e <_strtoul_l.constprop.0+0xa>
 8006c6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006c6e:	d12f      	bne.n	8006cd0 <_strtoul_l.constprop.0+0x7c>
 8006c70:	2701      	movs	r7, #1
 8006c72:	782c      	ldrb	r4, [r5, #0]
 8006c74:	1c85      	adds	r5, r0, #2
 8006c76:	f033 0010 	bics.w	r0, r3, #16
 8006c7a:	d109      	bne.n	8006c90 <_strtoul_l.constprop.0+0x3c>
 8006c7c:	2c30      	cmp	r4, #48	@ 0x30
 8006c7e:	d12c      	bne.n	8006cda <_strtoul_l.constprop.0+0x86>
 8006c80:	7828      	ldrb	r0, [r5, #0]
 8006c82:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006c86:	2858      	cmp	r0, #88	@ 0x58
 8006c88:	d127      	bne.n	8006cda <_strtoul_l.constprop.0+0x86>
 8006c8a:	2310      	movs	r3, #16
 8006c8c:	786c      	ldrb	r4, [r5, #1]
 8006c8e:	3502      	adds	r5, #2
 8006c90:	f04f 38ff 	mov.w	r8, #4294967295
 8006c94:	fbb8 f8f3 	udiv	r8, r8, r3
 8006c98:	2600      	movs	r6, #0
 8006c9a:	fb03 f908 	mul.w	r9, r3, r8
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	ea6f 0909 	mvn.w	r9, r9
 8006ca4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006ca8:	f1bc 0f09 	cmp.w	ip, #9
 8006cac:	d81c      	bhi.n	8006ce8 <_strtoul_l.constprop.0+0x94>
 8006cae:	4664      	mov	r4, ip
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	dd2a      	ble.n	8006d0a <_strtoul_l.constprop.0+0xb6>
 8006cb4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006cb8:	d007      	beq.n	8006cca <_strtoul_l.constprop.0+0x76>
 8006cba:	4580      	cmp	r8, r0
 8006cbc:	d322      	bcc.n	8006d04 <_strtoul_l.constprop.0+0xb0>
 8006cbe:	d101      	bne.n	8006cc4 <_strtoul_l.constprop.0+0x70>
 8006cc0:	45a1      	cmp	r9, r4
 8006cc2:	db1f      	blt.n	8006d04 <_strtoul_l.constprop.0+0xb0>
 8006cc4:	2601      	movs	r6, #1
 8006cc6:	fb00 4003 	mla	r0, r0, r3, r4
 8006cca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cce:	e7e9      	b.n	8006ca4 <_strtoul_l.constprop.0+0x50>
 8006cd0:	2c2b      	cmp	r4, #43	@ 0x2b
 8006cd2:	bf04      	itt	eq
 8006cd4:	782c      	ldrbeq	r4, [r5, #0]
 8006cd6:	1c85      	addeq	r5, r0, #2
 8006cd8:	e7cd      	b.n	8006c76 <_strtoul_l.constprop.0+0x22>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1d8      	bne.n	8006c90 <_strtoul_l.constprop.0+0x3c>
 8006cde:	2c30      	cmp	r4, #48	@ 0x30
 8006ce0:	bf0c      	ite	eq
 8006ce2:	2308      	moveq	r3, #8
 8006ce4:	230a      	movne	r3, #10
 8006ce6:	e7d3      	b.n	8006c90 <_strtoul_l.constprop.0+0x3c>
 8006ce8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006cec:	f1bc 0f19 	cmp.w	ip, #25
 8006cf0:	d801      	bhi.n	8006cf6 <_strtoul_l.constprop.0+0xa2>
 8006cf2:	3c37      	subs	r4, #55	@ 0x37
 8006cf4:	e7dc      	b.n	8006cb0 <_strtoul_l.constprop.0+0x5c>
 8006cf6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006cfa:	f1bc 0f19 	cmp.w	ip, #25
 8006cfe:	d804      	bhi.n	8006d0a <_strtoul_l.constprop.0+0xb6>
 8006d00:	3c57      	subs	r4, #87	@ 0x57
 8006d02:	e7d5      	b.n	8006cb0 <_strtoul_l.constprop.0+0x5c>
 8006d04:	f04f 36ff 	mov.w	r6, #4294967295
 8006d08:	e7df      	b.n	8006cca <_strtoul_l.constprop.0+0x76>
 8006d0a:	1c73      	adds	r3, r6, #1
 8006d0c:	d106      	bne.n	8006d1c <_strtoul_l.constprop.0+0xc8>
 8006d0e:	2322      	movs	r3, #34	@ 0x22
 8006d10:	4630      	mov	r0, r6
 8006d12:	f8ce 3000 	str.w	r3, [lr]
 8006d16:	b932      	cbnz	r2, 8006d26 <_strtoul_l.constprop.0+0xd2>
 8006d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d1c:	b107      	cbz	r7, 8006d20 <_strtoul_l.constprop.0+0xcc>
 8006d1e:	4240      	negs	r0, r0
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d0f9      	beq.n	8006d18 <_strtoul_l.constprop.0+0xc4>
 8006d24:	b106      	cbz	r6, 8006d28 <_strtoul_l.constprop.0+0xd4>
 8006d26:	1e69      	subs	r1, r5, #1
 8006d28:	6011      	str	r1, [r2, #0]
 8006d2a:	e7f5      	b.n	8006d18 <_strtoul_l.constprop.0+0xc4>
 8006d2c:	0800700d 	.word	0x0800700d

08006d30 <_strtoul_r>:
 8006d30:	f7ff bf90 	b.w	8006c54 <_strtoul_l.constprop.0>

08006d34 <_malloc_usable_size_r>:
 8006d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d38:	1f18      	subs	r0, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bfbc      	itt	lt
 8006d3e:	580b      	ldrlt	r3, [r1, r0]
 8006d40:	18c0      	addlt	r0, r0, r3
 8006d42:	4770      	bx	lr

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
