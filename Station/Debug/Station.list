
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007ef0  08007ef0  00008ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008358  08008358  0000a0e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008358  08008358  00009358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008360  08008360  0000a0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008360  08008360  00009360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008364  08008364  00009364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  08008368  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb0  200000e0  08008448  0000a0e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002090  08008448  0000b090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef7e  00000000  00000000  0000a109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a25  00000000  00000000  00019087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0001bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a53  00000000  00000000  0001c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190f9  00000000  00000000  0001d273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cae  00000000  00000000  0003636c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ff4  00000000  00000000  0004a01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d200e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004028  00000000  00000000  000d2054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000d607c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e0 	.word	0x200000e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ed8 	.word	0x08007ed8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e4 	.word	0x200000e4
 800014c:	08007ed8 	.word	0x08007ed8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	@ 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	@ 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	@ 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	@ 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2iz>:
 8000e58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e60:	d30f      	bcc.n	8000e82 <__aeabi_f2iz+0x2a>
 8000e62:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d90d      	bls.n	8000e88 <__aeabi_f2iz+0x30>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e74:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e78:	fa23 f002 	lsr.w	r0, r3, r2
 8000e7c:	bf18      	it	ne
 8000e7e:	4240      	negne	r0, r0
 8000e80:	4770      	bx	lr
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	4770      	bx	lr
 8000e88:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_f2iz+0x3a>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d105      	bne.n	8000e9e <__aeabi_f2iz+0x46>
 8000e92:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e96:	bf08      	it	eq
 8000e98:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f04f 0000 	mov.w	r0, #0
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b968 	b.w	800118c <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f806 	bl	8000ed4 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__udivmoddi4>:
 8000ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed8:	9d08      	ldr	r5, [sp, #32]
 8000eda:	460c      	mov	r4, r1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d14e      	bne.n	8000f7e <__udivmoddi4+0xaa>
 8000ee0:	4694      	mov	ip, r2
 8000ee2:	458c      	cmp	ip, r1
 8000ee4:	4686      	mov	lr, r0
 8000ee6:	fab2 f282 	clz	r2, r2
 8000eea:	d962      	bls.n	8000fb2 <__udivmoddi4+0xde>
 8000eec:	b14a      	cbz	r2, 8000f02 <__udivmoddi4+0x2e>
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	4091      	lsls	r1, r2
 8000ef4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	4319      	orrs	r1, r3
 8000efe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f0a:	fb07 1114 	mls	r1, r7, r4, r1
 8000f0e:	fa1f f68c 	uxth.w	r6, ip
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb04 f106 	mul.w	r1, r4, r6
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d90a      	bls.n	8000f38 <__udivmoddi4+0x64>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f2a:	f080 8110 	bcs.w	800114e <__udivmoddi4+0x27a>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 810d 	bls.w	800114e <__udivmoddi4+0x27a>
 8000f34:	3c02      	subs	r4, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a59      	subs	r1, r3, r1
 8000f3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000f42:	fb00 f606 	mul.w	r6, r0, r6
 8000f46:	fa1f f38e 	uxth.w	r3, lr
 8000f4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	d90a      	bls.n	8000f68 <__udivmoddi4+0x94>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f5a:	f080 80fa 	bcs.w	8001152 <__udivmoddi4+0x27e>
 8000f5e:	429e      	cmp	r6, r3
 8000f60:	f240 80f7 	bls.w	8001152 <__udivmoddi4+0x27e>
 8000f64:	4463      	add	r3, ip
 8000f66:	3802      	subs	r0, #2
 8000f68:	2100      	movs	r1, #0
 8000f6a:	1b9b      	subs	r3, r3, r6
 8000f6c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f70:	b11d      	cbz	r5, 8000f7a <__udivmoddi4+0xa6>
 8000f72:	40d3      	lsrs	r3, r2
 8000f74:	2200      	movs	r2, #0
 8000f76:	e9c5 3200 	strd	r3, r2, [r5]
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d905      	bls.n	8000f8e <__udivmoddi4+0xba>
 8000f82:	b10d      	cbz	r5, 8000f88 <__udivmoddi4+0xb4>
 8000f84:	e9c5 0100 	strd	r0, r1, [r5]
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e7f5      	b.n	8000f7a <__udivmoddi4+0xa6>
 8000f8e:	fab3 f183 	clz	r1, r3
 8000f92:	2900      	cmp	r1, #0
 8000f94:	d146      	bne.n	8001024 <__udivmoddi4+0x150>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d302      	bcc.n	8000fa0 <__udivmoddi4+0xcc>
 8000f9a:	4290      	cmp	r0, r2
 8000f9c:	f0c0 80ee 	bcc.w	800117c <__udivmoddi4+0x2a8>
 8000fa0:	1a86      	subs	r6, r0, r2
 8000fa2:	eb64 0303 	sbc.w	r3, r4, r3
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	d0e6      	beq.n	8000f7a <__udivmoddi4+0xa6>
 8000fac:	e9c5 6300 	strd	r6, r3, [r5]
 8000fb0:	e7e3      	b.n	8000f7a <__udivmoddi4+0xa6>
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	f040 808f 	bne.w	80010d6 <__udivmoddi4+0x202>
 8000fb8:	eba1 040c 	sub.w	r4, r1, ip
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fc2:	fa1f f78c 	uxth.w	r7, ip
 8000fc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000fca:	fb08 4416 	mls	r4, r8, r6, r4
 8000fce:	fb07 f006 	mul.w	r0, r7, r6
 8000fd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x11c>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000fe6:	d202      	bcs.n	8000fee <__udivmoddi4+0x11a>
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	f200 80cb 	bhi.w	8001184 <__udivmoddi4+0x2b0>
 8000fee:	4626      	mov	r6, r4
 8000ff0:	1a1c      	subs	r4, r3, r0
 8000ff2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ff6:	fb08 4410 	mls	r4, r8, r0, r4
 8000ffa:	fb00 f707 	mul.w	r7, r0, r7
 8000ffe:	fa1f f38e 	uxth.w	r3, lr
 8001002:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001006:	429f      	cmp	r7, r3
 8001008:	d908      	bls.n	800101c <__udivmoddi4+0x148>
 800100a:	eb1c 0303 	adds.w	r3, ip, r3
 800100e:	f100 34ff 	add.w	r4, r0, #4294967295
 8001012:	d202      	bcs.n	800101a <__udivmoddi4+0x146>
 8001014:	429f      	cmp	r7, r3
 8001016:	f200 80ae 	bhi.w	8001176 <__udivmoddi4+0x2a2>
 800101a:	4620      	mov	r0, r4
 800101c:	1bdb      	subs	r3, r3, r7
 800101e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001022:	e7a5      	b.n	8000f70 <__udivmoddi4+0x9c>
 8001024:	f1c1 0720 	rsb	r7, r1, #32
 8001028:	408b      	lsls	r3, r1
 800102a:	fa22 fc07 	lsr.w	ip, r2, r7
 800102e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001032:	fa24 f607 	lsr.w	r6, r4, r7
 8001036:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800103a:	fbb6 f8f9 	udiv	r8, r6, r9
 800103e:	fa1f fe8c 	uxth.w	lr, ip
 8001042:	fb09 6618 	mls	r6, r9, r8, r6
 8001046:	fa20 f307 	lsr.w	r3, r0, r7
 800104a:	408c      	lsls	r4, r1
 800104c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001050:	fb08 f00e 	mul.w	r0, r8, lr
 8001054:	431c      	orrs	r4, r3
 8001056:	0c23      	lsrs	r3, r4, #16
 8001058:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800105c:	4298      	cmp	r0, r3
 800105e:	fa02 f201 	lsl.w	r2, r2, r1
 8001062:	d90a      	bls.n	800107a <__udivmoddi4+0x1a6>
 8001064:	eb1c 0303 	adds.w	r3, ip, r3
 8001068:	f108 36ff 	add.w	r6, r8, #4294967295
 800106c:	f080 8081 	bcs.w	8001172 <__udivmoddi4+0x29e>
 8001070:	4298      	cmp	r0, r3
 8001072:	d97e      	bls.n	8001172 <__udivmoddi4+0x29e>
 8001074:	f1a8 0802 	sub.w	r8, r8, #2
 8001078:	4463      	add	r3, ip
 800107a:	1a1e      	subs	r6, r3, r0
 800107c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001080:	fb09 6613 	mls	r6, r9, r3, r6
 8001084:	fb03 fe0e 	mul.w	lr, r3, lr
 8001088:	b2a4      	uxth	r4, r4
 800108a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800108e:	45a6      	cmp	lr, r4
 8001090:	d908      	bls.n	80010a4 <__udivmoddi4+0x1d0>
 8001092:	eb1c 0404 	adds.w	r4, ip, r4
 8001096:	f103 30ff 	add.w	r0, r3, #4294967295
 800109a:	d266      	bcs.n	800116a <__udivmoddi4+0x296>
 800109c:	45a6      	cmp	lr, r4
 800109e:	d964      	bls.n	800116a <__udivmoddi4+0x296>
 80010a0:	3b02      	subs	r3, #2
 80010a2:	4464      	add	r4, ip
 80010a4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80010a8:	fba0 8302 	umull	r8, r3, r0, r2
 80010ac:	eba4 040e 	sub.w	r4, r4, lr
 80010b0:	429c      	cmp	r4, r3
 80010b2:	46c6      	mov	lr, r8
 80010b4:	461e      	mov	r6, r3
 80010b6:	d350      	bcc.n	800115a <__udivmoddi4+0x286>
 80010b8:	d04d      	beq.n	8001156 <__udivmoddi4+0x282>
 80010ba:	b155      	cbz	r5, 80010d2 <__udivmoddi4+0x1fe>
 80010bc:	ebba 030e 	subs.w	r3, sl, lr
 80010c0:	eb64 0406 	sbc.w	r4, r4, r6
 80010c4:	fa04 f707 	lsl.w	r7, r4, r7
 80010c8:	40cb      	lsrs	r3, r1
 80010ca:	431f      	orrs	r7, r3
 80010cc:	40cc      	lsrs	r4, r1
 80010ce:	e9c5 7400 	strd	r7, r4, [r5]
 80010d2:	2100      	movs	r1, #0
 80010d4:	e751      	b.n	8000f7a <__udivmoddi4+0xa6>
 80010d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80010da:	f1c2 0320 	rsb	r3, r2, #32
 80010de:	40d9      	lsrs	r1, r3
 80010e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010e4:	fa20 f303 	lsr.w	r3, r0, r3
 80010e8:	fa00 fe02 	lsl.w	lr, r0, r2
 80010ec:	fbb1 f0f8 	udiv	r0, r1, r8
 80010f0:	fb08 1110 	mls	r1, r8, r0, r1
 80010f4:	4094      	lsls	r4, r2
 80010f6:	431c      	orrs	r4, r3
 80010f8:	fa1f f78c 	uxth.w	r7, ip
 80010fc:	0c23      	lsrs	r3, r4, #16
 80010fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001102:	fb00 f107 	mul.w	r1, r0, r7
 8001106:	4299      	cmp	r1, r3
 8001108:	d908      	bls.n	800111c <__udivmoddi4+0x248>
 800110a:	eb1c 0303 	adds.w	r3, ip, r3
 800110e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001112:	d22c      	bcs.n	800116e <__udivmoddi4+0x29a>
 8001114:	4299      	cmp	r1, r3
 8001116:	d92a      	bls.n	800116e <__udivmoddi4+0x29a>
 8001118:	3802      	subs	r0, #2
 800111a:	4463      	add	r3, ip
 800111c:	1a5b      	subs	r3, r3, r1
 800111e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001122:	fb08 3311 	mls	r3, r8, r1, r3
 8001126:	b2a4      	uxth	r4, r4
 8001128:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800112c:	fb01 f307 	mul.w	r3, r1, r7
 8001130:	42a3      	cmp	r3, r4
 8001132:	d908      	bls.n	8001146 <__udivmoddi4+0x272>
 8001134:	eb1c 0404 	adds.w	r4, ip, r4
 8001138:	f101 36ff 	add.w	r6, r1, #4294967295
 800113c:	d213      	bcs.n	8001166 <__udivmoddi4+0x292>
 800113e:	42a3      	cmp	r3, r4
 8001140:	d911      	bls.n	8001166 <__udivmoddi4+0x292>
 8001142:	3902      	subs	r1, #2
 8001144:	4464      	add	r4, ip
 8001146:	1ae4      	subs	r4, r4, r3
 8001148:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800114c:	e73b      	b.n	8000fc6 <__udivmoddi4+0xf2>
 800114e:	4604      	mov	r4, r0
 8001150:	e6f2      	b.n	8000f38 <__udivmoddi4+0x64>
 8001152:	4608      	mov	r0, r1
 8001154:	e708      	b.n	8000f68 <__udivmoddi4+0x94>
 8001156:	45c2      	cmp	sl, r8
 8001158:	d2af      	bcs.n	80010ba <__udivmoddi4+0x1e6>
 800115a:	ebb8 0e02 	subs.w	lr, r8, r2
 800115e:	eb63 060c 	sbc.w	r6, r3, ip
 8001162:	3801      	subs	r0, #1
 8001164:	e7a9      	b.n	80010ba <__udivmoddi4+0x1e6>
 8001166:	4631      	mov	r1, r6
 8001168:	e7ed      	b.n	8001146 <__udivmoddi4+0x272>
 800116a:	4603      	mov	r3, r0
 800116c:	e79a      	b.n	80010a4 <__udivmoddi4+0x1d0>
 800116e:	4630      	mov	r0, r6
 8001170:	e7d4      	b.n	800111c <__udivmoddi4+0x248>
 8001172:	46b0      	mov	r8, r6
 8001174:	e781      	b.n	800107a <__udivmoddi4+0x1a6>
 8001176:	4463      	add	r3, ip
 8001178:	3802      	subs	r0, #2
 800117a:	e74f      	b.n	800101c <__udivmoddi4+0x148>
 800117c:	4606      	mov	r6, r0
 800117e:	4623      	mov	r3, r4
 8001180:	4608      	mov	r0, r1
 8001182:	e711      	b.n	8000fa8 <__udivmoddi4+0xd4>
 8001184:	3e02      	subs	r6, #2
 8001186:	4463      	add	r3, ip
 8001188:	e732      	b.n	8000ff0 <__udivmoddi4+0x11c>
 800118a:	bf00      	nop

0800118c <__aeabi_idiv0>:
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <AHT20_Read>:
#include "AHT20.h"
#include "i2c.h"

void AHT20_Read(float* Temp, float* Humid)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	uint8_t dum[6];
	HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 800119a:	2364      	movs	r3, #100	@ 0x64
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2301      	movs	r3, #1
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2271      	movs	r2, #113	@ 0x71
 80011ac:	2170      	movs	r1, #112	@ 0x70
 80011ae:	484c      	ldr	r0, [pc, #304]	@ (80012e0 <AHT20_Read+0x150>)
 80011b0:	f003 faa4 	bl	80046fc <HAL_I2C_Mem_Read>

	if(!(dum[0]&(1<<3)))
 80011b4:	7a3b      	ldrb	r3, [r7, #8]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d111      	bne.n	80011e2 <AHT20_Read+0x52>
	{
		dum[0] = 0xBE, dum[1] = 0x08, dum[2] = 0x00;
 80011be:	23be      	movs	r3, #190	@ 0xbe
 80011c0:	723b      	strb	r3, [r7, #8]
 80011c2:	2308      	movs	r3, #8
 80011c4:	727b      	strb	r3, [r7, #9]
 80011c6:	2300      	movs	r3, #0
 80011c8:	72bb      	strb	r3, [r7, #10]
		HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 80011ca:	f107 0208 	add.w	r2, r7, #8
 80011ce:	2364      	movs	r3, #100	@ 0x64
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2303      	movs	r3, #3
 80011d4:	2170      	movs	r1, #112	@ 0x70
 80011d6:	4842      	ldr	r0, [pc, #264]	@ (80012e0 <AHT20_Read+0x150>)
 80011d8:	f002 fe2c 	bl	8003e34 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f002 f9dd 	bl	800359c <HAL_Delay>
	}

	dum[0] = 0xAC, dum[1] = 0x33, dum[2] = 0x00;
 80011e2:	23ac      	movs	r3, #172	@ 0xac
 80011e4:	723b      	strb	r3, [r7, #8]
 80011e6:	2333      	movs	r3, #51	@ 0x33
 80011e8:	727b      	strb	r3, [r7, #9]
 80011ea:	2300      	movs	r3, #0
 80011ec:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 80011ee:	f107 0208 	add.w	r2, r7, #8
 80011f2:	2364      	movs	r3, #100	@ 0x64
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2303      	movs	r3, #3
 80011f8:	2170      	movs	r1, #112	@ 0x70
 80011fa:	4839      	ldr	r0, [pc, #228]	@ (80012e0 <AHT20_Read+0x150>)
 80011fc:	f002 fe1a 	bl	8003e34 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8001200:	2050      	movs	r0, #80	@ 0x50
 8001202:	f002 f9cb 	bl	800359c <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 8001206:	2364      	movs	r3, #100	@ 0x64
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	2301      	movs	r3, #1
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	2271      	movs	r2, #113	@ 0x71
 8001218:	2170      	movs	r1, #112	@ 0x70
 800121a:	4831      	ldr	r0, [pc, #196]	@ (80012e0 <AHT20_Read+0x150>)
 800121c:	f003 fa6e 	bl	80046fc <HAL_I2C_Mem_Read>
		HAL_Delay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f002 f9bb 	bl	800359c <HAL_Delay>
	} while(dum[0]&(1<<7));
 8001226:	7a3b      	ldrb	r3, [r7, #8]
 8001228:	b25b      	sxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	dbeb      	blt.n	8001206 <AHT20_Read+0x76>

	HAL_I2C_Master_Receive(&HI2C, AHT_ADDR, dum, 6, 100);
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	2364      	movs	r3, #100	@ 0x64
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2306      	movs	r3, #6
 8001238:	2170      	movs	r1, #112	@ 0x70
 800123a:	4829      	ldr	r0, [pc, #164]	@ (80012e0 <AHT20_Read+0x150>)
 800123c:	f002 fef8 	bl	8004030 <HAL_I2C_Master_Receive>
	uint32_t h20 = (dum[1])<<12 | (dum[2])<<4 | (dum[3]>>4);
 8001240:	7a7b      	ldrb	r3, [r7, #9]
 8001242:	031a      	lsls	r2, r3, #12
 8001244:	7abb      	ldrb	r3, [r7, #10]
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	4313      	orrs	r3, r2
 800124a:	7afa      	ldrb	r2, [r7, #11]
 800124c:	0912      	lsrs	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	4313      	orrs	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
	uint32_t t20 = (dum[3]&0x0F)<<16 | (dum[4])<<8 | dum[5];
 8001254:	7afb      	ldrb	r3, [r7, #11]
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800125c:	7b3b      	ldrb	r3, [r7, #12]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	4313      	orrs	r3, r2
 8001262:	7b7a      	ldrb	r2, [r7, #13]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
	*Temp = (t20 / 1048576.0)*200.0 - 50.0;
 8001268:	6938      	ldr	r0, [r7, #16]
 800126a:	f7ff f8bb 	bl	80003e4 <__aeabi_ui2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <AHT20_Read+0x154>)
 8001274:	f7ff fa5a 	bl	800072c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <AHT20_Read+0x158>)
 8001286:	f7ff f927 	bl	80004d8 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <AHT20_Read+0x15c>)
 8001298:	f7fe ff66 	bl	8000168 <__aeabi_dsub>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fb2a 	bl	80008fc <__aeabi_d2f>
 80012a8:	4602      	mov	r2, r0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
	*Humid = h20 / 10485.76;
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff f898 	bl	80003e4 <__aeabi_ui2d>
 80012b4:	a308      	add	r3, pc, #32	@ (adr r3, 80012d8 <AHT20_Read+0x148>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff fa37 	bl	800072c <__aeabi_ddiv>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fb19 	bl	80008fc <__aeabi_d2f>
 80012ca:	4602      	mov	r2, r0
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	47ae147b 	.word	0x47ae147b
 80012dc:	40c47ae1 	.word	0x40c47ae1
 80012e0:	20000118 	.word	0x20000118
 80012e4:	41300000 	.word	0x41300000
 80012e8:	40690000 	.word	0x40690000
 80012ec:	40490000 	.word	0x40490000

080012f0 <BMP280_Init>:
int32_t t_fine;


/* Function to initialize BMP280 */
HAL_StatusTypeDef BMP280_Init(I2C_HandleTypeDef *hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08e      	sub	sp, #56	@ 0x38
 80012f4:	af04      	add	r7, sp, #16
 80012f6:	6078      	str	r0, [r7, #4]
    uint8_t chip_id = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t data[24];

    /* Check chip ID */
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDR << 1, BMP280_CHIP_ID_REG, 1, &chip_id, 1, 1000);
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	2301      	movs	r3, #1
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2301      	movs	r3, #1
 8001310:	22d0      	movs	r2, #208	@ 0xd0
 8001312:	21ee      	movs	r1, #238	@ 0xee
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f003 f9f1 	bl	80046fc <HAL_I2C_Mem_Read>
    if (chip_id != 0x58) // BMP280 chip id
 800131a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800131e:	2b58      	cmp	r3, #88	@ 0x58
 8001320:	d001      	beq.n	8001326 <BMP280_Init+0x36>
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e0b7      	b.n	8001496 <BMP280_Init+0x1a6>

    /* Reset the sensor */
    uint8_t reset_cmd = 0xB6;
 8001326:	23b6      	movs	r3, #182	@ 0xb6
 8001328:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c, BMP280_I2C_ADDR << 1, BMP280_RESET_REG, 1, &reset_cmd, 1, 1000);
 800132a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	2301      	movs	r3, #1
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	f107 030b 	add.w	r3, r7, #11
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	22e0      	movs	r2, #224	@ 0xe0
 800133e:	21ee      	movs	r1, #238	@ 0xee
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f003 f8e1 	bl	8004508 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8001346:	200a      	movs	r0, #10
 8001348:	f002 f928 	bl	800359c <HAL_Delay>

    /* Read calibration data */
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDR << 1, BMP280_DIG_T1_LSB_REG, 1, data, 24, 1000);
 800134c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2318      	movs	r3, #24
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	2288      	movs	r2, #136	@ 0x88
 8001360:	21ee      	movs	r1, #238	@ 0xee
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f003 f9ca 	bl	80046fc <HAL_I2C_Mem_Read>

    calibData.dig_T1 = (data[1] << 8) | data[0];
 8001368:	7b7b      	ldrb	r3, [r7, #13]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	7b3b      	ldrb	r3, [r7, #12]
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b49      	ldr	r3, [pc, #292]	@ (80014a0 <BMP280_Init+0x1b0>)
 800137a:	801a      	strh	r2, [r3, #0]
    calibData.dig_T2 = (data[3] << 8) | data[2];
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b21a      	sxth	r2, r3
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	b21b      	sxth	r3, r3
 8001386:	4313      	orrs	r3, r2
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b45      	ldr	r3, [pc, #276]	@ (80014a0 <BMP280_Init+0x1b0>)
 800138c:	805a      	strh	r2, [r3, #2]
    calibData.dig_T3 = (data[5] << 8) | data[4];
 800138e:	7c7b      	ldrb	r3, [r7, #17]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21a      	sxth	r2, r3
 8001394:	7c3b      	ldrb	r3, [r7, #16]
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b40      	ldr	r3, [pc, #256]	@ (80014a0 <BMP280_Init+0x1b0>)
 800139e:	809a      	strh	r2, [r3, #4]
    calibData.dig_P1 = (data[7] << 8) | data[6];
 80013a0:	7cfb      	ldrb	r3, [r7, #19]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	7cbb      	ldrb	r3, [r7, #18]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <BMP280_Init+0x1b0>)
 80013b2:	80da      	strh	r2, [r3, #6]
    calibData.dig_P2 = (data[9] << 8) | data[8];
 80013b4:	7d7b      	ldrb	r3, [r7, #21]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	7d3b      	ldrb	r3, [r7, #20]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b37      	ldr	r3, [pc, #220]	@ (80014a0 <BMP280_Init+0x1b0>)
 80013c4:	811a      	strh	r2, [r3, #8]
    calibData.dig_P3 = (data[11] << 8) | data[10];
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	7dbb      	ldrb	r3, [r7, #22]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <BMP280_Init+0x1b0>)
 80013d6:	815a      	strh	r2, [r3, #10]
    calibData.dig_P4 = (data[13] << 8) | data[12];
 80013d8:	7e7b      	ldrb	r3, [r7, #25]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	7e3b      	ldrb	r3, [r7, #24]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <BMP280_Init+0x1b0>)
 80013e8:	819a      	strh	r2, [r3, #12]
    calibData.dig_P5 = (data[15] << 8) | data[14];
 80013ea:	7efb      	ldrb	r3, [r7, #27]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b21a      	sxth	r2, r3
 80013f0:	7ebb      	ldrb	r3, [r7, #26]
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <BMP280_Init+0x1b0>)
 80013fa:	81da      	strh	r2, [r3, #14]
    calibData.dig_P6 = (data[17] << 8) | data[16];
 80013fc:	7f7b      	ldrb	r3, [r7, #29]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	7f3b      	ldrb	r3, [r7, #28]
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <BMP280_Init+0x1b0>)
 800140c:	821a      	strh	r2, [r3, #16]
    calibData.dig_P7 = (data[19] << 8) | data[18];
 800140e:	7ffb      	ldrb	r3, [r7, #31]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b21a      	sxth	r2, r3
 8001414:	7fbb      	ldrb	r3, [r7, #30]
 8001416:	b21b      	sxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <BMP280_Init+0x1b0>)
 800141e:	825a      	strh	r2, [r3, #18]
    calibData.dig_P8 = (data[21] << 8) | data[20];
 8001420:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b21a      	sxth	r2, r3
 8001428:	f897 3020 	ldrb.w	r3, [r7, #32]
 800142c:	b21b      	sxth	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <BMP280_Init+0x1b0>)
 8001434:	829a      	strh	r2, [r3, #20]
    calibData.dig_P9 = (data[23] << 8) | data[22];
 8001436:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <BMP280_Init+0x1b0>)
 800144a:	82da      	strh	r2, [r3, #22]

    /* Configure the sensor */
    uint8_t config = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	72bb      	strb	r3, [r7, #10]
    config = (0x04 << 5) | (0x04 << 2) | 0x00; // Standby time 500ms, Filter coefficient 16, SPI disabled
 8001450:	2390      	movs	r3, #144	@ 0x90
 8001452:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(hi2c, BMP280_I2C_ADDR << 1, BMP280_CONFIG_REG, 1, &config, 1, 1000);
 8001454:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	2301      	movs	r3, #1
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	f107 030a 	add.w	r3, r7, #10
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2301      	movs	r3, #1
 8001466:	22f5      	movs	r2, #245	@ 0xf5
 8001468:	21ee      	movs	r1, #238	@ 0xee
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f003 f84c 	bl	8004508 <HAL_I2C_Mem_Write>

    /* Set measurement settings */
    uint8_t ctrl_meas = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	727b      	strb	r3, [r7, #9]
    ctrl_meas = (0x02 << 5) | (0x05 << 2) | 0x03; // Oversampling x4 for temp, x16 for pressure, normal mode
 8001474:	2357      	movs	r3, #87	@ 0x57
 8001476:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Mem_Write(hi2c, BMP280_I2C_ADDR << 1, BMP280_CTRL_MEAS_REG, 1, &ctrl_meas, 1, 1000);
 8001478:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	2301      	movs	r3, #1
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	f107 0309 	add.w	r3, r7, #9
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2301      	movs	r3, #1
 800148a:	22f4      	movs	r2, #244	@ 0xf4
 800148c:	21ee      	movs	r1, #238	@ 0xee
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f003 f83a 	bl	8004508 <HAL_I2C_Mem_Write>

    return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3728      	adds	r7, #40	@ 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200000fc 	.word	0x200000fc

080014a4 <BMP280_ReadPressure>:

/* Function to read pressure */
float BMP280_ReadPressure(I2C_HandleTypeDef *hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	@ 0x38
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	6078      	str	r0, [r7, #4]
    int32_t adc_P, adc_T;
    int32_t var1, var2;
    uint32_t pressure;

    /* Read pressure and temperature data */
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDR << 1, BMP280_PRESS_MSB_REG, 1, data, 6, 1000);
 80014ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2306      	movs	r3, #6
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2301      	movs	r3, #1
 80014be:	22f7      	movs	r2, #247	@ 0xf7
 80014c0:	21ee      	movs	r1, #238	@ 0xee
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f003 f91a 	bl	80046fc <HAL_I2C_Mem_Read>

    adc_P = ((uint32_t)data[0] << 12) | ((uint32_t)data[1] << 4) | ((uint32_t)data[2] >> 4);
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	031a      	lsls	r2, r3, #12
 80014cc:	7b7b      	ldrb	r3, [r7, #13]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4313      	orrs	r3, r2
 80014d2:	7bba      	ldrb	r2, [r7, #14]
 80014d4:	0912      	lsrs	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	4313      	orrs	r3, r2
 80014da:	623b      	str	r3, [r7, #32]
    adc_T = ((uint32_t)data[3] << 12) | ((uint32_t)data[4] << 4) | ((uint32_t)data[5] >> 4);
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	031a      	lsls	r2, r3, #12
 80014e0:	7c3b      	ldrb	r3, [r7, #16]
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	4313      	orrs	r3, r2
 80014e6:	7c7a      	ldrb	r2, [r7, #17]
 80014e8:	0912      	lsrs	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61fb      	str	r3, [r7, #28]

    /* Calculate temperature (just to get t_fine value) */
    var1 = ((((adc_T >> 3) - ((int32_t)calibData.dig_T1 << 1))) * ((int32_t)calibData.dig_T2)) >> 11;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	10da      	asrs	r2, r3, #3
 80014f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 80014fe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	12db      	asrs	r3, r3, #11
 8001508:	61bb      	str	r3, [r7, #24]
    var2 = (((((adc_T >> 4) - ((int32_t)calibData.dig_T1)) * ((adc_T >> 4) - ((int32_t)calibData.dig_T1))) >> 12) * ((int32_t)calibData.dig_T3)) >> 14;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	111b      	asrs	r3, r3, #4
 800150e:	4a59      	ldr	r2, [pc, #356]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 8001510:	8812      	ldrh	r2, [r2, #0]
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	1112      	asrs	r2, r2, #4
 8001518:	4956      	ldr	r1, [pc, #344]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 800151a:	8809      	ldrh	r1, [r1, #0]
 800151c:	1a52      	subs	r2, r2, r1
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	131b      	asrs	r3, r3, #12
 8001524:	4a53      	ldr	r2, [pc, #332]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 8001526:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	139b      	asrs	r3, r3, #14
 8001530:	617b      	str	r3, [r7, #20]
    t_fine = var1 + var2;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	4413      	add	r3, r2
 8001538:	4a4f      	ldr	r2, [pc, #316]	@ (8001678 <BMP280_ReadPressure+0x1d4>)
 800153a:	6013      	str	r3, [r2, #0]

    /* Calculate pressure */
    var1 = (((int32_t)t_fine) >> 1) - (int32_t)64000;
 800153c:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <BMP280_ReadPressure+0x1d4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	105b      	asrs	r3, r3, #1
 8001542:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001546:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t)calibData.dig_P6);
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	109b      	asrs	r3, r3, #2
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	1092      	asrs	r2, r2, #2
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	12db      	asrs	r3, r3, #11
 8001556:	4a47      	ldr	r2, [pc, #284]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 8001558:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calibData.dig_P5)) << 1);
 8001562:	4b44      	ldr	r3, [pc, #272]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 8001564:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001568:	461a      	mov	r2, r3
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4413      	add	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
    var2 = (var2 >> 2) + (((int32_t)calibData.dig_P4) << 16);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	109a      	asrs	r2, r3, #2
 800157c:	4b3d      	ldr	r3, [pc, #244]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 800157e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	4413      	add	r3, r2
 8001586:	617b      	str	r3, [r7, #20]
    var1 = (((calibData.dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int32_t)calibData.dig_P2) * var1) >> 1)) >> 18;
 8001588:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 800158a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800158e:	4619      	mov	r1, r3
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	109b      	asrs	r3, r3, #2
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	1092      	asrs	r2, r2, #2
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	135b      	asrs	r3, r3, #13
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	10da      	asrs	r2, r3, #3
 80015a4:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 80015a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015aa:	4619      	mov	r1, r3
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fb01 f303 	mul.w	r3, r1, r3
 80015b2:	105b      	asrs	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	149b      	asrs	r3, r3, #18
 80015b8:	61bb      	str	r3, [r7, #24]
    var1 = ((((32768 + var1)) * ((int32_t)calibData.dig_P1)) >> 15);
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80015c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 80015c2:	88d2      	ldrh	r2, [r2, #6]
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	13db      	asrs	r3, r3, #15
 80015ca:	61bb      	str	r3, [r7, #24]

    if (var1 == 0)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <BMP280_ReadPressure+0x134>
        return 0;
 80015d2:	f04f 0300 	mov.w	r3, #0
 80015d6:	e049      	b.n	800166c <BMP280_ReadPressure+0x1c8>

    pressure = (((uint32_t)(((int32_t)1048576) - adc_P) - (var2 >> 12))) * 3125;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	131b      	asrs	r3, r3, #12
 80015dc:	461a      	mov	r2, r3
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a26      	ldr	r2, [pc, #152]	@ (800167c <BMP280_ReadPressure+0x1d8>)
 80015e4:	fb02 f303 	mul.w	r3, r2, r3
 80015e8:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 80015ec:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (pressure < 0x80000000)
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db06      	blt.n	8001606 <BMP280_ReadPressure+0x162>
        pressure = (pressure << 1) / ((uint32_t)var1);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	005a      	lsls	r2, r3, #1
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
 8001604:	e005      	b.n	8001612 <BMP280_ReadPressure+0x16e>
    else
        pressure = (pressure / (uint32_t)var1) * 2;
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24

    var1 = (((int32_t)calibData.dig_P9) * ((int32_t)(((pressure >> 3) * (pressure >> 3)) >> 13))) >> 12;
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 8001614:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001618:	4619      	mov	r1, r3
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001620:	08d2      	lsrs	r2, r2, #3
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	0b5b      	lsrs	r3, r3, #13
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	131b      	asrs	r3, r3, #12
 800162e:	61bb      	str	r3, [r7, #24]
    var2 = (((int32_t)(pressure >> 2)) * ((int32_t)calibData.dig_P8)) >> 13;
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	461a      	mov	r2, r3
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 8001638:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800163c:	fb02 f303 	mul.w	r3, r2, r3
 8001640:	135b      	asrs	r3, r3, #13
 8001642:	617b      	str	r3, [r7, #20]
    pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calibData.dig_P7) >> 4));
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	4413      	add	r3, r2
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <BMP280_ReadPressure+0x1d0>)
 800164c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001650:	4413      	add	r3, r2
 8001652:	111a      	asrs	r2, r3, #4
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	4413      	add	r3, r2
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24

    return pressure / 100.0f; // Return pressure in hPa
 800165a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800165c:	f7ff fa54 	bl	8000b08 <__aeabi_ui2f>
 8001660:	4603      	mov	r3, r0
 8001662:	4907      	ldr	r1, [pc, #28]	@ (8001680 <BMP280_ReadPressure+0x1dc>)
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fb5b 	bl	8000d20 <__aeabi_fdiv>
 800166a:	4603      	mov	r3, r0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3728      	adds	r7, #40	@ 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200000fc 	.word	0x200000fc
 8001678:	20000114 	.word	0x20000114
 800167c:	fffff3cb 	.word	0xfffff3cb
 8001680:	42c80000 	.word	0x42c80000

08001684 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fbd0 	bl	8001e3e <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 fbeb 	bl	8001e7e <SX1278_hw_SPIReadByte>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fb88 	bl	8001dc8 <SX1278_hw_SetNSS>
	return tmp;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	70fb      	strb	r3, [r7, #3]
 80016ce:	4613      	mov	r3, r2
 80016d0:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fb75 	bl	8001dc8 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4619      	mov	r1, r3
 80016ec:	4610      	mov	r0, r2
 80016ee:	f000 fba6 	bl	8001e3e <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	78ba      	ldrb	r2, [r7, #2]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fb9f 	bl	8001e3e <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fb5e 	bl	8001dc8 <SX1278_hw_SetNSS>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	461a      	mov	r2, r3
 8001720:	460b      	mov	r3, r1
 8001722:	72fb      	strb	r3, [r7, #11]
 8001724:	4613      	mov	r3, r2
 8001726:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8001728:	7abb      	ldrb	r3, [r7, #10]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d927      	bls.n	800177e <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f000 fb47 	bl	8001dc8 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	7afa      	ldrb	r2, [r7, #11]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fb7b 	bl	8001e3e <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001748:	2300      	movs	r3, #0
 800174a:	75fb      	strb	r3, [r7, #23]
 800174c:	e00c      	b.n	8001768 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	18d4      	adds	r4, r2, r3
 8001758:	4608      	mov	r0, r1
 800175a:	f000 fb90 	bl	8001e7e <SX1278_hw_SPIReadByte>
 800175e:	4603      	mov	r3, r0
 8001760:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	3301      	adds	r3, #1
 8001766:	75fb      	strb	r3, [r7, #23]
 8001768:	7dfa      	ldrb	r2, [r7, #23]
 800176a:	7abb      	ldrb	r3, [r7, #10]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3ee      	bcc.n	800174e <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fb26 	bl	8001dc8 <SX1278_hw_SetNSS>
 800177c:	e000      	b.n	8001780 <SX1278_SPIBurstRead+0x6c>
		return;
 800177e:	bf00      	nop
	}
}
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}

08001786 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	461a      	mov	r2, r3
 8001792:	460b      	mov	r3, r1
 8001794:	72fb      	strb	r3, [r7, #11]
 8001796:	4613      	mov	r3, r2
 8001798:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800179a:	7abb      	ldrb	r3, [r7, #10]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d929      	bls.n	80017f4 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fb0e 	bl	8001dc8 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	4619      	mov	r1, r3
 80017ba:	4610      	mov	r0, r2
 80017bc:	f000 fb3f 	bl	8001e3e <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	75fb      	strb	r3, [r7, #23]
 80017c4:	e00b      	b.n	80017de <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	f000 fb33 	bl	8001e3e <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	3301      	adds	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
 80017de:	7dfa      	ldrb	r2, [r7, #23]
 80017e0:	7abb      	ldrb	r3, [r7, #10]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3ef      	bcc.n	80017c6 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2101      	movs	r1, #1
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 faeb 	bl	8001dc8 <SX1278_hw_SetNSS>
 80017f2:	e000      	b.n	80017f6 <SX1278_SPIBurstWrite+0x70>
		return;
 80017f4:	bf00      	nop
	}
}
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f90d 	bl	8001a24 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800180a:	200f      	movs	r0, #15
 800180c:	f000 fb5d 	bl	8001eca <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f917 	bl	8001a44 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800181c:	f04f 0000 	mov.w	r0, #0
 8001820:	f04f 0100 	mov.w	r1, #0
 8001824:	04d9      	lsls	r1, r3, #19
 8001826:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800182a:	04d0      	lsls	r0, r2, #19
 800182c:	4a6f      	ldr	r2, [pc, #444]	@ (80019ec <SX1278_config+0x1f0>)
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	f7ff fb37 	bl	8000ea4 <__aeabi_uldivmod>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800183e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	0c02      	lsrs	r2, r0, #16
 800184c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001850:	0c0b      	lsrs	r3, r1, #16
 8001852:	b2d3      	uxtb	r3, r2
 8001854:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8001856:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	0a02      	lsrs	r2, r0, #8
 8001864:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001868:	0a0b      	lsrs	r3, r1, #8
 800186a:	b2d3      	uxtb	r3, r2
 800186c:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800186e:	7c3b      	ldrb	r3, [r7, #16]
 8001870:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8001872:	f107 020c 	add.w	r2, r7, #12
 8001876:	2303      	movs	r3, #3
 8001878:	2106      	movs	r1, #6
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff83 	bl	8001786 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8001880:	2234      	movs	r2, #52	@ 0x34
 8001882:	2139      	movs	r1, #57	@ 0x39
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff1c 	bl	80016c2 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7c1b      	ldrb	r3, [r3, #16]
 800188e:	461a      	mov	r2, r3
 8001890:	4b57      	ldr	r3, [pc, #348]	@ (80019f0 <SX1278_config+0x1f4>)
 8001892:	5c9b      	ldrb	r3, [r3, r2]
 8001894:	461a      	mov	r2, r3
 8001896:	2109      	movs	r1, #9
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff12 	bl	80016c2 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800189e:	220b      	movs	r2, #11
 80018a0:	210b      	movs	r1, #11
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff0d 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80018a8:	2223      	movs	r2, #35	@ 0x23
 80018aa:	210c      	movs	r1, #12
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff08 	bl	80016c2 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7c5b      	ldrb	r3, [r3, #17]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b4e      	ldr	r3, [pc, #312]	@ (80019f4 <SX1278_config+0x1f8>)
 80018ba:	5c9b      	ldrb	r3, [r3, r2]
 80018bc:	2b06      	cmp	r3, #6
 80018be:	d147      	bne.n	8001950 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7c9b      	ldrb	r3, [r3, #18]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b4c      	ldr	r3, [pc, #304]	@ (80019f8 <SX1278_config+0x1fc>)
 80018c8:	5c9b      	ldrb	r3, [r3, r2]
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7cdb      	ldrb	r3, [r3, #19]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4b49      	ldr	r3, [pc, #292]	@ (80019fc <SX1278_config+0x200>)
 80018d6:	5c5b      	ldrb	r3, [r3, r1]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4413      	add	r3, r2
 80018de:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	211d      	movs	r1, #29
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff feea 	bl	80016c2 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7c5b      	ldrb	r3, [r3, #17]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b3f      	ldr	r3, [pc, #252]	@ (80019f4 <SX1278_config+0x1f8>)
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7d1b      	ldrb	r3, [r3, #20]
 8001900:	4619      	mov	r1, r3
 8001902:	4b3f      	ldr	r3, [pc, #252]	@ (8001a00 <SX1278_config+0x204>)
 8001904:	5c5b      	ldrb	r3, [r3, r1]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800190e:	3303      	adds	r3, #3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	211e      	movs	r1, #30
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fed3 	bl	80016c2 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 800191c:	2131      	movs	r1, #49	@ 0x31
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff feb0 	bl	8001684 <SX1278_SPIRead>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	f023 0307 	bic.w	r3, r3, #7
 800192e:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	f043 0305 	orr.w	r3, r3, #5
 8001936:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	461a      	mov	r2, r3
 800193c:	2131      	movs	r1, #49	@ 0x31
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff febf 	bl	80016c2 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8001944:	220c      	movs	r2, #12
 8001946:	2137      	movs	r1, #55	@ 0x37
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff feba 	bl	80016c2 <SX1278_SPIWrite>
 800194e:	e029      	b.n	80019a4 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7c9b      	ldrb	r3, [r3, #18]
 8001954:	461a      	mov	r2, r3
 8001956:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <SX1278_config+0x1fc>)
 8001958:	5c9b      	ldrb	r3, [r3, r2]
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7cdb      	ldrb	r3, [r3, #19]
 8001962:	4619      	mov	r1, r3
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <SX1278_config+0x200>)
 8001966:	5c5b      	ldrb	r3, [r3, r1]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800196c:	4413      	add	r3, r2
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	211d      	movs	r1, #29
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff fea4 	bl	80016c2 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7c5b      	ldrb	r3, [r3, #17]
 800197e:	461a      	mov	r2, r3
 8001980:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <SX1278_config+0x1f8>)
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7d1b      	ldrb	r3, [r3, #20]
 800198c:	4619      	mov	r1, r3
 800198e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <SX1278_config+0x204>)
 8001990:	5c5b      	ldrb	r3, [r3, r1]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001996:	4413      	add	r3, r2
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	211e      	movs	r1, #30
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fe8f 	bl	80016c2 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80019a4:	2204      	movs	r2, #4
 80019a6:	2126      	movs	r1, #38	@ 0x26
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fe8a 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80019ae:	2208      	movs	r2, #8
 80019b0:	211f      	movs	r1, #31
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fe85 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80019b8:	2200      	movs	r2, #0
 80019ba:	2120      	movs	r1, #32
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fe80 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 80019c2:	2208      	movs	r2, #8
 80019c4:	2121      	movs	r1, #33	@ 0x21
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fe7b 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80019cc:	2201      	movs	r2, #1
 80019ce:	2141      	movs	r1, #65	@ 0x41
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fe76 	bl	80016c2 <SX1278_SPIWrite>
	module->readBytes = 0;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f810 	bl	8001a04 <SX1278_standby>
}
 80019e4:	bf00      	nop
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	01e84800 	.word	0x01e84800
 80019f0:	080081bc 	.word	0x080081bc
 80019f4:	080081c0 	.word	0x080081c0
 80019f8:	080081c8 	.word	0x080081c8
 80019fc:	080081d4 	.word	0x080081d4
 8001a00:	080081d8 	.word	0x080081d8

08001a04 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001a0c:	2209      	movs	r2, #9
 8001a0e:	2101      	movs	r1, #1
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fe56 	bl	80016c2 <SX1278_SPIWrite>
	module->status = STANDBY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	759a      	strb	r2, [r3, #22]
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	2101      	movs	r1, #1
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fe46 	bl	80016c2 <SX1278_SPIWrite>
	module->status = SLEEP;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	759a      	strb	r2, [r3, #22]
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001a4c:	2288      	movs	r2, #136	@ 0x88
 8001a4e:	2101      	movs	r1, #1
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff fe36 	bl	80016c2 <SX1278_SPIWrite>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8001a66:	22ff      	movs	r2, #255	@ 0xff
 8001a68:	2112      	movs	r1, #18
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fe29 	bl	80016c2 <SX1278_SPIWrite>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	460b      	mov	r3, r1
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	7afa      	ldrb	r2, [r7, #11]
 8001a8a:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff feb5 	bl	80017fc <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8001a92:	2284      	movs	r2, #132	@ 0x84
 8001a94:	214d      	movs	r1, #77	@ 0x4d
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff fe13 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001a9c:	22ff      	movs	r2, #255	@ 0xff
 8001a9e:	2124      	movs	r1, #36	@ 0x24
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f7ff fe0e 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2140      	movs	r1, #64	@ 0x40
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fe09 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8001ab0:	223f      	movs	r2, #63	@ 0x3f
 8001ab2:	2111      	movs	r1, #17
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fe04 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff ffcf 	bl	8001a5e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2122      	movs	r1, #34	@ 0x22
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff fdfb 	bl	80016c2 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001acc:	210f      	movs	r1, #15
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff fdd8 	bl	8001684 <SX1278_SPIRead>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
 8001ada:	461a      	mov	r2, r3
 8001adc:	210d      	movs	r1, #13
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff fdef 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001ae4:	228d      	movs	r2, #141	@ 0x8d
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff fdea 	bl	80016c2 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001af6:	2118      	movs	r1, #24
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff fdc3 	bl	8001684 <SX1278_SPIRead>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d104      	bne.n	8001b12 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	759a      	strb	r2, [r3, #22]
			return 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e013      	b.n	8001b3a <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f967 	bl	8001df6 <SX1278_hw_Reset>
			SX1278_config(module);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff fe67 	bl	80017fc <SX1278_config>
			return 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e003      	b.n	8001b3a <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f000 f9c9 	bl	8001eca <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001b38:	e7dd      	b.n	8001af6 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f9c6 	bl	8001ee0 <SX1278_hw_GetDIO0>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d030      	beq.n	8001bbc <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3317      	adds	r3, #23
 8001b5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f005 f88f 	bl	8006c88 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fd89 	bl	8001684 <SX1278_SPIRead>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8001b76:	7bbb      	ldrb	r3, [r7, #14]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	210d      	movs	r1, #13
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fda0 	bl	80016c2 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7c5b      	ldrb	r3, [r3, #17]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7d5b      	ldrb	r3, [r3, #21]
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e005      	b.n	8001b9e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8001b92:	2113      	movs	r1, #19
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fd75 	bl	8001684 <SX1278_SPIRead>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f103 0217 	add.w	r2, r3, #23
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fdb3 	bl	8001714 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff51 	bl	8001a5e <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	7afa      	ldrb	r2, [r7, #11]
 8001bdc:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff fe0c 	bl	80017fc <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8001be4:	2287      	movs	r2, #135	@ 0x87
 8001be6:	214d      	movs	r1, #77	@ 0x4d
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7ff fd6a 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2124      	movs	r1, #36	@ 0x24
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f7ff fd65 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001bf8:	2241      	movs	r2, #65	@ 0x41
 8001bfa:	2140      	movs	r1, #64	@ 0x40
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff fd60 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7ff ff2b 	bl	8001a5e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8001c08:	22f7      	movs	r2, #247	@ 0xf7
 8001c0a:	2111      	movs	r1, #17
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7ff fd58 	bl	80016c2 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8001c12:	7afb      	ldrb	r3, [r7, #11]
 8001c14:	461a      	mov	r2, r3
 8001c16:	2122      	movs	r1, #34	@ 0x22
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f7ff fd52 	bl	80016c2 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001c1e:	210e      	movs	r1, #14
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7ff fd2f 	bl	8001684 <SX1278_SPIRead>
 8001c26:	4603      	mov	r3, r0
 8001c28:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	210d      	movs	r1, #13
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff fd46 	bl	80016c2 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8001c36:	2122      	movs	r1, #34	@ 0x22
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff fd23 	bl	8001684 <SX1278_SPIRead>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8001c42:	7dba      	ldrb	r2, [r7, #22]
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d104      	bne.n	8001c54 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	759a      	strb	r2, [r3, #22]
			return 1;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e00e      	b.n	8001c72 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f8c6 	bl	8001df6 <SX1278_hw_Reset>
			SX1278_config(module);
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff fdc6 	bl	80017fc <SX1278_config>
			return 0;
 8001c70:	2300      	movs	r3, #0
		}
	}
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4613      	mov	r3, r2
 8001c88:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	2100      	movs	r1, #0
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff fd78 	bl	8001786 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001c96:	228b      	movs	r2, #139	@ 0x8b
 8001c98:	2101      	movs	r1, #1
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff fd11 	bl	80016c2 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 f91b 	bl	8001ee0 <SX1278_hw_GetDIO0>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8001cb0:	2112      	movs	r1, #18
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff fce6 	bl	8001684 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7ff fed0 	bl	8001a5e <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff fea0 	bl	8001a04 <SX1278_standby>
			return 1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e013      	b.n	8001cf0 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f88c 	bl	8001df6 <SX1278_hw_Reset>
			SX1278_config(module);
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7ff fd8c 	bl	80017fc <SX1278_config>
			return 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e003      	b.n	8001cf0 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f000 f8ee 	bl	8001eca <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001cee:	e7d7      	b.n	8001ca0 <SX1278_LoRaTxPacket+0x26>
	}
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f848 	bl	8001d9e <SX1278_hw_init>
	module->frequency = frequency;
 8001d0e:	68f9      	ldr	r1, [r7, #12]
 8001d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d14:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	7e3a      	ldrb	r2, [r7, #24]
 8001d1c:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	7f3a      	ldrb	r2, [r7, #28]
 8001d22:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d2a:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001d32:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001d3a:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001d42:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f7ff fd59 	bl	80017fc <SX1278_config>
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8001d66:	79fa      	ldrb	r2, [r7, #7]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d003      	beq.n	8001d74 <SX1278_read+0x22>
		length = module->readBytes;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8001d72:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3317      	adds	r3, #23
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	68b8      	ldr	r0, [r7, #8]
 8001d7e:	f004 ffdb 	bl	8006d38 <memcpy>
	rxBuf[length] = '\0';
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	4413      	add	r3, r2
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8001d94:	79fb      	ldrb	r3, [r7, #7]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001da6:	2101      	movs	r1, #1
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f80d 	bl	8001dc8 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6858      	ldr	r0, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2201      	movs	r2, #1
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f001 febb 	bl	8003b36 <HAL_GPIO_WritePin>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6958      	ldr	r0, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b299      	uxth	r1, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	bf0c      	ite	eq
 8001de2:	2301      	moveq	r3, #1
 8001de4:	2300      	movne	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	f001 fea4 	bl	8003b36 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001dfe:	2101      	movs	r1, #1
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ffe1 	bl	8001dc8 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6858      	ldr	r0, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2200      	movs	r2, #0
 8001e12:	4619      	mov	r1, r3
 8001e14:	f001 fe8f 	bl	8003b36 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f000 f856 	bl	8001eca <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6858      	ldr	r0, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f001 fe83 	bl	8003b36 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001e30:	2064      	movs	r0, #100	@ 0x64
 8001e32:	f000 f84a 	bl	8001eca <SX1278_hw_DelayMs>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ffbb 	bl	8001dc8 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6998      	ldr	r0, [r3, #24]
 8001e56:	1cf9      	adds	r1, r7, #3
 8001e58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f004 f859 	bl	8005f14 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001e62:	bf00      	nop
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 fb40 	bl	80064ee <HAL_SPI_GetState>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d1f7      	bne.n	8001e64 <SX1278_hw_SPICommand+0x26>
		;
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af02      	add	r7, sp, #8
 8001e84:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001e8e:	2100      	movs	r1, #0
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff99 	bl	8001dc8 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6998      	ldr	r0, [r3, #24]
 8001e9a:	f107 020e 	add.w	r2, r7, #14
 8001e9e:	f107 010f 	add.w	r1, r7, #15
 8001ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f004 f977 	bl	800619c <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001eae:	bf00      	nop
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f004 fb1a 	bl	80064ee <HAL_SPI_GetState>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d1f7      	bne.n	8001eb0 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f001 fb62 	bl	800359c <HAL_Delay>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	f001 fe07 	bl	8003b08 <HAL_GPIO_ReadPin>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <clearBuffers>:




// fill buffers with 0's
void clearBuffers(Esp01s* esp){
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
	memset(esp->RxBuffer,0,sizeof(esp->RxBuffer));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 feb0 	bl	8006c88 <memset>
	memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fea9 	bl	8006c88 <memset>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <newEsp01s>:


Esp01s newEsp01s(UART_HandleTypeDef* _UART){
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	f5ad 5da3 	sub.w	sp, sp, #5216	@ 0x1460
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001f4c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8001f50:	6018      	str	r0, [r3, #0]
 8001f52:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001f56:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8001f5a:	6019      	str	r1, [r3, #0]
	Esp01s new_ESP;
	new_ESP.esp_uart = _UART;
 8001f5c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001f60:	f2a3 4364 	subw	r3, r3, #1124	@ 0x464
 8001f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001f6e:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8c2 3410 	str.w	r3, [r2, #1040]	@ 0x410
	new_ESP.RxSize = 512;
 8001f78:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001f7c:	f2a3 4364 	subw	r3, r3, #1124	@ 0x464
 8001f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f84:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
	clearBuffers(&new_ESP);
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	3b04      	subs	r3, #4
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ffbd 	bl	8001f0e <clearBuffers>
	return new_ESP;
 8001f94:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001f98:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001fa2:	f2a3 4364 	subw	r3, r3, #1124	@ 0x464
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f241 4364 	movw	r3, #5220	@ 0x1464
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f004 fec2 	bl	8006d38 <memcpy>
}
 8001fb4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001fb8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	f507 57a3 	add.w	r7, r7, #5216	@ 0x1460
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <esp_transmit>:

void esp_transmit(Esp01s* esp, char* c, int delay){
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(esp->esp_uart, (uint8_t *)c, strlen(c),delay);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fda:	f8d3 4410 	ldr.w	r4, [r3, #1040]	@ 0x410
 8001fde:	68b8      	ldr	r0, [r7, #8]
 8001fe0:	f7fe f8b6 	bl	8000150 <strlen>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	4620      	mov	r0, r4
 8001fee:	f004 fb94 	bl	800671a <HAL_UART_Transmit>
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}

08001ffa <esp_receive>:
void esp_receive(Esp01s* esp, int delay){
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
	memset(esp->RxBuffer,0,sizeof(esp->RxBuffer));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800200a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f004 fe39 	bl	8006c88 <memset>
	HAL_UART_Receive(esp->esp_uart, esp->RxBuffer, esp->RxSize,delay);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201c:	f8d3 0410 	ldr.w	r0, [r3, #1040]	@ 0x410
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f503 7100 	add.w	r1, r3, #512	@ 0x200
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800202c:	b29a      	uxth	r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f004 fbfe 	bl	8006830 <HAL_UART_Receive>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <check_at>:

void check_at(Esp01s* esp){
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, AT_cmd, 1000);
 8002044:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002048:	4914      	ldr	r1, [pc, #80]	@ (800209c <check_at+0x60>)
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffbc 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 8002050:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ffd0 	bl	8001ffa <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002060:	490f      	ldr	r1, [pc, #60]	@ (80020a0 <check_at+0x64>)
 8002062:	4618      	mov	r0, r3
 8002064:	f004 fe25 	bl	8006cb2 <strstr>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <check_at+0x42>
		esp->ok_status = AT_OK;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002074:	461a      	mov	r2, r3
 8002076:	2300      	movs	r3, #0
 8002078:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
 800207c:	e007      	b.n	800208e <check_at+0x52>
	}else{
		esp->ok_status = AT_FAIL;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002084:	461a      	mov	r2, r3
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
	}
	HAL_Delay(100);
 800208e:	2064      	movs	r0, #100	@ 0x64
 8002090:	f001 fa84 	bl	800359c <HAL_Delay>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	08007ef0 	.word	0x08007ef0
 80020a0:	08007ef8 	.word	0x08007ef8

080020a4 <reset_by_wire>:

void reset_by_wire(){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	// restart the esp by changing ESP_01S_RST pin to LOW
	HAL_GPIO_WritePin(ESP_01S_RST_GPIO_Port,ESP_01S_RST_Pin , GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020ae:	4809      	ldr	r0, [pc, #36]	@ (80020d4 <reset_by_wire+0x30>)
 80020b0:	f001 fd41 	bl	8003b36 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80020b4:	2064      	movs	r0, #100	@ 0x64
 80020b6:	f001 fa71 	bl	800359c <HAL_Delay>
	// tour it on and give it time to reset
	HAL_GPIO_WritePin(ESP_01S_RST_GPIO_Port,ESP_01S_RST_Pin , GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020c0:	4804      	ldr	r0, [pc, #16]	@ (80020d4 <reset_by_wire+0x30>)
 80020c2:	f001 fd38 	bl	8003b36 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80020c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020ca:	f001 fa67 	bl	800359c <HAL_Delay>
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40010800 	.word	0x40010800

080020d8 <mode_set_station>:
//	HAL_Delay(1000);
//}


// station mode
void mode_set_station(Esp01s* esp){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, MODE_STATION_cmd, 1000);
 80020e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020e4:	4913      	ldr	r1, [pc, #76]	@ (8002134 <mode_set_station+0x5c>)
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ff6e 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 80020ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ff82 	bl	8001ffa <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80020fc:	490e      	ldr	r1, [pc, #56]	@ (8002138 <mode_set_station+0x60>)
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 fdd7 	bl	8006cb2 <strstr>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <mode_set_station+0x42>
		esp->station_status = STATION_MODE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002110:	461a      	mov	r2, r3
 8002112:	2301      	movs	r3, #1
 8002114:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
	}else{
		esp->station_status = MODE_ERR;
	}
}
 8002118:	e007      	b.n	800212a <mode_set_station+0x52>
		esp->station_status = MODE_ERR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002120:	461a      	mov	r2, r3
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	08007efc 	.word	0x08007efc
 8002138:	08007ef8 	.word	0x08007ef8

0800213c <connect_to_ap>:

void connect_to_ap(Esp01s* esp){
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f004 fd9b 	bl	8006c88 <memset>
//	sprintf(esp->TxBuffer,"AT+CWJAP_CUR=\"ARRIS-7A66\",\"ucNEjnjBqc6J\"\r\n");
	// To nie działało u matiego
//	sprintf(esp->TxBuffer,%s,%s\r\n", ssid, password);

//	sprintf(esp->TxBuffer,"AT+CWJAP_CUR=%s,%s\r\n", ssid, password);
	sprintf(esp->TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, password);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4b33      	ldr	r3, [pc, #204]	@ (8002224 <connect_to_ap+0xe8>)
 8002156:	4a34      	ldr	r2, [pc, #208]	@ (8002228 <connect_to_ap+0xec>)
 8002158:	4934      	ldr	r1, [pc, #208]	@ (800222c <connect_to_ap+0xf0>)
 800215a:	f004 fd49 	bl	8006bf0 <siprintf>

	esp_transmit(esp, esp->TxBuffer,1000);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002164:	4619      	mov	r1, r3
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff2e 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 10000);
 800216c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff42 	bl	8001ffa <esp_receive>
	if(strstr((char *)esp->RxBuffer,"CONNECTED")){
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800217c:	492c      	ldr	r1, [pc, #176]	@ (8002230 <connect_to_ap+0xf4>)
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fd97 	bl	8006cb2 <strstr>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <connect_to_ap+0x5e>
		esp->wifi_status = CWJAP_CUR_OK;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002190:	461a      	mov	r2, r3
 8002192:	2300      	movs	r3, #0
 8002194:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444
	}
	else{
		esp->wifi_status = CWJAP_CUR_BAD_AP;
	}

}
 8002198:	e040      	b.n	800221c <connect_to_ap+0xe0>
	else if(strstr((char *)esp->RxBuffer,"TIMEOUT")){
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80021a0:	4924      	ldr	r1, [pc, #144]	@ (8002234 <connect_to_ap+0xf8>)
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 fd85 	bl	8006cb2 <strstr>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <connect_to_ap+0x84>
		esp->wifi_status = CWJAP_CUR_TIMEOUT;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b4:	461a      	mov	r2, r3
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444
}
 80021be:	e02d      	b.n	800221c <connect_to_ap+0xe0>
	else if(strstr((char *)esp->RxBuffer,"PASS")){
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80021c6:	491c      	ldr	r1, [pc, #112]	@ (8002238 <connect_to_ap+0xfc>)
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 fd72 	bl	8006cb2 <strstr>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <connect_to_ap+0xaa>
		esp->wifi_status = CWJAP_CUR_WRONG_PASS;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021da:	461a      	mov	r2, r3
 80021dc:	f06f 0301 	mvn.w	r3, #1
 80021e0:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444
}
 80021e4:	e01a      	b.n	800221c <connect_to_ap+0xe0>
	else if(strstr((char *)esp->RxBuffer,"BAD")){
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80021ec:	4913      	ldr	r1, [pc, #76]	@ (800223c <connect_to_ap+0x100>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 fd5f 	bl	8006cb2 <strstr>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <connect_to_ap+0xd0>
		esp->wifi_status = CWJAP_CUR_BAD_AP;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002200:	461a      	mov	r2, r3
 8002202:	f06f 0302 	mvn.w	r3, #2
 8002206:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444
}
 800220a:	e007      	b.n	800221c <connect_to_ap+0xe0>
		esp->wifi_status = CWJAP_CUR_BAD_AP;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002212:	461a      	mov	r2, r3
 8002214:	f06f 0302 	mvn.w	r3, #2
 8002218:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000014 	.word	0x20000014
 8002228:	20000000 	.word	0x20000000
 800222c:	08007f10 	.word	0x08007f10
 8002230:	08007f2c 	.word	0x08007f2c
 8002234:	08007f38 	.word	0x08007f38
 8002238:	08007f40 	.word	0x08007f40
 800223c:	08007f48 	.word	0x08007f48

08002240 <set_max_one_con>:

void set_max_one_con(Esp01s* esp){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, SET_ONE_CON_cmd,1000);
 8002248:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800224c:	4913      	ldr	r1, [pc, #76]	@ (800229c <set_max_one_con+0x5c>)
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff feba 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 8002254:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff fece 	bl	8001ffa <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002264:	490e      	ldr	r1, [pc, #56]	@ (80022a0 <set_max_one_con+0x60>)
 8002266:	4618      	mov	r0, r3
 8002268:	f004 fd23 	bl	8006cb2 <strstr>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <set_max_one_con+0x42>
		esp->con_count_status = CIPMUX_ONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002278:	461a      	mov	r2, r3
 800227a:	2300      	movs	r3, #0
 800227c:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
	}else{
		esp->con_count_status = CIPMUX_ERR;
	}
}
 8002280:	e007      	b.n	8002292 <set_max_one_con+0x52>
		esp->con_count_status = CIPMUX_ERR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002288:	461a      	mov	r2, r3
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	08007f4c 	.word	0x08007f4c
 80022a0:	08007ef8 	.word	0x08007ef8

080022a4 <get_ip_from_wifi>:

void get_ip_from_wifi(Esp01s* esp){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, GET_IP_cmd, 1000);
 80022ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022b0:	4907      	ldr	r1, [pc, #28]	@ (80022d0 <get_ip_from_wifi+0x2c>)
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fe88 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 80022b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff fe9c 	bl	8001ffa <esp_receive>
//	if(NULL==strstr())
	HAL_Delay(100);
 80022c2:	2064      	movs	r0, #100	@ 0x64
 80022c4:	f001 f96a 	bl	800359c <HAL_Delay>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	08007f5c 	.word	0x08007f5c

080022d4 <check_status>:

void check_status(Esp01s* esp){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, CHECK_STATUS_cmd, 1000);
 80022dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022e0:	4907      	ldr	r1, [pc, #28]	@ (8002300 <check_status+0x2c>)
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fe70 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 80022e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fe84 	bl	8001ffa <esp_receive>
	HAL_Delay(100);
 80022f2:	2064      	movs	r0, #100	@ 0x64
 80022f4:	f001 f952 	bl	800359c <HAL_Delay>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	08007f68 	.word	0x08007f68

08002304 <start_connection>:

void start_connection(Esp01s* esp){
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f004 fcb7 	bl	8006c88 <memset>
	sprintf(esp->TxBuffer,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", server_ip, server_port);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4b17      	ldr	r3, [pc, #92]	@ (800237c <start_connection+0x78>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a17      	ldr	r2, [pc, #92]	@ (8002380 <start_connection+0x7c>)
 8002322:	4918      	ldr	r1, [pc, #96]	@ (8002384 <start_connection+0x80>)
 8002324:	f004 fc64 	bl	8006bf0 <siprintf>


	esp_transmit(esp,esp->TxBuffer, 1000);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff fe49 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 8002336:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fe5d 	bl	8001ffa <esp_receive>
	if(strstr((char *)esp->RxBuffer,"OK")){
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002346:	4910      	ldr	r1, [pc, #64]	@ (8002388 <start_connection+0x84>)
 8002348:	4618      	mov	r0, r3
 800234a:	f004 fcb2 	bl	8006cb2 <strstr>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <start_connection+0x60>
		esp->tcp_con_status = TCP_CON_STARTED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800235a:	461a      	mov	r2, r3
 800235c:	2300      	movs	r3, #0
 800235e:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
	}else{
		esp->tcp_con_status = TCP_CON_START_ERR;
	}
}
 8002362:	e007      	b.n	8002374 <start_connection+0x70>
		esp->tcp_con_status = TCP_CON_START_ERR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800236a:	461a      	mov	r2, r3
 800236c:	f04f 33ff 	mov.w	r3, #4294967295
 8002370:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000030 	.word	0x20000030
 8002380:	20000020 	.word	0x20000020
 8002384:	08007f78 	.word	0x08007f78
 8002388:	08007ef8 	.word	0x08007ef8

0800238c <end_connection>:

void end_connection(Esp01s* esp){
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	esp_transmit(esp, TCP_CON_CLOSE_cmd, 1000);
 8002394:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002398:	4918      	ldr	r1, [pc, #96]	@ (80023fc <end_connection+0x70>)
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fe14 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 80023a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fe28 	bl	8001ffa <esp_receive>
	if((strstr((char *)esp->RxBuffer,"OK"))|| (strstr((char *)esp->RxBuffer,"ALREADY"))){
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80023b0:	4913      	ldr	r1, [pc, #76]	@ (8002400 <end_connection+0x74>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f004 fc7d 	bl	8006cb2 <strstr>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <end_connection+0x46>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80023c4:	490f      	ldr	r1, [pc, #60]	@ (8002404 <end_connection+0x78>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 fc73 	bl	8006cb2 <strstr>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <end_connection+0x56>
		esp->tcp_con_status = TCP_CON_ENDED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023d8:	461a      	mov	r2, r3
 80023da:	2301      	movs	r3, #1
 80023dc:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
 80023e0:	e008      	b.n	80023f4 <end_connection+0x68>
	}else{
		esp->tcp_con_status = TCP_CON_END_ERR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e8:	461a      	mov	r2, r3
 80023ea:	f06f 0301 	mvn.w	r3, #1
 80023ee:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
	}

}
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	08007f94 	.word	0x08007f94
 8002400:	08007ef8 	.word	0x08007ef8
 8002404:	08007fa4 	.word	0x08007fa4

08002408 <send_get_req>:

void send_get_req(Esp01s* esp){
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b08b      	sub	sp, #44	@ 0x2c
 800240c:	af02      	add	r7, sp, #8
 800240e:	6078      	str	r0, [r7, #4]
	memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f004 fc35 	bl	8006c88 <memset>

	sprintf(esp->GetReq,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f203 4004 	addw	r0, r3, #1028	@ 0x404
 8002424:	4b6e      	ldr	r3, [pc, #440]	@ (80025e0 <send_get_req+0x1d8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4b6e      	ldr	r3, [pc, #440]	@ (80025e4 <send_get_req+0x1dc>)
 800242c:	4a6e      	ldr	r2, [pc, #440]	@ (80025e8 <send_get_req+0x1e0>)
 800242e:	496f      	ldr	r1, [pc, #444]	@ (80025ec <send_get_req+0x1e4>)
 8002430:	f004 fbde 	bl	8006bf0 <siprintf>
			"Host: %s:%d\r\n\r\n"
			"Accept: application/json\r\n",
			api_get_path, server_ip, server_port);

	// check if connection is valid
	sprintf(esp->TxBuffer,"AT+CIPSTATUS\r\n");
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	496e      	ldr	r1, [pc, #440]	@ (80025f0 <send_get_req+0x1e8>)
 8002438:	4618      	mov	r0, r3
 800243a:	f004 fbd9 	bl	8006bf0 <siprintf>
	esp_transmit(esp, esp->TxBuffer, 1000);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002444:	4619      	mov	r1, r3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff fdbe 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 800244c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fdd2 	bl	8001ffa <esp_receive>
	if(strstr((char *)esp->RxBuffer,"STATUS:3")){
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800245c:	4965      	ldr	r1, [pc, #404]	@ (80025f4 <send_get_req+0x1ec>)
 800245e:	4618      	mov	r0, r3
 8002460:	f004 fc27 	bl	8006cb2 <strstr>
		// good connectio
	}else{
		// bad conncetion
	}

	sprintf(esp->TxBuffer,"AT+CIPSEND=%d\r\n", strlen(esp->GetReq));
 8002464:	687c      	ldr	r4, [r7, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800246c:	4618      	mov	r0, r3
 800246e:	f7fd fe6f 	bl	8000150 <strlen>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4960      	ldr	r1, [pc, #384]	@ (80025f8 <send_get_req+0x1f0>)
 8002478:	4620      	mov	r0, r4
 800247a:	f004 fbb9 	bl	8006bf0 <siprintf>
	//	sending CIPSEND with length of GetReg
	esp_transmit(esp, esp->TxBuffer, 1000);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002484:	4619      	mov	r1, r3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff fd9e 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 800248c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fdb2 	bl	8001ffa <esp_receive>

	//	searching for > char in response stating that esp is ready for post req
	// check for "Link not valid"
	if(strstr((char *)esp->RxBuffer,">")){
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800249c:	213e      	movs	r1, #62	@ 0x3e
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 fbfa 	bl	8006c98 <strchr>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8096 	beq.w	80025d8 <send_get_req+0x1d0>
		memset(esp->RxBuffer,0,sizeof(esp->RxBuffer));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80024b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f004 fbe5 	bl	8006c88 <memset>
		esp_transmit(esp,esp->GetReq,1000);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fd7c 	bl	8001fc8 <esp_transmit>
		esp_receive(esp, 1000);
 80024d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff fd90 	bl	8001ffa <esp_receive>
		if(strstr((char *)esp->RxBuffer,"SEND OK")){
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80024e0:	4946      	ldr	r1, [pc, #280]	@ (80025fc <send_get_req+0x1f4>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 fbe5 	bl	8006cb2 <strstr>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d051      	beq.n	8002592 <send_get_req+0x18a>
			esp->get_req_status = GET_SEND_OK;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f4:	461a      	mov	r2, r3
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

			int timers[3] = {0};
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]

			char *index_s1 = strstr((char *)esp->RxBuffer,"\"S1\":");
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800250e:	493c      	ldr	r1, [pc, #240]	@ (8002600 <send_get_req+0x1f8>)
 8002510:	4618      	mov	r0, r3
 8002512:	f004 fbce 	bl	8006cb2 <strstr>
 8002516:	61f8      	str	r0, [r7, #28]
			char *index_s2 = strstr((char *)esp->RxBuffer,"\"S2\":");
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800251e:	4939      	ldr	r1, [pc, #228]	@ (8002604 <send_get_req+0x1fc>)
 8002520:	4618      	mov	r0, r3
 8002522:	f004 fbc6 	bl	8006cb2 <strstr>
 8002526:	61b8      	str	r0, [r7, #24]
			char *index_s3 = strstr((char *)esp->RxBuffer,"\"S3\":");
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800252e:	4936      	ldr	r1, [pc, #216]	@ (8002608 <send_get_req+0x200>)
 8002530:	4618      	mov	r0, r3
 8002532:	f004 fbbe 	bl	8006cb2 <strstr>
 8002536:	6178      	str	r0, [r7, #20]

			sscanf((index_s1+5), "%d", &timers[0]);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3305      	adds	r3, #5
 800253c:	f107 0208 	add.w	r2, r7, #8
 8002540:	4932      	ldr	r1, [pc, #200]	@ (800260c <send_get_req+0x204>)
 8002542:	4618      	mov	r0, r3
 8002544:	f004 fb74 	bl	8006c30 <siscanf>
			sscanf((index_s2+5), "%d", &timers[1]);
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	1d58      	adds	r0, r3, #5
 800254c:	f107 0308 	add.w	r3, r7, #8
 8002550:	3304      	adds	r3, #4
 8002552:	461a      	mov	r2, r3
 8002554:	492d      	ldr	r1, [pc, #180]	@ (800260c <send_get_req+0x204>)
 8002556:	f004 fb6b 	bl	8006c30 <siscanf>
			sscanf((index_s3+5), "%d", &timers[2]);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	1d58      	adds	r0, r3, #5
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	3308      	adds	r3, #8
 8002564:	461a      	mov	r2, r3
 8002566:	4929      	ldr	r1, [pc, #164]	@ (800260c <send_get_req+0x204>)
 8002568:	f004 fb62 	bl	8006c30 <siscanf>

			esp->timers[0] = timers[0];
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002574:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
			esp->timers[1] = timers[1];
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002580:	f8c2 3408 	str.w	r3, [r2, #1032]	@ 0x408
			esp->timers[2] = timers[2];
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800258c:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
			esp->timers[2] = 60;
			reset_by_wire();
			HAL_Delay(5000);
		}
	}
}
 8002590:	e022      	b.n	80025d8 <send_get_req+0x1d0>
			esp->get_req_status = POST_SEND_ERR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002598:	461a      	mov	r2, r3
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450
			esp->timers[0] = 60;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a8:	461a      	mov	r2, r3
 80025aa:	233c      	movs	r3, #60	@ 0x3c
 80025ac:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
			esp->timers[1] = 60;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b6:	461a      	mov	r2, r3
 80025b8:	233c      	movs	r3, #60	@ 0x3c
 80025ba:	f8c2 3408 	str.w	r3, [r2, #1032]	@ 0x408
			esp->timers[2] = 60;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025c4:	461a      	mov	r2, r3
 80025c6:	233c      	movs	r3, #60	@ 0x3c
 80025c8:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
			reset_by_wire();
 80025cc:	f7ff fd6a 	bl	80020a4 <reset_by_wire>
			HAL_Delay(5000);
 80025d0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80025d4:	f000 ffe2 	bl	800359c <HAL_Delay>
}
 80025d8:	bf00      	nop
 80025da:	3724      	adds	r7, #36	@ 0x24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	20000030 	.word	0x20000030
 80025e4:	20000020 	.word	0x20000020
 80025e8:	20000034 	.word	0x20000034
 80025ec:	08007fac 	.word	0x08007fac
 80025f0:	08007f68 	.word	0x08007f68
 80025f4:	08007fe8 	.word	0x08007fe8
 80025f8:	08007ff4 	.word	0x08007ff4
 80025fc:	08008004 	.word	0x08008004
 8002600:	0800800c 	.word	0x0800800c
 8002604:	08008014 	.word	0x08008014
 8002608:	0800801c 	.word	0x0800801c
 800260c:	08008024 	.word	0x08008024

08002610 <send_single_sensor_post_req>:
		}
	}
}


void send_single_sensor_post_req(Esp01s* esp,int t, int h, int p, int id_sensor){
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af04      	add	r7, sp, #16
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]

	memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f004 fb2e 	bl	8006c88 <memset>
	memset(esp->RxBuffer,0,sizeof(esp->RxBuffer));
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f004 fb25 	bl	8006c88 <memset>
	memset(esp->PostBody,0,sizeof(esp->PostBody));
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002644:	3304      	adds	r3, #4
 8002646:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f004 fb1b 	bl	8006c88 <memset>
	memset(esp->PostReq,0,sizeof(esp->PostReq));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f603 0304 	addw	r3, r3, #2052	@ 0x804
 8002658:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f004 fb12 	bl	8006c88 <memset>

	sprintf(esp->PostBody,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f503 5080 	add.w	r0, r3, #4096	@ 0x1000
 800266a:	3004      	adds	r0, #4
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	4951      	ldr	r1, [pc, #324]	@ (80027c0 <send_single_sensor_post_req+0x1b0>)
 800267a:	f004 fab9 	bl	8006bf0 <siprintf>
			  "}"
	"}",
	t, h, p, id_sensor);


	sprintf(esp->PostReq,
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8002684:	4b4f      	ldr	r3, [pc, #316]	@ (80027c4 <send_single_sensor_post_req+0x1b4>)
 8002686:	681c      	ldr	r4, [r3, #0]
			"Host: %s:%d\r\n"
			"Content-Type: application/json\r\n"
			"Content-Length: %d\r\n\r\n"
			"%s\r\n\r\n",
			api_post_path, server_ip, server_port,
			strlen(esp->PostBody), esp->PostBody);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800268e:	3304      	adds	r3, #4
	sprintf(esp->PostReq,
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd fd5d 	bl	8000150 <strlen>
 8002696:	4602      	mov	r2, r0
			strlen(esp->PostBody), esp->PostBody);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800269e:	3304      	adds	r3, #4
	sprintf(esp->PostReq,
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	9201      	str	r2, [sp, #4]
 80026a4:	9400      	str	r4, [sp, #0]
 80026a6:	4b48      	ldr	r3, [pc, #288]	@ (80027c8 <send_single_sensor_post_req+0x1b8>)
 80026a8:	4a48      	ldr	r2, [pc, #288]	@ (80027cc <send_single_sensor_post_req+0x1bc>)
 80026aa:	4949      	ldr	r1, [pc, #292]	@ (80027d0 <send_single_sensor_post_req+0x1c0>)
 80026ac:	4628      	mov	r0, r5
 80026ae:	f004 fa9f 	bl	8006bf0 <siprintf>

	// check if connection is valid
	sprintf(esp->TxBuffer,"AT+CIPSTATUS\r\n");
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4947      	ldr	r1, [pc, #284]	@ (80027d4 <send_single_sensor_post_req+0x1c4>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fa9a 	bl	8006bf0 <siprintf>
	esp_transmit(esp, esp->TxBuffer, 1000);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026c2:	4619      	mov	r1, r3
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7ff fc7f 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 80026ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7ff fc93 	bl	8001ffa <esp_receive>
	if(strstr((char *)esp->RxBuffer,"STATUS:3")){
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80026da:	493f      	ldr	r1, [pc, #252]	@ (80027d8 <send_single_sensor_post_req+0x1c8>)
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fae8 	bl	8006cb2 <strstr>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <send_single_sensor_post_req+0xe4>
		// good connectio
	}else{
		end_connection(esp);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff fe4f 	bl	800238c <end_connection>
		start_connection(esp);
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f7ff fe08 	bl	8002304 <start_connection>
	}
	memset(esp->TxBuffer,0,sizeof(esp->TxBuffer));
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 fac3 	bl	8006c88 <memset>
	sprintf(esp->TxBuffer,"AT+CIPSEND=%d\r\n", strlen(esp->PostReq));
 8002702:	68fc      	ldr	r4, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f603 0304 	addw	r3, r3, #2052	@ 0x804
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd fd20 	bl	8000150 <strlen>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	4931      	ldr	r1, [pc, #196]	@ (80027dc <send_single_sensor_post_req+0x1cc>)
 8002716:	4620      	mov	r0, r4
 8002718:	f004 fa6a 	bl	8006bf0 <siprintf>
	//	sending CIPSEND with length of PostReg
	esp_transmit(esp, esp->TxBuffer, 1000);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002722:	4619      	mov	r1, r3
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7ff fc4f 	bl	8001fc8 <esp_transmit>
	esp_receive(esp, 1000);
 800272a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f7ff fc63 	bl	8001ffa <esp_receive>

	//	searching for > char in response stating that esp is ready for post req
	// check for "Link not valid"
	if(strstr((char *)esp->RxBuffer,">")){
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800273a:	213e      	movs	r1, #62	@ 0x3e
 800273c:	4618      	mov	r0, r3
 800273e:	f004 faab 	bl	8006c98 <strchr>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d036      	beq.n	80027b6 <send_single_sensor_post_req+0x1a6>
		memset(esp->RxBuffer,0,sizeof(esp->RxBuffer));
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800274e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f004 fa97 	bl	8006c88 <memset>
		esp_transmit(esp,esp->PostReq,1000);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f603 0304 	addw	r3, r3, #2052	@ 0x804
 8002760:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002764:	4619      	mov	r1, r3
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff fc2e 	bl	8001fc8 <esp_transmit>
		esp_receive(esp, 1000);
 800276c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff fc42 	bl	8001ffa <esp_receive>
		if(strstr((char *)esp->RxBuffer,"SEND OK")){
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800277c:	4918      	ldr	r1, [pc, #96]	@ (80027e0 <send_single_sensor_post_req+0x1d0>)
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fa97 	bl	8006cb2 <strstr>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <send_single_sensor_post_req+0x18a>
			esp->post_req_status = POST_SEND_OK;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002790:	461a      	mov	r2, r3
 8002792:	2300      	movs	r3, #0
 8002794:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454
			reset_by_wire();
			HAL_Delay(5000);
		}

	}
}
 8002798:	e00d      	b.n	80027b6 <send_single_sensor_post_req+0x1a6>
			esp->post_req_status = POST_SEND_ERR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a0:	461a      	mov	r2, r3
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454
			reset_by_wire();
 80027aa:	f7ff fc7b 	bl	80020a4 <reset_by_wire>
			HAL_Delay(5000);
 80027ae:	f241 3088 	movw	r0, #5000	@ 0x1388
 80027b2:	f000 fef3 	bl	800359c <HAL_Delay>
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bdb0      	pop	{r4, r5, r7, pc}
 80027be:	bf00      	nop
 80027c0:	0800814c 	.word	0x0800814c
 80027c4:	20000030 	.word	0x20000030
 80027c8:	20000020 	.word	0x20000020
 80027cc:	20000048 	.word	0x20000048
 80027d0:	080080f0 	.word	0x080080f0
 80027d4:	08007f68 	.word	0x08007f68
 80027d8:	08007fe8 	.word	0x08007fe8
 80027dc:	08007ff4 	.word	0x08007ff4
 80027e0:	08008004 	.word	0x08008004

080027e4 <esp_setup>:
/*
 * 	This setup
 *
 */

void esp_setup(Esp01s* esp){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	check_at(esp);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fc25 	bl	800203c <check_at>
	while(esp->ok_status != AT_OK){
 80027f2:	e008      	b.n	8002806 <esp_setup+0x22>
		reset_by_wire();
 80027f4:	f7ff fc56 	bl	80020a4 <reset_by_wire>
		HAL_Delay(2000);
 80027f8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80027fc:	f000 fece 	bl	800359c <HAL_Delay>
		check_at(esp);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff fc1b 	bl	800203c <check_at>
	while(esp->ok_status != AT_OK){
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800280c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ef      	bne.n	80027f4 <esp_setup+0x10>
	}
	mode_set_station(esp);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff fc5f 	bl	80020d8 <mode_set_station>
	connect_to_ap(esp);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff fc8e 	bl	800213c <connect_to_ap>
	set_max_one_con(esp);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fd0d 	bl	8002240 <set_max_one_con>
	get_ip_from_wifi(esp);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff fd3c 	bl	80022a4 <get_ip_from_wifi>
	check_status(esp);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff fd51 	bl	80022d4 <check_status>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002850:	4b42      	ldr	r3, [pc, #264]	@ (800295c <MX_GPIO_Init+0x120>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a41      	ldr	r2, [pc, #260]	@ (800295c <MX_GPIO_Init+0x120>)
 8002856:	f043 0310 	orr.w	r3, r3, #16
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b3f      	ldr	r3, [pc, #252]	@ (800295c <MX_GPIO_Init+0x120>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002868:	4b3c      	ldr	r3, [pc, #240]	@ (800295c <MX_GPIO_Init+0x120>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4a3b      	ldr	r2, [pc, #236]	@ (800295c <MX_GPIO_Init+0x120>)
 800286e:	f043 0320 	orr.w	r3, r3, #32
 8002872:	6193      	str	r3, [r2, #24]
 8002874:	4b39      	ldr	r3, [pc, #228]	@ (800295c <MX_GPIO_Init+0x120>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002880:	4b36      	ldr	r3, [pc, #216]	@ (800295c <MX_GPIO_Init+0x120>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a35      	ldr	r2, [pc, #212]	@ (800295c <MX_GPIO_Init+0x120>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b33      	ldr	r3, [pc, #204]	@ (800295c <MX_GPIO_Init+0x120>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002898:	4b30      	ldr	r3, [pc, #192]	@ (800295c <MX_GPIO_Init+0x120>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4a2f      	ldr	r2, [pc, #188]	@ (800295c <MX_GPIO_Init+0x120>)
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	6193      	str	r3, [r2, #24]
 80028a4:	4b2d      	ldr	r3, [pc, #180]	@ (800295c <MX_GPIO_Init+0x120>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80028b0:	2200      	movs	r2, #0
 80028b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028b6:	482a      	ldr	r0, [pc, #168]	@ (8002960 <MX_GPIO_Init+0x124>)
 80028b8:	f001 f93d 	bl	8003b36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|ESP_01S_RST_Pin, GPIO_PIN_SET);
 80028bc:	2201      	movs	r2, #1
 80028be:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80028c2:	4828      	ldr	r0, [pc, #160]	@ (8002964 <MX_GPIO_Init+0x128>)
 80028c4:	f001 f937 	bl	8003b36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80028c8:	2201      	movs	r2, #1
 80028ca:	2101      	movs	r1, #1
 80028cc:	4826      	ldr	r0, [pc, #152]	@ (8002968 <MX_GPIO_Init+0x12c>)
 80028ce:	f001 f932 	bl	8003b36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80028d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d8:	2301      	movs	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2302      	movs	r3, #2
 80028e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	4619      	mov	r1, r3
 80028ea:	481d      	ldr	r0, [pc, #116]	@ (8002960 <MX_GPIO_Init+0x124>)
 80028ec:	f000 ff88 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin ESP_01S_RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|ESP_01S_RST_Pin;
 80028f0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80028f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f6:	2301      	movs	r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fe:	2302      	movs	r3, #2
 8002900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 0310 	add.w	r3, r7, #16
 8002906:	4619      	mov	r1, r3
 8002908:	4816      	ldr	r0, [pc, #88]	@ (8002964 <MX_GPIO_Init+0x128>)
 800290a:	f000 ff79 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 800290e:	2301      	movs	r3, #1
 8002910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2302      	movs	r3, #2
 800291c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	4619      	mov	r1, r3
 8002924:	4810      	ldr	r0, [pc, #64]	@ (8002968 <MX_GPIO_Init+0x12c>)
 8002926:	f000 ff6b 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800292a:	2302      	movs	r3, #2
 800292c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800292e:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <MX_GPIO_Init+0x130>)
 8002930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	4619      	mov	r1, r3
 800293c:	480a      	ldr	r0, [pc, #40]	@ (8002968 <MX_GPIO_Init+0x12c>)
 800293e:	f000 ff5f 	bl	8003800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	2007      	movs	r0, #7
 8002948:	f000 ff23 	bl	8003792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800294c:	2007      	movs	r0, #7
 800294e:	f000 ff3c 	bl	80037ca <HAL_NVIC_EnableIRQ>

}
 8002952:	bf00      	nop
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	40011000 	.word	0x40011000
 8002964:	40010800 	.word	0x40010800
 8002968:	40010c00 	.word	0x40010c00
 800296c:	10110000 	.word	0x10110000

08002970 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002974:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <MX_I2C1_Init+0x50>)
 8002976:	4a13      	ldr	r2, [pc, #76]	@ (80029c4 <MX_I2C1_Init+0x54>)
 8002978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800297a:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <MX_I2C1_Init+0x50>)
 800297c:	4a12      	ldr	r2, [pc, #72]	@ (80029c8 <MX_I2C1_Init+0x58>)
 800297e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002980:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <MX_I2C1_Init+0x50>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002986:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <MX_I2C1_Init+0x50>)
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <MX_I2C1_Init+0x50>)
 800298e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002994:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <MX_I2C1_Init+0x50>)
 8002996:	2200      	movs	r2, #0
 8002998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800299a:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <MX_I2C1_Init+0x50>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <MX_I2C1_Init+0x50>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <MX_I2C1_Init+0x50>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029ac:	4804      	ldr	r0, [pc, #16]	@ (80029c0 <MX_I2C1_Init+0x50>)
 80029ae:	f001 f8fd 	bl	8003bac <HAL_I2C_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029b8:	f000 faf5 	bl	8002fa6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000118 	.word	0x20000118
 80029c4:	40005400 	.word	0x40005400
 80029c8:	000186a0 	.word	0x000186a0

080029cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a15      	ldr	r2, [pc, #84]	@ (8002a3c <HAL_I2C_MspInit+0x70>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d123      	bne.n	8002a34 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ec:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <HAL_I2C_MspInit+0x74>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4a13      	ldr	r2, [pc, #76]	@ (8002a40 <HAL_I2C_MspInit+0x74>)
 80029f2:	f043 0308 	orr.w	r3, r3, #8
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <HAL_I2C_MspInit+0x74>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a04:	23c0      	movs	r3, #192	@ 0xc0
 8002a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a08:	2312      	movs	r3, #18
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	4619      	mov	r1, r3
 8002a16:	480b      	ldr	r0, [pc, #44]	@ (8002a44 <HAL_I2C_MspInit+0x78>)
 8002a18:	f000 fef2 	bl	8003800 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a1c:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <HAL_I2C_MspInit+0x74>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4a07      	ldr	r2, [pc, #28]	@ (8002a40 <HAL_I2C_MspInit+0x74>)
 8002a22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a26:	61d3      	str	r3, [r2, #28]
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_I2C_MspInit+0x74>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a34:	bf00      	nop
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40005400 	.word	0x40005400
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40010c00 	.word	0x40010c00

08002a48 <clearTx>:

/*  ----------------------------------
 * 		LoRa Functions
 *  ----------------------------------
 */
void clearTx(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
	memset(LoRaTxBuffer,0,sizeof(LoRaTxBuffer));
 8002a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a50:	2100      	movs	r1, #0
 8002a52:	4802      	ldr	r0, [pc, #8]	@ (8002a5c <clearTx+0x14>)
 8002a54:	f004 f918 	bl	8006c88 <memset>
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000630 	.word	0x20000630

08002a60 <clearRx>:

void clearRx(){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	memset(LoRaRxBuffer,0,sizeof(LoRaRxBuffer));
 8002a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4802      	ldr	r0, [pc, #8]	@ (8002a74 <clearRx+0x14>)
 8002a6c:	f004 f90c 	bl	8006c88 <memset>
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000830 	.word	0x20000830

08002a78 <LoRaSetRxMode>:
// Puts LoRa module in receive mode
// -- LED should be off --
void LoRaSetRxMode(){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	clearRx();
 8002a7c:	f7ff fff0 	bl	8002a60 <clearRx>
	SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8002a80:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002a84:	2110      	movs	r1, #16
 8002a86:	4809      	ldr	r0, [pc, #36]	@ (8002aac <LoRaSetRxMode+0x34>)
 8002a88:	f7fe fff6 	bl	8001a78 <SX1278_LoRaEntryRx>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a92:	4807      	ldr	r0, [pc, #28]	@ (8002ab0 <LoRaSetRxMode+0x38>)
 8002a94:	f001 f84f 	bl	8003b36 <HAL_GPIO_WritePin>
	receiver = 1;
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <LoRaSetRxMode+0x3c>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 8002a9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002aa2:	f000 fd7b 	bl	800359c <HAL_Delay>
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000510 	.word	0x20000510
 8002ab0:	40011000 	.word	0x40011000
 8002ab4:	20000628 	.word	0x20000628

08002ab8 <LoRaSetTxMode>:

// Puts LoRa module in transmit mode
// -- LED should be on --
void LoRaSetTxMode(){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	clearTx();
 8002abc:	f7ff ffc4 	bl	8002a48 <clearTx>
	SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8002ac0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002ac4:	2110      	movs	r1, #16
 8002ac6:	4809      	ldr	r0, [pc, #36]	@ (8002aec <LoRaSetTxMode+0x34>)
 8002ac8:	f7ff f87f 	bl	8001bca <SX1278_LoRaEntryTx>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002acc:	2201      	movs	r2, #1
 8002ace:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ad2:	4807      	ldr	r0, [pc, #28]	@ (8002af0 <LoRaSetTxMode+0x38>)
 8002ad4:	f001 f82f 	bl	8003b36 <HAL_GPIO_WritePin>
	receiver = 0;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <LoRaSetTxMode+0x3c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 8002ade:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ae2:	f000 fd5b 	bl	800359c <HAL_Delay>
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000510 	.word	0x20000510
 8002af0:	40011000 	.word	0x40011000
 8002af4:	20000628 	.word	0x20000628

08002af8 <retrieve_onboard_sensor_data>:

void retrieve_onboard_sensor_data(){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af02      	add	r7, sp, #8
	AHT20_Read(&temperature, &humidity);
 8002afe:	4921      	ldr	r1, [pc, #132]	@ (8002b84 <retrieve_onboard_sensor_data+0x8c>)
 8002b00:	4821      	ldr	r0, [pc, #132]	@ (8002b88 <retrieve_onboard_sensor_data+0x90>)
 8002b02:	f7fe fb45 	bl	8001190 <AHT20_Read>
	pressure = BMP280_ReadPressure(&hi2c1);
 8002b06:	4821      	ldr	r0, [pc, #132]	@ (8002b8c <retrieve_onboard_sensor_data+0x94>)
 8002b08:	f7fe fccc 	bl	80014a4 <BMP280_ReadPressure>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4a20      	ldr	r2, [pc, #128]	@ (8002b90 <retrieve_onboard_sensor_data+0x98>)
 8002b10:	6013      	str	r3, [r2, #0]

	sensor_id = 1;
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <retrieve_onboard_sensor_data+0x9c>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
	temperature_int = (int)temperature;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <retrieve_onboard_sensor_data+0x90>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe f99b 	bl	8000e58 <__aeabi_f2iz>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <retrieve_onboard_sensor_data+0xa0>)
 8002b26:	6013      	str	r3, [r2, #0]
	humidity_int = (int)humidity;
 8002b28:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <retrieve_onboard_sensor_data+0x8c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe f993 	bl	8000e58 <__aeabi_f2iz>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4a19      	ldr	r2, [pc, #100]	@ (8002b9c <retrieve_onboard_sensor_data+0xa4>)
 8002b36:	6013      	str	r3, [r2, #0]
	pressure_int = (int)pressure;
 8002b38:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <retrieve_onboard_sensor_data+0x98>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe f98b 	bl	8000e58 <__aeabi_f2iz>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <retrieve_onboard_sensor_data+0xa8>)
 8002b46:	6013      	str	r3, [r2, #0]

	#ifdef ESP
	  send_single_sensor_post_req(&Esp, temperature_int, humidity_int, pressure_int, sensor_id);
 8002b48:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <retrieve_onboard_sensor_data+0xa0>)
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <retrieve_onboard_sensor_data+0xa4>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <retrieve_onboard_sensor_data+0xa8>)
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	4b0f      	ldr	r3, [pc, #60]	@ (8002b94 <retrieve_onboard_sensor_data+0x9c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4811      	ldr	r0, [pc, #68]	@ (8002ba4 <retrieve_onboard_sensor_data+0xac>)
 8002b5e:	f7ff fd57 	bl	8002610 <send_single_sensor_post_req>
	#endif
	addData(&readings, sensor_id, temperature_int, humidity_int, pressure_int);
 8002b62:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <retrieve_onboard_sensor_data+0x9c>)
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <retrieve_onboard_sensor_data+0xa0>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <retrieve_onboard_sensor_data+0xa4>)
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <retrieve_onboard_sensor_data+0xa8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	4603      	mov	r3, r0
 8002b76:	480c      	ldr	r0, [pc, #48]	@ (8002ba8 <retrieve_onboard_sensor_data+0xb0>)
 8002b78:	f000 fa59 	bl	800302e <addData>
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000170 	.word	0x20000170
 8002b88:	2000016c 	.word	0x2000016c
 8002b8c:	20000118 	.word	0x20000118
 8002b90:	20000174 	.word	0x20000174
 8002b94:	2000005c 	.word	0x2000005c
 8002b98:	20000178 	.word	0x20000178
 8002b9c:	2000017c 	.word	0x2000017c
 8002ba0:	20000180 	.word	0x20000180
 8002ba4:	20000a34 	.word	0x20000a34
 8002ba8:	20000184 	.word	0x20000184

08002bac <retrieve_sensor_data>:


void retrieve_sensor_data(int sensorID){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	6078      	str	r0, [r7, #4]
	// Send info to sensor
	tx_len = sprintf(LoRaTxBuffer, "%d,%d",sensorID, reverse_time);
 8002bb4:	4b42      	ldr	r3, [pc, #264]	@ (8002cc0 <retrieve_sensor_data+0x114>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4942      	ldr	r1, [pc, #264]	@ (8002cc4 <retrieve_sensor_data+0x118>)
 8002bbc:	4842      	ldr	r0, [pc, #264]	@ (8002cc8 <retrieve_sensor_data+0x11c>)
 8002bbe:	f004 f817 	bl	8006bf0 <siprintf>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4a41      	ldr	r2, [pc, #260]	@ (8002ccc <retrieve_sensor_data+0x120>)
 8002bc6:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaEntryTx(&SX1278, tx_len, 2000);
 8002bc8:	4b40      	ldr	r3, [pc, #256]	@ (8002ccc <retrieve_sensor_data+0x120>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	483e      	ldr	r0, [pc, #248]	@ (8002cd0 <retrieve_sensor_data+0x124>)
 8002bd6:	f7fe fff8 	bl	8001bca <SX1278_LoRaEntryTx>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4a3d      	ldr	r2, [pc, #244]	@ (8002cd4 <retrieve_sensor_data+0x128>)
 8002bde:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) LoRaTxBuffer,
 8002be0:	4b3a      	ldr	r3, [pc, #232]	@ (8002ccc <retrieve_sensor_data+0x120>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002bea:	4937      	ldr	r1, [pc, #220]	@ (8002cc8 <retrieve_sensor_data+0x11c>)
 8002bec:	4838      	ldr	r0, [pc, #224]	@ (8002cd0 <retrieve_sensor_data+0x124>)
 8002bee:	f7ff f844 	bl	8001c7a <SX1278_LoRaTxPacket>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4a37      	ldr	r2, [pc, #220]	@ (8002cd4 <retrieve_sensor_data+0x128>)
 8002bf6:	6013      	str	r3, [r2, #0]
							tx_len, 2000);
	// Set RX mode, Read sensor data
	HAL_Delay(500);
 8002bf8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002bfc:	f000 fcce 	bl	800359c <HAL_Delay>
	LoRaSetRxMode();
 8002c00:	f7ff ff3a 	bl	8002a78 <LoRaSetRxMode>

	// Calculate how long keep listening for anwser
	current_time = HAL_GetTick();
 8002c04:	f000 fcc0 	bl	8003588 <HAL_GetTick>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4a33      	ldr	r2, [pc, #204]	@ (8002cd8 <retrieve_sensor_data+0x12c>)
 8002c0c:	6013      	str	r3, [r2, #0]
	inside_counter = current_time+(reverse_time*1000);
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <retrieve_sensor_data+0x114>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd8 <retrieve_sensor_data+0x12c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4413      	add	r3, r2
 8002c22:	4a2e      	ldr	r2, [pc, #184]	@ (8002cdc <retrieve_sensor_data+0x130>)
 8002c24:	6013      	str	r3, [r2, #0]

	// Listen for response
	while(HAL_GetTick()<=inside_counter){
 8002c26:	bf00      	nop
 8002c28:	f000 fcae 	bl	8003588 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cdc <retrieve_sensor_data+0x130>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d83d      	bhi.n	8002cb2 <retrieve_sensor_data+0x106>
		ret = SX1278_LoRaRxPacket(&SX1278);		// return gives length of received data
 8002c36:	4826      	ldr	r0, [pc, #152]	@ (8002cd0 <retrieve_sensor_data+0x124>)
 8002c38:	f7fe ff83 	bl	8001b42 <SX1278_LoRaRxPacket>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4b24      	ldr	r3, [pc, #144]	@ (8002cd4 <retrieve_sensor_data+0x128>)
 8002c42:	601a      	str	r2, [r3, #0]
		if(ret > 0){
 8002c44:	4b23      	ldr	r3, [pc, #140]	@ (8002cd4 <retrieve_sensor_data+0x128>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	dd31      	ble.n	8002cb0 <retrieve_sensor_data+0x104>
			SX1278_read(&SX1278, (uint8_t*) LoRaRxBuffer, ret); // read data send
 8002c4c:	4b21      	ldr	r3, [pc, #132]	@ (8002cd4 <retrieve_sensor_data+0x128>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	4922      	ldr	r1, [pc, #136]	@ (8002ce0 <retrieve_sensor_data+0x134>)
 8002c56:	481e      	ldr	r0, [pc, #120]	@ (8002cd0 <retrieve_sensor_data+0x124>)
 8002c58:	f7ff f87b 	bl	8001d52 <SX1278_read>

			int s_id;
			sscanf(LoRaRxBuffer, "%d,%d,%d,%d", &s_id, &temperature_int, &humidity_int, &pressure_int);
 8002c5c:	f107 020c 	add.w	r2, r7, #12
 8002c60:	4b20      	ldr	r3, [pc, #128]	@ (8002ce4 <retrieve_sensor_data+0x138>)
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	4b20      	ldr	r3, [pc, #128]	@ (8002ce8 <retrieve_sensor_data+0x13c>)
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	4b20      	ldr	r3, [pc, #128]	@ (8002cec <retrieve_sensor_data+0x140>)
 8002c6a:	4921      	ldr	r1, [pc, #132]	@ (8002cf0 <retrieve_sensor_data+0x144>)
 8002c6c:	481c      	ldr	r0, [pc, #112]	@ (8002ce0 <retrieve_sensor_data+0x134>)
 8002c6e:	f003 ffdf 	bl	8006c30 <siscanf>

			if(s_id == sensorID){
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d11a      	bne.n	8002cb0 <retrieve_sensor_data+0x104>
				sensor_id = s_id;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf4 <retrieve_sensor_data+0x148>)
 8002c7e:	6013      	str	r3, [r2, #0]
				addData(&readings, sensorID, temperature_int, humidity_int, pressure_int);
 8002c80:	4b1a      	ldr	r3, [pc, #104]	@ (8002cec <retrieve_sensor_data+0x140>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b18      	ldr	r3, [pc, #96]	@ (8002ce8 <retrieve_sensor_data+0x13c>)
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <retrieve_sensor_data+0x138>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4819      	ldr	r0, [pc, #100]	@ (8002cf8 <retrieve_sensor_data+0x14c>)
 8002c94:	f000 f9cb 	bl	800302e <addData>
				#ifdef ESP
					send_single_sensor_post_req(&Esp, temperature_int, humidity_int, pressure_int, sensorID);
 8002c98:	4b14      	ldr	r3, [pc, #80]	@ (8002cec <retrieve_sensor_data+0x140>)
 8002c9a:	6819      	ldr	r1, [r3, #0]
 8002c9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <retrieve_sensor_data+0x13c>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <retrieve_sensor_data+0x138>)
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4814      	ldr	r0, [pc, #80]	@ (8002cfc <retrieve_sensor_data+0x150>)
 8002cac:	f7ff fcb0 	bl	8002610 <send_single_sensor_post_req>
				#endif
			}
		}
		break;
 8002cb0:	bf00      	nop
	}
	LoRaSetTxMode();
 8002cb2:	f7ff ff01 	bl	8002ab8 <LoRaSetTxMode>

}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000080 	.word	0x20000080
 8002cc4:	0800819c 	.word	0x0800819c
 8002cc8:	20000630 	.word	0x20000630
 8002ccc:	20000a30 	.word	0x20000a30
 8002cd0:	20000510 	.word	0x20000510
 8002cd4:	2000062c 	.word	0x2000062c
 8002cd8:	20001e98 	.word	0x20001e98
 8002cdc:	20001e9c 	.word	0x20001e9c
 8002ce0:	20000830 	.word	0x20000830
 8002ce4:	20000180 	.word	0x20000180
 8002ce8:	2000017c 	.word	0x2000017c
 8002cec:	20000178 	.word	0x20000178
 8002cf0:	080081a4 	.word	0x080081a4
 8002cf4:	2000005c 	.word	0x2000005c
 8002cf8:	20000184 	.word	0x20000184
 8002cfc:	20000a34 	.word	0x20000a34

08002d00 <Esp_send_get>:

/*  ----------------------------------
 * 		Esp Functions
 *  ----------------------------------
 */
void Esp_send_get(){
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
	send_get_req(&Esp);
 8002d04:	480e      	ldr	r0, [pc, #56]	@ (8002d40 <Esp_send_get+0x40>)
 8002d06:	f7ff fb7f 	bl	8002408 <send_get_req>
	sensor_1_timeout = Esp.timers[0];
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <Esp_send_get+0x40>)
 8002d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <Esp_send_get+0x44>)
 8002d18:	601a      	str	r2, [r3, #0]
	sensor_2_timeout = Esp.timers[1];
 8002d1a:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <Esp_send_get+0x40>)
 8002d1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d20:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <Esp_send_get+0x48>)
 8002d28:	601a      	str	r2, [r3, #0]
	sensor_3_timeout = Esp.timers[2];
 8002d2a:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <Esp_send_get+0x40>)
 8002d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d30:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <Esp_send_get+0x4c>)
 8002d38:	601a      	str	r2, [r3, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000a34 	.word	0x20000a34
 8002d44:	20000068 	.word	0x20000068
 8002d48:	2000006c 	.word	0x2000006c
 8002d4c:	20000070 	.word	0x20000070

08002d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	f5ad 5dbf 	sub.w	sp, sp, #6112	@ 0x17e0
 8002d56:	b085      	sub	sp, #20
 8002d58:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d5a:	f000 fbbd 	bl	80034d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d5e:	f000 f8dd 	bl	8002f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d62:	f7ff fd6b 	bl	800283c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002d66:	f000 f9f9 	bl	800315c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002d6a:	f000 fb19 	bl	80033a0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002d6e:	f7ff fdff 	bl	8002970 <MX_I2C1_Init>
  /*	=====================
   * 		  	LoRa Init
   * 	=====================
   */
  #ifdef LORA
	  receiver = 1;
 8002d72:	4b57      	ldr	r3, [pc, #348]	@ (8002ed0 <main+0x180>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8002d78:	4b56      	ldr	r3, [pc, #344]	@ (8002ed4 <main+0x184>)
 8002d7a:	4a57      	ldr	r2, [pc, #348]	@ (8002ed8 <main+0x188>)
 8002d7c:	60da      	str	r2, [r3, #12]
	  SX1278_hw.dio0.pin = DIO0_Pin;
 8002d7e:	4b55      	ldr	r3, [pc, #340]	@ (8002ed4 <main+0x184>)
 8002d80:	2202      	movs	r2, #2
 8002d82:	609a      	str	r2, [r3, #8]
	  SX1278_hw.nss.port = NSS_GPIO_Port;
 8002d84:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <main+0x184>)
 8002d86:	4a55      	ldr	r2, [pc, #340]	@ (8002edc <main+0x18c>)
 8002d88:	615a      	str	r2, [r3, #20]
	  SX1278_hw.nss.pin = NSS_Pin;
 8002d8a:	4b52      	ldr	r3, [pc, #328]	@ (8002ed4 <main+0x184>)
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	611a      	str	r2, [r3, #16]
	  SX1278_hw.reset.port = RST_GPIO_Port;
 8002d90:	4b50      	ldr	r3, [pc, #320]	@ (8002ed4 <main+0x184>)
 8002d92:	4a51      	ldr	r2, [pc, #324]	@ (8002ed8 <main+0x188>)
 8002d94:	605a      	str	r2, [r3, #4]
	  SX1278_hw.reset.pin = RST_Pin;
 8002d96:	4b4f      	ldr	r3, [pc, #316]	@ (8002ed4 <main+0x184>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
	  SX1278_hw.spi = &hspi1;
 8002d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed4 <main+0x184>)
 8002d9e:	4a50      	ldr	r2, [pc, #320]	@ (8002ee0 <main+0x190>)
 8002da0:	619a      	str	r2, [r3, #24]

	  SX1278.hw = &SX1278_hw;
 8002da2:	4b50      	ldr	r3, [pc, #320]	@ (8002ee4 <main+0x194>)
 8002da4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed4 <main+0x184>)
 8002da6:	601a      	str	r2, [r3, #0]

	  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8002da8:	230a      	movs	r3, #10
 8002daa:	9305      	str	r3, [sp, #20]
 8002dac:	2300      	movs	r3, #0
 8002dae:	9304      	str	r3, [sp, #16]
 8002db0:	2300      	movs	r3, #0
 8002db2:	9303      	str	r3, [sp, #12]
 8002db4:	2307      	movs	r3, #7
 8002db6:	9302      	str	r3, [sp, #8]
 8002db8:	2301      	movs	r3, #1
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	a341      	add	r3, pc, #260	@ (adr r3, 8002ec8 <main+0x178>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	4847      	ldr	r0, [pc, #284]	@ (8002ee4 <main+0x194>)
 8002dc8:	f7fe ff96 	bl	8001cf8 <SX1278_init>
			  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);

	  LoRaSetTxMode();						// Set mode to TX
 8002dcc:	f7ff fe74 	bl	8002ab8 <LoRaSetTxMode>
  /*	=====================
	 * 		  Sensors Init
	 * 	=====================
	 */
  // SAK
  BMP280_Init(&hi2c1);
 8002dd0:	4845      	ldr	r0, [pc, #276]	@ (8002ee8 <main+0x198>)
 8002dd2:	f7fe fa8d 	bl	80012f0 <BMP280_Init>

  // Storing readings
  readings = newR();
 8002dd6:	4c45      	ldr	r4, [pc, #276]	@ (8002eec <main+0x19c>)
 8002dd8:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8002ddc:	f103 0308 	add.w	r3, r3, #8
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f8e6 	bl	8002fb2 <newR>
 8002de6:	f507 53be 	add.w	r3, r7, #6080	@ 0x17c0
 8002dea:	f103 0318 	add.w	r3, r3, #24
 8002dee:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8002df2:	4620      	mov	r0, r4
 8002df4:	4619      	mov	r1, r3
 8002df6:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f003 ff9c 	bl	8006d38 <memcpy>
   * 		  	ESP Init
   * 	=====================
   */

  #ifdef ESP
	  Esp = newEsp01s(&huart1);				// Define new ESP typedef
 8002e00:	4c3b      	ldr	r4, [pc, #236]	@ (8002ef0 <main+0x1a0>)
 8002e02:	f107 0318 	add.w	r3, r7, #24
 8002e06:	3b18      	subs	r3, #24
 8002e08:	493a      	ldr	r1, [pc, #232]	@ (8002ef4 <main+0x1a4>)
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f897 	bl	8001f3e <newEsp01s>
 8002e10:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8002e14:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 8002e18:	4620      	mov	r0, r4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f241 4364 	movw	r3, #5220	@ 0x1464
 8002e20:	461a      	mov	r2, r3
 8002e22:	f003 ff89 	bl	8006d38 <memcpy>
	  esp_setup(&Esp);						// Run setup for ESP
 8002e26:	4832      	ldr	r0, [pc, #200]	@ (8002ef0 <main+0x1a0>)
 8002e28:	f7ff fcdc 	bl	80027e4 <esp_setup>
	  start_connection(&Esp);				// Start connection with data sever
 8002e2c:	4830      	ldr	r0, [pc, #192]	@ (8002ef0 <main+0x1a0>)
 8002e2e:	f7ff fa69 	bl	8002304 <start_connection>
	  Esp_send_get();
 8002e32:	f7ff ff65 	bl	8002d00 <Esp_send_get>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Read current time in milliseconds
	  current_time = HAL_GetTick();
 8002e36:	f000 fba7 	bl	8003588 <HAL_GetTick>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ef8 <main+0x1a8>)
 8002e3e:	6013      	str	r3, [r2, #0]
	  // Sensor 1 wake up
	  if((sensor_1_wakeup<=current_time)){
 8002e40:	4b2e      	ldr	r3, [pc, #184]	@ (8002efc <main+0x1ac>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef8 <main+0x1a8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d809      	bhi.n	8002e60 <main+0x110>
		  sensor_1_wakeup = sensor_1_timeout + HAL_GetTick();
 8002e4c:	f000 fb9c 	bl	8003588 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b2b      	ldr	r3, [pc, #172]	@ (8002f00 <main+0x1b0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	4a28      	ldr	r2, [pc, #160]	@ (8002efc <main+0x1ac>)
 8002e5a:	6013      	str	r3, [r2, #0]
		  retrieve_onboard_sensor_data();
 8002e5c:	f7ff fe4c 	bl	8002af8 <retrieve_onboard_sensor_data>
	  }

	  // Sensor 2 wake up
	  if((sensor_2_wakeup<=current_time)){
 8002e60:	4b28      	ldr	r3, [pc, #160]	@ (8002f04 <main+0x1b4>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <main+0x1a8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d80a      	bhi.n	8002e82 <main+0x132>
		  // Set wake up value for another data request
		  sensor_2_wakeup = sensor_2_timeout + HAL_GetTick();
 8002e6c:	f000 fb8c 	bl	8003588 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <main+0x1b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	4a22      	ldr	r2, [pc, #136]	@ (8002f04 <main+0x1b4>)
 8002e7a:	6013      	str	r3, [r2, #0]
		  retrieve_sensor_data(2);
 8002e7c:	2002      	movs	r0, #2
 8002e7e:	f7ff fe95 	bl	8002bac <retrieve_sensor_data>
	  }

	  // Sensor 3 wake up
	  if((sensor_3_wakeup<=current_time)){
 8002e82:	4b22      	ldr	r3, [pc, #136]	@ (8002f0c <main+0x1bc>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <main+0x1a8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d80a      	bhi.n	8002ea4 <main+0x154>
		  // Set wake up value for another data request
		  sensor_3_wakeup = sensor_3_timeout + HAL_GetTick();
 8002e8e:	f000 fb7b 	bl	8003588 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b1e      	ldr	r3, [pc, #120]	@ (8002f10 <main+0x1c0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f0c <main+0x1bc>)
 8002e9c:	6013      	str	r3, [r2, #0]
		  retrieve_sensor_data(3);
 8002e9e:	2003      	movs	r0, #3
 8002ea0:	f7ff fe84 	bl	8002bac <retrieve_sensor_data>
	  }

	  // In set timeout check for change in reading timeouts
	  #ifdef ESP
		  if((get_wake_up<=current_time)){
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <main+0x1c4>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <main+0x1a8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8c2      	bhi.n	8002e36 <main+0xe6>
			  get_wake_up = get_timeout+HAL_GetTick();
 8002eb0:	f000 fb6a 	bl	8003588 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b18      	ldr	r3, [pc, #96]	@ (8002f18 <main+0x1c8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a15      	ldr	r2, [pc, #84]	@ (8002f14 <main+0x1c4>)
 8002ebe:	6013      	str	r3, [r2, #0]
			  Esp_send_get();
 8002ec0:	f7ff ff1e 	bl	8002d00 <Esp_send_get>
	  current_time = HAL_GetTick();
 8002ec4:	e7b7      	b.n	8002e36 <main+0xe6>
 8002ec6:	bf00      	nop
 8002ec8:	19de5080 	.word	0x19de5080
 8002ecc:	00000000 	.word	0x00000000
 8002ed0:	20000628 	.word	0x20000628
 8002ed4:	200004f4 	.word	0x200004f4
 8002ed8:	40010c00 	.word	0x40010c00
 8002edc:	40010800 	.word	0x40010800
 8002ee0:	20001ea0 	.word	0x20001ea0
 8002ee4:	20000510 	.word	0x20000510
 8002ee8:	20000118 	.word	0x20000118
 8002eec:	20000184 	.word	0x20000184
 8002ef0:	20000a34 	.word	0x20000a34
 8002ef4:	20001efc 	.word	0x20001efc
 8002ef8:	20001e98 	.word	0x20001e98
 8002efc:	20000074 	.word	0x20000074
 8002f00:	20000068 	.word	0x20000068
 8002f04:	20000078 	.word	0x20000078
 8002f08:	2000006c 	.word	0x2000006c
 8002f0c:	2000007c 	.word	0x2000007c
 8002f10:	20000070 	.word	0x20000070
 8002f14:	20000064 	.word	0x20000064
 8002f18:	20000060 	.word	0x20000060

08002f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b090      	sub	sp, #64	@ 0x40
 8002f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f22:	f107 0318 	add.w	r3, r7, #24
 8002f26:	2228      	movs	r2, #40	@ 0x28
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 feac 	bl	8006c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	60da      	str	r2, [r3, #12]
 8002f3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f50:	2302      	movs	r3, #2
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f5a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f60:	f107 0318 	add.w	r3, r7, #24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f002 fb41 	bl	80055ec <HAL_RCC_OscConfig>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002f70:	f000 f819 	bl	8002fa6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f74:	230f      	movs	r3, #15
 8002f76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f002 fdae 	bl	8005af0 <HAL_RCC_ClockConfig>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002f9a:	f000 f804 	bl	8002fa6 <Error_Handler>
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	3740      	adds	r7, #64	@ 0x40
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002faa:	b672      	cpsid	i
}
 8002fac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fae:	bf00      	nop
 8002fb0:	e7fd      	b.n	8002fae <Error_Handler+0x8>

08002fb2 <newR>:
#include <readings.h>
#include <stdio.h>
#include <string.h>


Readings newR(){
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	f5ad 7d5e 	sub.w	sp, sp, #888	@ 0x378
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8002fbe:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8002fc2:	6018      	str	r0, [r3, #0]
	Readings new_R;
	new_R.s1_size = 0;
 8002fc4:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8002fc8:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
	new_R.s2_size = 0;
 8002fd2:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8002fd6:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
	new_R.s3_size = 0;
 8002fe0:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8002fe4:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368
	new_R.size = 24;
 8002fee:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8002ff2:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8002ff6:	2218      	movs	r2, #24
 8002ff8:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c

	return new_R;
 8002ffc:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8003000:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 800300a:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8003016:	461a      	mov	r2, r3
 8003018:	f003 fe8e 	bl	8006d38 <memcpy>
}
 800301c:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8003020:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	f507 775e 	add.w	r7, r7, #888	@ 0x378
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <addData>:

void addData(Readings* r, int sensor, int t, int h, int p){
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
	switch(sensor){
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d059      	beq.n	80030f6 <addData+0xc8>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b03      	cmp	r3, #3
 8003046:	f300 8083 	bgt.w	8003150 <addData+0x122>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d003      	beq.n	8003058 <addData+0x2a>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d027      	beq.n	80030a6 <addData+0x78>
			r->s3_humi[r->s1_size] = h;
			r->s3_pres[r->s1_size] = p;
			r->s3_size++;
			break;
	}
}
 8003056:	e07b      	b.n	8003150 <addData+0x122>
			if(r->s1_size == r->size){
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f8d3 2360 	ldr.w	r2, [r3, #864]	@ 0x360
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8d3 336c 	ldr.w	r3, [r3, #876]	@ 0x36c
 8003064:	429a      	cmp	r2, r3
 8003066:	d06e      	beq.n	8003146 <addData+0x118>
			r->s1_temp[r->s1_size] = t;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f8d3 2360 	ldr.w	r2, [r3, #864]	@ 0x360
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			r->s1_humi[r->s1_size] = h;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8d3 2360 	ldr.w	r2, [r3, #864]	@ 0x360
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3218      	adds	r2, #24
 8003080:	6839      	ldr	r1, [r7, #0]
 8003082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			r->s1_pres[r->s1_size] = p;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f8d3 2360 	ldr.w	r2, [r3, #864]	@ 0x360
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3230      	adds	r2, #48	@ 0x30
 8003090:	69b9      	ldr	r1, [r7, #24]
 8003092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		    r->s1_size++;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
			break;
 80030a4:	e054      	b.n	8003150 <addData+0x122>
			if(r->s2_size == r->size){
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8d3 2364 	ldr.w	r2, [r3, #868]	@ 0x364
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f8d3 336c 	ldr.w	r3, [r3, #876]	@ 0x36c
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d049      	beq.n	800314a <addData+0x11c>
			r->s2_temp[r->s1_size] = t;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f8d3 2360 	ldr.w	r2, [r3, #864]	@ 0x360
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3248      	adds	r2, #72	@ 0x48
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			r->s2_humi[r->s1_size] = h;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8d3 2360 	ldr.w	r2, [r3, #864]	@ 0x360
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3260      	adds	r2, #96	@ 0x60
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			r->s2_pres[r->s1_size] = p;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8d3 2360 	ldr.w	r2, [r3, #864]	@ 0x360
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3278      	adds	r2, #120	@ 0x78
 80030e0:	69b9      	ldr	r1, [r7, #24]
 80030e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			r->s2_size++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
			break;
 80030f4:	e02c      	b.n	8003150 <addData+0x122>
			if(r->s3_size == r->size){
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8d3 2368 	ldr.w	r2, [r3, #872]	@ 0x368
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f8d3 336c 	ldr.w	r3, [r3, #876]	@ 0x36c
 8003102:	429a      	cmp	r2, r3
 8003104:	d023      	beq.n	800314e <addData+0x120>
			r->s3_temp[r->s1_size] = t;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f8d3 2360 	ldr.w	r2, [r3, #864]	@ 0x360
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3290      	adds	r2, #144	@ 0x90
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			r->s3_humi[r->s1_size] = h;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f8d3 2360 	ldr.w	r2, [r3, #864]	@ 0x360
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	32a8      	adds	r2, #168	@ 0xa8
 8003120:	6839      	ldr	r1, [r7, #0]
 8003122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			r->s3_pres[r->s1_size] = p;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f8d3 2360 	ldr.w	r2, [r3, #864]	@ 0x360
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	32c0      	adds	r2, #192	@ 0xc0
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			r->s3_size++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8d3 3368 	ldr.w	r3, [r3, #872]	@ 0x368
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368
			break;
 8003144:	e004      	b.n	8003150 <addData+0x122>
				break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <addData+0x122>
				break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <addData+0x122>
				break;
 800314e:	bf00      	nop
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
	...

0800315c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003160:	4b17      	ldr	r3, [pc, #92]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003162:	4a18      	ldr	r2, [pc, #96]	@ (80031c4 <MX_SPI1_Init+0x68>)
 8003164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003166:	4b16      	ldr	r3, [pc, #88]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003168:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800316c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800316e:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003174:	4b12      	ldr	r3, [pc, #72]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <MX_SPI1_Init+0x64>)
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003180:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003186:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800318c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800318e:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003190:	2210      	movs	r2, #16
 8003192:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003194:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003196:	2200      	movs	r2, #0
 8003198:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800319a:	4b09      	ldr	r3, [pc, #36]	@ (80031c0 <MX_SPI1_Init+0x64>)
 800319c:	2200      	movs	r2, #0
 800319e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a0:	4b07      	ldr	r3, [pc, #28]	@ (80031c0 <MX_SPI1_Init+0x64>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <MX_SPI1_Init+0x64>)
 80031a8:	220a      	movs	r2, #10
 80031aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031ac:	4804      	ldr	r0, [pc, #16]	@ (80031c0 <MX_SPI1_Init+0x64>)
 80031ae:	f002 fe2d 	bl	8005e0c <HAL_SPI_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031b8:	f7ff fef5 	bl	8002fa6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20001ea0 	.word	0x20001ea0
 80031c4:	40013000 	.word	0x40013000

080031c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 0310 	add.w	r3, r7, #16
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003250 <HAL_SPI_MspInit+0x88>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d12f      	bne.n	8003248 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <HAL_SPI_MspInit+0x8c>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	4a19      	ldr	r2, [pc, #100]	@ (8003254 <HAL_SPI_MspInit+0x8c>)
 80031ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031f2:	6193      	str	r3, [r2, #24]
 80031f4:	4b17      	ldr	r3, [pc, #92]	@ (8003254 <HAL_SPI_MspInit+0x8c>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003200:	4b14      	ldr	r3, [pc, #80]	@ (8003254 <HAL_SPI_MspInit+0x8c>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	4a13      	ldr	r2, [pc, #76]	@ (8003254 <HAL_SPI_MspInit+0x8c>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	6193      	str	r3, [r2, #24]
 800320c:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <HAL_SPI_MspInit+0x8c>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003218:	23a0      	movs	r3, #160	@ 0xa0
 800321a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003220:	2303      	movs	r3, #3
 8003222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	f107 0310 	add.w	r3, r7, #16
 8003228:	4619      	mov	r1, r3
 800322a:	480b      	ldr	r0, [pc, #44]	@ (8003258 <HAL_SPI_MspInit+0x90>)
 800322c:	f000 fae8 	bl	8003800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003230:	2340      	movs	r3, #64	@ 0x40
 8003232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323c:	f107 0310 	add.w	r3, r7, #16
 8003240:	4619      	mov	r1, r3
 8003242:	4805      	ldr	r0, [pc, #20]	@ (8003258 <HAL_SPI_MspInit+0x90>)
 8003244:	f000 fadc 	bl	8003800 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003248:	bf00      	nop
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40013000 	.word	0x40013000
 8003254:	40021000 	.word	0x40021000
 8003258:	40010800 	.word	0x40010800

0800325c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003262:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <HAL_MspInit+0x5c>)
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	4a14      	ldr	r2, [pc, #80]	@ (80032b8 <HAL_MspInit+0x5c>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6193      	str	r3, [r2, #24]
 800326e:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <HAL_MspInit+0x5c>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <HAL_MspInit+0x5c>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a0e      	ldr	r2, [pc, #56]	@ (80032b8 <HAL_MspInit+0x5c>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003284:	61d3      	str	r3, [r2, #28]
 8003286:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <HAL_MspInit+0x5c>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003292:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <HAL_MspInit+0x60>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	4a04      	ldr	r2, [pc, #16]	@ (80032bc <HAL_MspInit+0x60>)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40010000 	.word	0x40010000

080032c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032c4:	bf00      	nop
 80032c6:	e7fd      	b.n	80032c4 <NMI_Handler+0x4>

080032c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032cc:	bf00      	nop
 80032ce:	e7fd      	b.n	80032cc <HardFault_Handler+0x4>

080032d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <MemManage_Handler+0x4>

080032d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032dc:	bf00      	nop
 80032de:	e7fd      	b.n	80032dc <BusFault_Handler+0x4>

080032e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <UsageFault_Handler+0x4>

080032e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003310:	f000 f928 	bl	8003564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}

08003318 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800331c:	2002      	movs	r0, #2
 800331e:	f000 fc23 	bl	8003b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003330:	4a14      	ldr	r2, [pc, #80]	@ (8003384 <_sbrk+0x5c>)
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <_sbrk+0x60>)
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800333c:	4b13      	ldr	r3, [pc, #76]	@ (800338c <_sbrk+0x64>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003344:	4b11      	ldr	r3, [pc, #68]	@ (800338c <_sbrk+0x64>)
 8003346:	4a12      	ldr	r2, [pc, #72]	@ (8003390 <_sbrk+0x68>)
 8003348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800334a:	4b10      	ldr	r3, [pc, #64]	@ (800338c <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	429a      	cmp	r2, r3
 8003356:	d207      	bcs.n	8003368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003358:	f003 fcc2 	bl	8006ce0 <__errno>
 800335c:	4603      	mov	r3, r0
 800335e:	220c      	movs	r2, #12
 8003360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	e009      	b.n	800337c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <_sbrk+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800336e:	4b07      	ldr	r3, [pc, #28]	@ (800338c <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	4a05      	ldr	r2, [pc, #20]	@ (800338c <_sbrk+0x64>)
 8003378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20005000 	.word	0x20005000
 8003388:	00000400 	.word	0x00000400
 800338c:	20001ef8 	.word	0x20001ef8
 8003390:	20002090 	.word	0x20002090

08003394 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033a4:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <MX_USART1_UART_Init+0x4c>)
 80033a6:	4a12      	ldr	r2, [pc, #72]	@ (80033f0 <MX_USART1_UART_Init+0x50>)
 80033a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033aa:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <MX_USART1_UART_Init+0x4c>)
 80033ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <MX_USART1_UART_Init+0x4c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	@ (80033ec <MX_USART1_UART_Init+0x4c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033be:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <MX_USART1_UART_Init+0x4c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033c4:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <MX_USART1_UART_Init+0x4c>)
 80033c6:	220c      	movs	r2, #12
 80033c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <MX_USART1_UART_Init+0x4c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d0:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <MX_USART1_UART_Init+0x4c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033d6:	4805      	ldr	r0, [pc, #20]	@ (80033ec <MX_USART1_UART_Init+0x4c>)
 80033d8:	f003 f94f 	bl	800667a <HAL_UART_Init>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033e2:	f7ff fde0 	bl	8002fa6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20001efc 	.word	0x20001efc
 80033f0:	40013800 	.word	0x40013800

080033f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0310 	add.w	r3, r7, #16
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1c      	ldr	r2, [pc, #112]	@ (8003480 <HAL_UART_MspInit+0x8c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d131      	bne.n	8003478 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003414:	4b1b      	ldr	r3, [pc, #108]	@ (8003484 <HAL_UART_MspInit+0x90>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a1a      	ldr	r2, [pc, #104]	@ (8003484 <HAL_UART_MspInit+0x90>)
 800341a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b18      	ldr	r3, [pc, #96]	@ (8003484 <HAL_UART_MspInit+0x90>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <HAL_UART_MspInit+0x90>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	4a14      	ldr	r2, [pc, #80]	@ (8003484 <HAL_UART_MspInit+0x90>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6193      	str	r3, [r2, #24]
 8003438:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <HAL_UART_MspInit+0x90>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    */
    GPIO_InitStruct.Pin = ESP_01S_TX_Pin;
 8003444:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003448:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800344e:	2303      	movs	r3, #3
 8003450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESP_01S_TX_GPIO_Port, &GPIO_InitStruct);
 8003452:	f107 0310 	add.w	r3, r7, #16
 8003456:	4619      	mov	r1, r3
 8003458:	480b      	ldr	r0, [pc, #44]	@ (8003488 <HAL_UART_MspInit+0x94>)
 800345a:	f000 f9d1 	bl	8003800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_01S_RX_Pin|RTC_ALARM_Pin;
 800345e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346c:	f107 0310 	add.w	r3, r7, #16
 8003470:	4619      	mov	r1, r3
 8003472:	4805      	ldr	r0, [pc, #20]	@ (8003488 <HAL_UART_MspInit+0x94>)
 8003474:	f000 f9c4 	bl	8003800 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003478:	bf00      	nop
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40013800 	.word	0x40013800
 8003484:	40021000 	.word	0x40021000
 8003488:	40010800 	.word	0x40010800

0800348c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800348c:	f7ff ff82 	bl	8003394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003490:	480b      	ldr	r0, [pc, #44]	@ (80034c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003492:	490c      	ldr	r1, [pc, #48]	@ (80034c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003494:	4a0c      	ldr	r2, [pc, #48]	@ (80034c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003498:	e002      	b.n	80034a0 <LoopCopyDataInit>

0800349a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800349a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800349c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349e:	3304      	adds	r3, #4

080034a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a4:	d3f9      	bcc.n	800349a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a6:	4a09      	ldr	r2, [pc, #36]	@ (80034cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80034a8:	4c09      	ldr	r4, [pc, #36]	@ (80034d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034ac:	e001      	b.n	80034b2 <LoopFillZerobss>

080034ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b0:	3204      	adds	r2, #4

080034b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b4:	d3fb      	bcc.n	80034ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034b6:	f003 fc19 	bl	8006cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ba:	f7ff fc49 	bl	8002d50 <main>
  bx lr
 80034be:	4770      	bx	lr
  ldr r0, =_sdata
 80034c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c4:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80034c8:	08008368 	.word	0x08008368
  ldr r2, =_sbss
 80034cc:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80034d0:	20002090 	.word	0x20002090

080034d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034d4:	e7fe      	b.n	80034d4 <ADC1_2_IRQHandler>
	...

080034d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034dc:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <HAL_Init+0x28>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a07      	ldr	r2, [pc, #28]	@ (8003500 <HAL_Init+0x28>)
 80034e2:	f043 0310 	orr.w	r3, r3, #16
 80034e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e8:	2003      	movs	r0, #3
 80034ea:	f000 f947 	bl	800377c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ee:	200f      	movs	r0, #15
 80034f0:	f000 f808 	bl	8003504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f4:	f7ff feb2 	bl	800325c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40022000 	.word	0x40022000

08003504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800350c:	4b12      	ldr	r3, [pc, #72]	@ (8003558 <HAL_InitTick+0x54>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b12      	ldr	r3, [pc, #72]	@ (800355c <HAL_InitTick+0x58>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	4619      	mov	r1, r3
 8003516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800351a:	fbb3 f3f1 	udiv	r3, r3, r1
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f95f 	bl	80037e6 <HAL_SYSTICK_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e00e      	b.n	8003550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b0f      	cmp	r3, #15
 8003536:	d80a      	bhi.n	800354e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003538:	2200      	movs	r2, #0
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f000 f927 	bl	8003792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003544:	4a06      	ldr	r2, [pc, #24]	@ (8003560 <HAL_InitTick+0x5c>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000084 	.word	0x20000084
 800355c:	2000008c 	.word	0x2000008c
 8003560:	20000088 	.word	0x20000088

08003564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003568:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_IncTick+0x1c>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <HAL_IncTick+0x20>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4413      	add	r3, r2
 8003574:	4a03      	ldr	r2, [pc, #12]	@ (8003584 <HAL_IncTick+0x20>)
 8003576:	6013      	str	r3, [r2, #0]
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	2000008c 	.word	0x2000008c
 8003584:	20001f44 	.word	0x20001f44

08003588 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return uwTick;
 800358c:	4b02      	ldr	r3, [pc, #8]	@ (8003598 <HAL_GetTick+0x10>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	20001f44 	.word	0x20001f44

0800359c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035a4:	f7ff fff0 	bl	8003588 <HAL_GetTick>
 80035a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d005      	beq.n	80035c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_Delay+0x44>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035c2:	bf00      	nop
 80035c4:	f7ff ffe0 	bl	8003588 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d8f7      	bhi.n	80035c4 <HAL_Delay+0x28>
  {
  }
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	2000008c 	.word	0x2000008c

080035e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003600:	4013      	ands	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800360c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003616:	4a04      	ldr	r2, [pc, #16]	@ (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	60d3      	str	r3, [r2, #12]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003630:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <__NVIC_GetPriorityGrouping+0x18>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 0307 	and.w	r3, r3, #7
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	2b00      	cmp	r3, #0
 8003658:	db0b      	blt.n	8003672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4906      	ldr	r1, [pc, #24]	@ (800367c <__NVIC_EnableIRQ+0x34>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2001      	movs	r0, #1
 800366a:	fa00 f202 	lsl.w	r2, r0, r2
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100

08003680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	2b00      	cmp	r3, #0
 8003692:	db0a      	blt.n	80036aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	490c      	ldr	r1, [pc, #48]	@ (80036cc <__NVIC_SetPriority+0x4c>)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	440b      	add	r3, r1
 80036a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a8:	e00a      	b.n	80036c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4908      	ldr	r1, [pc, #32]	@ (80036d0 <__NVIC_SetPriority+0x50>)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	3b04      	subs	r3, #4
 80036b8:	0112      	lsls	r2, r2, #4
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	440b      	add	r3, r1
 80036be:	761a      	strb	r2, [r3, #24]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	@ 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f1c3 0307 	rsb	r3, r3, #7
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	bf28      	it	cs
 80036f2:	2304      	movcs	r3, #4
 80036f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d902      	bls.n	8003704 <NVIC_EncodePriority+0x30>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3b03      	subs	r3, #3
 8003702:	e000      	b.n	8003706 <NVIC_EncodePriority+0x32>
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	401a      	ands	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800371c:	f04f 31ff 	mov.w	r1, #4294967295
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43d9      	mvns	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	4313      	orrs	r3, r2
         );
}
 800372e:	4618      	mov	r0, r3
 8003730:	3724      	adds	r7, #36	@ 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003748:	d301      	bcc.n	800374e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800374a:	2301      	movs	r3, #1
 800374c:	e00f      	b.n	800376e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800374e:	4a0a      	ldr	r2, [pc, #40]	@ (8003778 <SysTick_Config+0x40>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003756:	210f      	movs	r1, #15
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f7ff ff90 	bl	8003680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003760:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <SysTick_Config+0x40>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003766:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <SysTick_Config+0x40>)
 8003768:	2207      	movs	r2, #7
 800376a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	e000e010 	.word	0xe000e010

0800377c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff2d 	bl	80035e4 <__NVIC_SetPriorityGrouping>
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037a4:	f7ff ff42 	bl	800362c <__NVIC_GetPriorityGrouping>
 80037a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	6978      	ldr	r0, [r7, #20]
 80037b0:	f7ff ff90 	bl	80036d4 <NVIC_EncodePriority>
 80037b4:	4602      	mov	r2, r0
 80037b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff5f 	bl	8003680 <__NVIC_SetPriority>
}
 80037c2:	bf00      	nop
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4603      	mov	r3, r0
 80037d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff35 	bl	8003648 <__NVIC_EnableIRQ>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ffa2 	bl	8003738 <SysTick_Config>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003800:	b480      	push	{r7}
 8003802:	b08b      	sub	sp, #44	@ 0x2c
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800380e:	2300      	movs	r3, #0
 8003810:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003812:	e169      	b.n	8003ae8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003814:	2201      	movs	r2, #1
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	429a      	cmp	r2, r3
 800382e:	f040 8158 	bne.w	8003ae2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a9a      	ldr	r2, [pc, #616]	@ (8003aa0 <HAL_GPIO_Init+0x2a0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d05e      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 800383c:	4a98      	ldr	r2, [pc, #608]	@ (8003aa0 <HAL_GPIO_Init+0x2a0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d875      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 8003842:	4a98      	ldr	r2, [pc, #608]	@ (8003aa4 <HAL_GPIO_Init+0x2a4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d058      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 8003848:	4a96      	ldr	r2, [pc, #600]	@ (8003aa4 <HAL_GPIO_Init+0x2a4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d86f      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 800384e:	4a96      	ldr	r2, [pc, #600]	@ (8003aa8 <HAL_GPIO_Init+0x2a8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d052      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 8003854:	4a94      	ldr	r2, [pc, #592]	@ (8003aa8 <HAL_GPIO_Init+0x2a8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d869      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 800385a:	4a94      	ldr	r2, [pc, #592]	@ (8003aac <HAL_GPIO_Init+0x2ac>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d04c      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 8003860:	4a92      	ldr	r2, [pc, #584]	@ (8003aac <HAL_GPIO_Init+0x2ac>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d863      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 8003866:	4a92      	ldr	r2, [pc, #584]	@ (8003ab0 <HAL_GPIO_Init+0x2b0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d046      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 800386c:	4a90      	ldr	r2, [pc, #576]	@ (8003ab0 <HAL_GPIO_Init+0x2b0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d85d      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 8003872:	2b12      	cmp	r3, #18
 8003874:	d82a      	bhi.n	80038cc <HAL_GPIO_Init+0xcc>
 8003876:	2b12      	cmp	r3, #18
 8003878:	d859      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <HAL_GPIO_Init+0x80>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	080038fb 	.word	0x080038fb
 8003884:	080038d5 	.word	0x080038d5
 8003888:	080038e7 	.word	0x080038e7
 800388c:	08003929 	.word	0x08003929
 8003890:	0800392f 	.word	0x0800392f
 8003894:	0800392f 	.word	0x0800392f
 8003898:	0800392f 	.word	0x0800392f
 800389c:	0800392f 	.word	0x0800392f
 80038a0:	0800392f 	.word	0x0800392f
 80038a4:	0800392f 	.word	0x0800392f
 80038a8:	0800392f 	.word	0x0800392f
 80038ac:	0800392f 	.word	0x0800392f
 80038b0:	0800392f 	.word	0x0800392f
 80038b4:	0800392f 	.word	0x0800392f
 80038b8:	0800392f 	.word	0x0800392f
 80038bc:	0800392f 	.word	0x0800392f
 80038c0:	0800392f 	.word	0x0800392f
 80038c4:	080038dd 	.word	0x080038dd
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	4a79      	ldr	r2, [pc, #484]	@ (8003ab4 <HAL_GPIO_Init+0x2b4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038d2:	e02c      	b.n	800392e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	623b      	str	r3, [r7, #32]
          break;
 80038da:	e029      	b.n	8003930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	3304      	adds	r3, #4
 80038e2:	623b      	str	r3, [r7, #32]
          break;
 80038e4:	e024      	b.n	8003930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	3308      	adds	r3, #8
 80038ec:	623b      	str	r3, [r7, #32]
          break;
 80038ee:	e01f      	b.n	8003930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	330c      	adds	r3, #12
 80038f6:	623b      	str	r3, [r7, #32]
          break;
 80038f8:	e01a      	b.n	8003930 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003902:	2304      	movs	r3, #4
 8003904:	623b      	str	r3, [r7, #32]
          break;
 8003906:	e013      	b.n	8003930 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003910:	2308      	movs	r3, #8
 8003912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	611a      	str	r2, [r3, #16]
          break;
 800391a:	e009      	b.n	8003930 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800391c:	2308      	movs	r3, #8
 800391e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	615a      	str	r2, [r3, #20]
          break;
 8003926:	e003      	b.n	8003930 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003928:	2300      	movs	r3, #0
 800392a:	623b      	str	r3, [r7, #32]
          break;
 800392c:	e000      	b.n	8003930 <HAL_GPIO_Init+0x130>
          break;
 800392e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2bff      	cmp	r3, #255	@ 0xff
 8003934:	d801      	bhi.n	800393a <HAL_GPIO_Init+0x13a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	e001      	b.n	800393e <HAL_GPIO_Init+0x13e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2bff      	cmp	r3, #255	@ 0xff
 8003944:	d802      	bhi.n	800394c <HAL_GPIO_Init+0x14c>
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	e002      	b.n	8003952 <HAL_GPIO_Init+0x152>
 800394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394e:	3b08      	subs	r3, #8
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	210f      	movs	r1, #15
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	401a      	ands	r2, r3
 8003964:	6a39      	ldr	r1, [r7, #32]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	fa01 f303 	lsl.w	r3, r1, r3
 800396c:	431a      	orrs	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80b1 	beq.w	8003ae2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003980:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6193      	str	r3, [r2, #24]
 800398c:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003998:	4a48      	ldr	r2, [pc, #288]	@ (8003abc <HAL_GPIO_Init+0x2bc>)
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	3302      	adds	r3, #2
 80039a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	220f      	movs	r2, #15
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4013      	ands	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a40      	ldr	r2, [pc, #256]	@ (8003ac0 <HAL_GPIO_Init+0x2c0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d013      	beq.n	80039ec <HAL_GPIO_Init+0x1ec>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ac4 <HAL_GPIO_Init+0x2c4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00d      	beq.n	80039e8 <HAL_GPIO_Init+0x1e8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a3e      	ldr	r2, [pc, #248]	@ (8003ac8 <HAL_GPIO_Init+0x2c8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <HAL_GPIO_Init+0x1e4>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a3d      	ldr	r2, [pc, #244]	@ (8003acc <HAL_GPIO_Init+0x2cc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_GPIO_Init+0x1e0>
 80039dc:	2303      	movs	r3, #3
 80039de:	e006      	b.n	80039ee <HAL_GPIO_Init+0x1ee>
 80039e0:	2304      	movs	r3, #4
 80039e2:	e004      	b.n	80039ee <HAL_GPIO_Init+0x1ee>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e002      	b.n	80039ee <HAL_GPIO_Init+0x1ee>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_GPIO_Init+0x1ee>
 80039ec:	2300      	movs	r3, #0
 80039ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f0:	f002 0203 	and.w	r2, r2, #3
 80039f4:	0092      	lsls	r2, r2, #2
 80039f6:	4093      	lsls	r3, r2
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039fe:	492f      	ldr	r1, [pc, #188]	@ (8003abc <HAL_GPIO_Init+0x2bc>)
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	3302      	adds	r3, #2
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d006      	beq.n	8003a26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a18:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	492c      	ldr	r1, [pc, #176]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	608b      	str	r3, [r1, #8]
 8003a24:	e006      	b.n	8003a34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a26:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	4928      	ldr	r1, [pc, #160]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a40:	4b23      	ldr	r3, [pc, #140]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	4922      	ldr	r1, [pc, #136]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60cb      	str	r3, [r1, #12]
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a4e:	4b20      	ldr	r3, [pc, #128]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	491e      	ldr	r1, [pc, #120]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	4918      	ldr	r1, [pc, #96]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a76:	4b16      	ldr	r3, [pc, #88]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	4914      	ldr	r1, [pc, #80]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d021      	beq.n	8003ad4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	490e      	ldr	r1, [pc, #56]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e021      	b.n	8003ae2 <HAL_GPIO_Init+0x2e2>
 8003a9e:	bf00      	nop
 8003aa0:	10320000 	.word	0x10320000
 8003aa4:	10310000 	.word	0x10310000
 8003aa8:	10220000 	.word	0x10220000
 8003aac:	10210000 	.word	0x10210000
 8003ab0:	10120000 	.word	0x10120000
 8003ab4:	10110000 	.word	0x10110000
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40010800 	.word	0x40010800
 8003ac4:	40010c00 	.word	0x40010c00
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	40011400 	.word	0x40011400
 8003ad0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	4909      	ldr	r1, [pc, #36]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	fa22 f303 	lsr.w	r3, r2, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f47f ae8e 	bne.w	8003814 <HAL_GPIO_Init+0x14>
  }
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	372c      	adds	r7, #44	@ 0x2c
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40010400 	.word	0x40010400

08003b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	887b      	ldrh	r3, [r7, #2]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
 8003b24:	e001      	b.n	8003b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	807b      	strh	r3, [r7, #2]
 8003b42:	4613      	mov	r3, r2
 8003b44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b46:	787b      	ldrb	r3, [r7, #1]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4c:	887a      	ldrh	r2, [r7, #2]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b52:	e003      	b.n	8003b5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	041a      	lsls	r2, r3, #16
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	611a      	str	r2, [r3, #16]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr
	...

08003b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b72:	4b08      	ldr	r3, [pc, #32]	@ (8003b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b7e:	4a05      	ldr	r2, [pc, #20]	@ (8003b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f806 	bl	8003b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40010400 	.word	0x40010400

08003b98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e12b      	b.n	8003e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fe fefa 	bl	80029cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2224      	movs	r2, #36	@ 0x24
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c10:	f002 f8b6 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 8003c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4a81      	ldr	r2, [pc, #516]	@ (8003e20 <HAL_I2C_Init+0x274>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d807      	bhi.n	8003c30 <HAL_I2C_Init+0x84>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a80      	ldr	r2, [pc, #512]	@ (8003e24 <HAL_I2C_Init+0x278>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	bf94      	ite	ls
 8003c28:	2301      	movls	r3, #1
 8003c2a:	2300      	movhi	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e006      	b.n	8003c3e <HAL_I2C_Init+0x92>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a7d      	ldr	r2, [pc, #500]	@ (8003e28 <HAL_I2C_Init+0x27c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	bf94      	ite	ls
 8003c38:	2301      	movls	r3, #1
 8003c3a:	2300      	movhi	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0e7      	b.n	8003e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a78      	ldr	r2, [pc, #480]	@ (8003e2c <HAL_I2C_Init+0x280>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0c9b      	lsrs	r3, r3, #18
 8003c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a6a      	ldr	r2, [pc, #424]	@ (8003e20 <HAL_I2C_Init+0x274>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d802      	bhi.n	8003c80 <HAL_I2C_Init+0xd4>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	e009      	b.n	8003c94 <HAL_I2C_Init+0xe8>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	4a69      	ldr	r2, [pc, #420]	@ (8003e30 <HAL_I2C_Init+0x284>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	3301      	adds	r3, #1
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ca6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	495c      	ldr	r1, [pc, #368]	@ (8003e20 <HAL_I2C_Init+0x274>)
 8003cb0:	428b      	cmp	r3, r1
 8003cb2:	d819      	bhi.n	8003ce8 <HAL_I2C_Init+0x13c>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1e59      	subs	r1, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc2:	1c59      	adds	r1, r3, #1
 8003cc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cc8:	400b      	ands	r3, r1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_I2C_Init+0x138>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1e59      	subs	r1, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cdc:	3301      	adds	r3, #1
 8003cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce2:	e051      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	e04f      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d111      	bne.n	8003d14 <HAL_I2C_Init+0x168>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e58      	subs	r0, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	440b      	add	r3, r1
 8003cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e012      	b.n	8003d3a <HAL_I2C_Init+0x18e>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1e58      	subs	r0, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	0099      	lsls	r1, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Init+0x196>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e022      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10e      	bne.n	8003d68 <HAL_I2C_Init+0x1bc>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1e58      	subs	r0, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	460b      	mov	r3, r1
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	440b      	add	r3, r1
 8003d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d66:	e00f      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e58      	subs	r0, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	0099      	lsls	r1, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	6809      	ldr	r1, [r1, #0]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003db6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6911      	ldr	r1, [r2, #16]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68d2      	ldr	r2, [r2, #12]
 8003dc2:	4311      	orrs	r1, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	000186a0 	.word	0x000186a0
 8003e24:	001e847f 	.word	0x001e847f
 8003e28:	003d08ff 	.word	0x003d08ff
 8003e2c:	431bde83 	.word	0x431bde83
 8003e30:	10624dd3 	.word	0x10624dd3

08003e34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	460b      	mov	r3, r1
 8003e42:	817b      	strh	r3, [r7, #10]
 8003e44:	4613      	mov	r3, r2
 8003e46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e48:	f7ff fb9e 	bl	8003588 <HAL_GetTick>
 8003e4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	f040 80e0 	bne.w	800401c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2319      	movs	r3, #25
 8003e62:	2201      	movs	r2, #1
 8003e64:	4970      	ldr	r1, [pc, #448]	@ (8004028 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f001 f98a 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
 8003e74:	e0d3      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_I2C_Master_Transmit+0x50>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0cc      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d007      	beq.n	8003eaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2221      	movs	r2, #33	@ 0x21
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2210      	movs	r2, #16
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	893a      	ldrh	r2, [r7, #8]
 8003eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a50      	ldr	r2, [pc, #320]	@ (800402c <HAL_I2C_Master_Transmit+0x1f8>)
 8003eea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eec:	8979      	ldrh	r1, [r7, #10]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	6a3a      	ldr	r2, [r7, #32]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fe76 	bl	8004be4 <I2C_MasterRequestWrite>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e08d      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f18:	e066      	b.n	8003fe8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	6a39      	ldr	r1, [r7, #32]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f001 fa48 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00d      	beq.n	8003f46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d107      	bne.n	8003f42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d11b      	bne.n	8003fbc <HAL_I2C_Master_Transmit+0x188>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d017      	beq.n	8003fbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	781a      	ldrb	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	6a39      	ldr	r1, [r7, #32]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f001 fa3f 	bl	8005444 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d107      	bne.n	8003fe4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e01a      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d194      	bne.n	8003f1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	00100002 	.word	0x00100002
 800402c:	ffff0000 	.word	0xffff0000

08004030 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	@ 0x30
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	461a      	mov	r2, r3
 800403c:	460b      	mov	r3, r1
 800403e:	817b      	strh	r3, [r7, #10]
 8004040:	4613      	mov	r3, r2
 8004042:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004048:	f7ff fa9e 	bl	8003588 <HAL_GetTick>
 800404c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	f040 824b 	bne.w	80044f2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	2319      	movs	r3, #25
 8004062:	2201      	movs	r2, #1
 8004064:	497f      	ldr	r1, [pc, #508]	@ (8004264 <HAL_I2C_Master_Receive+0x234>)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f001 f88a 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	e23e      	b.n	80044f4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_I2C_Master_Receive+0x54>
 8004080:	2302      	movs	r3, #2
 8004082:	e237      	b.n	80044f4 <HAL_I2C_Master_Receive+0x4c4>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d007      	beq.n	80040aa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2222      	movs	r2, #34	@ 0x22
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2210      	movs	r2, #16
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	893a      	ldrh	r2, [r7, #8]
 80040da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004268 <HAL_I2C_Master_Receive+0x238>)
 80040ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040ec:	8979      	ldrh	r1, [r7, #10]
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fdf8 	bl	8004ce8 <I2C_MasterRequestRead>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e1f8      	b.n	80044f4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004106:	2b00      	cmp	r3, #0
 8004108:	d113      	bne.n	8004132 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e1cc      	b.n	80044cc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004136:	2b01      	cmp	r3, #1
 8004138:	d11e      	bne.n	8004178 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004148:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800414a:	b672      	cpsid	i
}
 800414c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004172:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004174:	b662      	cpsie	i
}
 8004176:	e035      	b.n	80041e4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417c:	2b02      	cmp	r3, #2
 800417e:	d11e      	bne.n	80041be <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800418e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004190:	b672      	cpsid	i
}
 8004192:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041ba:	b662      	cpsie	i
}
 80041bc:	e012      	b.n	80041e4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80041e4:	e172      	b.n	80044cc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	f200 811f 	bhi.w	800442e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d123      	bne.n	8004240 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f001 f969 	bl	80054d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e173      	b.n	80044f4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800423e:	e145      	b.n	80044cc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004244:	2b02      	cmp	r3, #2
 8004246:	d152      	bne.n	80042ee <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424e:	2200      	movs	r2, #0
 8004250:	4906      	ldr	r1, [pc, #24]	@ (800426c <HAL_I2C_Master_Receive+0x23c>)
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 ff94 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e148      	b.n	80044f4 <HAL_I2C_Master_Receive+0x4c4>
 8004262:	bf00      	nop
 8004264:	00100002 	.word	0x00100002
 8004268:	ffff0000 	.word	0xffff0000
 800426c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004270:	b672      	cpsid	i
}
 8004272:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042b6:	b662      	cpsie	i
}
 80042b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042ec:	e0ee      	b.n	80044cc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f4:	2200      	movs	r2, #0
 80042f6:	4981      	ldr	r1, [pc, #516]	@ (80044fc <HAL_I2C_Master_Receive+0x4cc>)
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 ff41 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0f5      	b.n	80044f4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004316:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004318:	b672      	cpsid	i
}
 800431a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800434e:	4b6c      	ldr	r3, [pc, #432]	@ (8004500 <HAL_I2C_Master_Receive+0x4d0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	08db      	lsrs	r3, r3, #3
 8004354:	4a6b      	ldr	r2, [pc, #428]	@ (8004504 <HAL_I2C_Master_Receive+0x4d4>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0a1a      	lsrs	r2, r3, #8
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	00da      	lsls	r2, r3, #3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	3b01      	subs	r3, #1
 800436c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d118      	bne.n	80043a6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	f043 0220 	orr.w	r2, r3, #32
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004396:	b662      	cpsie	i
}
 8004398:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e0a6      	b.n	80044f4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d1d9      	bne.n	8004368 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043f6:	b662      	cpsie	i
}
 80043f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800442c:	e04e      	b.n	80044cc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800442e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004430:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f001 f84e 	bl	80054d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e058      	b.n	80044f4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b04      	cmp	r3, #4
 8004480:	d124      	bne.n	80044cc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004486:	2b03      	cmp	r3, #3
 8004488:	d107      	bne.n	800449a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004498:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f47f ae88 	bne.w	80041e6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3728      	adds	r7, #40	@ 0x28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	00010004 	.word	0x00010004
 8004500:	20000084 	.word	0x20000084
 8004504:	14f8b589 	.word	0x14f8b589

08004508 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	4608      	mov	r0, r1
 8004512:	4611      	mov	r1, r2
 8004514:	461a      	mov	r2, r3
 8004516:	4603      	mov	r3, r0
 8004518:	817b      	strh	r3, [r7, #10]
 800451a:	460b      	mov	r3, r1
 800451c:	813b      	strh	r3, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004522:	f7ff f831 	bl	8003588 <HAL_GetTick>
 8004526:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b20      	cmp	r3, #32
 8004532:	f040 80d9 	bne.w	80046e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	2319      	movs	r3, #25
 800453c:	2201      	movs	r2, #1
 800453e:	496d      	ldr	r1, [pc, #436]	@ (80046f4 <HAL_I2C_Mem_Write+0x1ec>)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fe1d 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
 800454e:	e0cc      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_I2C_Mem_Write+0x56>
 800455a:	2302      	movs	r3, #2
 800455c:	e0c5      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d007      	beq.n	8004584 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004592:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2221      	movs	r2, #33	@ 0x21
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2240      	movs	r2, #64	@ 0x40
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a4d      	ldr	r2, [pc, #308]	@ (80046f8 <HAL_I2C_Mem_Write+0x1f0>)
 80045c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045c6:	88f8      	ldrh	r0, [r7, #6]
 80045c8:	893a      	ldrh	r2, [r7, #8]
 80045ca:	8979      	ldrh	r1, [r7, #10]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	4603      	mov	r3, r0
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fc54 	bl	8004e84 <I2C_RequestMemoryWrite>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d052      	beq.n	8004688 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e081      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fee2 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00d      	beq.n	8004612 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d107      	bne.n	800460e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800460c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e06b      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	781a      	ldrb	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b04      	cmp	r3, #4
 800464e:	d11b      	bne.n	8004688 <HAL_I2C_Mem_Write+0x180>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d017      	beq.n	8004688 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1aa      	bne.n	80045e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fed5 	bl	8005444 <I2C_WaitOnBTFFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d107      	bne.n	80046b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e016      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	00100002 	.word	0x00100002
 80046f8:	ffff0000 	.word	0xffff0000

080046fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08c      	sub	sp, #48	@ 0x30
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	4608      	mov	r0, r1
 8004706:	4611      	mov	r1, r2
 8004708:	461a      	mov	r2, r3
 800470a:	4603      	mov	r3, r0
 800470c:	817b      	strh	r3, [r7, #10]
 800470e:	460b      	mov	r3, r1
 8004710:	813b      	strh	r3, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800471a:	f7fe ff35 	bl	8003588 <HAL_GetTick>
 800471e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b20      	cmp	r3, #32
 800472a:	f040 8250 	bne.w	8004bce <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	2319      	movs	r3, #25
 8004734:	2201      	movs	r2, #1
 8004736:	4982      	ldr	r1, [pc, #520]	@ (8004940 <HAL_I2C_Mem_Read+0x244>)
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fd21 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
 8004746:	e243      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_I2C_Mem_Read+0x5a>
 8004752:	2302      	movs	r3, #2
 8004754:	e23c      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x4d4>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b01      	cmp	r3, #1
 800476a:	d007      	beq.n	800477c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800478a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2222      	movs	r2, #34	@ 0x22
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2240      	movs	r2, #64	@ 0x40
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80047ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a62      	ldr	r2, [pc, #392]	@ (8004944 <HAL_I2C_Mem_Read+0x248>)
 80047bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047be:	88f8      	ldrh	r0, [r7, #6]
 80047c0:	893a      	ldrh	r2, [r7, #8]
 80047c2:	8979      	ldrh	r1, [r7, #10]
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	4603      	mov	r3, r0
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fbee 	bl	8004fb0 <I2C_RequestMemoryRead>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e1f8      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d113      	bne.n	800480e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e1cc      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004812:	2b01      	cmp	r3, #1
 8004814:	d11e      	bne.n	8004854 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004824:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004826:	b672      	cpsid	i
}
 8004828:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800484e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004850:	b662      	cpsie	i
}
 8004852:	e035      	b.n	80048c0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004858:	2b02      	cmp	r3, #2
 800485a:	d11e      	bne.n	800489a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800486a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800486c:	b672      	cpsid	i
}
 800486e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004894:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004896:	b662      	cpsie	i
}
 8004898:	e012      	b.n	80048c0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048a8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80048c0:	e172      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	f200 811f 	bhi.w	8004b0a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d123      	bne.n	800491c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fdfb 	bl	80054d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e173      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800491a:	e145      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004920:	2b02      	cmp	r3, #2
 8004922:	d152      	bne.n	80049ca <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492a:	2200      	movs	r2, #0
 800492c:	4906      	ldr	r1, [pc, #24]	@ (8004948 <HAL_I2C_Mem_Read+0x24c>)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fc26 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e148      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x4d4>
 800493e:	bf00      	nop
 8004940:	00100002 	.word	0x00100002
 8004944:	ffff0000 	.word	0xffff0000
 8004948:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800494c:	b672      	cpsid	i
}
 800494e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800495e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004992:	b662      	cpsie	i
}
 8004994:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049c8:	e0ee      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d0:	2200      	movs	r2, #0
 80049d2:	4981      	ldr	r1, [pc, #516]	@ (8004bd8 <HAL_I2C_Mem_Read+0x4dc>)
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fbd3 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0f5      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049f4:	b672      	cpsid	i
}
 80049f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a2a:	4b6c      	ldr	r3, [pc, #432]	@ (8004bdc <HAL_I2C_Mem_Read+0x4e0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	08db      	lsrs	r3, r3, #3
 8004a30:	4a6b      	ldr	r2, [pc, #428]	@ (8004be0 <HAL_I2C_Mem_Read+0x4e4>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0a1a      	lsrs	r2, r3, #8
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00da      	lsls	r2, r3, #3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d118      	bne.n	8004a82 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f043 0220 	orr.w	r2, r3, #32
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004a72:	b662      	cpsie	i
}
 8004a74:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0a6      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d1d9      	bne.n	8004a44 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ad2:	b662      	cpsie	i
}
 8004ad4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b08:	e04e      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fce0 	bl	80054d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e058      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d124      	bne.n	8004ba8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d107      	bne.n	8004b76 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b74:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f47f ae88 	bne.w	80048c2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e000      	b.n	8004bd0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004bce:	2302      	movs	r3, #2
  }
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3728      	adds	r7, #40	@ 0x28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	00010004 	.word	0x00010004
 8004bdc:	20000084 	.word	0x20000084
 8004be0:	14f8b589 	.word	0x14f8b589

08004be4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d006      	beq.n	8004c0e <I2C_MasterRequestWrite+0x2a>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d003      	beq.n	8004c0e <I2C_MasterRequestWrite+0x2a>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c0c:	d108      	bne.n	8004c20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e00b      	b.n	8004c38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c24:	2b12      	cmp	r3, #18
 8004c26:	d107      	bne.n	8004c38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fa9b 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00d      	beq.n	8004c6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c5e:	d103      	bne.n	8004c68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e035      	b.n	8004cd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c74:	d108      	bne.n	8004c88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c76:	897b      	ldrh	r3, [r7, #10]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c84:	611a      	str	r2, [r3, #16]
 8004c86:	e01b      	b.n	8004cc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c88:	897b      	ldrh	r3, [r7, #10]
 8004c8a:	11db      	asrs	r3, r3, #7
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0306 	and.w	r3, r3, #6
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f063 030f 	orn	r3, r3, #15
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	490e      	ldr	r1, [pc, #56]	@ (8004ce0 <I2C_MasterRequestWrite+0xfc>)
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fae4 	bl	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e010      	b.n	8004cd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cb6:	897b      	ldrh	r3, [r7, #10]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4907      	ldr	r1, [pc, #28]	@ (8004ce4 <I2C_MasterRequestWrite+0x100>)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fad4 	bl	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	00010008 	.word	0x00010008
 8004ce4:	00010002 	.word	0x00010002

08004ce8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d006      	beq.n	8004d22 <I2C_MasterRequestRead+0x3a>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d003      	beq.n	8004d22 <I2C_MasterRequestRead+0x3a>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d20:	d108      	bne.n	8004d34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e00b      	b.n	8004d4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d38:	2b11      	cmp	r3, #17
 8004d3a:	d107      	bne.n	8004d4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fa11 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d72:	d103      	bne.n	8004d7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e079      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d88:	d108      	bne.n	8004d9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	611a      	str	r2, [r3, #16]
 8004d9a:	e05f      	b.n	8004e5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d9c:	897b      	ldrh	r3, [r7, #10]
 8004d9e:	11db      	asrs	r3, r3, #7
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 0306 	and.w	r3, r3, #6
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f063 030f 	orn	r3, r3, #15
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4930      	ldr	r1, [pc, #192]	@ (8004e7c <I2C_MasterRequestRead+0x194>)
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fa5a 	bl	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e054      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dca:	897b      	ldrh	r3, [r7, #10]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4929      	ldr	r1, [pc, #164]	@ (8004e80 <I2C_MasterRequestRead+0x198>)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fa4a 	bl	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e044      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f9af 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e36:	d103      	bne.n	8004e40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e017      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e44:	897b      	ldrh	r3, [r7, #10]
 8004e46:	11db      	asrs	r3, r3, #7
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	f003 0306 	and.w	r3, r3, #6
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f063 030e 	orn	r3, r3, #14
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4907      	ldr	r1, [pc, #28]	@ (8004e80 <I2C_MasterRequestRead+0x198>)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fa06 	bl	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	00010008 	.word	0x00010008
 8004e80:	00010002 	.word	0x00010002

08004e84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	4611      	mov	r1, r2
 8004e90:	461a      	mov	r2, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	817b      	strh	r3, [r7, #10]
 8004e96:	460b      	mov	r3, r1
 8004e98:	813b      	strh	r3, [r7, #8]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f960 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed4:	d103      	bne.n	8004ede <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004edc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e05f      	b.n	8004fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ee2:	897b      	ldrh	r3, [r7, #10]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	6a3a      	ldr	r2, [r7, #32]
 8004ef6:	492d      	ldr	r1, [pc, #180]	@ (8004fac <I2C_RequestMemoryWrite+0x128>)
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f9bb 	bl	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e04c      	b.n	8004fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f20:	6a39      	ldr	r1, [r7, #32]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fa46 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00d      	beq.n	8004f4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d107      	bne.n	8004f46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e02b      	b.n	8004fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d105      	bne.n	8004f5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f50:	893b      	ldrh	r3, [r7, #8]
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	611a      	str	r2, [r3, #16]
 8004f5a:	e021      	b.n	8004fa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f5c:	893b      	ldrh	r3, [r7, #8]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6c:	6a39      	ldr	r1, [r7, #32]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fa20 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00d      	beq.n	8004f96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d107      	bne.n	8004f92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e005      	b.n	8004fa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f96:	893b      	ldrh	r3, [r7, #8]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	00010002 	.word	0x00010002

08004fb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	817b      	strh	r3, [r7, #10]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	813b      	strh	r3, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fe8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f8c2 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005010:	d103      	bne.n	800501a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005018:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e0aa      	b.n	8005174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800501e:	897b      	ldrh	r3, [r7, #10]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800502c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	4952      	ldr	r1, [pc, #328]	@ (800517c <I2C_RequestMemoryRead+0x1cc>)
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f91d 	bl	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e097      	b.n	8005174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505c:	6a39      	ldr	r1, [r7, #32]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f9a8 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506e:	2b04      	cmp	r3, #4
 8005070:	d107      	bne.n	8005082 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005080:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e076      	b.n	8005174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d105      	bne.n	8005098 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800508c:	893b      	ldrh	r3, [r7, #8]
 800508e:	b2da      	uxtb	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	611a      	str	r2, [r3, #16]
 8005096:	e021      	b.n	80050dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005098:	893b      	ldrh	r3, [r7, #8]
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	b29b      	uxth	r3, r3
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a8:	6a39      	ldr	r1, [r7, #32]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f982 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00d      	beq.n	80050d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d107      	bne.n	80050ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e050      	b.n	8005174 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050d2:	893b      	ldrh	r3, [r7, #8]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050de:	6a39      	ldr	r1, [r7, #32]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f967 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00d      	beq.n	8005108 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d107      	bne.n	8005104 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005102:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e035      	b.n	8005174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005116:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	2200      	movs	r2, #0
 8005120:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f82b 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513e:	d103      	bne.n	8005148 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005146:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e013      	b.n	8005174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800514c:	897b      	ldrh	r3, [r7, #10]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	b2da      	uxtb	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	6a3a      	ldr	r2, [r7, #32]
 8005160:	4906      	ldr	r1, [pc, #24]	@ (800517c <I2C_RequestMemoryRead+0x1cc>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f886 	bl	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	00010002 	.word	0x00010002

08005180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005190:	e048      	b.n	8005224 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d044      	beq.n	8005224 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519a:	f7fe f9f5 	bl	8003588 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d139      	bne.n	8005224 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d10d      	bne.n	80051d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	43da      	mvns	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	e00c      	b.n	80051f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	43da      	mvns	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4013      	ands	r3, r2
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d116      	bne.n	8005224 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	f043 0220 	orr.w	r2, r3, #32
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e023      	b.n	800526c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	0c1b      	lsrs	r3, r3, #16
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b01      	cmp	r3, #1
 800522c:	d10d      	bne.n	800524a <I2C_WaitOnFlagUntilTimeout+0xca>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	43da      	mvns	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4013      	ands	r3, r2
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	bf0c      	ite	eq
 8005240:	2301      	moveq	r3, #1
 8005242:	2300      	movne	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	e00c      	b.n	8005264 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	43da      	mvns	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4013      	ands	r3, r2
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	429a      	cmp	r2, r3
 8005268:	d093      	beq.n	8005192 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005282:	e071      	b.n	8005368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005292:	d123      	bne.n	80052dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c8:	f043 0204 	orr.w	r2, r3, #4
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e067      	b.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d041      	beq.n	8005368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e4:	f7fe f950 	bl	8003588 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d302      	bcc.n	80052fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d136      	bne.n	8005368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0c1b      	lsrs	r3, r3, #16
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d10c      	bne.n	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	43da      	mvns	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4013      	ands	r3, r2
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf14      	ite	ne
 8005316:	2301      	movne	r3, #1
 8005318:	2300      	moveq	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	e00b      	b.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	43da      	mvns	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4013      	ands	r3, r2
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	bf14      	ite	ne
 8005330:	2301      	movne	r3, #1
 8005332:	2300      	moveq	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d016      	beq.n	8005368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	f043 0220 	orr.w	r2, r3, #32
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e021      	b.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	0c1b      	lsrs	r3, r3, #16
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b01      	cmp	r3, #1
 8005370:	d10c      	bne.n	800538c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	43da      	mvns	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4013      	ands	r3, r2
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	bf14      	ite	ne
 8005384:	2301      	movne	r3, #1
 8005386:	2300      	moveq	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	e00b      	b.n	80053a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	43da      	mvns	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf14      	ite	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	2300      	moveq	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f47f af6d 	bne.w	8005284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c0:	e034      	b.n	800542c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f8e3 	bl	800558e <I2C_IsAcknowledgeFailed>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e034      	b.n	800543c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d028      	beq.n	800542c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fe f8d5 	bl	8003588 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d11d      	bne.n	800542c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fa:	2b80      	cmp	r3, #128	@ 0x80
 80053fc:	d016      	beq.n	800542c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	f043 0220 	orr.w	r2, r3, #32
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e007      	b.n	800543c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005436:	2b80      	cmp	r3, #128	@ 0x80
 8005438:	d1c3      	bne.n	80053c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005450:	e034      	b.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f89b 	bl	800558e <I2C_IsAcknowledgeFailed>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e034      	b.n	80054cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d028      	beq.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546a:	f7fe f88d 	bl	8003588 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d11d      	bne.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b04      	cmp	r3, #4
 800548c:	d016      	beq.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e007      	b.n	80054cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d1c3      	bne.n	8005452 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054e0:	e049      	b.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d119      	bne.n	8005524 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0210 	mvn.w	r2, #16
 80054f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e030      	b.n	8005586 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005524:	f7fe f830 	bl	8003588 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d11d      	bne.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005544:	2b40      	cmp	r3, #64	@ 0x40
 8005546:	d016      	beq.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	f043 0220 	orr.w	r2, r3, #32
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e007      	b.n	8005586 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005580:	2b40      	cmp	r3, #64	@ 0x40
 8005582:	d1ae      	bne.n	80054e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a4:	d11b      	bne.n	80055de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
	...

080055ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e272      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8087 	beq.w	800571a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800560c:	4b92      	ldr	r3, [pc, #584]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 030c 	and.w	r3, r3, #12
 8005614:	2b04      	cmp	r3, #4
 8005616:	d00c      	beq.n	8005632 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005618:	4b8f      	ldr	r3, [pc, #572]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	2b08      	cmp	r3, #8
 8005622:	d112      	bne.n	800564a <HAL_RCC_OscConfig+0x5e>
 8005624:	4b8c      	ldr	r3, [pc, #560]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800562c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005630:	d10b      	bne.n	800564a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005632:	4b89      	ldr	r3, [pc, #548]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d06c      	beq.n	8005718 <HAL_RCC_OscConfig+0x12c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d168      	bne.n	8005718 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e24c      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005652:	d106      	bne.n	8005662 <HAL_RCC_OscConfig+0x76>
 8005654:	4b80      	ldr	r3, [pc, #512]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a7f      	ldr	r2, [pc, #508]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 800565a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	e02e      	b.n	80056c0 <HAL_RCC_OscConfig+0xd4>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10c      	bne.n	8005684 <HAL_RCC_OscConfig+0x98>
 800566a:	4b7b      	ldr	r3, [pc, #492]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a7a      	ldr	r2, [pc, #488]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	4b78      	ldr	r3, [pc, #480]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a77      	ldr	r2, [pc, #476]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 800567c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e01d      	b.n	80056c0 <HAL_RCC_OscConfig+0xd4>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800568c:	d10c      	bne.n	80056a8 <HAL_RCC_OscConfig+0xbc>
 800568e:	4b72      	ldr	r3, [pc, #456]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a71      	ldr	r2, [pc, #452]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	4b6f      	ldr	r3, [pc, #444]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a6e      	ldr	r2, [pc, #440]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 80056a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	e00b      	b.n	80056c0 <HAL_RCC_OscConfig+0xd4>
 80056a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a6a      	ldr	r2, [pc, #424]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 80056ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	4b68      	ldr	r3, [pc, #416]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a67      	ldr	r2, [pc, #412]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 80056ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d013      	beq.n	80056f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c8:	f7fd ff5e 	bl	8003588 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d0:	f7fd ff5a 	bl	8003588 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	@ 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e200      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0xe4>
 80056ee:	e014      	b.n	800571a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fd ff4a 	bl	8003588 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f8:	f7fd ff46 	bl	8003588 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b64      	cmp	r3, #100	@ 0x64
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e1ec      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800570a:	4b53      	ldr	r3, [pc, #332]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x10c>
 8005716:	e000      	b.n	800571a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d063      	beq.n	80057ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005726:	4b4c      	ldr	r3, [pc, #304]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005732:	4b49      	ldr	r3, [pc, #292]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f003 030c 	and.w	r3, r3, #12
 800573a:	2b08      	cmp	r3, #8
 800573c:	d11c      	bne.n	8005778 <HAL_RCC_OscConfig+0x18c>
 800573e:	4b46      	ldr	r3, [pc, #280]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d116      	bne.n	8005778 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574a:	4b43      	ldr	r3, [pc, #268]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_RCC_OscConfig+0x176>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d001      	beq.n	8005762 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e1c0      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005762:	4b3d      	ldr	r3, [pc, #244]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4939      	ldr	r1, [pc, #228]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005776:	e03a      	b.n	80057ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d020      	beq.n	80057c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005780:	4b36      	ldr	r3, [pc, #216]	@ (800585c <HAL_RCC_OscConfig+0x270>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005786:	f7fd feff 	bl	8003588 <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800578e:	f7fd fefb 	bl	8003588 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e1a1      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0f0      	beq.n	800578e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4927      	ldr	r1, [pc, #156]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	600b      	str	r3, [r1, #0]
 80057c0:	e015      	b.n	80057ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057c2:	4b26      	ldr	r3, [pc, #152]	@ (800585c <HAL_RCC_OscConfig+0x270>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fd fede 	bl	8003588 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057d0:	f7fd feda 	bl	8003588 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e180      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d03a      	beq.n	8005870 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d019      	beq.n	8005836 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005802:	4b17      	ldr	r3, [pc, #92]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005804:	2201      	movs	r2, #1
 8005806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005808:	f7fd febe 	bl	8003588 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005810:	f7fd feba 	bl	8003588 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e160      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <HAL_RCC_OscConfig+0x26c>)
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800582e:	2001      	movs	r0, #1
 8005830:	f000 face 	bl	8005dd0 <RCC_Delay>
 8005834:	e01c      	b.n	8005870 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005836:	4b0a      	ldr	r3, [pc, #40]	@ (8005860 <HAL_RCC_OscConfig+0x274>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800583c:	f7fd fea4 	bl	8003588 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005842:	e00f      	b.n	8005864 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005844:	f7fd fea0 	bl	8003588 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d908      	bls.n	8005864 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e146      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000
 800585c:	42420000 	.word	0x42420000
 8005860:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005864:	4b92      	ldr	r3, [pc, #584]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e9      	bne.n	8005844 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80a6 	beq.w	80059ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800587e:	2300      	movs	r3, #0
 8005880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005882:	4b8b      	ldr	r3, [pc, #556]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10d      	bne.n	80058aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800588e:	4b88      	ldr	r3, [pc, #544]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	4a87      	ldr	r2, [pc, #540]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005898:	61d3      	str	r3, [r2, #28]
 800589a:	4b85      	ldr	r3, [pc, #532]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058a6:	2301      	movs	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058aa:	4b82      	ldr	r3, [pc, #520]	@ (8005ab4 <HAL_RCC_OscConfig+0x4c8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d118      	bne.n	80058e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058b6:	4b7f      	ldr	r3, [pc, #508]	@ (8005ab4 <HAL_RCC_OscConfig+0x4c8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a7e      	ldr	r2, [pc, #504]	@ (8005ab4 <HAL_RCC_OscConfig+0x4c8>)
 80058bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c2:	f7fd fe61 	bl	8003588 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ca:	f7fd fe5d 	bl	8003588 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b64      	cmp	r3, #100	@ 0x64
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e103      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058dc:	4b75      	ldr	r3, [pc, #468]	@ (8005ab4 <HAL_RCC_OscConfig+0x4c8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f0      	beq.n	80058ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d106      	bne.n	80058fe <HAL_RCC_OscConfig+0x312>
 80058f0:	4b6f      	ldr	r3, [pc, #444]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	4a6e      	ldr	r2, [pc, #440]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	6213      	str	r3, [r2, #32]
 80058fc:	e02d      	b.n	800595a <HAL_RCC_OscConfig+0x36e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10c      	bne.n	8005920 <HAL_RCC_OscConfig+0x334>
 8005906:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	4a69      	ldr	r2, [pc, #420]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 800590c:	f023 0301 	bic.w	r3, r3, #1
 8005910:	6213      	str	r3, [r2, #32]
 8005912:	4b67      	ldr	r3, [pc, #412]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	4a66      	ldr	r2, [pc, #408]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005918:	f023 0304 	bic.w	r3, r3, #4
 800591c:	6213      	str	r3, [r2, #32]
 800591e:	e01c      	b.n	800595a <HAL_RCC_OscConfig+0x36e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b05      	cmp	r3, #5
 8005926:	d10c      	bne.n	8005942 <HAL_RCC_OscConfig+0x356>
 8005928:	4b61      	ldr	r3, [pc, #388]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	4a60      	ldr	r2, [pc, #384]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 800592e:	f043 0304 	orr.w	r3, r3, #4
 8005932:	6213      	str	r3, [r2, #32]
 8005934:	4b5e      	ldr	r3, [pc, #376]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	4a5d      	ldr	r2, [pc, #372]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6213      	str	r3, [r2, #32]
 8005940:	e00b      	b.n	800595a <HAL_RCC_OscConfig+0x36e>
 8005942:	4b5b      	ldr	r3, [pc, #364]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	4a5a      	ldr	r2, [pc, #360]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	6213      	str	r3, [r2, #32]
 800594e:	4b58      	ldr	r3, [pc, #352]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	4a57      	ldr	r2, [pc, #348]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005954:	f023 0304 	bic.w	r3, r3, #4
 8005958:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d015      	beq.n	800598e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005962:	f7fd fe11 	bl	8003588 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005968:	e00a      	b.n	8005980 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800596a:	f7fd fe0d 	bl	8003588 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005978:	4293      	cmp	r3, r2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e0b1      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005980:	4b4b      	ldr	r3, [pc, #300]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0ee      	beq.n	800596a <HAL_RCC_OscConfig+0x37e>
 800598c:	e014      	b.n	80059b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800598e:	f7fd fdfb 	bl	8003588 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005994:	e00a      	b.n	80059ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005996:	f7fd fdf7 	bl	8003588 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e09b      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ac:	4b40      	ldr	r3, [pc, #256]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1ee      	bne.n	8005996 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d105      	bne.n	80059ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059be:	4b3c      	ldr	r3, [pc, #240]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 80059c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8087 	beq.w	8005ae2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059d4:	4b36      	ldr	r3, [pc, #216]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 030c 	and.w	r3, r3, #12
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d061      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d146      	bne.n	8005a76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e8:	4b33      	ldr	r3, [pc, #204]	@ (8005ab8 <HAL_RCC_OscConfig+0x4cc>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ee:	f7fd fdcb 	bl	8003588 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f6:	f7fd fdc7 	bl	8003588 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e06d      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a08:	4b29      	ldr	r3, [pc, #164]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1f0      	bne.n	80059f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a1c:	d108      	bne.n	8005a30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a1e:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	4921      	ldr	r1, [pc, #132]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a30:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a19      	ldr	r1, [r3, #32]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	430b      	orrs	r3, r1
 8005a42:	491b      	ldr	r1, [pc, #108]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a48:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab8 <HAL_RCC_OscConfig+0x4cc>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4e:	f7fd fd9b 	bl	8003588 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a56:	f7fd fd97 	bl	8003588 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e03d      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a68:	4b11      	ldr	r3, [pc, #68]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0f0      	beq.n	8005a56 <HAL_RCC_OscConfig+0x46a>
 8005a74:	e035      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a76:	4b10      	ldr	r3, [pc, #64]	@ (8005ab8 <HAL_RCC_OscConfig+0x4cc>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7c:	f7fd fd84 	bl	8003588 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a84:	f7fd fd80 	bl	8003588 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e026      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a96:	4b06      	ldr	r3, [pc, #24]	@ (8005ab0 <HAL_RCC_OscConfig+0x4c4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0x498>
 8005aa2:	e01e      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d107      	bne.n	8005abc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e019      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	40007000 	.word	0x40007000
 8005ab8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005abc:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <HAL_RCC_OscConfig+0x500>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d106      	bne.n	8005ade <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d001      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40021000 	.word	0x40021000

08005af0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0d0      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b04:	4b6a      	ldr	r3, [pc, #424]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d910      	bls.n	8005b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b67      	ldr	r3, [pc, #412]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f023 0207 	bic.w	r2, r3, #7
 8005b1a:	4965      	ldr	r1, [pc, #404]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b22:	4b63      	ldr	r3, [pc, #396]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0b8      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b4c:	4b59      	ldr	r3, [pc, #356]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4a58      	ldr	r2, [pc, #352]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b64:	4b53      	ldr	r3, [pc, #332]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4a52      	ldr	r2, [pc, #328]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005b6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b70:	4b50      	ldr	r3, [pc, #320]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	494d      	ldr	r1, [pc, #308]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d040      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b96:	4b47      	ldr	r3, [pc, #284]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d115      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e07f      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d107      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bae:	4b41      	ldr	r3, [pc, #260]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e073      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e06b      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bce:	4b39      	ldr	r3, [pc, #228]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f023 0203 	bic.w	r2, r3, #3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4936      	ldr	r1, [pc, #216]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005be0:	f7fd fcd2 	bl	8003588 <HAL_GetTick>
 8005be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be6:	e00a      	b.n	8005bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be8:	f7fd fcce 	bl	8003588 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e053      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 020c 	and.w	r2, r3, #12
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d1eb      	bne.n	8005be8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c10:	4b27      	ldr	r3, [pc, #156]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d210      	bcs.n	8005c40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b24      	ldr	r3, [pc, #144]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 0207 	bic.w	r2, r3, #7
 8005c26:	4922      	ldr	r1, [pc, #136]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	4b20      	ldr	r3, [pc, #128]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e032      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c4c:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	4916      	ldr	r1, [pc, #88]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c6a:	4b12      	ldr	r3, [pc, #72]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	490e      	ldr	r1, [pc, #56]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c7e:	f000 f821 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 8005c82:	4602      	mov	r2, r0
 8005c84:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	091b      	lsrs	r3, r3, #4
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	490a      	ldr	r1, [pc, #40]	@ (8005cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c90:	5ccb      	ldrb	r3, [r1, r3]
 8005c92:	fa22 f303 	lsr.w	r3, r2, r3
 8005c96:	4a09      	ldr	r2, [pc, #36]	@ (8005cbc <HAL_RCC_ClockConfig+0x1cc>)
 8005c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c9a:	4b09      	ldr	r3, [pc, #36]	@ (8005cc0 <HAL_RCC_ClockConfig+0x1d0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fd fc30 	bl	8003504 <HAL_InitTick>

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40022000 	.word	0x40022000
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	080081dc 	.word	0x080081dc
 8005cbc:	20000084 	.word	0x20000084
 8005cc0:	20000088 	.word	0x20000088

08005cc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60bb      	str	r3, [r7, #8]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005cde:	4b1e      	ldr	r3, [pc, #120]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 030c 	and.w	r3, r3, #12
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d002      	beq.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x30>
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d003      	beq.n	8005cfa <HAL_RCC_GetSysClockFreq+0x36>
 8005cf2:	e027      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cf4:	4b19      	ldr	r3, [pc, #100]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005cf6:	613b      	str	r3, [r7, #16]
      break;
 8005cf8:	e027      	b.n	8005d4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	0c9b      	lsrs	r3, r3, #18
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	4a17      	ldr	r2, [pc, #92]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d04:	5cd3      	ldrb	r3, [r2, r3]
 8005d06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d010      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d12:	4b11      	ldr	r3, [pc, #68]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	0c5b      	lsrs	r3, r3, #17
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	4a11      	ldr	r2, [pc, #68]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d1e:	5cd3      	ldrb	r3, [r2, r3]
 8005d20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a0d      	ldr	r2, [pc, #52]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d26:	fb03 f202 	mul.w	r2, r3, r2
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e004      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a0c      	ldr	r2, [pc, #48]	@ (8005d68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d38:	fb02 f303 	mul.w	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	613b      	str	r3, [r7, #16]
      break;
 8005d42:	e002      	b.n	8005d4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d44:	4b05      	ldr	r3, [pc, #20]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d46:	613b      	str	r3, [r7, #16]
      break;
 8005d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d4a:	693b      	ldr	r3, [r7, #16]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	007a1200 	.word	0x007a1200
 8005d60:	080081f4 	.word	0x080081f4
 8005d64:	08008204 	.word	0x08008204
 8005d68:	003d0900 	.word	0x003d0900

08005d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d70:	4b02      	ldr	r3, [pc, #8]	@ (8005d7c <HAL_RCC_GetHCLKFreq+0x10>)
 8005d72:	681b      	ldr	r3, [r3, #0]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	20000084 	.word	0x20000084

08005d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d84:	f7ff fff2 	bl	8005d6c <HAL_RCC_GetHCLKFreq>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	0a1b      	lsrs	r3, r3, #8
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	4903      	ldr	r1, [pc, #12]	@ (8005da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d96:	5ccb      	ldrb	r3, [r1, r3]
 8005d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40021000 	.word	0x40021000
 8005da4:	080081ec 	.word	0x080081ec

08005da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dac:	f7ff ffde 	bl	8005d6c <HAL_RCC_GetHCLKFreq>
 8005db0:	4602      	mov	r2, r0
 8005db2:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	0adb      	lsrs	r3, r3, #11
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	4903      	ldr	r1, [pc, #12]	@ (8005dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dbe:	5ccb      	ldrb	r3, [r1, r3]
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	080081ec 	.word	0x080081ec

08005dd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e04 <RCC_Delay+0x34>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8005e08 <RCC_Delay+0x38>)
 8005dde:	fba2 2303 	umull	r2, r3, r2, r3
 8005de2:	0a5b      	lsrs	r3, r3, #9
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005dec:	bf00      	nop
  }
  while (Delay --);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1e5a      	subs	r2, r3, #1
 8005df2:	60fa      	str	r2, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f9      	bne.n	8005dec <RCC_Delay+0x1c>
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr
 8005e04:	20000084 	.word	0x20000084
 8005e08:	10624dd3 	.word	0x10624dd3

08005e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e076      	b.n	8005f0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d108      	bne.n	8005e38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e2e:	d009      	beq.n	8005e44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	61da      	str	r2, [r3, #28]
 8005e36:	e005      	b.n	8005e44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fd f9b2 	bl	80031c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec8:	ea42 0103 	orr.w	r1, r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	0c1a      	lsrs	r2, r3, #16
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f002 0204 	and.w	r2, r2, #4
 8005eea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005efa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f24:	f7fd fb30 	bl	8003588 <HAL_GetTick>
 8005f28:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d001      	beq.n	8005f3e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e12a      	b.n	8006194 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <HAL_SPI_Transmit+0x36>
 8005f44:	88fb      	ldrh	r3, [r7, #6]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e122      	b.n	8006194 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_SPI_Transmit+0x48>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e11b      	b.n	8006194 <HAL_SPI_Transmit+0x280>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2203      	movs	r2, #3
 8005f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	88fa      	ldrh	r2, [r7, #6]
 8005f82:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005faa:	d10f      	bne.n	8005fcc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b40      	cmp	r3, #64	@ 0x40
 8005fd8:	d007      	beq.n	8005fea <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fe8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ff2:	d152      	bne.n	800609a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <HAL_SPI_Transmit+0xee>
 8005ffc:	8b7b      	ldrh	r3, [r7, #26]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d145      	bne.n	800608e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006006:	881a      	ldrh	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006012:	1c9a      	adds	r2, r3, #2
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006026:	e032      	b.n	800608e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b02      	cmp	r3, #2
 8006034:	d112      	bne.n	800605c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603a:	881a      	ldrh	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	1c9a      	adds	r2, r3, #2
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	86da      	strh	r2, [r3, #54]	@ 0x36
 800605a:	e018      	b.n	800608e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800605c:	f7fd fa94 	bl	8003588 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d803      	bhi.n	8006074 <HAL_SPI_Transmit+0x160>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006072:	d102      	bne.n	800607a <HAL_SPI_Transmit+0x166>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e082      	b.n	8006194 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1c7      	bne.n	8006028 <HAL_SPI_Transmit+0x114>
 8006098:	e053      	b.n	8006142 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <HAL_SPI_Transmit+0x194>
 80060a2:	8b7b      	ldrh	r3, [r7, #26]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d147      	bne.n	8006138 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	7812      	ldrb	r2, [r2, #0]
 80060b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060ce:	e033      	b.n	8006138 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d113      	bne.n	8006106 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006104:	e018      	b.n	8006138 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006106:	f7fd fa3f 	bl	8003588 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d803      	bhi.n	800611e <HAL_SPI_Transmit+0x20a>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d102      	bne.n	8006124 <HAL_SPI_Transmit+0x210>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d109      	bne.n	8006138 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e02d      	b.n	8006194 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1c6      	bne.n	80060d0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fa66 	bl	8006618 <SPI_EndRxTxTransaction>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006192:	2300      	movs	r3, #0
  }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08a      	sub	sp, #40	@ 0x28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061aa:	2301      	movs	r3, #1
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ae:	f7fd f9eb 	bl	8003588 <HAL_GetTick>
 80061b2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061ba:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80061c2:	887b      	ldrh	r3, [r7, #2]
 80061c4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061c6:	7ffb      	ldrb	r3, [r7, #31]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d00c      	beq.n	80061e6 <HAL_SPI_TransmitReceive+0x4a>
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061d2:	d106      	bne.n	80061e2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <HAL_SPI_TransmitReceive+0x46>
 80061dc:	7ffb      	ldrb	r3, [r7, #31]
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d001      	beq.n	80061e6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
 80061e4:	e17f      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x5c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x5c>
 80061f2:	887b      	ldrh	r3, [r7, #2]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e174      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_SPI_TransmitReceive+0x6e>
 8006206:	2302      	movs	r3, #2
 8006208:	e16d      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x34a>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b04      	cmp	r3, #4
 800621c:	d003      	beq.n	8006226 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2205      	movs	r2, #5
 8006222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	887a      	ldrh	r2, [r7, #2]
 8006236:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	887a      	ldrh	r2, [r7, #2]
 800623c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	887a      	ldrh	r2, [r7, #2]
 8006248:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	887a      	ldrh	r2, [r7, #2]
 800624e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006266:	2b40      	cmp	r3, #64	@ 0x40
 8006268:	d007      	beq.n	800627a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006278:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006282:	d17e      	bne.n	8006382 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <HAL_SPI_TransmitReceive+0xf6>
 800628c:	8afb      	ldrh	r3, [r7, #22]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d16c      	bne.n	800636c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006296:	881a      	ldrh	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a2:	1c9a      	adds	r2, r3, #2
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b6:	e059      	b.n	800636c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d11b      	bne.n	80062fe <HAL_SPI_TransmitReceive+0x162>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d016      	beq.n	80062fe <HAL_SPI_TransmitReceive+0x162>
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d113      	bne.n	80062fe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062da:	881a      	ldrh	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e6:	1c9a      	adds	r2, r3, #2
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b01      	cmp	r3, #1
 800630a:	d119      	bne.n	8006340 <HAL_SPI_TransmitReceive+0x1a4>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d014      	beq.n	8006340 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006320:	b292      	uxth	r2, r2
 8006322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800633c:	2301      	movs	r3, #1
 800633e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006340:	f7fd f922 	bl	8003588 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800634c:	429a      	cmp	r2, r3
 800634e:	d80d      	bhi.n	800636c <HAL_SPI_TransmitReceive+0x1d0>
 8006350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d009      	beq.n	800636c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e0bc      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1a0      	bne.n	80062b8 <HAL_SPI_TransmitReceive+0x11c>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d19b      	bne.n	80062b8 <HAL_SPI_TransmitReceive+0x11c>
 8006380:	e082      	b.n	8006488 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <HAL_SPI_TransmitReceive+0x1f4>
 800638a:	8afb      	ldrh	r3, [r7, #22]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d171      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	330c      	adds	r3, #12
 800639a:	7812      	ldrb	r2, [r2, #0]
 800639c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063b6:	e05d      	b.n	8006474 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d11c      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x264>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d017      	beq.n	8006400 <HAL_SPI_TransmitReceive+0x264>
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d114      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	7812      	ldrb	r2, [r2, #0]
 80063e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b01      	cmp	r3, #1
 800640c:	d119      	bne.n	8006442 <HAL_SPI_TransmitReceive+0x2a6>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006412:	b29b      	uxth	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d014      	beq.n	8006442 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800643e:	2301      	movs	r3, #1
 8006440:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006442:	f7fd f8a1 	bl	8003588 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800644e:	429a      	cmp	r2, r3
 8006450:	d803      	bhi.n	800645a <HAL_SPI_TransmitReceive+0x2be>
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d102      	bne.n	8006460 <HAL_SPI_TransmitReceive+0x2c4>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	2b00      	cmp	r3, #0
 800645e:	d109      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e038      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d19c      	bne.n	80063b8 <HAL_SPI_TransmitReceive+0x21c>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006482:	b29b      	uxth	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d197      	bne.n	80063b8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006488:	6a3a      	ldr	r2, [r7, #32]
 800648a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f8c3 	bl	8006618 <SPI_EndRxTxTransaction>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e01d      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80064e4:	2300      	movs	r3, #0
  }
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3728      	adds	r7, #40	@ 0x28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064fc:	b2db      	uxtb	r3, r3
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	4613      	mov	r3, r2
 8006516:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006518:	f7fd f836 	bl	8003588 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	4413      	add	r3, r2
 8006526:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006528:	f7fd f82e 	bl	8003588 <HAL_GetTick>
 800652c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800652e:	4b39      	ldr	r3, [pc, #228]	@ (8006614 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	015b      	lsls	r3, r3, #5
 8006534:	0d1b      	lsrs	r3, r3, #20
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	fb02 f303 	mul.w	r3, r2, r3
 800653c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800653e:	e054      	b.n	80065ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d050      	beq.n	80065ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006548:	f7fd f81e 	bl	8003588 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	429a      	cmp	r2, r3
 8006556:	d902      	bls.n	800655e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d13d      	bne.n	80065da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800656c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006576:	d111      	bne.n	800659c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006580:	d004      	beq.n	800658c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800658a:	d107      	bne.n	800659c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800659a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a4:	d10f      	bne.n	80065c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e017      	b.n	800660a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4013      	ands	r3, r2
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	bf0c      	ite	eq
 80065fa:	2301      	moveq	r3, #1
 80065fc:	2300      	movne	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	461a      	mov	r2, r3
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	429a      	cmp	r2, r3
 8006606:	d19b      	bne.n	8006540 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000084 	.word	0x20000084

08006618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2201      	movs	r2, #1
 800662c:	2102      	movs	r1, #2
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff ff6a 	bl	8006508 <SPI_WaitFlagStateUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d007      	beq.n	800664a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800663e:	f043 0220 	orr.w	r2, r3, #32
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e013      	b.n	8006672 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2200      	movs	r2, #0
 8006652:	2180      	movs	r1, #128	@ 0x80
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff ff57 	bl	8006508 <SPI_WaitFlagStateUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e000      	b.n	8006672 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e042      	b.n	8006712 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fc fea7 	bl	80033f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2224      	movs	r2, #36	@ 0x24
 80066aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa08 	bl	8006ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b08a      	sub	sp, #40	@ 0x28
 800671e:	af02      	add	r7, sp, #8
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	603b      	str	r3, [r7, #0]
 8006726:	4613      	mov	r3, r2
 8006728:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b20      	cmp	r3, #32
 8006738:	d175      	bne.n	8006826 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <HAL_UART_Transmit+0x2c>
 8006740:	88fb      	ldrh	r3, [r7, #6]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e06e      	b.n	8006828 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2221      	movs	r2, #33	@ 0x21
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006758:	f7fc ff16 	bl	8003588 <HAL_GetTick>
 800675c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	88fa      	ldrh	r2, [r7, #6]
 8006762:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006772:	d108      	bne.n	8006786 <HAL_UART_Transmit+0x6c>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800677c:	2300      	movs	r3, #0
 800677e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	e003      	b.n	800678e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800678e:	e02e      	b.n	80067ee <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	2180      	movs	r1, #128	@ 0x80
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f8df 	bl	800695e <UART_WaitOnFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e03a      	b.n	8006828 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10b      	bne.n	80067d0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	3302      	adds	r3, #2
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	e007      	b.n	80067e0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	3301      	adds	r3, #1
 80067de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1cb      	bne.n	8006790 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2200      	movs	r2, #0
 8006800:	2140      	movs	r1, #64	@ 0x40
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 f8ab 	bl	800695e <UART_WaitOnFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e006      	b.n	8006828 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	e000      	b.n	8006828 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006826:	2302      	movs	r3, #2
  }
}
 8006828:	4618      	mov	r0, r3
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	@ 0x28
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b20      	cmp	r3, #32
 800684e:	f040 8081 	bne.w	8006954 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <HAL_UART_Receive+0x2e>
 8006858:	88fb      	ldrh	r3, [r7, #6]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e079      	b.n	8006956 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2222      	movs	r2, #34	@ 0x22
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006876:	f7fc fe87 	bl	8003588 <HAL_GetTick>
 800687a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	88fa      	ldrh	r2, [r7, #6]
 8006886:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006890:	d108      	bne.n	80068a4 <HAL_UART_Receive+0x74>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	e003      	b.n	80068ac <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80068ac:	e047      	b.n	800693e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2200      	movs	r2, #0
 80068b6:	2120      	movs	r1, #32
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f850 	bl	800695e <UART_WaitOnFlagUntilTimeout>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e042      	b.n	8006956 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10c      	bne.n	80068f0 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	3302      	adds	r3, #2
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	e01f      	b.n	8006930 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f8:	d007      	beq.n	800690a <HAL_UART_Receive+0xda>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <HAL_UART_Receive+0xe8>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	b2da      	uxtb	r2, r3
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	e008      	b.n	800692a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006924:	b2da      	uxtb	r2, r3
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	3301      	adds	r3, #1
 800692e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1b2      	bne.n	80068ae <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	e000      	b.n	8006956 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006954:	2302      	movs	r3, #2
  }
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	4613      	mov	r3, r2
 800696c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696e:	e03b      	b.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006976:	d037      	beq.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006978:	f7fc fe06 	bl	8003588 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	6a3a      	ldr	r2, [r7, #32]
 8006984:	429a      	cmp	r2, r3
 8006986:	d302      	bcc.n	800698e <UART_WaitOnFlagUntilTimeout+0x30>
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e03a      	b.n	8006a08 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d023      	beq.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b80      	cmp	r3, #128	@ 0x80
 80069a4:	d020      	beq.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b40      	cmp	r3, #64	@ 0x40
 80069aa:	d01d      	beq.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d116      	bne.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f81d 	bl	8006a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2208      	movs	r2, #8
 80069da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e00f      	b.n	8006a08 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	4013      	ands	r3, r2
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	bf0c      	ite	eq
 80069f8:	2301      	moveq	r3, #1
 80069fa:	2300      	movne	r3, #0
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d0b4      	beq.n	8006970 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b095      	sub	sp, #84	@ 0x54
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a38:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e5      	bne.n	8006a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3314      	adds	r3, #20
 8006a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f023 0301 	bic.w	r3, r3, #1
 8006a62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3314      	adds	r3, #20
 8006a6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e5      	bne.n	8006a4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d119      	bne.n	8006abc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f023 0310 	bic.w	r3, r3, #16
 8006a9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aa8:	61ba      	str	r2, [r7, #24]
 8006aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6979      	ldr	r1, [r7, #20]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e5      	bne.n	8006a88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006aca:	bf00      	nop
 8006acc:	3754      	adds	r7, #84	@ 0x54
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc80      	pop	{r7}
 8006ad2:	4770      	bx	lr

08006ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006b0e:	f023 030c 	bic.w	r3, r3, #12
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2c      	ldr	r2, [pc, #176]	@ (8006be8 <UART_SetConfig+0x114>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d103      	bne.n	8006b44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b3c:	f7ff f934 	bl	8005da8 <HAL_RCC_GetPCLK2Freq>
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	e002      	b.n	8006b4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b44:	f7ff f91c 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 8006b48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	009a      	lsls	r2, r3, #2
 8006b54:	441a      	add	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b60:	4a22      	ldr	r2, [pc, #136]	@ (8006bec <UART_SetConfig+0x118>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	0119      	lsls	r1, r3, #4
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009a      	lsls	r2, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b80:	4b1a      	ldr	r3, [pc, #104]	@ (8006bec <UART_SetConfig+0x118>)
 8006b82:	fba3 0302 	umull	r0, r3, r3, r2
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	2064      	movs	r0, #100	@ 0x64
 8006b8a:	fb00 f303 	mul.w	r3, r0, r3
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	3332      	adds	r3, #50	@ 0x32
 8006b94:	4a15      	ldr	r2, [pc, #84]	@ (8006bec <UART_SetConfig+0x118>)
 8006b96:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ba0:	4419      	add	r1, r3
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009a      	lsls	r2, r3, #2
 8006bac:	441a      	add	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bec <UART_SetConfig+0x118>)
 8006bba:	fba3 0302 	umull	r0, r3, r3, r2
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	2064      	movs	r0, #100	@ 0x64
 8006bc2:	fb00 f303 	mul.w	r3, r0, r3
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	011b      	lsls	r3, r3, #4
 8006bca:	3332      	adds	r3, #50	@ 0x32
 8006bcc:	4a07      	ldr	r2, [pc, #28]	@ (8006bec <UART_SetConfig+0x118>)
 8006bce:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	f003 020f 	and.w	r2, r3, #15
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	440a      	add	r2, r1
 8006bde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006be0:	bf00      	nop
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	40013800 	.word	0x40013800
 8006bec:	51eb851f 	.word	0x51eb851f

08006bf0 <siprintf>:
 8006bf0:	b40e      	push	{r1, r2, r3}
 8006bf2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006bf6:	b500      	push	{lr}
 8006bf8:	b09c      	sub	sp, #112	@ 0x70
 8006bfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8006bfc:	9002      	str	r0, [sp, #8]
 8006bfe:	9006      	str	r0, [sp, #24]
 8006c00:	9107      	str	r1, [sp, #28]
 8006c02:	9104      	str	r1, [sp, #16]
 8006c04:	4808      	ldr	r0, [pc, #32]	@ (8006c28 <siprintf+0x38>)
 8006c06:	4909      	ldr	r1, [pc, #36]	@ (8006c2c <siprintf+0x3c>)
 8006c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0c:	9105      	str	r1, [sp, #20]
 8006c0e:	6800      	ldr	r0, [r0, #0]
 8006c10:	a902      	add	r1, sp, #8
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	f000 f9f0 	bl	8006ff8 <_svfiprintf_r>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	9b02      	ldr	r3, [sp, #8]
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	b01c      	add	sp, #112	@ 0x70
 8006c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c24:	b003      	add	sp, #12
 8006c26:	4770      	bx	lr
 8006c28:	20000090 	.word	0x20000090
 8006c2c:	ffff0208 	.word	0xffff0208

08006c30 <siscanf>:
 8006c30:	b40e      	push	{r1, r2, r3}
 8006c32:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006c36:	b530      	push	{r4, r5, lr}
 8006c38:	b09c      	sub	sp, #112	@ 0x70
 8006c3a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006c3c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006c40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006c44:	9002      	str	r0, [sp, #8]
 8006c46:	9006      	str	r0, [sp, #24]
 8006c48:	f7f9 fa82 	bl	8000150 <strlen>
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <siscanf+0x4c>)
 8006c4e:	9003      	str	r0, [sp, #12]
 8006c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c52:	2300      	movs	r3, #0
 8006c54:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c56:	9314      	str	r3, [sp, #80]	@ 0x50
 8006c58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c5c:	9007      	str	r0, [sp, #28]
 8006c5e:	4808      	ldr	r0, [pc, #32]	@ (8006c80 <siscanf+0x50>)
 8006c60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c64:	462a      	mov	r2, r5
 8006c66:	4623      	mov	r3, r4
 8006c68:	a902      	add	r1, sp, #8
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	9401      	str	r4, [sp, #4]
 8006c6e:	f000 fb17 	bl	80072a0 <__ssvfiscanf_r>
 8006c72:	b01c      	add	sp, #112	@ 0x70
 8006c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c78:	b003      	add	sp, #12
 8006c7a:	4770      	bx	lr
 8006c7c:	08006c85 	.word	0x08006c85
 8006c80:	20000090 	.word	0x20000090

08006c84 <__seofread>:
 8006c84:	2000      	movs	r0, #0
 8006c86:	4770      	bx	lr

08006c88 <memset>:
 8006c88:	4603      	mov	r3, r0
 8006c8a:	4402      	add	r2, r0
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d100      	bne.n	8006c92 <memset+0xa>
 8006c90:	4770      	bx	lr
 8006c92:	f803 1b01 	strb.w	r1, [r3], #1
 8006c96:	e7f9      	b.n	8006c8c <memset+0x4>

08006c98 <strchr>:
 8006c98:	4603      	mov	r3, r0
 8006c9a:	b2c9      	uxtb	r1, r1
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca2:	b112      	cbz	r2, 8006caa <strchr+0x12>
 8006ca4:	428a      	cmp	r2, r1
 8006ca6:	d1f9      	bne.n	8006c9c <strchr+0x4>
 8006ca8:	4770      	bx	lr
 8006caa:	2900      	cmp	r1, #0
 8006cac:	bf18      	it	ne
 8006cae:	2000      	movne	r0, #0
 8006cb0:	4770      	bx	lr

08006cb2 <strstr>:
 8006cb2:	780a      	ldrb	r2, [r1, #0]
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	b96a      	cbnz	r2, 8006cd4 <strstr+0x22>
 8006cb8:	bd70      	pop	{r4, r5, r6, pc}
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d109      	bne.n	8006cd2 <strstr+0x20>
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f6      	beq.n	8006cb8 <strstr+0x6>
 8006cca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006cce:	429e      	cmp	r6, r3
 8006cd0:	d0f7      	beq.n	8006cc2 <strstr+0x10>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	7803      	ldrb	r3, [r0, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1ef      	bne.n	8006cba <strstr+0x8>
 8006cda:	4618      	mov	r0, r3
 8006cdc:	e7ec      	b.n	8006cb8 <strstr+0x6>
	...

08006ce0 <__errno>:
 8006ce0:	4b01      	ldr	r3, [pc, #4]	@ (8006ce8 <__errno+0x8>)
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20000090 	.word	0x20000090

08006cec <__libc_init_array>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	2600      	movs	r6, #0
 8006cf0:	4d0c      	ldr	r5, [pc, #48]	@ (8006d24 <__libc_init_array+0x38>)
 8006cf2:	4c0d      	ldr	r4, [pc, #52]	@ (8006d28 <__libc_init_array+0x3c>)
 8006cf4:	1b64      	subs	r4, r4, r5
 8006cf6:	10a4      	asrs	r4, r4, #2
 8006cf8:	42a6      	cmp	r6, r4
 8006cfa:	d109      	bne.n	8006d10 <__libc_init_array+0x24>
 8006cfc:	f001 f8ec 	bl	8007ed8 <_init>
 8006d00:	2600      	movs	r6, #0
 8006d02:	4d0a      	ldr	r5, [pc, #40]	@ (8006d2c <__libc_init_array+0x40>)
 8006d04:	4c0a      	ldr	r4, [pc, #40]	@ (8006d30 <__libc_init_array+0x44>)
 8006d06:	1b64      	subs	r4, r4, r5
 8006d08:	10a4      	asrs	r4, r4, #2
 8006d0a:	42a6      	cmp	r6, r4
 8006d0c:	d105      	bne.n	8006d1a <__libc_init_array+0x2e>
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d14:	4798      	blx	r3
 8006d16:	3601      	adds	r6, #1
 8006d18:	e7ee      	b.n	8006cf8 <__libc_init_array+0xc>
 8006d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1e:	4798      	blx	r3
 8006d20:	3601      	adds	r6, #1
 8006d22:	e7f2      	b.n	8006d0a <__libc_init_array+0x1e>
 8006d24:	08008360 	.word	0x08008360
 8006d28:	08008360 	.word	0x08008360
 8006d2c:	08008360 	.word	0x08008360
 8006d30:	08008364 	.word	0x08008364

08006d34 <__retarget_lock_acquire_recursive>:
 8006d34:	4770      	bx	lr

08006d36 <__retarget_lock_release_recursive>:
 8006d36:	4770      	bx	lr

08006d38 <memcpy>:
 8006d38:	440a      	add	r2, r1
 8006d3a:	4291      	cmp	r1, r2
 8006d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d40:	d100      	bne.n	8006d44 <memcpy+0xc>
 8006d42:	4770      	bx	lr
 8006d44:	b510      	push	{r4, lr}
 8006d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d4a:	4291      	cmp	r1, r2
 8006d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d50:	d1f9      	bne.n	8006d46 <memcpy+0xe>
 8006d52:	bd10      	pop	{r4, pc}

08006d54 <_free_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4605      	mov	r5, r0
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	d040      	beq.n	8006dde <_free_r+0x8a>
 8006d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d60:	1f0c      	subs	r4, r1, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bfb8      	it	lt
 8006d66:	18e4      	addlt	r4, r4, r3
 8006d68:	f000 f8de 	bl	8006f28 <__malloc_lock>
 8006d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006de0 <_free_r+0x8c>)
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	b933      	cbnz	r3, 8006d80 <_free_r+0x2c>
 8006d72:	6063      	str	r3, [r4, #4]
 8006d74:	6014      	str	r4, [r2, #0]
 8006d76:	4628      	mov	r0, r5
 8006d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d7c:	f000 b8da 	b.w	8006f34 <__malloc_unlock>
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	d908      	bls.n	8006d96 <_free_r+0x42>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	1821      	adds	r1, r4, r0
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	bf01      	itttt	eq
 8006d8c:	6819      	ldreq	r1, [r3, #0]
 8006d8e:	685b      	ldreq	r3, [r3, #4]
 8006d90:	1809      	addeq	r1, r1, r0
 8006d92:	6021      	streq	r1, [r4, #0]
 8006d94:	e7ed      	b.n	8006d72 <_free_r+0x1e>
 8006d96:	461a      	mov	r2, r3
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	b10b      	cbz	r3, 8006da0 <_free_r+0x4c>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d9fa      	bls.n	8006d96 <_free_r+0x42>
 8006da0:	6811      	ldr	r1, [r2, #0]
 8006da2:	1850      	adds	r0, r2, r1
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	d10b      	bne.n	8006dc0 <_free_r+0x6c>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	4401      	add	r1, r0
 8006dac:	1850      	adds	r0, r2, r1
 8006dae:	4283      	cmp	r3, r0
 8006db0:	6011      	str	r1, [r2, #0]
 8006db2:	d1e0      	bne.n	8006d76 <_free_r+0x22>
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	4408      	add	r0, r1
 8006dba:	6010      	str	r0, [r2, #0]
 8006dbc:	6053      	str	r3, [r2, #4]
 8006dbe:	e7da      	b.n	8006d76 <_free_r+0x22>
 8006dc0:	d902      	bls.n	8006dc8 <_free_r+0x74>
 8006dc2:	230c      	movs	r3, #12
 8006dc4:	602b      	str	r3, [r5, #0]
 8006dc6:	e7d6      	b.n	8006d76 <_free_r+0x22>
 8006dc8:	6820      	ldr	r0, [r4, #0]
 8006dca:	1821      	adds	r1, r4, r0
 8006dcc:	428b      	cmp	r3, r1
 8006dce:	bf01      	itttt	eq
 8006dd0:	6819      	ldreq	r1, [r3, #0]
 8006dd2:	685b      	ldreq	r3, [r3, #4]
 8006dd4:	1809      	addeq	r1, r1, r0
 8006dd6:	6021      	streq	r1, [r4, #0]
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	6054      	str	r4, [r2, #4]
 8006ddc:	e7cb      	b.n	8006d76 <_free_r+0x22>
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	2000208c 	.word	0x2000208c

08006de4 <sbrk_aligned>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	4e0f      	ldr	r6, [pc, #60]	@ (8006e24 <sbrk_aligned+0x40>)
 8006de8:	460c      	mov	r4, r1
 8006dea:	6831      	ldr	r1, [r6, #0]
 8006dec:	4605      	mov	r5, r0
 8006dee:	b911      	cbnz	r1, 8006df6 <sbrk_aligned+0x12>
 8006df0:	f000 ff32 	bl	8007c58 <_sbrk_r>
 8006df4:	6030      	str	r0, [r6, #0]
 8006df6:	4621      	mov	r1, r4
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f000 ff2d 	bl	8007c58 <_sbrk_r>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d103      	bne.n	8006e0a <sbrk_aligned+0x26>
 8006e02:	f04f 34ff 	mov.w	r4, #4294967295
 8006e06:	4620      	mov	r0, r4
 8006e08:	bd70      	pop	{r4, r5, r6, pc}
 8006e0a:	1cc4      	adds	r4, r0, #3
 8006e0c:	f024 0403 	bic.w	r4, r4, #3
 8006e10:	42a0      	cmp	r0, r4
 8006e12:	d0f8      	beq.n	8006e06 <sbrk_aligned+0x22>
 8006e14:	1a21      	subs	r1, r4, r0
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 ff1e 	bl	8007c58 <_sbrk_r>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d1f2      	bne.n	8006e06 <sbrk_aligned+0x22>
 8006e20:	e7ef      	b.n	8006e02 <sbrk_aligned+0x1e>
 8006e22:	bf00      	nop
 8006e24:	20002088 	.word	0x20002088

08006e28 <_malloc_r>:
 8006e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e2c:	1ccd      	adds	r5, r1, #3
 8006e2e:	f025 0503 	bic.w	r5, r5, #3
 8006e32:	3508      	adds	r5, #8
 8006e34:	2d0c      	cmp	r5, #12
 8006e36:	bf38      	it	cc
 8006e38:	250c      	movcc	r5, #12
 8006e3a:	2d00      	cmp	r5, #0
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	db01      	blt.n	8006e44 <_malloc_r+0x1c>
 8006e40:	42a9      	cmp	r1, r5
 8006e42:	d904      	bls.n	8006e4e <_malloc_r+0x26>
 8006e44:	230c      	movs	r3, #12
 8006e46:	6033      	str	r3, [r6, #0]
 8006e48:	2000      	movs	r0, #0
 8006e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f24 <_malloc_r+0xfc>
 8006e52:	f000 f869 	bl	8006f28 <__malloc_lock>
 8006e56:	f8d8 3000 	ldr.w	r3, [r8]
 8006e5a:	461c      	mov	r4, r3
 8006e5c:	bb44      	cbnz	r4, 8006eb0 <_malloc_r+0x88>
 8006e5e:	4629      	mov	r1, r5
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7ff ffbf 	bl	8006de4 <sbrk_aligned>
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	4604      	mov	r4, r0
 8006e6a:	d158      	bne.n	8006f1e <_malloc_r+0xf6>
 8006e6c:	f8d8 4000 	ldr.w	r4, [r8]
 8006e70:	4627      	mov	r7, r4
 8006e72:	2f00      	cmp	r7, #0
 8006e74:	d143      	bne.n	8006efe <_malloc_r+0xd6>
 8006e76:	2c00      	cmp	r4, #0
 8006e78:	d04b      	beq.n	8006f12 <_malloc_r+0xea>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	4630      	mov	r0, r6
 8006e80:	eb04 0903 	add.w	r9, r4, r3
 8006e84:	f000 fee8 	bl	8007c58 <_sbrk_r>
 8006e88:	4581      	cmp	r9, r0
 8006e8a:	d142      	bne.n	8006f12 <_malloc_r+0xea>
 8006e8c:	6821      	ldr	r1, [r4, #0]
 8006e8e:	4630      	mov	r0, r6
 8006e90:	1a6d      	subs	r5, r5, r1
 8006e92:	4629      	mov	r1, r5
 8006e94:	f7ff ffa6 	bl	8006de4 <sbrk_aligned>
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d03a      	beq.n	8006f12 <_malloc_r+0xea>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	442b      	add	r3, r5
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	bb62      	cbnz	r2, 8006f04 <_malloc_r+0xdc>
 8006eaa:	f8c8 7000 	str.w	r7, [r8]
 8006eae:	e00f      	b.n	8006ed0 <_malloc_r+0xa8>
 8006eb0:	6822      	ldr	r2, [r4, #0]
 8006eb2:	1b52      	subs	r2, r2, r5
 8006eb4:	d420      	bmi.n	8006ef8 <_malloc_r+0xd0>
 8006eb6:	2a0b      	cmp	r2, #11
 8006eb8:	d917      	bls.n	8006eea <_malloc_r+0xc2>
 8006eba:	1961      	adds	r1, r4, r5
 8006ebc:	42a3      	cmp	r3, r4
 8006ebe:	6025      	str	r5, [r4, #0]
 8006ec0:	bf18      	it	ne
 8006ec2:	6059      	strne	r1, [r3, #4]
 8006ec4:	6863      	ldr	r3, [r4, #4]
 8006ec6:	bf08      	it	eq
 8006ec8:	f8c8 1000 	streq.w	r1, [r8]
 8006ecc:	5162      	str	r2, [r4, r5]
 8006ece:	604b      	str	r3, [r1, #4]
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 f82f 	bl	8006f34 <__malloc_unlock>
 8006ed6:	f104 000b 	add.w	r0, r4, #11
 8006eda:	1d23      	adds	r3, r4, #4
 8006edc:	f020 0007 	bic.w	r0, r0, #7
 8006ee0:	1ac2      	subs	r2, r0, r3
 8006ee2:	bf1c      	itt	ne
 8006ee4:	1a1b      	subne	r3, r3, r0
 8006ee6:	50a3      	strne	r3, [r4, r2]
 8006ee8:	e7af      	b.n	8006e4a <_malloc_r+0x22>
 8006eea:	6862      	ldr	r2, [r4, #4]
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	bf0c      	ite	eq
 8006ef0:	f8c8 2000 	streq.w	r2, [r8]
 8006ef4:	605a      	strne	r2, [r3, #4]
 8006ef6:	e7eb      	b.n	8006ed0 <_malloc_r+0xa8>
 8006ef8:	4623      	mov	r3, r4
 8006efa:	6864      	ldr	r4, [r4, #4]
 8006efc:	e7ae      	b.n	8006e5c <_malloc_r+0x34>
 8006efe:	463c      	mov	r4, r7
 8006f00:	687f      	ldr	r7, [r7, #4]
 8006f02:	e7b6      	b.n	8006e72 <_malloc_r+0x4a>
 8006f04:	461a      	mov	r2, r3
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	d1fb      	bne.n	8006f04 <_malloc_r+0xdc>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	6053      	str	r3, [r2, #4]
 8006f10:	e7de      	b.n	8006ed0 <_malloc_r+0xa8>
 8006f12:	230c      	movs	r3, #12
 8006f14:	4630      	mov	r0, r6
 8006f16:	6033      	str	r3, [r6, #0]
 8006f18:	f000 f80c 	bl	8006f34 <__malloc_unlock>
 8006f1c:	e794      	b.n	8006e48 <_malloc_r+0x20>
 8006f1e:	6005      	str	r5, [r0, #0]
 8006f20:	e7d6      	b.n	8006ed0 <_malloc_r+0xa8>
 8006f22:	bf00      	nop
 8006f24:	2000208c 	.word	0x2000208c

08006f28 <__malloc_lock>:
 8006f28:	4801      	ldr	r0, [pc, #4]	@ (8006f30 <__malloc_lock+0x8>)
 8006f2a:	f7ff bf03 	b.w	8006d34 <__retarget_lock_acquire_recursive>
 8006f2e:	bf00      	nop
 8006f30:	20002084 	.word	0x20002084

08006f34 <__malloc_unlock>:
 8006f34:	4801      	ldr	r0, [pc, #4]	@ (8006f3c <__malloc_unlock+0x8>)
 8006f36:	f7ff befe 	b.w	8006d36 <__retarget_lock_release_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20002084 	.word	0x20002084

08006f40 <__ssputs_r>:
 8006f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	461f      	mov	r7, r3
 8006f46:	688e      	ldr	r6, [r1, #8]
 8006f48:	4682      	mov	sl, r0
 8006f4a:	42be      	cmp	r6, r7
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	4690      	mov	r8, r2
 8006f50:	680b      	ldr	r3, [r1, #0]
 8006f52:	d82d      	bhi.n	8006fb0 <__ssputs_r+0x70>
 8006f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f5c:	d026      	beq.n	8006fac <__ssputs_r+0x6c>
 8006f5e:	6965      	ldr	r5, [r4, #20]
 8006f60:	6909      	ldr	r1, [r1, #16]
 8006f62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f66:	eba3 0901 	sub.w	r9, r3, r1
 8006f6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f6e:	1c7b      	adds	r3, r7, #1
 8006f70:	444b      	add	r3, r9
 8006f72:	106d      	asrs	r5, r5, #1
 8006f74:	429d      	cmp	r5, r3
 8006f76:	bf38      	it	cc
 8006f78:	461d      	movcc	r5, r3
 8006f7a:	0553      	lsls	r3, r2, #21
 8006f7c:	d527      	bpl.n	8006fce <__ssputs_r+0x8e>
 8006f7e:	4629      	mov	r1, r5
 8006f80:	f7ff ff52 	bl	8006e28 <_malloc_r>
 8006f84:	4606      	mov	r6, r0
 8006f86:	b360      	cbz	r0, 8006fe2 <__ssputs_r+0xa2>
 8006f88:	464a      	mov	r2, r9
 8006f8a:	6921      	ldr	r1, [r4, #16]
 8006f8c:	f7ff fed4 	bl	8006d38 <memcpy>
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f9a:	81a3      	strh	r3, [r4, #12]
 8006f9c:	6126      	str	r6, [r4, #16]
 8006f9e:	444e      	add	r6, r9
 8006fa0:	6026      	str	r6, [r4, #0]
 8006fa2:	463e      	mov	r6, r7
 8006fa4:	6165      	str	r5, [r4, #20]
 8006fa6:	eba5 0509 	sub.w	r5, r5, r9
 8006faa:	60a5      	str	r5, [r4, #8]
 8006fac:	42be      	cmp	r6, r7
 8006fae:	d900      	bls.n	8006fb2 <__ssputs_r+0x72>
 8006fb0:	463e      	mov	r6, r7
 8006fb2:	4632      	mov	r2, r6
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	6820      	ldr	r0, [r4, #0]
 8006fb8:	f000 fe33 	bl	8007c22 <memmove>
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	68a3      	ldr	r3, [r4, #8]
 8006fc0:	1b9b      	subs	r3, r3, r6
 8006fc2:	60a3      	str	r3, [r4, #8]
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	4433      	add	r3, r6
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fce:	462a      	mov	r2, r5
 8006fd0:	f000 fe60 	bl	8007c94 <_realloc_r>
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d1e0      	bne.n	8006f9c <__ssputs_r+0x5c>
 8006fda:	4650      	mov	r0, sl
 8006fdc:	6921      	ldr	r1, [r4, #16]
 8006fde:	f7ff feb9 	bl	8006d54 <_free_r>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	f8ca 3000 	str.w	r3, [sl]
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	f04f 30ff 	mov.w	r0, #4294967295
 8006fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	e7e9      	b.n	8006fca <__ssputs_r+0x8a>
	...

08006ff8 <_svfiprintf_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	4698      	mov	r8, r3
 8006ffe:	898b      	ldrh	r3, [r1, #12]
 8007000:	4607      	mov	r7, r0
 8007002:	061b      	lsls	r3, r3, #24
 8007004:	460d      	mov	r5, r1
 8007006:	4614      	mov	r4, r2
 8007008:	b09d      	sub	sp, #116	@ 0x74
 800700a:	d510      	bpl.n	800702e <_svfiprintf_r+0x36>
 800700c:	690b      	ldr	r3, [r1, #16]
 800700e:	b973      	cbnz	r3, 800702e <_svfiprintf_r+0x36>
 8007010:	2140      	movs	r1, #64	@ 0x40
 8007012:	f7ff ff09 	bl	8006e28 <_malloc_r>
 8007016:	6028      	str	r0, [r5, #0]
 8007018:	6128      	str	r0, [r5, #16]
 800701a:	b930      	cbnz	r0, 800702a <_svfiprintf_r+0x32>
 800701c:	230c      	movs	r3, #12
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	b01d      	add	sp, #116	@ 0x74
 8007026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702a:	2340      	movs	r3, #64	@ 0x40
 800702c:	616b      	str	r3, [r5, #20]
 800702e:	2300      	movs	r3, #0
 8007030:	9309      	str	r3, [sp, #36]	@ 0x24
 8007032:	2320      	movs	r3, #32
 8007034:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007038:	2330      	movs	r3, #48	@ 0x30
 800703a:	f04f 0901 	mov.w	r9, #1
 800703e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007042:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80071dc <_svfiprintf_r+0x1e4>
 8007046:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800704a:	4623      	mov	r3, r4
 800704c:	469a      	mov	sl, r3
 800704e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007052:	b10a      	cbz	r2, 8007058 <_svfiprintf_r+0x60>
 8007054:	2a25      	cmp	r2, #37	@ 0x25
 8007056:	d1f9      	bne.n	800704c <_svfiprintf_r+0x54>
 8007058:	ebba 0b04 	subs.w	fp, sl, r4
 800705c:	d00b      	beq.n	8007076 <_svfiprintf_r+0x7e>
 800705e:	465b      	mov	r3, fp
 8007060:	4622      	mov	r2, r4
 8007062:	4629      	mov	r1, r5
 8007064:	4638      	mov	r0, r7
 8007066:	f7ff ff6b 	bl	8006f40 <__ssputs_r>
 800706a:	3001      	adds	r0, #1
 800706c:	f000 80a7 	beq.w	80071be <_svfiprintf_r+0x1c6>
 8007070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007072:	445a      	add	r2, fp
 8007074:	9209      	str	r2, [sp, #36]	@ 0x24
 8007076:	f89a 3000 	ldrb.w	r3, [sl]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 809f 	beq.w	80071be <_svfiprintf_r+0x1c6>
 8007080:	2300      	movs	r3, #0
 8007082:	f04f 32ff 	mov.w	r2, #4294967295
 8007086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800708a:	f10a 0a01 	add.w	sl, sl, #1
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	9307      	str	r3, [sp, #28]
 8007092:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007096:	931a      	str	r3, [sp, #104]	@ 0x68
 8007098:	4654      	mov	r4, sl
 800709a:	2205      	movs	r2, #5
 800709c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a0:	484e      	ldr	r0, [pc, #312]	@ (80071dc <_svfiprintf_r+0x1e4>)
 80070a2:	f000 fde9 	bl	8007c78 <memchr>
 80070a6:	9a04      	ldr	r2, [sp, #16]
 80070a8:	b9d8      	cbnz	r0, 80070e2 <_svfiprintf_r+0xea>
 80070aa:	06d0      	lsls	r0, r2, #27
 80070ac:	bf44      	itt	mi
 80070ae:	2320      	movmi	r3, #32
 80070b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070b4:	0711      	lsls	r1, r2, #28
 80070b6:	bf44      	itt	mi
 80070b8:	232b      	movmi	r3, #43	@ 0x2b
 80070ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070be:	f89a 3000 	ldrb.w	r3, [sl]
 80070c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80070c4:	d015      	beq.n	80070f2 <_svfiprintf_r+0xfa>
 80070c6:	4654      	mov	r4, sl
 80070c8:	2000      	movs	r0, #0
 80070ca:	f04f 0c0a 	mov.w	ip, #10
 80070ce:	9a07      	ldr	r2, [sp, #28]
 80070d0:	4621      	mov	r1, r4
 80070d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070d6:	3b30      	subs	r3, #48	@ 0x30
 80070d8:	2b09      	cmp	r3, #9
 80070da:	d94b      	bls.n	8007174 <_svfiprintf_r+0x17c>
 80070dc:	b1b0      	cbz	r0, 800710c <_svfiprintf_r+0x114>
 80070de:	9207      	str	r2, [sp, #28]
 80070e0:	e014      	b.n	800710c <_svfiprintf_r+0x114>
 80070e2:	eba0 0308 	sub.w	r3, r0, r8
 80070e6:	fa09 f303 	lsl.w	r3, r9, r3
 80070ea:	4313      	orrs	r3, r2
 80070ec:	46a2      	mov	sl, r4
 80070ee:	9304      	str	r3, [sp, #16]
 80070f0:	e7d2      	b.n	8007098 <_svfiprintf_r+0xa0>
 80070f2:	9b03      	ldr	r3, [sp, #12]
 80070f4:	1d19      	adds	r1, r3, #4
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	9103      	str	r1, [sp, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bfbb      	ittet	lt
 80070fe:	425b      	neglt	r3, r3
 8007100:	f042 0202 	orrlt.w	r2, r2, #2
 8007104:	9307      	strge	r3, [sp, #28]
 8007106:	9307      	strlt	r3, [sp, #28]
 8007108:	bfb8      	it	lt
 800710a:	9204      	strlt	r2, [sp, #16]
 800710c:	7823      	ldrb	r3, [r4, #0]
 800710e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007110:	d10a      	bne.n	8007128 <_svfiprintf_r+0x130>
 8007112:	7863      	ldrb	r3, [r4, #1]
 8007114:	2b2a      	cmp	r3, #42	@ 0x2a
 8007116:	d132      	bne.n	800717e <_svfiprintf_r+0x186>
 8007118:	9b03      	ldr	r3, [sp, #12]
 800711a:	3402      	adds	r4, #2
 800711c:	1d1a      	adds	r2, r3, #4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	9203      	str	r2, [sp, #12]
 8007122:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80071e0 <_svfiprintf_r+0x1e8>
 800712c:	2203      	movs	r2, #3
 800712e:	4650      	mov	r0, sl
 8007130:	7821      	ldrb	r1, [r4, #0]
 8007132:	f000 fda1 	bl	8007c78 <memchr>
 8007136:	b138      	cbz	r0, 8007148 <_svfiprintf_r+0x150>
 8007138:	2240      	movs	r2, #64	@ 0x40
 800713a:	9b04      	ldr	r3, [sp, #16]
 800713c:	eba0 000a 	sub.w	r0, r0, sl
 8007140:	4082      	lsls	r2, r0
 8007142:	4313      	orrs	r3, r2
 8007144:	3401      	adds	r4, #1
 8007146:	9304      	str	r3, [sp, #16]
 8007148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800714c:	2206      	movs	r2, #6
 800714e:	4825      	ldr	r0, [pc, #148]	@ (80071e4 <_svfiprintf_r+0x1ec>)
 8007150:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007154:	f000 fd90 	bl	8007c78 <memchr>
 8007158:	2800      	cmp	r0, #0
 800715a:	d036      	beq.n	80071ca <_svfiprintf_r+0x1d2>
 800715c:	4b22      	ldr	r3, [pc, #136]	@ (80071e8 <_svfiprintf_r+0x1f0>)
 800715e:	bb1b      	cbnz	r3, 80071a8 <_svfiprintf_r+0x1b0>
 8007160:	9b03      	ldr	r3, [sp, #12]
 8007162:	3307      	adds	r3, #7
 8007164:	f023 0307 	bic.w	r3, r3, #7
 8007168:	3308      	adds	r3, #8
 800716a:	9303      	str	r3, [sp, #12]
 800716c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800716e:	4433      	add	r3, r6
 8007170:	9309      	str	r3, [sp, #36]	@ 0x24
 8007172:	e76a      	b.n	800704a <_svfiprintf_r+0x52>
 8007174:	460c      	mov	r4, r1
 8007176:	2001      	movs	r0, #1
 8007178:	fb0c 3202 	mla	r2, ip, r2, r3
 800717c:	e7a8      	b.n	80070d0 <_svfiprintf_r+0xd8>
 800717e:	2300      	movs	r3, #0
 8007180:	f04f 0c0a 	mov.w	ip, #10
 8007184:	4619      	mov	r1, r3
 8007186:	3401      	adds	r4, #1
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	4620      	mov	r0, r4
 800718c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007190:	3a30      	subs	r2, #48	@ 0x30
 8007192:	2a09      	cmp	r2, #9
 8007194:	d903      	bls.n	800719e <_svfiprintf_r+0x1a6>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0c6      	beq.n	8007128 <_svfiprintf_r+0x130>
 800719a:	9105      	str	r1, [sp, #20]
 800719c:	e7c4      	b.n	8007128 <_svfiprintf_r+0x130>
 800719e:	4604      	mov	r4, r0
 80071a0:	2301      	movs	r3, #1
 80071a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80071a6:	e7f0      	b.n	800718a <_svfiprintf_r+0x192>
 80071a8:	ab03      	add	r3, sp, #12
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	462a      	mov	r2, r5
 80071ae:	4638      	mov	r0, r7
 80071b0:	4b0e      	ldr	r3, [pc, #56]	@ (80071ec <_svfiprintf_r+0x1f4>)
 80071b2:	a904      	add	r1, sp, #16
 80071b4:	f3af 8000 	nop.w
 80071b8:	1c42      	adds	r2, r0, #1
 80071ba:	4606      	mov	r6, r0
 80071bc:	d1d6      	bne.n	800716c <_svfiprintf_r+0x174>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	065b      	lsls	r3, r3, #25
 80071c2:	f53f af2d 	bmi.w	8007020 <_svfiprintf_r+0x28>
 80071c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071c8:	e72c      	b.n	8007024 <_svfiprintf_r+0x2c>
 80071ca:	ab03      	add	r3, sp, #12
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	462a      	mov	r2, r5
 80071d0:	4638      	mov	r0, r7
 80071d2:	4b06      	ldr	r3, [pc, #24]	@ (80071ec <_svfiprintf_r+0x1f4>)
 80071d4:	a904      	add	r1, sp, #16
 80071d6:	f000 fa47 	bl	8007668 <_printf_i>
 80071da:	e7ed      	b.n	80071b8 <_svfiprintf_r+0x1c0>
 80071dc:	08008206 	.word	0x08008206
 80071e0:	0800820c 	.word	0x0800820c
 80071e4:	08008210 	.word	0x08008210
 80071e8:	00000000 	.word	0x00000000
 80071ec:	08006f41 	.word	0x08006f41

080071f0 <_sungetc_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	1c4b      	adds	r3, r1, #1
 80071f4:	4614      	mov	r4, r2
 80071f6:	d103      	bne.n	8007200 <_sungetc_r+0x10>
 80071f8:	f04f 35ff 	mov.w	r5, #4294967295
 80071fc:	4628      	mov	r0, r5
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	8993      	ldrh	r3, [r2, #12]
 8007202:	b2cd      	uxtb	r5, r1
 8007204:	f023 0320 	bic.w	r3, r3, #32
 8007208:	8193      	strh	r3, [r2, #12]
 800720a:	6853      	ldr	r3, [r2, #4]
 800720c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800720e:	b18a      	cbz	r2, 8007234 <_sungetc_r+0x44>
 8007210:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007212:	429a      	cmp	r2, r3
 8007214:	dd08      	ble.n	8007228 <_sungetc_r+0x38>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	1e5a      	subs	r2, r3, #1
 800721a:	6022      	str	r2, [r4, #0]
 800721c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	3301      	adds	r3, #1
 8007224:	6063      	str	r3, [r4, #4]
 8007226:	e7e9      	b.n	80071fc <_sungetc_r+0xc>
 8007228:	4621      	mov	r1, r4
 800722a:	f000 fcc2 	bl	8007bb2 <__submore>
 800722e:	2800      	cmp	r0, #0
 8007230:	d0f1      	beq.n	8007216 <_sungetc_r+0x26>
 8007232:	e7e1      	b.n	80071f8 <_sungetc_r+0x8>
 8007234:	6921      	ldr	r1, [r4, #16]
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	b141      	cbz	r1, 800724c <_sungetc_r+0x5c>
 800723a:	4291      	cmp	r1, r2
 800723c:	d206      	bcs.n	800724c <_sungetc_r+0x5c>
 800723e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8007242:	42a9      	cmp	r1, r5
 8007244:	d102      	bne.n	800724c <_sungetc_r+0x5c>
 8007246:	3a01      	subs	r2, #1
 8007248:	6022      	str	r2, [r4, #0]
 800724a:	e7ea      	b.n	8007222 <_sungetc_r+0x32>
 800724c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8007250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007254:	6363      	str	r3, [r4, #52]	@ 0x34
 8007256:	2303      	movs	r3, #3
 8007258:	63a3      	str	r3, [r4, #56]	@ 0x38
 800725a:	4623      	mov	r3, r4
 800725c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	2301      	movs	r3, #1
 8007264:	e7de      	b.n	8007224 <_sungetc_r+0x34>

08007266 <__ssrefill_r>:
 8007266:	b510      	push	{r4, lr}
 8007268:	460c      	mov	r4, r1
 800726a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800726c:	b169      	cbz	r1, 800728a <__ssrefill_r+0x24>
 800726e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007272:	4299      	cmp	r1, r3
 8007274:	d001      	beq.n	800727a <__ssrefill_r+0x14>
 8007276:	f7ff fd6d 	bl	8006d54 <_free_r>
 800727a:	2000      	movs	r0, #0
 800727c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800727e:	6360      	str	r0, [r4, #52]	@ 0x34
 8007280:	6063      	str	r3, [r4, #4]
 8007282:	b113      	cbz	r3, 800728a <__ssrefill_r+0x24>
 8007284:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007286:	6023      	str	r3, [r4, #0]
 8007288:	bd10      	pop	{r4, pc}
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	f04f 30ff 	mov.w	r0, #4294967295
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	2300      	movs	r3, #0
 8007294:	6063      	str	r3, [r4, #4]
 8007296:	89a3      	ldrh	r3, [r4, #12]
 8007298:	f043 0320 	orr.w	r3, r3, #32
 800729c:	81a3      	strh	r3, [r4, #12]
 800729e:	e7f3      	b.n	8007288 <__ssrefill_r+0x22>

080072a0 <__ssvfiscanf_r>:
 80072a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	460c      	mov	r4, r1
 80072a6:	2100      	movs	r1, #0
 80072a8:	4606      	mov	r6, r0
 80072aa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80072ae:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80072b2:	49aa      	ldr	r1, [pc, #680]	@ (800755c <__ssvfiscanf_r+0x2bc>)
 80072b4:	f10d 0804 	add.w	r8, sp, #4
 80072b8:	91a0      	str	r1, [sp, #640]	@ 0x280
 80072ba:	49a9      	ldr	r1, [pc, #676]	@ (8007560 <__ssvfiscanf_r+0x2c0>)
 80072bc:	4fa9      	ldr	r7, [pc, #676]	@ (8007564 <__ssvfiscanf_r+0x2c4>)
 80072be:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80072c2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	7813      	ldrb	r3, [r2, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8159 	beq.w	8007580 <__ssvfiscanf_r+0x2e0>
 80072ce:	5cf9      	ldrb	r1, [r7, r3]
 80072d0:	1c55      	adds	r5, r2, #1
 80072d2:	f011 0108 	ands.w	r1, r1, #8
 80072d6:	d019      	beq.n	800730c <__ssvfiscanf_r+0x6c>
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dd0f      	ble.n	80072fe <__ssvfiscanf_r+0x5e>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	5cba      	ldrb	r2, [r7, r2]
 80072e4:	0712      	lsls	r2, r2, #28
 80072e6:	d401      	bmi.n	80072ec <__ssvfiscanf_r+0x4c>
 80072e8:	462a      	mov	r2, r5
 80072ea:	e7ec      	b.n	80072c6 <__ssvfiscanf_r+0x26>
 80072ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80072ee:	3301      	adds	r3, #1
 80072f0:	3201      	adds	r2, #1
 80072f2:	9245      	str	r2, [sp, #276]	@ 0x114
 80072f4:	6862      	ldr	r2, [r4, #4]
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	3a01      	subs	r2, #1
 80072fa:	6062      	str	r2, [r4, #4]
 80072fc:	e7ec      	b.n	80072d8 <__ssvfiscanf_r+0x38>
 80072fe:	4621      	mov	r1, r4
 8007300:	4630      	mov	r0, r6
 8007302:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007304:	4798      	blx	r3
 8007306:	2800      	cmp	r0, #0
 8007308:	d0e9      	beq.n	80072de <__ssvfiscanf_r+0x3e>
 800730a:	e7ed      	b.n	80072e8 <__ssvfiscanf_r+0x48>
 800730c:	2b25      	cmp	r3, #37	@ 0x25
 800730e:	d012      	beq.n	8007336 <__ssvfiscanf_r+0x96>
 8007310:	4699      	mov	r9, r3
 8007312:	6863      	ldr	r3, [r4, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f340 8094 	ble.w	8007442 <__ssvfiscanf_r+0x1a2>
 800731a:	6822      	ldr	r2, [r4, #0]
 800731c:	7813      	ldrb	r3, [r2, #0]
 800731e:	454b      	cmp	r3, r9
 8007320:	f040 812e 	bne.w	8007580 <__ssvfiscanf_r+0x2e0>
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	3201      	adds	r2, #1
 8007328:	3b01      	subs	r3, #1
 800732a:	6063      	str	r3, [r4, #4]
 800732c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800732e:	6022      	str	r2, [r4, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	9345      	str	r3, [sp, #276]	@ 0x114
 8007334:	e7d8      	b.n	80072e8 <__ssvfiscanf_r+0x48>
 8007336:	9141      	str	r1, [sp, #260]	@ 0x104
 8007338:	9143      	str	r1, [sp, #268]	@ 0x10c
 800733a:	7853      	ldrb	r3, [r2, #1]
 800733c:	2b2a      	cmp	r3, #42	@ 0x2a
 800733e:	bf04      	itt	eq
 8007340:	2310      	moveq	r3, #16
 8007342:	1c95      	addeq	r5, r2, #2
 8007344:	f04f 020a 	mov.w	r2, #10
 8007348:	bf08      	it	eq
 800734a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800734c:	46a9      	mov	r9, r5
 800734e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007352:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007356:	2b09      	cmp	r3, #9
 8007358:	d91e      	bls.n	8007398 <__ssvfiscanf_r+0xf8>
 800735a:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8007568 <__ssvfiscanf_r+0x2c8>
 800735e:	2203      	movs	r2, #3
 8007360:	4650      	mov	r0, sl
 8007362:	f000 fc89 	bl	8007c78 <memchr>
 8007366:	b138      	cbz	r0, 8007378 <__ssvfiscanf_r+0xd8>
 8007368:	2301      	movs	r3, #1
 800736a:	464d      	mov	r5, r9
 800736c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800736e:	eba0 000a 	sub.w	r0, r0, sl
 8007372:	4083      	lsls	r3, r0
 8007374:	4313      	orrs	r3, r2
 8007376:	9341      	str	r3, [sp, #260]	@ 0x104
 8007378:	f815 3b01 	ldrb.w	r3, [r5], #1
 800737c:	2b78      	cmp	r3, #120	@ 0x78
 800737e:	d806      	bhi.n	800738e <__ssvfiscanf_r+0xee>
 8007380:	2b57      	cmp	r3, #87	@ 0x57
 8007382:	d810      	bhi.n	80073a6 <__ssvfiscanf_r+0x106>
 8007384:	2b25      	cmp	r3, #37	@ 0x25
 8007386:	d0c3      	beq.n	8007310 <__ssvfiscanf_r+0x70>
 8007388:	d856      	bhi.n	8007438 <__ssvfiscanf_r+0x198>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d064      	beq.n	8007458 <__ssvfiscanf_r+0x1b8>
 800738e:	2303      	movs	r3, #3
 8007390:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007392:	230a      	movs	r3, #10
 8007394:	9342      	str	r3, [sp, #264]	@ 0x108
 8007396:	e077      	b.n	8007488 <__ssvfiscanf_r+0x1e8>
 8007398:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800739a:	464d      	mov	r5, r9
 800739c:	fb02 1103 	mla	r1, r2, r3, r1
 80073a0:	3930      	subs	r1, #48	@ 0x30
 80073a2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80073a4:	e7d2      	b.n	800734c <__ssvfiscanf_r+0xac>
 80073a6:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80073aa:	2a20      	cmp	r2, #32
 80073ac:	d8ef      	bhi.n	800738e <__ssvfiscanf_r+0xee>
 80073ae:	a101      	add	r1, pc, #4	@ (adr r1, 80073b4 <__ssvfiscanf_r+0x114>)
 80073b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073b4:	08007467 	.word	0x08007467
 80073b8:	0800738f 	.word	0x0800738f
 80073bc:	0800738f 	.word	0x0800738f
 80073c0:	080074c1 	.word	0x080074c1
 80073c4:	0800738f 	.word	0x0800738f
 80073c8:	0800738f 	.word	0x0800738f
 80073cc:	0800738f 	.word	0x0800738f
 80073d0:	0800738f 	.word	0x0800738f
 80073d4:	0800738f 	.word	0x0800738f
 80073d8:	0800738f 	.word	0x0800738f
 80073dc:	0800738f 	.word	0x0800738f
 80073e0:	080074d7 	.word	0x080074d7
 80073e4:	080074bd 	.word	0x080074bd
 80073e8:	0800743f 	.word	0x0800743f
 80073ec:	0800743f 	.word	0x0800743f
 80073f0:	0800743f 	.word	0x0800743f
 80073f4:	0800738f 	.word	0x0800738f
 80073f8:	08007479 	.word	0x08007479
 80073fc:	0800738f 	.word	0x0800738f
 8007400:	0800738f 	.word	0x0800738f
 8007404:	0800738f 	.word	0x0800738f
 8007408:	0800738f 	.word	0x0800738f
 800740c:	080074e7 	.word	0x080074e7
 8007410:	08007481 	.word	0x08007481
 8007414:	0800745f 	.word	0x0800745f
 8007418:	0800738f 	.word	0x0800738f
 800741c:	0800738f 	.word	0x0800738f
 8007420:	080074e3 	.word	0x080074e3
 8007424:	0800738f 	.word	0x0800738f
 8007428:	080074bd 	.word	0x080074bd
 800742c:	0800738f 	.word	0x0800738f
 8007430:	0800738f 	.word	0x0800738f
 8007434:	08007467 	.word	0x08007467
 8007438:	3b45      	subs	r3, #69	@ 0x45
 800743a:	2b02      	cmp	r3, #2
 800743c:	d8a7      	bhi.n	800738e <__ssvfiscanf_r+0xee>
 800743e:	2305      	movs	r3, #5
 8007440:	e021      	b.n	8007486 <__ssvfiscanf_r+0x1e6>
 8007442:	4621      	mov	r1, r4
 8007444:	4630      	mov	r0, r6
 8007446:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007448:	4798      	blx	r3
 800744a:	2800      	cmp	r0, #0
 800744c:	f43f af65 	beq.w	800731a <__ssvfiscanf_r+0x7a>
 8007450:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007452:	2800      	cmp	r0, #0
 8007454:	f040 808c 	bne.w	8007570 <__ssvfiscanf_r+0x2d0>
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	e08c      	b.n	8007578 <__ssvfiscanf_r+0x2d8>
 800745e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007460:	f042 0220 	orr.w	r2, r2, #32
 8007464:	9241      	str	r2, [sp, #260]	@ 0x104
 8007466:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800746c:	9241      	str	r2, [sp, #260]	@ 0x104
 800746e:	2210      	movs	r2, #16
 8007470:	2b6e      	cmp	r3, #110	@ 0x6e
 8007472:	9242      	str	r2, [sp, #264]	@ 0x108
 8007474:	d902      	bls.n	800747c <__ssvfiscanf_r+0x1dc>
 8007476:	e005      	b.n	8007484 <__ssvfiscanf_r+0x1e4>
 8007478:	2300      	movs	r3, #0
 800747a:	9342      	str	r3, [sp, #264]	@ 0x108
 800747c:	2303      	movs	r3, #3
 800747e:	e002      	b.n	8007486 <__ssvfiscanf_r+0x1e6>
 8007480:	2308      	movs	r3, #8
 8007482:	9342      	str	r3, [sp, #264]	@ 0x108
 8007484:	2304      	movs	r3, #4
 8007486:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007488:	6863      	ldr	r3, [r4, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	dd39      	ble.n	8007502 <__ssvfiscanf_r+0x262>
 800748e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007490:	0659      	lsls	r1, r3, #25
 8007492:	d404      	bmi.n	800749e <__ssvfiscanf_r+0x1fe>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	781a      	ldrb	r2, [r3, #0]
 8007498:	5cba      	ldrb	r2, [r7, r2]
 800749a:	0712      	lsls	r2, r2, #28
 800749c:	d438      	bmi.n	8007510 <__ssvfiscanf_r+0x270>
 800749e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	dc47      	bgt.n	8007534 <__ssvfiscanf_r+0x294>
 80074a4:	466b      	mov	r3, sp
 80074a6:	4622      	mov	r2, r4
 80074a8:	4630      	mov	r0, r6
 80074aa:	a941      	add	r1, sp, #260	@ 0x104
 80074ac:	f000 f9fc 	bl	80078a8 <_scanf_chars>
 80074b0:	2801      	cmp	r0, #1
 80074b2:	d065      	beq.n	8007580 <__ssvfiscanf_r+0x2e0>
 80074b4:	2802      	cmp	r0, #2
 80074b6:	f47f af17 	bne.w	80072e8 <__ssvfiscanf_r+0x48>
 80074ba:	e7c9      	b.n	8007450 <__ssvfiscanf_r+0x1b0>
 80074bc:	220a      	movs	r2, #10
 80074be:	e7d7      	b.n	8007470 <__ssvfiscanf_r+0x1d0>
 80074c0:	4629      	mov	r1, r5
 80074c2:	4640      	mov	r0, r8
 80074c4:	f000 fb3c 	bl	8007b40 <__sccl>
 80074c8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80074ca:	4605      	mov	r5, r0
 80074cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d0:	9341      	str	r3, [sp, #260]	@ 0x104
 80074d2:	2301      	movs	r3, #1
 80074d4:	e7d7      	b.n	8007486 <__ssvfiscanf_r+0x1e6>
 80074d6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80074d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074dc:	9341      	str	r3, [sp, #260]	@ 0x104
 80074de:	2300      	movs	r3, #0
 80074e0:	e7d1      	b.n	8007486 <__ssvfiscanf_r+0x1e6>
 80074e2:	2302      	movs	r3, #2
 80074e4:	e7cf      	b.n	8007486 <__ssvfiscanf_r+0x1e6>
 80074e6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80074e8:	06c3      	lsls	r3, r0, #27
 80074ea:	f53f aefd 	bmi.w	80072e8 <__ssvfiscanf_r+0x48>
 80074ee:	9b00      	ldr	r3, [sp, #0]
 80074f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80074f2:	1d19      	adds	r1, r3, #4
 80074f4:	9100      	str	r1, [sp, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	07c0      	lsls	r0, r0, #31
 80074fa:	bf4c      	ite	mi
 80074fc:	801a      	strhmi	r2, [r3, #0]
 80074fe:	601a      	strpl	r2, [r3, #0]
 8007500:	e6f2      	b.n	80072e8 <__ssvfiscanf_r+0x48>
 8007502:	4621      	mov	r1, r4
 8007504:	4630      	mov	r0, r6
 8007506:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007508:	4798      	blx	r3
 800750a:	2800      	cmp	r0, #0
 800750c:	d0bf      	beq.n	800748e <__ssvfiscanf_r+0x1ee>
 800750e:	e79f      	b.n	8007450 <__ssvfiscanf_r+0x1b0>
 8007510:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007512:	3201      	adds	r2, #1
 8007514:	9245      	str	r2, [sp, #276]	@ 0x114
 8007516:	6862      	ldr	r2, [r4, #4]
 8007518:	3a01      	subs	r2, #1
 800751a:	2a00      	cmp	r2, #0
 800751c:	6062      	str	r2, [r4, #4]
 800751e:	dd02      	ble.n	8007526 <__ssvfiscanf_r+0x286>
 8007520:	3301      	adds	r3, #1
 8007522:	6023      	str	r3, [r4, #0]
 8007524:	e7b6      	b.n	8007494 <__ssvfiscanf_r+0x1f4>
 8007526:	4621      	mov	r1, r4
 8007528:	4630      	mov	r0, r6
 800752a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800752c:	4798      	blx	r3
 800752e:	2800      	cmp	r0, #0
 8007530:	d0b0      	beq.n	8007494 <__ssvfiscanf_r+0x1f4>
 8007532:	e78d      	b.n	8007450 <__ssvfiscanf_r+0x1b0>
 8007534:	2b04      	cmp	r3, #4
 8007536:	dc06      	bgt.n	8007546 <__ssvfiscanf_r+0x2a6>
 8007538:	466b      	mov	r3, sp
 800753a:	4622      	mov	r2, r4
 800753c:	4630      	mov	r0, r6
 800753e:	a941      	add	r1, sp, #260	@ 0x104
 8007540:	f000 fa0c 	bl	800795c <_scanf_i>
 8007544:	e7b4      	b.n	80074b0 <__ssvfiscanf_r+0x210>
 8007546:	4b09      	ldr	r3, [pc, #36]	@ (800756c <__ssvfiscanf_r+0x2cc>)
 8007548:	2b00      	cmp	r3, #0
 800754a:	f43f aecd 	beq.w	80072e8 <__ssvfiscanf_r+0x48>
 800754e:	466b      	mov	r3, sp
 8007550:	4622      	mov	r2, r4
 8007552:	4630      	mov	r0, r6
 8007554:	a941      	add	r1, sp, #260	@ 0x104
 8007556:	f3af 8000 	nop.w
 800755a:	e7a9      	b.n	80074b0 <__ssvfiscanf_r+0x210>
 800755c:	080071f1 	.word	0x080071f1
 8007560:	08007267 	.word	0x08007267
 8007564:	08008255 	.word	0x08008255
 8007568:	0800820c 	.word	0x0800820c
 800756c:	00000000 	.word	0x00000000
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	065b      	lsls	r3, r3, #25
 8007574:	f53f af70 	bmi.w	8007458 <__ssvfiscanf_r+0x1b8>
 8007578:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800757c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007580:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007582:	e7f9      	b.n	8007578 <__ssvfiscanf_r+0x2d8>

08007584 <_printf_common>:
 8007584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007588:	4616      	mov	r6, r2
 800758a:	4698      	mov	r8, r3
 800758c:	688a      	ldr	r2, [r1, #8]
 800758e:	690b      	ldr	r3, [r1, #16]
 8007590:	4607      	mov	r7, r0
 8007592:	4293      	cmp	r3, r2
 8007594:	bfb8      	it	lt
 8007596:	4613      	movlt	r3, r2
 8007598:	6033      	str	r3, [r6, #0]
 800759a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800759e:	460c      	mov	r4, r1
 80075a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075a4:	b10a      	cbz	r2, 80075aa <_printf_common+0x26>
 80075a6:	3301      	adds	r3, #1
 80075a8:	6033      	str	r3, [r6, #0]
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	0699      	lsls	r1, r3, #26
 80075ae:	bf42      	ittt	mi
 80075b0:	6833      	ldrmi	r3, [r6, #0]
 80075b2:	3302      	addmi	r3, #2
 80075b4:	6033      	strmi	r3, [r6, #0]
 80075b6:	6825      	ldr	r5, [r4, #0]
 80075b8:	f015 0506 	ands.w	r5, r5, #6
 80075bc:	d106      	bne.n	80075cc <_printf_common+0x48>
 80075be:	f104 0a19 	add.w	sl, r4, #25
 80075c2:	68e3      	ldr	r3, [r4, #12]
 80075c4:	6832      	ldr	r2, [r6, #0]
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	42ab      	cmp	r3, r5
 80075ca:	dc2b      	bgt.n	8007624 <_printf_common+0xa0>
 80075cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	3b00      	subs	r3, #0
 80075d4:	bf18      	it	ne
 80075d6:	2301      	movne	r3, #1
 80075d8:	0692      	lsls	r2, r2, #26
 80075da:	d430      	bmi.n	800763e <_printf_common+0xba>
 80075dc:	4641      	mov	r1, r8
 80075de:	4638      	mov	r0, r7
 80075e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075e4:	47c8      	blx	r9
 80075e6:	3001      	adds	r0, #1
 80075e8:	d023      	beq.n	8007632 <_printf_common+0xae>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	6922      	ldr	r2, [r4, #16]
 80075ee:	f003 0306 	and.w	r3, r3, #6
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	bf14      	ite	ne
 80075f6:	2500      	movne	r5, #0
 80075f8:	6833      	ldreq	r3, [r6, #0]
 80075fa:	f04f 0600 	mov.w	r6, #0
 80075fe:	bf08      	it	eq
 8007600:	68e5      	ldreq	r5, [r4, #12]
 8007602:	f104 041a 	add.w	r4, r4, #26
 8007606:	bf08      	it	eq
 8007608:	1aed      	subeq	r5, r5, r3
 800760a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800760e:	bf08      	it	eq
 8007610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007614:	4293      	cmp	r3, r2
 8007616:	bfc4      	itt	gt
 8007618:	1a9b      	subgt	r3, r3, r2
 800761a:	18ed      	addgt	r5, r5, r3
 800761c:	42b5      	cmp	r5, r6
 800761e:	d11a      	bne.n	8007656 <_printf_common+0xd2>
 8007620:	2000      	movs	r0, #0
 8007622:	e008      	b.n	8007636 <_printf_common+0xb2>
 8007624:	2301      	movs	r3, #1
 8007626:	4652      	mov	r2, sl
 8007628:	4641      	mov	r1, r8
 800762a:	4638      	mov	r0, r7
 800762c:	47c8      	blx	r9
 800762e:	3001      	adds	r0, #1
 8007630:	d103      	bne.n	800763a <_printf_common+0xb6>
 8007632:	f04f 30ff 	mov.w	r0, #4294967295
 8007636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763a:	3501      	adds	r5, #1
 800763c:	e7c1      	b.n	80075c2 <_printf_common+0x3e>
 800763e:	2030      	movs	r0, #48	@ 0x30
 8007640:	18e1      	adds	r1, r4, r3
 8007642:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800764c:	4422      	add	r2, r4
 800764e:	3302      	adds	r3, #2
 8007650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007654:	e7c2      	b.n	80075dc <_printf_common+0x58>
 8007656:	2301      	movs	r3, #1
 8007658:	4622      	mov	r2, r4
 800765a:	4641      	mov	r1, r8
 800765c:	4638      	mov	r0, r7
 800765e:	47c8      	blx	r9
 8007660:	3001      	adds	r0, #1
 8007662:	d0e6      	beq.n	8007632 <_printf_common+0xae>
 8007664:	3601      	adds	r6, #1
 8007666:	e7d9      	b.n	800761c <_printf_common+0x98>

08007668 <_printf_i>:
 8007668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800766c:	7e0f      	ldrb	r7, [r1, #24]
 800766e:	4691      	mov	r9, r2
 8007670:	2f78      	cmp	r7, #120	@ 0x78
 8007672:	4680      	mov	r8, r0
 8007674:	460c      	mov	r4, r1
 8007676:	469a      	mov	sl, r3
 8007678:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800767a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800767e:	d807      	bhi.n	8007690 <_printf_i+0x28>
 8007680:	2f62      	cmp	r7, #98	@ 0x62
 8007682:	d80a      	bhi.n	800769a <_printf_i+0x32>
 8007684:	2f00      	cmp	r7, #0
 8007686:	f000 80d3 	beq.w	8007830 <_printf_i+0x1c8>
 800768a:	2f58      	cmp	r7, #88	@ 0x58
 800768c:	f000 80ba 	beq.w	8007804 <_printf_i+0x19c>
 8007690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007694:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007698:	e03a      	b.n	8007710 <_printf_i+0xa8>
 800769a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800769e:	2b15      	cmp	r3, #21
 80076a0:	d8f6      	bhi.n	8007690 <_printf_i+0x28>
 80076a2:	a101      	add	r1, pc, #4	@ (adr r1, 80076a8 <_printf_i+0x40>)
 80076a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076a8:	08007701 	.word	0x08007701
 80076ac:	08007715 	.word	0x08007715
 80076b0:	08007691 	.word	0x08007691
 80076b4:	08007691 	.word	0x08007691
 80076b8:	08007691 	.word	0x08007691
 80076bc:	08007691 	.word	0x08007691
 80076c0:	08007715 	.word	0x08007715
 80076c4:	08007691 	.word	0x08007691
 80076c8:	08007691 	.word	0x08007691
 80076cc:	08007691 	.word	0x08007691
 80076d0:	08007691 	.word	0x08007691
 80076d4:	08007817 	.word	0x08007817
 80076d8:	0800773f 	.word	0x0800773f
 80076dc:	080077d1 	.word	0x080077d1
 80076e0:	08007691 	.word	0x08007691
 80076e4:	08007691 	.word	0x08007691
 80076e8:	08007839 	.word	0x08007839
 80076ec:	08007691 	.word	0x08007691
 80076f0:	0800773f 	.word	0x0800773f
 80076f4:	08007691 	.word	0x08007691
 80076f8:	08007691 	.word	0x08007691
 80076fc:	080077d9 	.word	0x080077d9
 8007700:	6833      	ldr	r3, [r6, #0]
 8007702:	1d1a      	adds	r2, r3, #4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6032      	str	r2, [r6, #0]
 8007708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800770c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007710:	2301      	movs	r3, #1
 8007712:	e09e      	b.n	8007852 <_printf_i+0x1ea>
 8007714:	6833      	ldr	r3, [r6, #0]
 8007716:	6820      	ldr	r0, [r4, #0]
 8007718:	1d19      	adds	r1, r3, #4
 800771a:	6031      	str	r1, [r6, #0]
 800771c:	0606      	lsls	r6, r0, #24
 800771e:	d501      	bpl.n	8007724 <_printf_i+0xbc>
 8007720:	681d      	ldr	r5, [r3, #0]
 8007722:	e003      	b.n	800772c <_printf_i+0xc4>
 8007724:	0645      	lsls	r5, r0, #25
 8007726:	d5fb      	bpl.n	8007720 <_printf_i+0xb8>
 8007728:	f9b3 5000 	ldrsh.w	r5, [r3]
 800772c:	2d00      	cmp	r5, #0
 800772e:	da03      	bge.n	8007738 <_printf_i+0xd0>
 8007730:	232d      	movs	r3, #45	@ 0x2d
 8007732:	426d      	negs	r5, r5
 8007734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007738:	230a      	movs	r3, #10
 800773a:	4859      	ldr	r0, [pc, #356]	@ (80078a0 <_printf_i+0x238>)
 800773c:	e011      	b.n	8007762 <_printf_i+0xfa>
 800773e:	6821      	ldr	r1, [r4, #0]
 8007740:	6833      	ldr	r3, [r6, #0]
 8007742:	0608      	lsls	r0, r1, #24
 8007744:	f853 5b04 	ldr.w	r5, [r3], #4
 8007748:	d402      	bmi.n	8007750 <_printf_i+0xe8>
 800774a:	0649      	lsls	r1, r1, #25
 800774c:	bf48      	it	mi
 800774e:	b2ad      	uxthmi	r5, r5
 8007750:	2f6f      	cmp	r7, #111	@ 0x6f
 8007752:	6033      	str	r3, [r6, #0]
 8007754:	bf14      	ite	ne
 8007756:	230a      	movne	r3, #10
 8007758:	2308      	moveq	r3, #8
 800775a:	4851      	ldr	r0, [pc, #324]	@ (80078a0 <_printf_i+0x238>)
 800775c:	2100      	movs	r1, #0
 800775e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007762:	6866      	ldr	r6, [r4, #4]
 8007764:	2e00      	cmp	r6, #0
 8007766:	bfa8      	it	ge
 8007768:	6821      	ldrge	r1, [r4, #0]
 800776a:	60a6      	str	r6, [r4, #8]
 800776c:	bfa4      	itt	ge
 800776e:	f021 0104 	bicge.w	r1, r1, #4
 8007772:	6021      	strge	r1, [r4, #0]
 8007774:	b90d      	cbnz	r5, 800777a <_printf_i+0x112>
 8007776:	2e00      	cmp	r6, #0
 8007778:	d04b      	beq.n	8007812 <_printf_i+0x1aa>
 800777a:	4616      	mov	r6, r2
 800777c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007780:	fb03 5711 	mls	r7, r3, r1, r5
 8007784:	5dc7      	ldrb	r7, [r0, r7]
 8007786:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800778a:	462f      	mov	r7, r5
 800778c:	42bb      	cmp	r3, r7
 800778e:	460d      	mov	r5, r1
 8007790:	d9f4      	bls.n	800777c <_printf_i+0x114>
 8007792:	2b08      	cmp	r3, #8
 8007794:	d10b      	bne.n	80077ae <_printf_i+0x146>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	07df      	lsls	r7, r3, #31
 800779a:	d508      	bpl.n	80077ae <_printf_i+0x146>
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	6861      	ldr	r1, [r4, #4]
 80077a0:	4299      	cmp	r1, r3
 80077a2:	bfde      	ittt	le
 80077a4:	2330      	movle	r3, #48	@ 0x30
 80077a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077ae:	1b92      	subs	r2, r2, r6
 80077b0:	6122      	str	r2, [r4, #16]
 80077b2:	464b      	mov	r3, r9
 80077b4:	4621      	mov	r1, r4
 80077b6:	4640      	mov	r0, r8
 80077b8:	f8cd a000 	str.w	sl, [sp]
 80077bc:	aa03      	add	r2, sp, #12
 80077be:	f7ff fee1 	bl	8007584 <_printf_common>
 80077c2:	3001      	adds	r0, #1
 80077c4:	d14a      	bne.n	800785c <_printf_i+0x1f4>
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ca:	b004      	add	sp, #16
 80077cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	f043 0320 	orr.w	r3, r3, #32
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	2778      	movs	r7, #120	@ 0x78
 80077da:	4832      	ldr	r0, [pc, #200]	@ (80078a4 <_printf_i+0x23c>)
 80077dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	6831      	ldr	r1, [r6, #0]
 80077e4:	061f      	lsls	r7, r3, #24
 80077e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80077ea:	d402      	bmi.n	80077f2 <_printf_i+0x18a>
 80077ec:	065f      	lsls	r7, r3, #25
 80077ee:	bf48      	it	mi
 80077f0:	b2ad      	uxthmi	r5, r5
 80077f2:	6031      	str	r1, [r6, #0]
 80077f4:	07d9      	lsls	r1, r3, #31
 80077f6:	bf44      	itt	mi
 80077f8:	f043 0320 	orrmi.w	r3, r3, #32
 80077fc:	6023      	strmi	r3, [r4, #0]
 80077fe:	b11d      	cbz	r5, 8007808 <_printf_i+0x1a0>
 8007800:	2310      	movs	r3, #16
 8007802:	e7ab      	b.n	800775c <_printf_i+0xf4>
 8007804:	4826      	ldr	r0, [pc, #152]	@ (80078a0 <_printf_i+0x238>)
 8007806:	e7e9      	b.n	80077dc <_printf_i+0x174>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	f023 0320 	bic.w	r3, r3, #32
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	e7f6      	b.n	8007800 <_printf_i+0x198>
 8007812:	4616      	mov	r6, r2
 8007814:	e7bd      	b.n	8007792 <_printf_i+0x12a>
 8007816:	6833      	ldr	r3, [r6, #0]
 8007818:	6825      	ldr	r5, [r4, #0]
 800781a:	1d18      	adds	r0, r3, #4
 800781c:	6961      	ldr	r1, [r4, #20]
 800781e:	6030      	str	r0, [r6, #0]
 8007820:	062e      	lsls	r6, r5, #24
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	d501      	bpl.n	800782a <_printf_i+0x1c2>
 8007826:	6019      	str	r1, [r3, #0]
 8007828:	e002      	b.n	8007830 <_printf_i+0x1c8>
 800782a:	0668      	lsls	r0, r5, #25
 800782c:	d5fb      	bpl.n	8007826 <_printf_i+0x1be>
 800782e:	8019      	strh	r1, [r3, #0]
 8007830:	2300      	movs	r3, #0
 8007832:	4616      	mov	r6, r2
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	e7bc      	b.n	80077b2 <_printf_i+0x14a>
 8007838:	6833      	ldr	r3, [r6, #0]
 800783a:	2100      	movs	r1, #0
 800783c:	1d1a      	adds	r2, r3, #4
 800783e:	6032      	str	r2, [r6, #0]
 8007840:	681e      	ldr	r6, [r3, #0]
 8007842:	6862      	ldr	r2, [r4, #4]
 8007844:	4630      	mov	r0, r6
 8007846:	f000 fa17 	bl	8007c78 <memchr>
 800784a:	b108      	cbz	r0, 8007850 <_printf_i+0x1e8>
 800784c:	1b80      	subs	r0, r0, r6
 800784e:	6060      	str	r0, [r4, #4]
 8007850:	6863      	ldr	r3, [r4, #4]
 8007852:	6123      	str	r3, [r4, #16]
 8007854:	2300      	movs	r3, #0
 8007856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800785a:	e7aa      	b.n	80077b2 <_printf_i+0x14a>
 800785c:	4632      	mov	r2, r6
 800785e:	4649      	mov	r1, r9
 8007860:	4640      	mov	r0, r8
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	47d0      	blx	sl
 8007866:	3001      	adds	r0, #1
 8007868:	d0ad      	beq.n	80077c6 <_printf_i+0x15e>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	079b      	lsls	r3, r3, #30
 800786e:	d413      	bmi.n	8007898 <_printf_i+0x230>
 8007870:	68e0      	ldr	r0, [r4, #12]
 8007872:	9b03      	ldr	r3, [sp, #12]
 8007874:	4298      	cmp	r0, r3
 8007876:	bfb8      	it	lt
 8007878:	4618      	movlt	r0, r3
 800787a:	e7a6      	b.n	80077ca <_printf_i+0x162>
 800787c:	2301      	movs	r3, #1
 800787e:	4632      	mov	r2, r6
 8007880:	4649      	mov	r1, r9
 8007882:	4640      	mov	r0, r8
 8007884:	47d0      	blx	sl
 8007886:	3001      	adds	r0, #1
 8007888:	d09d      	beq.n	80077c6 <_printf_i+0x15e>
 800788a:	3501      	adds	r5, #1
 800788c:	68e3      	ldr	r3, [r4, #12]
 800788e:	9903      	ldr	r1, [sp, #12]
 8007890:	1a5b      	subs	r3, r3, r1
 8007892:	42ab      	cmp	r3, r5
 8007894:	dcf2      	bgt.n	800787c <_printf_i+0x214>
 8007896:	e7eb      	b.n	8007870 <_printf_i+0x208>
 8007898:	2500      	movs	r5, #0
 800789a:	f104 0619 	add.w	r6, r4, #25
 800789e:	e7f5      	b.n	800788c <_printf_i+0x224>
 80078a0:	08008217 	.word	0x08008217
 80078a4:	08008228 	.word	0x08008228

080078a8 <_scanf_chars>:
 80078a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ac:	4615      	mov	r5, r2
 80078ae:	688a      	ldr	r2, [r1, #8]
 80078b0:	4680      	mov	r8, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	b932      	cbnz	r2, 80078c4 <_scanf_chars+0x1c>
 80078b6:	698a      	ldr	r2, [r1, #24]
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	bf14      	ite	ne
 80078bc:	f04f 32ff 	movne.w	r2, #4294967295
 80078c0:	2201      	moveq	r2, #1
 80078c2:	608a      	str	r2, [r1, #8]
 80078c4:	2700      	movs	r7, #0
 80078c6:	6822      	ldr	r2, [r4, #0]
 80078c8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8007958 <_scanf_chars+0xb0>
 80078cc:	06d1      	lsls	r1, r2, #27
 80078ce:	bf5f      	itttt	pl
 80078d0:	681a      	ldrpl	r2, [r3, #0]
 80078d2:	1d11      	addpl	r1, r2, #4
 80078d4:	6019      	strpl	r1, [r3, #0]
 80078d6:	6816      	ldrpl	r6, [r2, #0]
 80078d8:	69a0      	ldr	r0, [r4, #24]
 80078da:	b188      	cbz	r0, 8007900 <_scanf_chars+0x58>
 80078dc:	2801      	cmp	r0, #1
 80078de:	d107      	bne.n	80078f0 <_scanf_chars+0x48>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	6963      	ldr	r3, [r4, #20]
 80078e6:	5c9b      	ldrb	r3, [r3, r2]
 80078e8:	b953      	cbnz	r3, 8007900 <_scanf_chars+0x58>
 80078ea:	2f00      	cmp	r7, #0
 80078ec:	d031      	beq.n	8007952 <_scanf_chars+0xaa>
 80078ee:	e022      	b.n	8007936 <_scanf_chars+0x8e>
 80078f0:	2802      	cmp	r0, #2
 80078f2:	d120      	bne.n	8007936 <_scanf_chars+0x8e>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80078fc:	071b      	lsls	r3, r3, #28
 80078fe:	d41a      	bmi.n	8007936 <_scanf_chars+0x8e>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	3701      	adds	r7, #1
 8007904:	06da      	lsls	r2, r3, #27
 8007906:	bf5e      	ittt	pl
 8007908:	682b      	ldrpl	r3, [r5, #0]
 800790a:	781b      	ldrbpl	r3, [r3, #0]
 800790c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007910:	682a      	ldr	r2, [r5, #0]
 8007912:	686b      	ldr	r3, [r5, #4]
 8007914:	3201      	adds	r2, #1
 8007916:	602a      	str	r2, [r5, #0]
 8007918:	68a2      	ldr	r2, [r4, #8]
 800791a:	3b01      	subs	r3, #1
 800791c:	3a01      	subs	r2, #1
 800791e:	606b      	str	r3, [r5, #4]
 8007920:	60a2      	str	r2, [r4, #8]
 8007922:	b142      	cbz	r2, 8007936 <_scanf_chars+0x8e>
 8007924:	2b00      	cmp	r3, #0
 8007926:	dcd7      	bgt.n	80078d8 <_scanf_chars+0x30>
 8007928:	4629      	mov	r1, r5
 800792a:	4640      	mov	r0, r8
 800792c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007930:	4798      	blx	r3
 8007932:	2800      	cmp	r0, #0
 8007934:	d0d0      	beq.n	80078d8 <_scanf_chars+0x30>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	f013 0310 	ands.w	r3, r3, #16
 800793c:	d105      	bne.n	800794a <_scanf_chars+0xa2>
 800793e:	68e2      	ldr	r2, [r4, #12]
 8007940:	3201      	adds	r2, #1
 8007942:	60e2      	str	r2, [r4, #12]
 8007944:	69a2      	ldr	r2, [r4, #24]
 8007946:	b102      	cbz	r2, 800794a <_scanf_chars+0xa2>
 8007948:	7033      	strb	r3, [r6, #0]
 800794a:	2000      	movs	r0, #0
 800794c:	6923      	ldr	r3, [r4, #16]
 800794e:	443b      	add	r3, r7
 8007950:	6123      	str	r3, [r4, #16]
 8007952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007956:	bf00      	nop
 8007958:	08008255 	.word	0x08008255

0800795c <_scanf_i>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	460c      	mov	r4, r1
 8007962:	4698      	mov	r8, r3
 8007964:	4b72      	ldr	r3, [pc, #456]	@ (8007b30 <_scanf_i+0x1d4>)
 8007966:	b087      	sub	sp, #28
 8007968:	4682      	mov	sl, r0
 800796a:	4616      	mov	r6, r2
 800796c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007970:	ab03      	add	r3, sp, #12
 8007972:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007976:	4b6f      	ldr	r3, [pc, #444]	@ (8007b34 <_scanf_i+0x1d8>)
 8007978:	69a1      	ldr	r1, [r4, #24]
 800797a:	4a6f      	ldr	r2, [pc, #444]	@ (8007b38 <_scanf_i+0x1dc>)
 800797c:	4627      	mov	r7, r4
 800797e:	2903      	cmp	r1, #3
 8007980:	bf08      	it	eq
 8007982:	461a      	moveq	r2, r3
 8007984:	68a3      	ldr	r3, [r4, #8]
 8007986:	9201      	str	r2, [sp, #4]
 8007988:	1e5a      	subs	r2, r3, #1
 800798a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800798e:	bf81      	itttt	hi
 8007990:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007994:	eb03 0905 	addhi.w	r9, r3, r5
 8007998:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800799c:	60a3      	strhi	r3, [r4, #8]
 800799e:	f857 3b1c 	ldr.w	r3, [r7], #28
 80079a2:	bf98      	it	ls
 80079a4:	f04f 0900 	movls.w	r9, #0
 80079a8:	463d      	mov	r5, r7
 80079aa:	f04f 0b00 	mov.w	fp, #0
 80079ae:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	6831      	ldr	r1, [r6, #0]
 80079b6:	ab03      	add	r3, sp, #12
 80079b8:	2202      	movs	r2, #2
 80079ba:	7809      	ldrb	r1, [r1, #0]
 80079bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80079c0:	f000 f95a 	bl	8007c78 <memchr>
 80079c4:	b328      	cbz	r0, 8007a12 <_scanf_i+0xb6>
 80079c6:	f1bb 0f01 	cmp.w	fp, #1
 80079ca:	d159      	bne.n	8007a80 <_scanf_i+0x124>
 80079cc:	6862      	ldr	r2, [r4, #4]
 80079ce:	b92a      	cbnz	r2, 80079dc <_scanf_i+0x80>
 80079d0:	2108      	movs	r1, #8
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	6061      	str	r1, [r4, #4]
 80079d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079da:	6022      	str	r2, [r4, #0]
 80079dc:	6822      	ldr	r2, [r4, #0]
 80079de:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80079e2:	6022      	str	r2, [r4, #0]
 80079e4:	68a2      	ldr	r2, [r4, #8]
 80079e6:	1e51      	subs	r1, r2, #1
 80079e8:	60a1      	str	r1, [r4, #8]
 80079ea:	b192      	cbz	r2, 8007a12 <_scanf_i+0xb6>
 80079ec:	6832      	ldr	r2, [r6, #0]
 80079ee:	1c51      	adds	r1, r2, #1
 80079f0:	6031      	str	r1, [r6, #0]
 80079f2:	7812      	ldrb	r2, [r2, #0]
 80079f4:	f805 2b01 	strb.w	r2, [r5], #1
 80079f8:	6872      	ldr	r2, [r6, #4]
 80079fa:	3a01      	subs	r2, #1
 80079fc:	2a00      	cmp	r2, #0
 80079fe:	6072      	str	r2, [r6, #4]
 8007a00:	dc07      	bgt.n	8007a12 <_scanf_i+0xb6>
 8007a02:	4631      	mov	r1, r6
 8007a04:	4650      	mov	r0, sl
 8007a06:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007a0a:	4790      	blx	r2
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	f040 8085 	bne.w	8007b1c <_scanf_i+0x1c0>
 8007a12:	f10b 0b01 	add.w	fp, fp, #1
 8007a16:	f1bb 0f03 	cmp.w	fp, #3
 8007a1a:	d1cb      	bne.n	80079b4 <_scanf_i+0x58>
 8007a1c:	6863      	ldr	r3, [r4, #4]
 8007a1e:	b90b      	cbnz	r3, 8007a24 <_scanf_i+0xc8>
 8007a20:	230a      	movs	r3, #10
 8007a22:	6063      	str	r3, [r4, #4]
 8007a24:	6863      	ldr	r3, [r4, #4]
 8007a26:	4945      	ldr	r1, [pc, #276]	@ (8007b3c <_scanf_i+0x1e0>)
 8007a28:	6960      	ldr	r0, [r4, #20]
 8007a2a:	1ac9      	subs	r1, r1, r3
 8007a2c:	f000 f888 	bl	8007b40 <__sccl>
 8007a30:	f04f 0b00 	mov.w	fp, #0
 8007a34:	68a3      	ldr	r3, [r4, #8]
 8007a36:	6822      	ldr	r2, [r4, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d03d      	beq.n	8007ab8 <_scanf_i+0x15c>
 8007a3c:	6831      	ldr	r1, [r6, #0]
 8007a3e:	6960      	ldr	r0, [r4, #20]
 8007a40:	f891 c000 	ldrb.w	ip, [r1]
 8007a44:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d035      	beq.n	8007ab8 <_scanf_i+0x15c>
 8007a4c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007a50:	d124      	bne.n	8007a9c <_scanf_i+0x140>
 8007a52:	0510      	lsls	r0, r2, #20
 8007a54:	d522      	bpl.n	8007a9c <_scanf_i+0x140>
 8007a56:	f10b 0b01 	add.w	fp, fp, #1
 8007a5a:	f1b9 0f00 	cmp.w	r9, #0
 8007a5e:	d003      	beq.n	8007a68 <_scanf_i+0x10c>
 8007a60:	3301      	adds	r3, #1
 8007a62:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a66:	60a3      	str	r3, [r4, #8]
 8007a68:	6873      	ldr	r3, [r6, #4]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	6073      	str	r3, [r6, #4]
 8007a70:	dd1b      	ble.n	8007aaa <_scanf_i+0x14e>
 8007a72:	6833      	ldr	r3, [r6, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	6033      	str	r3, [r6, #0]
 8007a78:	68a3      	ldr	r3, [r4, #8]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	60a3      	str	r3, [r4, #8]
 8007a7e:	e7d9      	b.n	8007a34 <_scanf_i+0xd8>
 8007a80:	f1bb 0f02 	cmp.w	fp, #2
 8007a84:	d1ae      	bne.n	80079e4 <_scanf_i+0x88>
 8007a86:	6822      	ldr	r2, [r4, #0]
 8007a88:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007a8c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007a90:	d1bf      	bne.n	8007a12 <_scanf_i+0xb6>
 8007a92:	2110      	movs	r1, #16
 8007a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a98:	6061      	str	r1, [r4, #4]
 8007a9a:	e7a2      	b.n	80079e2 <_scanf_i+0x86>
 8007a9c:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007aa0:	6022      	str	r2, [r4, #0]
 8007aa2:	780b      	ldrb	r3, [r1, #0]
 8007aa4:	f805 3b01 	strb.w	r3, [r5], #1
 8007aa8:	e7de      	b.n	8007a68 <_scanf_i+0x10c>
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4650      	mov	r0, sl
 8007aae:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007ab2:	4798      	blx	r3
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d0df      	beq.n	8007a78 <_scanf_i+0x11c>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	05d9      	lsls	r1, r3, #23
 8007abc:	d50d      	bpl.n	8007ada <_scanf_i+0x17e>
 8007abe:	42bd      	cmp	r5, r7
 8007ac0:	d909      	bls.n	8007ad6 <_scanf_i+0x17a>
 8007ac2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007ac6:	4632      	mov	r2, r6
 8007ac8:	4650      	mov	r0, sl
 8007aca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ace:	f105 39ff 	add.w	r9, r5, #4294967295
 8007ad2:	4798      	blx	r3
 8007ad4:	464d      	mov	r5, r9
 8007ad6:	42bd      	cmp	r5, r7
 8007ad8:	d028      	beq.n	8007b2c <_scanf_i+0x1d0>
 8007ada:	6822      	ldr	r2, [r4, #0]
 8007adc:	f012 0210 	ands.w	r2, r2, #16
 8007ae0:	d113      	bne.n	8007b0a <_scanf_i+0x1ae>
 8007ae2:	702a      	strb	r2, [r5, #0]
 8007ae4:	4639      	mov	r1, r7
 8007ae6:	6863      	ldr	r3, [r4, #4]
 8007ae8:	4650      	mov	r0, sl
 8007aea:	9e01      	ldr	r6, [sp, #4]
 8007aec:	47b0      	blx	r6
 8007aee:	f8d8 3000 	ldr.w	r3, [r8]
 8007af2:	6821      	ldr	r1, [r4, #0]
 8007af4:	1d1a      	adds	r2, r3, #4
 8007af6:	f8c8 2000 	str.w	r2, [r8]
 8007afa:	f011 0f20 	tst.w	r1, #32
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	d00f      	beq.n	8007b22 <_scanf_i+0x1c6>
 8007b02:	6018      	str	r0, [r3, #0]
 8007b04:	68e3      	ldr	r3, [r4, #12]
 8007b06:	3301      	adds	r3, #1
 8007b08:	60e3      	str	r3, [r4, #12]
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	1bed      	subs	r5, r5, r7
 8007b10:	445d      	add	r5, fp
 8007b12:	442b      	add	r3, r5
 8007b14:	6123      	str	r3, [r4, #16]
 8007b16:	b007      	add	sp, #28
 8007b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1c:	f04f 0b00 	mov.w	fp, #0
 8007b20:	e7ca      	b.n	8007ab8 <_scanf_i+0x15c>
 8007b22:	07ca      	lsls	r2, r1, #31
 8007b24:	bf4c      	ite	mi
 8007b26:	8018      	strhmi	r0, [r3, #0]
 8007b28:	6018      	strpl	r0, [r3, #0]
 8007b2a:	e7eb      	b.n	8007b04 <_scanf_i+0x1a8>
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	e7f2      	b.n	8007b16 <_scanf_i+0x1ba>
 8007b30:	080081b0 	.word	0x080081b0
 8007b34:	08007de5 	.word	0x08007de5
 8007b38:	08007ec5 	.word	0x08007ec5
 8007b3c:	08008249 	.word	0x08008249

08007b40 <__sccl>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	780b      	ldrb	r3, [r1, #0]
 8007b44:	4604      	mov	r4, r0
 8007b46:	2b5e      	cmp	r3, #94	@ 0x5e
 8007b48:	bf0b      	itete	eq
 8007b4a:	784b      	ldrbeq	r3, [r1, #1]
 8007b4c:	1c4a      	addne	r2, r1, #1
 8007b4e:	1c8a      	addeq	r2, r1, #2
 8007b50:	2100      	movne	r1, #0
 8007b52:	bf08      	it	eq
 8007b54:	2101      	moveq	r1, #1
 8007b56:	3801      	subs	r0, #1
 8007b58:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007b5c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007b60:	42a8      	cmp	r0, r5
 8007b62:	d1fb      	bne.n	8007b5c <__sccl+0x1c>
 8007b64:	b90b      	cbnz	r3, 8007b6a <__sccl+0x2a>
 8007b66:	1e50      	subs	r0, r2, #1
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
 8007b6a:	f081 0101 	eor.w	r1, r1, #1
 8007b6e:	4610      	mov	r0, r2
 8007b70:	54e1      	strb	r1, [r4, r3]
 8007b72:	4602      	mov	r2, r0
 8007b74:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007b78:	2d2d      	cmp	r5, #45	@ 0x2d
 8007b7a:	d005      	beq.n	8007b88 <__sccl+0x48>
 8007b7c:	2d5d      	cmp	r5, #93	@ 0x5d
 8007b7e:	d016      	beq.n	8007bae <__sccl+0x6e>
 8007b80:	2d00      	cmp	r5, #0
 8007b82:	d0f1      	beq.n	8007b68 <__sccl+0x28>
 8007b84:	462b      	mov	r3, r5
 8007b86:	e7f2      	b.n	8007b6e <__sccl+0x2e>
 8007b88:	7846      	ldrb	r6, [r0, #1]
 8007b8a:	2e5d      	cmp	r6, #93	@ 0x5d
 8007b8c:	d0fa      	beq.n	8007b84 <__sccl+0x44>
 8007b8e:	42b3      	cmp	r3, r6
 8007b90:	dcf8      	bgt.n	8007b84 <__sccl+0x44>
 8007b92:	461a      	mov	r2, r3
 8007b94:	3002      	adds	r0, #2
 8007b96:	3201      	adds	r2, #1
 8007b98:	4296      	cmp	r6, r2
 8007b9a:	54a1      	strb	r1, [r4, r2]
 8007b9c:	dcfb      	bgt.n	8007b96 <__sccl+0x56>
 8007b9e:	1af2      	subs	r2, r6, r3
 8007ba0:	3a01      	subs	r2, #1
 8007ba2:	42b3      	cmp	r3, r6
 8007ba4:	bfa8      	it	ge
 8007ba6:	2200      	movge	r2, #0
 8007ba8:	1c5d      	adds	r5, r3, #1
 8007baa:	18ab      	adds	r3, r5, r2
 8007bac:	e7e1      	b.n	8007b72 <__sccl+0x32>
 8007bae:	4610      	mov	r0, r2
 8007bb0:	e7da      	b.n	8007b68 <__sccl+0x28>

08007bb2 <__submore>:
 8007bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007bba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bbe:	4299      	cmp	r1, r3
 8007bc0:	d11b      	bne.n	8007bfa <__submore+0x48>
 8007bc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007bc6:	f7ff f92f 	bl	8006e28 <_malloc_r>
 8007bca:	b918      	cbnz	r0, 8007bd4 <__submore+0x22>
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bd8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007bda:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007bde:	6360      	str	r0, [r4, #52]	@ 0x34
 8007be0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007be4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007be8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007bec:	7043      	strb	r3, [r0, #1]
 8007bee:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007bf2:	7003      	strb	r3, [r0, #0]
 8007bf4:	6020      	str	r0, [r4, #0]
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	e7ea      	b.n	8007bd0 <__submore+0x1e>
 8007bfa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007bfc:	0077      	lsls	r7, r6, #1
 8007bfe:	463a      	mov	r2, r7
 8007c00:	f000 f848 	bl	8007c94 <_realloc_r>
 8007c04:	4605      	mov	r5, r0
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d0e0      	beq.n	8007bcc <__submore+0x1a>
 8007c0a:	eb00 0806 	add.w	r8, r0, r6
 8007c0e:	4601      	mov	r1, r0
 8007c10:	4632      	mov	r2, r6
 8007c12:	4640      	mov	r0, r8
 8007c14:	f7ff f890 	bl	8006d38 <memcpy>
 8007c18:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007c1c:	f8c4 8000 	str.w	r8, [r4]
 8007c20:	e7e9      	b.n	8007bf6 <__submore+0x44>

08007c22 <memmove>:
 8007c22:	4288      	cmp	r0, r1
 8007c24:	b510      	push	{r4, lr}
 8007c26:	eb01 0402 	add.w	r4, r1, r2
 8007c2a:	d902      	bls.n	8007c32 <memmove+0x10>
 8007c2c:	4284      	cmp	r4, r0
 8007c2e:	4623      	mov	r3, r4
 8007c30:	d807      	bhi.n	8007c42 <memmove+0x20>
 8007c32:	1e43      	subs	r3, r0, #1
 8007c34:	42a1      	cmp	r1, r4
 8007c36:	d008      	beq.n	8007c4a <memmove+0x28>
 8007c38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c40:	e7f8      	b.n	8007c34 <memmove+0x12>
 8007c42:	4601      	mov	r1, r0
 8007c44:	4402      	add	r2, r0
 8007c46:	428a      	cmp	r2, r1
 8007c48:	d100      	bne.n	8007c4c <memmove+0x2a>
 8007c4a:	bd10      	pop	{r4, pc}
 8007c4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c54:	e7f7      	b.n	8007c46 <memmove+0x24>
	...

08007c58 <_sbrk_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	4d05      	ldr	r5, [pc, #20]	@ (8007c74 <_sbrk_r+0x1c>)
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	602b      	str	r3, [r5, #0]
 8007c64:	f7fb fb60 	bl	8003328 <_sbrk>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_sbrk_r+0x1a>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_sbrk_r+0x1a>
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	20002080 	.word	0x20002080

08007c78 <memchr>:
 8007c78:	4603      	mov	r3, r0
 8007c7a:	b510      	push	{r4, lr}
 8007c7c:	b2c9      	uxtb	r1, r1
 8007c7e:	4402      	add	r2, r0
 8007c80:	4293      	cmp	r3, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	d101      	bne.n	8007c8a <memchr+0x12>
 8007c86:	2000      	movs	r0, #0
 8007c88:	e003      	b.n	8007c92 <memchr+0x1a>
 8007c8a:	7804      	ldrb	r4, [r0, #0]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	428c      	cmp	r4, r1
 8007c90:	d1f6      	bne.n	8007c80 <memchr+0x8>
 8007c92:	bd10      	pop	{r4, pc}

08007c94 <_realloc_r>:
 8007c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c98:	4680      	mov	r8, r0
 8007c9a:	4615      	mov	r5, r2
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	b921      	cbnz	r1, 8007caa <_realloc_r+0x16>
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca6:	f7ff b8bf 	b.w	8006e28 <_malloc_r>
 8007caa:	b92a      	cbnz	r2, 8007cb8 <_realloc_r+0x24>
 8007cac:	f7ff f852 	bl	8006d54 <_free_r>
 8007cb0:	2400      	movs	r4, #0
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	f000 f906 	bl	8007ec8 <_malloc_usable_size_r>
 8007cbc:	4285      	cmp	r5, r0
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	d802      	bhi.n	8007cc8 <_realloc_r+0x34>
 8007cc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007cc6:	d8f4      	bhi.n	8007cb2 <_realloc_r+0x1e>
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4640      	mov	r0, r8
 8007ccc:	f7ff f8ac 	bl	8006e28 <_malloc_r>
 8007cd0:	4607      	mov	r7, r0
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d0ec      	beq.n	8007cb0 <_realloc_r+0x1c>
 8007cd6:	42b5      	cmp	r5, r6
 8007cd8:	462a      	mov	r2, r5
 8007cda:	4621      	mov	r1, r4
 8007cdc:	bf28      	it	cs
 8007cde:	4632      	movcs	r2, r6
 8007ce0:	f7ff f82a 	bl	8006d38 <memcpy>
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	f7ff f834 	bl	8006d54 <_free_r>
 8007cec:	463c      	mov	r4, r7
 8007cee:	e7e0      	b.n	8007cb2 <_realloc_r+0x1e>

08007cf0 <_strtol_l.constprop.0>:
 8007cf0:	2b24      	cmp	r3, #36	@ 0x24
 8007cf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf6:	4686      	mov	lr, r0
 8007cf8:	4690      	mov	r8, r2
 8007cfa:	d801      	bhi.n	8007d00 <_strtol_l.constprop.0+0x10>
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d106      	bne.n	8007d0e <_strtol_l.constprop.0+0x1e>
 8007d00:	f7fe ffee 	bl	8006ce0 <__errno>
 8007d04:	2316      	movs	r3, #22
 8007d06:	6003      	str	r3, [r0, #0]
 8007d08:	2000      	movs	r0, #0
 8007d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0e:	460d      	mov	r5, r1
 8007d10:	4833      	ldr	r0, [pc, #204]	@ (8007de0 <_strtol_l.constprop.0+0xf0>)
 8007d12:	462a      	mov	r2, r5
 8007d14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d18:	5d06      	ldrb	r6, [r0, r4]
 8007d1a:	f016 0608 	ands.w	r6, r6, #8
 8007d1e:	d1f8      	bne.n	8007d12 <_strtol_l.constprop.0+0x22>
 8007d20:	2c2d      	cmp	r4, #45	@ 0x2d
 8007d22:	d12d      	bne.n	8007d80 <_strtol_l.constprop.0+0x90>
 8007d24:	2601      	movs	r6, #1
 8007d26:	782c      	ldrb	r4, [r5, #0]
 8007d28:	1c95      	adds	r5, r2, #2
 8007d2a:	f033 0210 	bics.w	r2, r3, #16
 8007d2e:	d109      	bne.n	8007d44 <_strtol_l.constprop.0+0x54>
 8007d30:	2c30      	cmp	r4, #48	@ 0x30
 8007d32:	d12a      	bne.n	8007d8a <_strtol_l.constprop.0+0x9a>
 8007d34:	782a      	ldrb	r2, [r5, #0]
 8007d36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d3a:	2a58      	cmp	r2, #88	@ 0x58
 8007d3c:	d125      	bne.n	8007d8a <_strtol_l.constprop.0+0x9a>
 8007d3e:	2310      	movs	r3, #16
 8007d40:	786c      	ldrb	r4, [r5, #1]
 8007d42:	3502      	adds	r5, #2
 8007d44:	2200      	movs	r2, #0
 8007d46:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007d4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d4e:	fbbc f9f3 	udiv	r9, ip, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d58:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007d5c:	2f09      	cmp	r7, #9
 8007d5e:	d81b      	bhi.n	8007d98 <_strtol_l.constprop.0+0xa8>
 8007d60:	463c      	mov	r4, r7
 8007d62:	42a3      	cmp	r3, r4
 8007d64:	dd27      	ble.n	8007db6 <_strtol_l.constprop.0+0xc6>
 8007d66:	1c57      	adds	r7, r2, #1
 8007d68:	d007      	beq.n	8007d7a <_strtol_l.constprop.0+0x8a>
 8007d6a:	4581      	cmp	r9, r0
 8007d6c:	d320      	bcc.n	8007db0 <_strtol_l.constprop.0+0xc0>
 8007d6e:	d101      	bne.n	8007d74 <_strtol_l.constprop.0+0x84>
 8007d70:	45a2      	cmp	sl, r4
 8007d72:	db1d      	blt.n	8007db0 <_strtol_l.constprop.0+0xc0>
 8007d74:	2201      	movs	r2, #1
 8007d76:	fb00 4003 	mla	r0, r0, r3, r4
 8007d7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d7e:	e7eb      	b.n	8007d58 <_strtol_l.constprop.0+0x68>
 8007d80:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d82:	bf04      	itt	eq
 8007d84:	782c      	ldrbeq	r4, [r5, #0]
 8007d86:	1c95      	addeq	r5, r2, #2
 8007d88:	e7cf      	b.n	8007d2a <_strtol_l.constprop.0+0x3a>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1da      	bne.n	8007d44 <_strtol_l.constprop.0+0x54>
 8007d8e:	2c30      	cmp	r4, #48	@ 0x30
 8007d90:	bf0c      	ite	eq
 8007d92:	2308      	moveq	r3, #8
 8007d94:	230a      	movne	r3, #10
 8007d96:	e7d5      	b.n	8007d44 <_strtol_l.constprop.0+0x54>
 8007d98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007d9c:	2f19      	cmp	r7, #25
 8007d9e:	d801      	bhi.n	8007da4 <_strtol_l.constprop.0+0xb4>
 8007da0:	3c37      	subs	r4, #55	@ 0x37
 8007da2:	e7de      	b.n	8007d62 <_strtol_l.constprop.0+0x72>
 8007da4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007da8:	2f19      	cmp	r7, #25
 8007daa:	d804      	bhi.n	8007db6 <_strtol_l.constprop.0+0xc6>
 8007dac:	3c57      	subs	r4, #87	@ 0x57
 8007dae:	e7d8      	b.n	8007d62 <_strtol_l.constprop.0+0x72>
 8007db0:	f04f 32ff 	mov.w	r2, #4294967295
 8007db4:	e7e1      	b.n	8007d7a <_strtol_l.constprop.0+0x8a>
 8007db6:	1c53      	adds	r3, r2, #1
 8007db8:	d108      	bne.n	8007dcc <_strtol_l.constprop.0+0xdc>
 8007dba:	2322      	movs	r3, #34	@ 0x22
 8007dbc:	4660      	mov	r0, ip
 8007dbe:	f8ce 3000 	str.w	r3, [lr]
 8007dc2:	f1b8 0f00 	cmp.w	r8, #0
 8007dc6:	d0a0      	beq.n	8007d0a <_strtol_l.constprop.0+0x1a>
 8007dc8:	1e69      	subs	r1, r5, #1
 8007dca:	e006      	b.n	8007dda <_strtol_l.constprop.0+0xea>
 8007dcc:	b106      	cbz	r6, 8007dd0 <_strtol_l.constprop.0+0xe0>
 8007dce:	4240      	negs	r0, r0
 8007dd0:	f1b8 0f00 	cmp.w	r8, #0
 8007dd4:	d099      	beq.n	8007d0a <_strtol_l.constprop.0+0x1a>
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	d1f6      	bne.n	8007dc8 <_strtol_l.constprop.0+0xd8>
 8007dda:	f8c8 1000 	str.w	r1, [r8]
 8007dde:	e794      	b.n	8007d0a <_strtol_l.constprop.0+0x1a>
 8007de0:	08008255 	.word	0x08008255

08007de4 <_strtol_r>:
 8007de4:	f7ff bf84 	b.w	8007cf0 <_strtol_l.constprop.0>

08007de8 <_strtoul_l.constprop.0>:
 8007de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dec:	4686      	mov	lr, r0
 8007dee:	460d      	mov	r5, r1
 8007df0:	4e33      	ldr	r6, [pc, #204]	@ (8007ec0 <_strtoul_l.constprop.0+0xd8>)
 8007df2:	4628      	mov	r0, r5
 8007df4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007df8:	5d37      	ldrb	r7, [r6, r4]
 8007dfa:	f017 0708 	ands.w	r7, r7, #8
 8007dfe:	d1f8      	bne.n	8007df2 <_strtoul_l.constprop.0+0xa>
 8007e00:	2c2d      	cmp	r4, #45	@ 0x2d
 8007e02:	d12f      	bne.n	8007e64 <_strtoul_l.constprop.0+0x7c>
 8007e04:	2701      	movs	r7, #1
 8007e06:	782c      	ldrb	r4, [r5, #0]
 8007e08:	1c85      	adds	r5, r0, #2
 8007e0a:	f033 0010 	bics.w	r0, r3, #16
 8007e0e:	d109      	bne.n	8007e24 <_strtoul_l.constprop.0+0x3c>
 8007e10:	2c30      	cmp	r4, #48	@ 0x30
 8007e12:	d12c      	bne.n	8007e6e <_strtoul_l.constprop.0+0x86>
 8007e14:	7828      	ldrb	r0, [r5, #0]
 8007e16:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007e1a:	2858      	cmp	r0, #88	@ 0x58
 8007e1c:	d127      	bne.n	8007e6e <_strtoul_l.constprop.0+0x86>
 8007e1e:	2310      	movs	r3, #16
 8007e20:	786c      	ldrb	r4, [r5, #1]
 8007e22:	3502      	adds	r5, #2
 8007e24:	f04f 38ff 	mov.w	r8, #4294967295
 8007e28:	fbb8 f8f3 	udiv	r8, r8, r3
 8007e2c:	2600      	movs	r6, #0
 8007e2e:	fb03 f908 	mul.w	r9, r3, r8
 8007e32:	4630      	mov	r0, r6
 8007e34:	ea6f 0909 	mvn.w	r9, r9
 8007e38:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007e3c:	f1bc 0f09 	cmp.w	ip, #9
 8007e40:	d81c      	bhi.n	8007e7c <_strtoul_l.constprop.0+0x94>
 8007e42:	4664      	mov	r4, ip
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	dd2a      	ble.n	8007e9e <_strtoul_l.constprop.0+0xb6>
 8007e48:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007e4c:	d007      	beq.n	8007e5e <_strtoul_l.constprop.0+0x76>
 8007e4e:	4580      	cmp	r8, r0
 8007e50:	d322      	bcc.n	8007e98 <_strtoul_l.constprop.0+0xb0>
 8007e52:	d101      	bne.n	8007e58 <_strtoul_l.constprop.0+0x70>
 8007e54:	45a1      	cmp	r9, r4
 8007e56:	db1f      	blt.n	8007e98 <_strtoul_l.constprop.0+0xb0>
 8007e58:	2601      	movs	r6, #1
 8007e5a:	fb00 4003 	mla	r0, r0, r3, r4
 8007e5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e62:	e7e9      	b.n	8007e38 <_strtoul_l.constprop.0+0x50>
 8007e64:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e66:	bf04      	itt	eq
 8007e68:	782c      	ldrbeq	r4, [r5, #0]
 8007e6a:	1c85      	addeq	r5, r0, #2
 8007e6c:	e7cd      	b.n	8007e0a <_strtoul_l.constprop.0+0x22>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1d8      	bne.n	8007e24 <_strtoul_l.constprop.0+0x3c>
 8007e72:	2c30      	cmp	r4, #48	@ 0x30
 8007e74:	bf0c      	ite	eq
 8007e76:	2308      	moveq	r3, #8
 8007e78:	230a      	movne	r3, #10
 8007e7a:	e7d3      	b.n	8007e24 <_strtoul_l.constprop.0+0x3c>
 8007e7c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007e80:	f1bc 0f19 	cmp.w	ip, #25
 8007e84:	d801      	bhi.n	8007e8a <_strtoul_l.constprop.0+0xa2>
 8007e86:	3c37      	subs	r4, #55	@ 0x37
 8007e88:	e7dc      	b.n	8007e44 <_strtoul_l.constprop.0+0x5c>
 8007e8a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007e8e:	f1bc 0f19 	cmp.w	ip, #25
 8007e92:	d804      	bhi.n	8007e9e <_strtoul_l.constprop.0+0xb6>
 8007e94:	3c57      	subs	r4, #87	@ 0x57
 8007e96:	e7d5      	b.n	8007e44 <_strtoul_l.constprop.0+0x5c>
 8007e98:	f04f 36ff 	mov.w	r6, #4294967295
 8007e9c:	e7df      	b.n	8007e5e <_strtoul_l.constprop.0+0x76>
 8007e9e:	1c73      	adds	r3, r6, #1
 8007ea0:	d106      	bne.n	8007eb0 <_strtoul_l.constprop.0+0xc8>
 8007ea2:	2322      	movs	r3, #34	@ 0x22
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f8ce 3000 	str.w	r3, [lr]
 8007eaa:	b932      	cbnz	r2, 8007eba <_strtoul_l.constprop.0+0xd2>
 8007eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eb0:	b107      	cbz	r7, 8007eb4 <_strtoul_l.constprop.0+0xcc>
 8007eb2:	4240      	negs	r0, r0
 8007eb4:	2a00      	cmp	r2, #0
 8007eb6:	d0f9      	beq.n	8007eac <_strtoul_l.constprop.0+0xc4>
 8007eb8:	b106      	cbz	r6, 8007ebc <_strtoul_l.constprop.0+0xd4>
 8007eba:	1e69      	subs	r1, r5, #1
 8007ebc:	6011      	str	r1, [r2, #0]
 8007ebe:	e7f5      	b.n	8007eac <_strtoul_l.constprop.0+0xc4>
 8007ec0:	08008255 	.word	0x08008255

08007ec4 <_strtoul_r>:
 8007ec4:	f7ff bf90 	b.w	8007de8 <_strtoul_l.constprop.0>

08007ec8 <_malloc_usable_size_r>:
 8007ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ecc:	1f18      	subs	r0, r3, #4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bfbc      	itt	lt
 8007ed2:	580b      	ldrlt	r3, [r1, r0]
 8007ed4:	18c0      	addlt	r0, r0, r3
 8007ed6:	4770      	bx	lr

08007ed8 <_init>:
 8007ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eda:	bf00      	nop
 8007edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ede:	bc08      	pop	{r3}
 8007ee0:	469e      	mov	lr, r3
 8007ee2:	4770      	bx	lr

08007ee4 <_fini>:
 8007ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee6:	bf00      	nop
 8007ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eea:	bc08      	pop	{r3}
 8007eec:	469e      	mov	lr, r3
 8007eee:	4770      	bx	lr
