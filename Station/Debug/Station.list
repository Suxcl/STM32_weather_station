
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003ad8  08003ad8  00004ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b64  08003b64  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003b64  08003b64  00004b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b6c  08003b6c  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b6c  08003b6c  00004b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b70  08003b70  00004b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003b74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  20000060  08003bd4  00005060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  08003bd4  00005824  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8ff  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230b  00000000  00000000  00011988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00013c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097d  00000000  00000000  000148e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184b4  00000000  00000000  0001525d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011553  00000000  00000000  0002d711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875cc  00000000  00000000  0003ec64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f8  00000000  00000000  000c6274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c996c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ac0 	.word	0x08003ac0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08003ac0 	.word	0x08003ac0

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b968 	b.w	8000438 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9d08      	ldr	r5, [sp, #32]
 8000186:	460c      	mov	r4, r1
 8000188:	2b00      	cmp	r3, #0
 800018a:	d14e      	bne.n	800022a <__udivmoddi4+0xaa>
 800018c:	4694      	mov	ip, r2
 800018e:	458c      	cmp	ip, r1
 8000190:	4686      	mov	lr, r0
 8000192:	fab2 f282 	clz	r2, r2
 8000196:	d962      	bls.n	800025e <__udivmoddi4+0xde>
 8000198:	b14a      	cbz	r2, 80001ae <__udivmoddi4+0x2e>
 800019a:	f1c2 0320 	rsb	r3, r2, #32
 800019e:	4091      	lsls	r1, r2
 80001a0:	fa20 f303 	lsr.w	r3, r0, r3
 80001a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001a8:	4319      	orrs	r1, r3
 80001aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001b6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ba:	fa1f f68c 	uxth.w	r6, ip
 80001be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001c6:	fb04 f106 	mul.w	r1, r4, r6
 80001ca:	4299      	cmp	r1, r3
 80001cc:	d90a      	bls.n	80001e4 <__udivmoddi4+0x64>
 80001ce:	eb1c 0303 	adds.w	r3, ip, r3
 80001d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80001d6:	f080 8110 	bcs.w	80003fa <__udivmoddi4+0x27a>
 80001da:	4299      	cmp	r1, r3
 80001dc:	f240 810d 	bls.w	80003fa <__udivmoddi4+0x27a>
 80001e0:	3c02      	subs	r4, #2
 80001e2:	4463      	add	r3, ip
 80001e4:	1a59      	subs	r1, r3, r1
 80001e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80001ea:	fb07 1110 	mls	r1, r7, r0, r1
 80001ee:	fb00 f606 	mul.w	r6, r0, r6
 80001f2:	fa1f f38e 	uxth.w	r3, lr
 80001f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fa:	429e      	cmp	r6, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f100 31ff 	add.w	r1, r0, #4294967295
 8000206:	f080 80fa 	bcs.w	80003fe <__udivmoddi4+0x27e>
 800020a:	429e      	cmp	r6, r3
 800020c:	f240 80f7 	bls.w	80003fe <__udivmoddi4+0x27e>
 8000210:	4463      	add	r3, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	1b9b      	subs	r3, r3, r6
 8000218:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800021c:	b11d      	cbz	r5, 8000226 <__udivmoddi4+0xa6>
 800021e:	40d3      	lsrs	r3, r2
 8000220:	2200      	movs	r2, #0
 8000222:	e9c5 3200 	strd	r3, r2, [r5]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d905      	bls.n	800023a <__udivmoddi4+0xba>
 800022e:	b10d      	cbz	r5, 8000234 <__udivmoddi4+0xb4>
 8000230:	e9c5 0100 	strd	r0, r1, [r5]
 8000234:	2100      	movs	r1, #0
 8000236:	4608      	mov	r0, r1
 8000238:	e7f5      	b.n	8000226 <__udivmoddi4+0xa6>
 800023a:	fab3 f183 	clz	r1, r3
 800023e:	2900      	cmp	r1, #0
 8000240:	d146      	bne.n	80002d0 <__udivmoddi4+0x150>
 8000242:	42a3      	cmp	r3, r4
 8000244:	d302      	bcc.n	800024c <__udivmoddi4+0xcc>
 8000246:	4290      	cmp	r0, r2
 8000248:	f0c0 80ee 	bcc.w	8000428 <__udivmoddi4+0x2a8>
 800024c:	1a86      	subs	r6, r0, r2
 800024e:	eb64 0303 	sbc.w	r3, r4, r3
 8000252:	2001      	movs	r0, #1
 8000254:	2d00      	cmp	r5, #0
 8000256:	d0e6      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000258:	e9c5 6300 	strd	r6, r3, [r5]
 800025c:	e7e3      	b.n	8000226 <__udivmoddi4+0xa6>
 800025e:	2a00      	cmp	r2, #0
 8000260:	f040 808f 	bne.w	8000382 <__udivmoddi4+0x202>
 8000264:	eba1 040c 	sub.w	r4, r1, ip
 8000268:	2101      	movs	r1, #1
 800026a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fbb4 f6f8 	udiv	r6, r4, r8
 8000276:	fb08 4416 	mls	r4, r8, r6, r4
 800027a:	fb07 f006 	mul.w	r0, r7, r6
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000286:	4298      	cmp	r0, r3
 8000288:	d908      	bls.n	800029c <__udivmoddi4+0x11c>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000292:	d202      	bcs.n	800029a <__udivmoddi4+0x11a>
 8000294:	4298      	cmp	r0, r3
 8000296:	f200 80cb 	bhi.w	8000430 <__udivmoddi4+0x2b0>
 800029a:	4626      	mov	r6, r4
 800029c:	1a1c      	subs	r4, r3, r0
 800029e:	fbb4 f0f8 	udiv	r0, r4, r8
 80002a2:	fb08 4410 	mls	r4, r8, r0, r4
 80002a6:	fb00 f707 	mul.w	r7, r0, r7
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	429f      	cmp	r7, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x148>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x146>
 80002c0:	429f      	cmp	r7, r3
 80002c2:	f200 80ae 	bhi.w	8000422 <__udivmoddi4+0x2a2>
 80002c6:	4620      	mov	r0, r4
 80002c8:	1bdb      	subs	r3, r3, r7
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	e7a5      	b.n	800021c <__udivmoddi4+0x9c>
 80002d0:	f1c1 0720 	rsb	r7, r1, #32
 80002d4:	408b      	lsls	r3, r1
 80002d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002da:	ea4c 0c03 	orr.w	ip, ip, r3
 80002de:	fa24 f607 	lsr.w	r6, r4, r7
 80002e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002e6:	fbb6 f8f9 	udiv	r8, r6, r9
 80002ea:	fa1f fe8c 	uxth.w	lr, ip
 80002ee:	fb09 6618 	mls	r6, r9, r8, r6
 80002f2:	fa20 f307 	lsr.w	r3, r0, r7
 80002f6:	408c      	lsls	r4, r1
 80002f8:	fa00 fa01 	lsl.w	sl, r0, r1
 80002fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000300:	431c      	orrs	r4, r3
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000308:	4298      	cmp	r0, r3
 800030a:	fa02 f201 	lsl.w	r2, r2, r1
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x1a6>
 8000310:	eb1c 0303 	adds.w	r3, ip, r3
 8000314:	f108 36ff 	add.w	r6, r8, #4294967295
 8000318:	f080 8081 	bcs.w	800041e <__udivmoddi4+0x29e>
 800031c:	4298      	cmp	r0, r3
 800031e:	d97e      	bls.n	800041e <__udivmoddi4+0x29e>
 8000320:	f1a8 0802 	sub.w	r8, r8, #2
 8000324:	4463      	add	r3, ip
 8000326:	1a1e      	subs	r6, r3, r0
 8000328:	fbb6 f3f9 	udiv	r3, r6, r9
 800032c:	fb09 6613 	mls	r6, r9, r3, r6
 8000330:	fb03 fe0e 	mul.w	lr, r3, lr
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800033a:	45a6      	cmp	lr, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x1d0>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f103 30ff 	add.w	r0, r3, #4294967295
 8000346:	d266      	bcs.n	8000416 <__udivmoddi4+0x296>
 8000348:	45a6      	cmp	lr, r4
 800034a:	d964      	bls.n	8000416 <__udivmoddi4+0x296>
 800034c:	3b02      	subs	r3, #2
 800034e:	4464      	add	r4, ip
 8000350:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000354:	fba0 8302 	umull	r8, r3, r0, r2
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	429c      	cmp	r4, r3
 800035e:	46c6      	mov	lr, r8
 8000360:	461e      	mov	r6, r3
 8000362:	d350      	bcc.n	8000406 <__udivmoddi4+0x286>
 8000364:	d04d      	beq.n	8000402 <__udivmoddi4+0x282>
 8000366:	b155      	cbz	r5, 800037e <__udivmoddi4+0x1fe>
 8000368:	ebba 030e 	subs.w	r3, sl, lr
 800036c:	eb64 0406 	sbc.w	r4, r4, r6
 8000370:	fa04 f707 	lsl.w	r7, r4, r7
 8000374:	40cb      	lsrs	r3, r1
 8000376:	431f      	orrs	r7, r3
 8000378:	40cc      	lsrs	r4, r1
 800037a:	e9c5 7400 	strd	r7, r4, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	e751      	b.n	8000226 <__udivmoddi4+0xa6>
 8000382:	fa0c fc02 	lsl.w	ip, ip, r2
 8000386:	f1c2 0320 	rsb	r3, r2, #32
 800038a:	40d9      	lsrs	r1, r3
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa00 fe02 	lsl.w	lr, r0, r2
 8000398:	fbb1 f0f8 	udiv	r0, r1, r8
 800039c:	fb08 1110 	mls	r1, r8, r0, r1
 80003a0:	4094      	lsls	r4, r2
 80003a2:	431c      	orrs	r4, r3
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	0c23      	lsrs	r3, r4, #16
 80003aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ae:	fb00 f107 	mul.w	r1, r0, r7
 80003b2:	4299      	cmp	r1, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x248>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 36ff 	add.w	r6, r0, #4294967295
 80003be:	d22c      	bcs.n	800041a <__udivmoddi4+0x29a>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d92a      	bls.n	800041a <__udivmoddi4+0x29a>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4463      	add	r3, ip
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	fbb3 f1f8 	udiv	r1, r3, r8
 80003ce:	fb08 3311 	mls	r3, r8, r1, r3
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d8:	fb01 f307 	mul.w	r3, r1, r7
 80003dc:	42a3      	cmp	r3, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x272>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f101 36ff 	add.w	r6, r1, #4294967295
 80003e8:	d213      	bcs.n	8000412 <__udivmoddi4+0x292>
 80003ea:	42a3      	cmp	r3, r4
 80003ec:	d911      	bls.n	8000412 <__udivmoddi4+0x292>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	1ae4      	subs	r4, r4, r3
 80003f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f8:	e73b      	b.n	8000272 <__udivmoddi4+0xf2>
 80003fa:	4604      	mov	r4, r0
 80003fc:	e6f2      	b.n	80001e4 <__udivmoddi4+0x64>
 80003fe:	4608      	mov	r0, r1
 8000400:	e708      	b.n	8000214 <__udivmoddi4+0x94>
 8000402:	45c2      	cmp	sl, r8
 8000404:	d2af      	bcs.n	8000366 <__udivmoddi4+0x1e6>
 8000406:	ebb8 0e02 	subs.w	lr, r8, r2
 800040a:	eb63 060c 	sbc.w	r6, r3, ip
 800040e:	3801      	subs	r0, #1
 8000410:	e7a9      	b.n	8000366 <__udivmoddi4+0x1e6>
 8000412:	4631      	mov	r1, r6
 8000414:	e7ed      	b.n	80003f2 <__udivmoddi4+0x272>
 8000416:	4603      	mov	r3, r0
 8000418:	e79a      	b.n	8000350 <__udivmoddi4+0x1d0>
 800041a:	4630      	mov	r0, r6
 800041c:	e7d4      	b.n	80003c8 <__udivmoddi4+0x248>
 800041e:	46b0      	mov	r8, r6
 8000420:	e781      	b.n	8000326 <__udivmoddi4+0x1a6>
 8000422:	4463      	add	r3, ip
 8000424:	3802      	subs	r0, #2
 8000426:	e74f      	b.n	80002c8 <__udivmoddi4+0x148>
 8000428:	4606      	mov	r6, r0
 800042a:	4623      	mov	r3, r4
 800042c:	4608      	mov	r0, r1
 800042e:	e711      	b.n	8000254 <__udivmoddi4+0xd4>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	e732      	b.n	800029c <__udivmoddi4+0x11c>
 8000436:	bf00      	nop

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	78fa      	ldrb	r2, [r7, #3]
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fbd0 	bl	8000bf6 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fbeb 	bl	8000c36 <SX1278_hw_SPIReadByte>
 8000460:	4603      	mov	r3, r0
 8000462:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fb88 	bl	8000b80 <SX1278_hw_SetNSS>
	return tmp;
 8000470:	7bfb      	ldrb	r3, [r7, #15]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	460b      	mov	r3, r1
 8000484:	70fb      	strb	r3, [r7, #3]
 8000486:	4613      	mov	r3, r2
 8000488:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fb75 	bl	8000b80 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	4610      	mov	r0, r2
 80004a6:	f000 fba6 	bl	8000bf6 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	78ba      	ldrb	r2, [r7, #2]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fb9f 	bl	8000bf6 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fb5e 	bl	8000b80 <SX1278_hw_SetNSS>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	607a      	str	r2, [r7, #4]
 80004d6:	461a      	mov	r2, r3
 80004d8:	460b      	mov	r3, r1
 80004da:	72fb      	strb	r3, [r7, #11]
 80004dc:	4613      	mov	r3, r2
 80004de:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004e0:	7abb      	ldrb	r3, [r7, #10]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d927      	bls.n	8000536 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fb47 	bl	8000b80 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	7afa      	ldrb	r2, [r7, #11]
 80004f8:	4611      	mov	r1, r2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fb7b 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000500:	2300      	movs	r3, #0
 8000502:	75fb      	strb	r3, [r7, #23]
 8000504:	e00c      	b.n	8000520 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6819      	ldr	r1, [r3, #0]
 800050a:	7dfb      	ldrb	r3, [r7, #23]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	18d4      	adds	r4, r2, r3
 8000510:	4608      	mov	r0, r1
 8000512:	f000 fb90 	bl	8000c36 <SX1278_hw_SPIReadByte>
 8000516:	4603      	mov	r3, r0
 8000518:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800051a:	7dfb      	ldrb	r3, [r7, #23]
 800051c:	3301      	adds	r3, #1
 800051e:	75fb      	strb	r3, [r7, #23]
 8000520:	7dfa      	ldrb	r2, [r7, #23]
 8000522:	7abb      	ldrb	r3, [r7, #10]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3ee      	bcc.n	8000506 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fb26 	bl	8000b80 <SX1278_hw_SetNSS>
 8000534:	e000      	b.n	8000538 <SX1278_SPIBurstRead+0x6c>
		return;
 8000536:	bf00      	nop
	}
}
 8000538:	371c      	adds	r7, #28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd90      	pop	{r4, r7, pc}

0800053e <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	607a      	str	r2, [r7, #4]
 8000548:	461a      	mov	r2, r3
 800054a:	460b      	mov	r3, r1
 800054c:	72fb      	strb	r3, [r7, #11]
 800054e:	4613      	mov	r3, r2
 8000550:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000552:	7abb      	ldrb	r3, [r7, #10]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d929      	bls.n	80005ac <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fb0e 	bl	8000b80 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	7afb      	ldrb	r3, [r7, #11]
 800056a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	4610      	mov	r0, r2
 8000574:	f000 fb3f 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	75fb      	strb	r3, [r7, #23]
 800057c:	e00b      	b.n	8000596 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	f000 fb33 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000590:	7dfb      	ldrb	r3, [r7, #23]
 8000592:	3301      	adds	r3, #1
 8000594:	75fb      	strb	r3, [r7, #23]
 8000596:	7dfa      	ldrb	r2, [r7, #23]
 8000598:	7abb      	ldrb	r3, [r7, #10]
 800059a:	429a      	cmp	r2, r3
 800059c:	d3ef      	bcc.n	800057e <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2101      	movs	r1, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 faeb 	bl	8000b80 <SX1278_hw_SetNSS>
 80005aa:	e000      	b.n	80005ae <SX1278_SPIBurstWrite+0x70>
		return;
 80005ac:	bf00      	nop
	}
}
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f90d 	bl	80007dc <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 fb5d 	bl	8000c82 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f917 	bl	80007fc <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	f04f 0100 	mov.w	r1, #0
 80005dc:	04d9      	lsls	r1, r3, #19
 80005de:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005e2:	04d0      	lsls	r0, r2, #19
 80005e4:	4a6f      	ldr	r2, [pc, #444]	@ (80007a4 <SX1278_config+0x1f0>)
 80005e6:	f04f 0300 	mov.w	r3, #0
 80005ea:	f7ff fdb1 	bl	8000150 <__aeabi_uldivmod>
 80005ee:	4602      	mov	r2, r0
 80005f0:	460b      	mov	r3, r1
 80005f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80005f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005fa:	f04f 0200 	mov.w	r2, #0
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	0c02      	lsrs	r2, r0, #16
 8000604:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000608:	0c0b      	lsrs	r3, r1, #16
 800060a:	b2d3      	uxtb	r3, r2
 800060c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800060e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	0a02      	lsrs	r2, r0, #8
 800061c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000620:	0a0b      	lsrs	r3, r1, #8
 8000622:	b2d3      	uxtb	r3, r2
 8000624:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000626:	7c3b      	ldrb	r3, [r7, #16]
 8000628:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800062a:	f107 020c 	add.w	r2, r7, #12
 800062e:	2303      	movs	r3, #3
 8000630:	2106      	movs	r1, #6
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ff83 	bl	800053e <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000638:	2234      	movs	r2, #52	@ 0x34
 800063a:	2139      	movs	r1, #57	@ 0x39
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ff1c 	bl	800047a <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7c1b      	ldrb	r3, [r3, #16]
 8000646:	461a      	mov	r2, r3
 8000648:	4b57      	ldr	r3, [pc, #348]	@ (80007a8 <SX1278_config+0x1f4>)
 800064a:	5c9b      	ldrb	r3, [r3, r2]
 800064c:	461a      	mov	r2, r3
 800064e:	2109      	movs	r1, #9
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff12 	bl	800047a <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000656:	220b      	movs	r2, #11
 8000658:	210b      	movs	r1, #11
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff ff0d 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000660:	2223      	movs	r2, #35	@ 0x23
 8000662:	210c      	movs	r1, #12
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ff08 	bl	800047a <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7c5b      	ldrb	r3, [r3, #17]
 800066e:	461a      	mov	r2, r3
 8000670:	4b4e      	ldr	r3, [pc, #312]	@ (80007ac <SX1278_config+0x1f8>)
 8000672:	5c9b      	ldrb	r3, [r3, r2]
 8000674:	2b06      	cmp	r3, #6
 8000676:	d147      	bne.n	8000708 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7c9b      	ldrb	r3, [r3, #18]
 800067c:	461a      	mov	r2, r3
 800067e:	4b4c      	ldr	r3, [pc, #304]	@ (80007b0 <SX1278_config+0x1fc>)
 8000680:	5c9b      	ldrb	r3, [r3, r2]
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7cdb      	ldrb	r3, [r3, #19]
 800068a:	4619      	mov	r1, r3
 800068c:	4b49      	ldr	r3, [pc, #292]	@ (80007b4 <SX1278_config+0x200>)
 800068e:	5c5b      	ldrb	r3, [r3, r1]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000698:	3301      	adds	r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	211d      	movs	r1, #29
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff feea 	bl	800047a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7c5b      	ldrb	r3, [r3, #17]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b3f      	ldr	r3, [pc, #252]	@ (80007ac <SX1278_config+0x1f8>)
 80006ae:	5c9b      	ldrb	r3, [r3, r2]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7d1b      	ldrb	r3, [r3, #20]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4b3f      	ldr	r3, [pc, #252]	@ (80007b8 <SX1278_config+0x204>)
 80006bc:	5c5b      	ldrb	r3, [r3, r1]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4413      	add	r3, r2
 80006c4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006c6:	3303      	adds	r3, #3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	211e      	movs	r1, #30
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff fed3 	bl	800047a <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006d4:	2131      	movs	r1, #49	@ 0x31
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff feb0 	bl	800043c <SX1278_SPIRead>
 80006dc:	4603      	mov	r3, r0
 80006de:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	f023 0307 	bic.w	r3, r3, #7
 80006e6:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f043 0305 	orr.w	r3, r3, #5
 80006ee:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	461a      	mov	r2, r3
 80006f4:	2131      	movs	r1, #49	@ 0x31
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff febf 	bl	800047a <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80006fc:	220c      	movs	r2, #12
 80006fe:	2137      	movs	r1, #55	@ 0x37
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff feba 	bl	800047a <SX1278_SPIWrite>
 8000706:	e029      	b.n	800075c <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7c9b      	ldrb	r3, [r3, #18]
 800070c:	461a      	mov	r2, r3
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <SX1278_config+0x1fc>)
 8000710:	5c9b      	ldrb	r3, [r3, r2]
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	7cdb      	ldrb	r3, [r3, #19]
 800071a:	4619      	mov	r1, r3
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <SX1278_config+0x200>)
 800071e:	5c5b      	ldrb	r3, [r3, r1]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000724:	4413      	add	r3, r2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	211d      	movs	r1, #29
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fea4 	bl	800047a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7c5b      	ldrb	r3, [r3, #17]
 8000736:	461a      	mov	r2, r3
 8000738:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <SX1278_config+0x1f8>)
 800073a:	5c9b      	ldrb	r3, [r3, r2]
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7d1b      	ldrb	r3, [r3, #20]
 8000744:	4619      	mov	r1, r3
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <SX1278_config+0x204>)
 8000748:	5c5b      	ldrb	r3, [r3, r1]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	211e      	movs	r1, #30
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fe8f 	bl	800047a <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800075c:	2204      	movs	r2, #4
 800075e:	2126      	movs	r1, #38	@ 0x26
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fe8a 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000766:	2208      	movs	r2, #8
 8000768:	211f      	movs	r1, #31
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fe85 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe80 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800077a:	2208      	movs	r2, #8
 800077c:	2121      	movs	r1, #33	@ 0x21
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe7b 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000784:	2201      	movs	r2, #1
 8000786:	2141      	movs	r1, #65	@ 0x41
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fe76 	bl	800047a <SX1278_SPIWrite>
	module->readBytes = 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 f810 	bl	80007bc <SX1278_standby>
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	01e84800 	.word	0x01e84800
 80007a8:	08003ae4 	.word	0x08003ae4
 80007ac:	08003ae8 	.word	0x08003ae8
 80007b0:	08003af0 	.word	0x08003af0
 80007b4:	08003afc 	.word	0x08003afc
 80007b8:	08003b00 	.word	0x08003b00

080007bc <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007c4:	2209      	movs	r2, #9
 80007c6:	2101      	movs	r1, #1
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff fe56 	bl	800047a <SX1278_SPIWrite>
	module->status = STANDBY;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2201      	movs	r2, #1
 80007d2:	759a      	strb	r2, [r3, #22]
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80007e4:	2208      	movs	r2, #8
 80007e6:	2101      	movs	r1, #1
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fe46 	bl	800047a <SX1278_SPIWrite>
	module->status = SLEEP;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	759a      	strb	r2, [r3, #22]
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000804:	2288      	movs	r2, #136	@ 0x88
 8000806:	2101      	movs	r1, #1
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff fe36 	bl	800047a <SX1278_SPIWrite>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800081e:	22ff      	movs	r2, #255	@ 0xff
 8000820:	2112      	movs	r1, #18
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff fe29 	bl	800047a <SX1278_SPIWrite>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	460b      	mov	r3, r1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	7afa      	ldrb	r2, [r7, #11]
 8000842:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f7ff feb5 	bl	80005b4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800084a:	2284      	movs	r2, #132	@ 0x84
 800084c:	214d      	movs	r1, #77	@ 0x4d
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f7ff fe13 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000854:	22ff      	movs	r2, #255	@ 0xff
 8000856:	2124      	movs	r1, #36	@ 0x24
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff fe0e 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800085e:	2201      	movs	r2, #1
 8000860:	2140      	movs	r1, #64	@ 0x40
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f7ff fe09 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000868:	223f      	movs	r2, #63	@ 0x3f
 800086a:	2111      	movs	r1, #17
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff fe04 	bl	800047a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f7ff ffcf 	bl	8000816 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000878:	7afb      	ldrb	r3, [r7, #11]
 800087a:	461a      	mov	r2, r3
 800087c:	2122      	movs	r1, #34	@ 0x22
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fdfb 	bl	800047a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000884:	210f      	movs	r1, #15
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff fdd8 	bl	800043c <SX1278_SPIRead>
 800088c:	4603      	mov	r3, r0
 800088e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	461a      	mov	r2, r3
 8000894:	210d      	movs	r1, #13
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff fdef 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800089c:	228d      	movs	r2, #141	@ 0x8d
 800089e:	2101      	movs	r1, #1
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fdea 	bl	800047a <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008ae:	2118      	movs	r1, #24
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff fdc3 	bl	800043c <SX1278_SPIRead>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d104      	bne.n	80008ca <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2203      	movs	r2, #3
 80008c4:	759a      	strb	r2, [r3, #22]
			return 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e013      	b.n	80008f2 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d109      	bne.n	80008ea <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f967 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff fe67 	bl	80005b4 <SX1278_config>
			return 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e003      	b.n	80008f2 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 f9c9 	bl	8000c82 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008f0:	e7dd      	b.n	80008ae <SX1278_LoRaEntryRx+0x7e>
	}
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f9c6 	bl	8000c98 <SX1278_hw_GetDIO0>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d030      	beq.n	8000974 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3317      	adds	r3, #23
 8000916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fc3f 	bl	80031a0 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000922:	2110      	movs	r1, #16
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fd89 	bl	800043c <SX1278_SPIRead>
 800092a:	4603      	mov	r3, r0
 800092c:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	461a      	mov	r2, r3
 8000932:	210d      	movs	r1, #13
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fda0 	bl	800047a <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7c5b      	ldrb	r3, [r3, #17]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7d5b      	ldrb	r3, [r3, #21]
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e005      	b.n	8000956 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800094a:	2113      	movs	r1, #19
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fd75 	bl	800043c <SX1278_SPIRead>
 8000952:	4603      	mov	r3, r0
 8000954:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f103 0217 	add.w	r2, r3, #23
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	2100      	movs	r1, #0
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fdb3 	bl	80004cc <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff51 	bl	8000816 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	460b      	mov	r3, r1
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	7afa      	ldrb	r2, [r7, #11]
 8000994:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f7ff fe0c 	bl	80005b4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800099c:	2287      	movs	r2, #135	@ 0x87
 800099e:	214d      	movs	r1, #77	@ 0x4d
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff fd6a 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009a6:	2200      	movs	r2, #0
 80009a8:	2124      	movs	r1, #36	@ 0x24
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fd65 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009b0:	2241      	movs	r2, #65	@ 0x41
 80009b2:	2140      	movs	r1, #64	@ 0x40
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fd60 	bl	800047a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f7ff ff2b 	bl	8000816 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009c0:	22f7      	movs	r2, #247	@ 0xf7
 80009c2:	2111      	movs	r1, #17
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f7ff fd58 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009ca:	7afb      	ldrb	r3, [r7, #11]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2122      	movs	r1, #34	@ 0x22
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fd52 	bl	800047a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009d6:	210e      	movs	r1, #14
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fd2f 	bl	800043c <SX1278_SPIRead>
 80009de:	4603      	mov	r3, r0
 80009e0:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	461a      	mov	r2, r3
 80009e6:	210d      	movs	r1, #13
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f7ff fd46 	bl	800047a <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80009ee:	2122      	movs	r1, #34	@ 0x22
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff fd23 	bl	800043c <SX1278_SPIRead>
 80009f6:	4603      	mov	r3, r0
 80009f8:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80009fa:	7dba      	ldrb	r2, [r7, #22]
 80009fc:	7afb      	ldrb	r3, [r7, #11]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d104      	bne.n	8000a0c <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e00e      	b.n	8000a2a <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1ea      	bne.n	80009ee <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f8c6 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff fdc6 	bl	80005b4 <SX1278_config>
			return 0;
 8000a28:	2300      	movs	r3, #0
		}
	}
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	2100      	movs	r1, #0
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fd78 	bl	800053e <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a4e:	228b      	movs	r2, #139	@ 0x8b
 8000a50:	2101      	movs	r1, #1
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fd11 	bl	800047a <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f91b 	bl	8000c98 <SX1278_hw_GetDIO0>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00b      	beq.n	8000a80 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a68:	2112      	movs	r1, #18
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff fce6 	bl	800043c <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fed0 	bl	8000816 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fea0 	bl	80007bc <SX1278_standby>
			return 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e013      	b.n	8000aa8 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d109      	bne.n	8000aa0 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f88c 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff fd8c 	bl	80005b4 <SX1278_config>
			return 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e003      	b.n	8000aa8 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 f8ee 	bl	8000c82 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000aa6:	e7d7      	b.n	8000a58 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f848 	bl	8000b56 <SX1278_hw_init>
	module->frequency = frequency;
 8000ac6:	68f9      	ldr	r1, [r7, #12]
 8000ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000acc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	7e3a      	ldrb	r2, [r7, #24]
 8000ad4:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	7f3a      	ldrb	r2, [r7, #28]
 8000ada:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ae2:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000aea:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000af2:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000afa:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff fd59 	bl	80005b4 <SX1278_config>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	4613      	mov	r3, r2
 8000b16:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d003      	beq.n	8000b2c <SX1278_read+0x22>
		length = module->readBytes;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b2a:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3317      	adds	r3, #23
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	4619      	mov	r1, r3
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f002 fb67 	bl	8003208 <memcpy>
	rxBuf[length] = '\0';
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	4413      	add	r3, r2
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000b5e:	2101      	movs	r1, #1
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f80d 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6858      	ldr	r0, [r3, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	4619      	mov	r1, r3
 8000b74:	f001 f84f 	bl	8001c16 <HAL_GPIO_WritePin>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6958      	ldr	r0, [r3, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	b299      	uxth	r1, r3
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	f001 f838 	bl	8001c16 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffe1 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6858      	ldr	r0, [r3, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f001 f823 	bl	8001c16 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 f856 	bl	8000c82 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6858      	ldr	r0, [r3, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	2201      	movs	r2, #1
 8000be2:	4619      	mov	r1, r3
 8000be4:	f001 f817 	bl	8001c16 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000be8:	2064      	movs	r0, #100	@ 0x64
 8000bea:	f000 f84a 	bl	8000c82 <SX1278_hw_DelayMs>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ffbb 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6998      	ldr	r0, [r3, #24]
 8000c0e:	1cf9      	adds	r1, r7, #3
 8000c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c14:	2201      	movs	r2, #1
 8000c16:	f001 fe11 	bl	800283c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c1a:	bf00      	nop
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 f8f8 	bl	8002e16 <HAL_SPI_GetState>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d1f7      	bne.n	8000c1c <SX1278_hw_SPICommand+0x26>
		;
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af02      	add	r7, sp, #8
 8000c3c:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff99 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6998      	ldr	r0, [r3, #24]
 8000c52:	f107 020e 	add.w	r2, r7, #14
 8000c56:	f107 010f 	add.w	r1, r7, #15
 8000c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	f001 ff2f 	bl	8002ac4 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c66:	bf00      	nop
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 f8d2 	bl	8002e16 <HAL_SPI_GetState>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d1f7      	bne.n	8000c68 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 fcf6 	bl	800167c <HAL_Delay>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	4619      	mov	r1, r3
 8000cac:	4610      	mov	r0, r2
 8000cae:	f000 ff9b 	bl	8001be8 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	bf0c      	ite	eq
 8000cb8:	2301      	moveq	r3, #1
 8000cba:	2300      	movne	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cdc:	4b42      	ldr	r3, [pc, #264]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a41      	ldr	r2, [pc, #260]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b3f      	ldr	r3, [pc, #252]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a3b      	ldr	r2, [pc, #236]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000cfa:	f043 0320 	orr.w	r3, r3, #32
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b39      	ldr	r3, [pc, #228]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0320 	and.w	r3, r3, #32
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4b36      	ldr	r3, [pc, #216]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a35      	ldr	r2, [pc, #212]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b33      	ldr	r3, [pc, #204]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b30      	ldr	r3, [pc, #192]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a2f      	ldr	r2, [pc, #188]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <MX_GPIO_Init+0x120>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d42:	482a      	ldr	r0, [pc, #168]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d44:	f000 ff67 	bl	8001c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|ESP_01S_RST_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000d4e:	4828      	ldr	r0, [pc, #160]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000d50:	f000 ff61 	bl	8001c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2101      	movs	r1, #1
 8000d58:	4826      	ldr	r0, [pc, #152]	@ (8000df4 <MX_GPIO_Init+0x12c>)
 8000d5a:	f000 ff5c 	bl	8001c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4619      	mov	r1, r3
 8000d76:	481d      	ldr	r0, [pc, #116]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d78:	f000 fdb2 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin ESP_01S_RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|ESP_01S_RST_Pin;
 8000d7c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4619      	mov	r1, r3
 8000d94:	4816      	ldr	r0, [pc, #88]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000d96:	f000 fda3 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4619      	mov	r1, r3
 8000db0:	4810      	ldr	r0, [pc, #64]	@ (8000df4 <MX_GPIO_Init+0x12c>)
 8000db2:	f000 fd95 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000db6:	2302      	movs	r3, #2
 8000db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <MX_GPIO_Init+0x130>)
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <MX_GPIO_Init+0x12c>)
 8000dca:	f000 fd89 	bl	80018e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2007      	movs	r0, #7
 8000dd4:	f000 fd4d 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000dd8:	2007      	movs	r0, #7
 8000dda:	f000 fd66 	bl	80018aa <HAL_NVIC_EnableIRQ>

}
 8000dde:	bf00      	nop
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40011000 	.word	0x40011000
 8000df0:	40010800 	.word	0x40010800
 8000df4:	40010c00 	.word	0x40010c00
 8000df8:	10110000 	.word	0x10110000

08000dfc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e02:	4a13      	ldr	r2, [pc, #76]	@ (8000e50 <MX_I2C1_Init+0x54>)
 8000e04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e08:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <MX_I2C1_Init+0x58>)
 8000e0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e3a:	f000 ff27 	bl	8001c8c <HAL_I2C_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e44:	f000 f9f3 	bl	800122e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000007c 	.word	0x2000007c
 8000e50:	40005400 	.word	0x40005400
 8000e54:	000186a0 	.word	0x000186a0

08000e58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <HAL_I2C_MspInit+0x70>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d123      	bne.n	8000ec0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <HAL_I2C_MspInit+0x74>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a13      	ldr	r2, [pc, #76]	@ (8000ecc <HAL_I2C_MspInit+0x74>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_I2C_MspInit+0x74>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 8000e90:	23c0      	movs	r3, #192	@ 0xc0
 8000e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e94:	2312      	movs	r3, #18
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <HAL_I2C_MspInit+0x78>)
 8000ea4:	f000 fd1c 	bl	80018e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <HAL_I2C_MspInit+0x74>)
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	4a07      	ldr	r2, [pc, #28]	@ (8000ecc <HAL_I2C_MspInit+0x74>)
 8000eae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eb2:	61d3      	str	r3, [r2, #28]
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <HAL_I2C_MspInit+0x74>)
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <clearTx>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clearTx(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	memset(LoRaTxBuffer,0,sizeof(LoRaTxBuffer));
 8000ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000edc:	2100      	movs	r1, #0
 8000ede:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <clearTx+0x14>)
 8000ee0:	f002 f95e 	bl	80031a0 <memset>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000210 	.word	0x20000210

08000eec <clearRx>:

void clearRx(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	memset(LoRaRxBuffer,0,sizeof(LoRaTxBuffer));
 8000ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <clearRx+0x14>)
 8000ef8:	f002 f952 	bl	80031a0 <memset>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000410 	.word	0x20000410

08000f04 <LoRaSetRxMode>:
// Puts LoRa module in receive mode
// -- LED should be off --
void LoRaSetRxMode(){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	clearRx();
 8000f08:	f7ff fff0 	bl	8000eec <clearRx>
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000f0c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f10:	2110      	movs	r1, #16
 8000f12:	4808      	ldr	r0, [pc, #32]	@ (8000f34 <LoRaSetRxMode+0x30>)
 8000f14:	f7ff fc8c 	bl	8000830 <SX1278_LoRaEntryRx>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <LoRaSetRxMode+0x34>)
 8000f1c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <LoRaSetRxMode+0x38>)
 8000f26:	f000 fe76 	bl	8001c16 <HAL_GPIO_WritePin>
	master = 1;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <LoRaSetRxMode+0x3c>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000f0 	.word	0x200000f0
 8000f38:	2000020c 	.word	0x2000020c
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	20000208 	.word	0x20000208

08000f44 <LoRaSetTxMode>:

// Puts LoRa module in transmit mode
// -- LED should be on --
void LoRaSetTxMode(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	clearTx();
 8000f48:	f7ff ffc4 	bl	8000ed4 <clearTx>
	ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000f4c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f50:	2110      	movs	r1, #16
 8000f52:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <LoRaSetTxMode+0x30>)
 8000f54:	f7ff fd15 	bl	8000982 <SX1278_LoRaEntryTx>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a07      	ldr	r2, [pc, #28]	@ (8000f78 <LoRaSetTxMode+0x34>)
 8000f5c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f64:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <LoRaSetTxMode+0x38>)
 8000f66:	f000 fe56 	bl	8001c16 <HAL_GPIO_WritePin>
	master = 0;
 8000f6a:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <LoRaSetTxMode+0x3c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]

}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000f0 	.word	0x200000f0
 8000f78:	2000020c 	.word	0x2000020c
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	20000208 	.word	0x20000208
 8000f84:	00000000 	.word	0x00000000

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 fb13 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f907 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f7ff fe97 	bl	8000cc8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f9a:	f000 f94f 	bl	800123c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f9e:	f000 fa6f 	bl	8001480 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fa2:	f7ff ff2b 	bl	8000dfc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // ===== LoRa =====
  master = 1;
 8000fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8001150 <main+0x1c8>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

	control_val++;
 8000fac:	4b69      	ldr	r3, [pc, #420]	@ (8001154 <main+0x1cc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a68      	ldr	r2, [pc, #416]	@ (8001154 <main+0x1cc>)
 8000fb4:	6013      	str	r3, [r2, #0]
	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000fb6:	4b68      	ldr	r3, [pc, #416]	@ (8001158 <main+0x1d0>)
 8000fb8:	4a68      	ldr	r2, [pc, #416]	@ (800115c <main+0x1d4>)
 8000fba:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8000fbc:	4b66      	ldr	r3, [pc, #408]	@ (8001158 <main+0x1d0>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000fc2:	4b65      	ldr	r3, [pc, #404]	@ (8001158 <main+0x1d0>)
 8000fc4:	4a66      	ldr	r2, [pc, #408]	@ (8001160 <main+0x1d8>)
 8000fc6:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8000fc8:	4b63      	ldr	r3, [pc, #396]	@ (8001158 <main+0x1d0>)
 8000fca:	2210      	movs	r2, #16
 8000fcc:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RST_GPIO_Port;
 8000fce:	4b62      	ldr	r3, [pc, #392]	@ (8001158 <main+0x1d0>)
 8000fd0:	4a62      	ldr	r2, [pc, #392]	@ (800115c <main+0x1d4>)
 8000fd2:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RST_Pin;
 8000fd4:	4b60      	ldr	r3, [pc, #384]	@ (8001158 <main+0x1d0>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8000fda:	4b5f      	ldr	r3, [pc, #380]	@ (8001158 <main+0x1d0>)
 8000fdc:	4a61      	ldr	r2, [pc, #388]	@ (8001164 <main+0x1dc>)
 8000fde:	619a      	str	r2, [r3, #24]

	SX1278.hw = &SX1278_hw;
 8000fe0:	4b61      	ldr	r3, [pc, #388]	@ (8001168 <main+0x1e0>)
 8000fe2:	4a5d      	ldr	r2, [pc, #372]	@ (8001158 <main+0x1d0>)
 8000fe4:	601a      	str	r2, [r3, #0]

	control_val++;
 8000fe6:	4b5b      	ldr	r3, [pc, #364]	@ (8001154 <main+0x1cc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	4a59      	ldr	r2, [pc, #356]	@ (8001154 <main+0x1cc>)
 8000fee:	6013      	str	r3, [r2, #0]
	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	9305      	str	r3, [sp, #20]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9304      	str	r3, [sp, #16]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	9303      	str	r3, [sp, #12]
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	9302      	str	r3, [sp, #8]
 8001000:	2301      	movs	r3, #1
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	2301      	movs	r3, #1
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	a34f      	add	r3, pc, #316	@ (adr r3, 8001148 <main+0x1c0>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	4856      	ldr	r0, [pc, #344]	@ (8001168 <main+0x1e0>)
 8001010:	f7ff fd4e 	bl	8000ab0 <SX1278_init>
	SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
	control_val++;
 8001014:	4b4f      	ldr	r3, [pc, #316]	@ (8001154 <main+0x1cc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a4e      	ldr	r2, [pc, #312]	@ (8001154 <main+0x1cc>)
 800101c:	6013      	str	r3, [r2, #0]

  LoRaSetTxMode();
 800101e:	f7ff ff91 	bl	8000f44 <LoRaSetTxMode>
  control_val++;
 8001022:	4b4c      	ldr	r3, [pc, #304]	@ (8001154 <main+0x1cc>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a4a      	ldr	r2, [pc, #296]	@ (8001154 <main+0x1cc>)
 800102a:	6013      	str	r3, [r2, #0]

  timeout = 10;
 800102c:	4b4f      	ldr	r3, [pc, #316]	@ (800116c <main+0x1e4>)
 800102e:	220a      	movs	r2, #10
 8001030:	601a      	str	r2, [r3, #0]
  reverse_mode_time = 5;
 8001032:	4b4f      	ldr	r3, [pc, #316]	@ (8001170 <main+0x1e8>)
 8001034:	2205      	movs	r2, #5
 8001036:	601a      	str	r2, [r3, #0]

  current_time = HAL_GetTick();
 8001038:	f000 fb16 	bl	8001668 <HAL_GetTick>
 800103c:	4603      	mov	r3, r0
 800103e:	4a4d      	ldr	r2, [pc, #308]	@ (8001174 <main+0x1ec>)
 8001040:	6013      	str	r3, [r2, #0]
  timestamp_s1 = current_time;
 8001042:	4b4c      	ldr	r3, [pc, #304]	@ (8001174 <main+0x1ec>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a4c      	ldr	r2, [pc, #304]	@ (8001178 <main+0x1f0>)
 8001048:	6013      	str	r3, [r2, #0]
  timestamp_s2 = current_time;
 800104a:	4b4a      	ldr	r3, [pc, #296]	@ (8001174 <main+0x1ec>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a4b      	ldr	r2, [pc, #300]	@ (800117c <main+0x1f4>)
 8001050:	6013      	str	r3, [r2, #0]

  sensor_2_wakeup = sensor_2_timeout + current_time;
 8001052:	4b4b      	ldr	r3, [pc, #300]	@ (8001180 <main+0x1f8>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b47      	ldr	r3, [pc, #284]	@ (8001174 <main+0x1ec>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a49      	ldr	r2, [pc, #292]	@ (8001184 <main+0x1fc>)
 800105e:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  current_time = HAL_GetTick();
 8001060:	f000 fb02 	bl	8001668 <HAL_GetTick>
 8001064:	4603      	mov	r3, r0
 8001066:	4a43      	ldr	r2, [pc, #268]	@ (8001174 <main+0x1ec>)
 8001068:	6013      	str	r3, [r2, #0]

	  // sum of timestamp + timout timer
	  if((sensor_2_wakeup<=current_time)){
 800106a:	4b46      	ldr	r3, [pc, #280]	@ (8001184 <main+0x1fc>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4b41      	ldr	r3, [pc, #260]	@ (8001174 <main+0x1ec>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d8f4      	bhi.n	8001060 <main+0xd8>

		  // Set Timestamp and wakeup value for another data request
		  timestamp_s2 = HAL_GetTick();
 8001076:	f000 faf7 	bl	8001668 <HAL_GetTick>
 800107a:	4603      	mov	r3, r0
 800107c:	4a3f      	ldr	r2, [pc, #252]	@ (800117c <main+0x1f4>)
 800107e:	6013      	str	r3, [r2, #0]
		  sensor_2_wakeup = sensor_2_timeout + HAL_GetTick();
 8001080:	f000 faf2 	bl	8001668 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	4b3e      	ldr	r3, [pc, #248]	@ (8001180 <main+0x1f8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a3d      	ldr	r2, [pc, #244]	@ (8001184 <main+0x1fc>)
 800108e:	6013      	str	r3, [r2, #0]

		  // Set counter for sending info to 5sec

		  inside_counter = HAL_GetTick() + 5000;
 8001090:	f000 faea 	bl	8001668 <HAL_GetTick>
 8001094:	4603      	mov	r3, r0
 8001096:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800109a:	3308      	adds	r3, #8
 800109c:	4a3a      	ldr	r2, [pc, #232]	@ (8001188 <main+0x200>)
 800109e:	6013      	str	r3, [r2, #0]

		  // Test 2 - single data send without counter
		  // Send info to sensor_1
		  //
		  tx_len = sprintf(LoRaTxBuffer, "%s,%d","S1", 3);
 80010a0:	2303      	movs	r3, #3
 80010a2:	4a3a      	ldr	r2, [pc, #232]	@ (800118c <main+0x204>)
 80010a4:	493a      	ldr	r1, [pc, #232]	@ (8001190 <main+0x208>)
 80010a6:	483b      	ldr	r0, [pc, #236]	@ (8001194 <main+0x20c>)
 80010a8:	f002 f85a 	bl	8003160 <siprintf>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001198 <main+0x210>)
 80010b0:	6013      	str	r3, [r2, #0]
		  ret = SX1278_LoRaEntryTx(&SX1278, tx_len, 1000);
 80010b2:	4b39      	ldr	r3, [pc, #228]	@ (8001198 <main+0x210>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010bc:	4619      	mov	r1, r3
 80010be:	482a      	ldr	r0, [pc, #168]	@ (8001168 <main+0x1e0>)
 80010c0:	f7ff fc5f 	bl	8000982 <SX1278_LoRaEntryTx>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a35      	ldr	r2, [pc, #212]	@ (800119c <main+0x214>)
 80010c8:	6013      	str	r3, [r2, #0]
		  ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) LoRaTxBuffer,
 80010ca:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <main+0x210>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d4:	492f      	ldr	r1, [pc, #188]	@ (8001194 <main+0x20c>)
 80010d6:	4824      	ldr	r0, [pc, #144]	@ (8001168 <main+0x1e0>)
 80010d8:	f7ff fcab 	bl	8000a32 <SX1278_LoRaTxPacket>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a2f      	ldr	r2, [pc, #188]	@ (800119c <main+0x214>)
 80010e0:	6013      	str	r3, [r2, #0]
												tx_len, 1000);

		  LoRaSetRxMode();
 80010e2:	f7ff ff0f 	bl	8000f04 <LoRaSetRxMode>

		  HAL_Delay(1000);
 80010e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ea:	f000 fac7 	bl	800167c <HAL_Delay>


		  // For 5 sec wait for value from sensor
		  inside_counter = HAL_GetTick()+5000;
 80010ee:	f000 fabb 	bl	8001668 <HAL_GetTick>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80010f8:	3308      	adds	r3, #8
 80010fa:	4a23      	ldr	r2, [pc, #140]	@ (8001188 <main+0x200>)
 80010fc:	6013      	str	r3, [r2, #0]

		  while(HAL_GetTick()<=inside_counter){
 80010fe:	e017      	b.n	8001130 <main+0x1a8>
			  ret = SX1278_LoRaRxPacket(&SX1278);		// ret gives length of received data
 8001100:	4819      	ldr	r0, [pc, #100]	@ (8001168 <main+0x1e0>)
 8001102:	f7ff fbfa 	bl	80008fa <SX1278_LoRaRxPacket>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	4b24      	ldr	r3, [pc, #144]	@ (800119c <main+0x214>)
 800110c:	601a      	str	r2, [r3, #0]
			  if(ret > 0){
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <main+0x214>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	dd0c      	ble.n	8001130 <main+0x1a8>
				  SX1278_read(&SX1278, (uint8_t*) LoRaRxBuffer, ret);
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <main+0x214>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	4920      	ldr	r1, [pc, #128]	@ (80011a0 <main+0x218>)
 8001120:	4811      	ldr	r0, [pc, #68]	@ (8001168 <main+0x1e0>)
 8001122:	f7ff fcf2 	bl	8000b0a <SX1278_read>
				  control_val++;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <main+0x1cc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <main+0x1cc>)
 800112e:	6013      	str	r3, [r2, #0]
		  while(HAL_GetTick()<=inside_counter){
 8001130:	f000 fa9a 	bl	8001668 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <main+0x200>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d9e0      	bls.n	8001100 <main+0x178>
			  }
		  }



		  LoRaSetTxMode();
 800113e:	f7ff ff01 	bl	8000f44 <LoRaSetTxMode>
	  current_time = HAL_GetTick();
 8001142:	e78d      	b.n	8001060 <main+0xd8>
 8001144:	f3af 8000 	nop.w
 8001148:	19de5080 	.word	0x19de5080
 800114c:	00000000 	.word	0x00000000
 8001150:	20000208 	.word	0x20000208
 8001154:	2000061c 	.word	0x2000061c
 8001158:	200000d0 	.word	0x200000d0
 800115c:	40010c00 	.word	0x40010c00
 8001160:	40010800 	.word	0x40010800
 8001164:	20000634 	.word	0x20000634
 8001168:	200000f0 	.word	0x200000f0
 800116c:	20000614 	.word	0x20000614
 8001170:	20000618 	.word	0x20000618
 8001174:	20000620 	.word	0x20000620
 8001178:	20000624 	.word	0x20000624
 800117c:	20000628 	.word	0x20000628
 8001180:	20000000 	.word	0x20000000
 8001184:	2000062c 	.word	0x2000062c
 8001188:	20000630 	.word	0x20000630
 800118c:	08003ad8 	.word	0x08003ad8
 8001190:	08003adc 	.word	0x08003adc
 8001194:	20000210 	.word	0x20000210
 8001198:	20000610 	.word	0x20000610
 800119c:	2000020c 	.word	0x2000020c
 80011a0:	20000410 	.word	0x20000410

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	@ 0x40
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0318 	add.w	r3, r7, #24
 80011ae:	2228      	movs	r2, #40	@ 0x28
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fff4 	bl	80031a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2302      	movs	r3, #2
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fe91 	bl	8001f14 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011f8:	f000 f819 	bl	800122e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001208:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800120c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2102      	movs	r1, #2
 8001216:	4618      	mov	r0, r3
 8001218:	f001 f8fe 	bl	8002418 <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001222:	f000 f804 	bl	800122e <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3740      	adds	r7, #64	@ 0x40
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001232:	b672      	cpsid	i
}
 8001234:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001236:	bf00      	nop
 8001238:	e7fd      	b.n	8001236 <Error_Handler+0x8>
	...

0800123c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001242:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <MX_SPI1_Init+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001248:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800124c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_SPI1_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800126c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001270:	2210      	movs	r2, #16
 8001272:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001288:	220a      	movs	r2, #10
 800128a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_SPI1_Init+0x64>)
 800128e:	f001 fa51 	bl	8002734 <HAL_SPI_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001298:	f7ff ffc9 	bl	800122e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000634 	.word	0x20000634
 80012a4:	40013000 	.word	0x40013000

080012a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001330 <HAL_SPI_MspInit+0x88>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d12f      	bne.n	8001328 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a19      	ldr	r2, [pc, #100]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a13      	ldr	r2, [pc, #76]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_SPI_MspInit+0x8c>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012f8:	23a0      	movs	r3, #160	@ 0xa0
 80012fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	480b      	ldr	r0, [pc, #44]	@ (8001338 <HAL_SPI_MspInit+0x90>)
 800130c:	f000 fae8 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001310:	2340      	movs	r3, #64	@ 0x40
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <HAL_SPI_MspInit+0x90>)
 8001324:	f000 fadc 	bl	80018e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40013000 	.word	0x40013000
 8001334:	40021000 	.word	0x40021000
 8001338:	40010800 	.word	0x40010800

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_MspInit+0x5c>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <HAL_MspInit+0x5c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_MspInit+0x5c>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_MspInit+0x5c>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <HAL_MspInit+0x5c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_MspInit+0x5c>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <HAL_MspInit+0x60>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <HAL_MspInit+0x60>)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <NMI_Handler+0x4>

080013a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <MemManage_Handler+0x4>

080013b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 f928 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80013fc:	2002      	movs	r0, #2
 80013fe:	f000 fc23 	bl	8001c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f001 feba 	bl	80031b0 <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	@ (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20005000 	.word	0x20005000
 8001468:	00000400 	.word	0x00000400
 800146c:	2000068c 	.word	0x2000068c
 8001470:	20000828 	.word	0x20000828

08001474 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <MX_USART1_UART_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_USART1_UART_Init+0x4c>)
 80014b8:	f001 fd73 	bl	8002fa2 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014c2:	f7ff feb4 	bl	800122e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000690 	.word	0x20000690
 80014d0:	40013800 	.word	0x40013800

080014d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <HAL_UART_MspInit+0x8c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d131      	bne.n	8001558 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_UART_MspInit+0x90>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001564 <HAL_UART_MspInit+0x90>)
 80014fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_UART_MspInit+0x90>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_UART_MspInit+0x90>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <HAL_UART_MspInit+0x90>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_UART_MspInit+0x90>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    */
    GPIO_InitStruct.Pin = ESP_01S_TX_Pin;
 8001524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001528:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESP_01S_TX_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	4619      	mov	r1, r3
 8001538:	480b      	ldr	r0, [pc, #44]	@ (8001568 <HAL_UART_MspInit+0x94>)
 800153a:	f000 f9d1 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_01S_RX_Pin|RTC_ALARM_Pin;
 800153e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <HAL_UART_MspInit+0x94>)
 8001554:	f000 f9c4 	bl	80018e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40013800 	.word	0x40013800
 8001564:	40021000 	.word	0x40021000
 8001568:	40010800 	.word	0x40010800

0800156c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800156c:	f7ff ff82 	bl	8001474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480b      	ldr	r0, [pc, #44]	@ (80015a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001572:	490c      	ldr	r1, [pc, #48]	@ (80015a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001574:	4a0c      	ldr	r2, [pc, #48]	@ (80015a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001588:	4c09      	ldr	r4, [pc, #36]	@ (80015b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f001 fe11 	bl	80031bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159a:	f7ff fcf5 	bl	8000f88 <main>
  bx lr
 800159e:	4770      	bx	lr
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80015a8:	08003b74 	.word	0x08003b74
  ldr r2, =_sbss
 80015ac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80015b0:	20000824 	.word	0x20000824

080015b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_2_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_Init+0x28>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_Init+0x28>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f947 	bl	800185c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff feb2 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f95f 	bl	80018c6 <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f927 	bl	8001872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000004 	.word	0x20000004
 800163c:	2000000c 	.word	0x2000000c
 8001640:	20000008 	.word	0x20000008

08001644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_IncTick+0x1c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_IncTick+0x20>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a03      	ldr	r2, [pc, #12]	@ (8001664 <HAL_IncTick+0x20>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	2000000c 	.word	0x2000000c
 8001664:	200006d8 	.word	0x200006d8

08001668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b02      	ldr	r3, [pc, #8]	@ (8001678 <HAL_GetTick+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	200006d8 	.word	0x200006d8

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff fff0 	bl	8001668 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffe0 	bl	8001668 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000000c 	.word	0x2000000c

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4906      	ldr	r1, [pc, #24]	@ (800175c <__NVIC_EnableIRQ+0x34>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	@ (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	@ (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	@ 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001828:	d301      	bcc.n	800182e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2301      	movs	r3, #1
 800182c:	e00f      	b.n	800184e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <SysTick_Config+0x40>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001836:	210f      	movs	r1, #15
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f7ff ff90 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <SysTick_Config+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <SysTick_Config+0x40>)
 8001848:	2207      	movs	r2, #7
 800184a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	e000e010 	.word	0xe000e010

0800185c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff2d 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001884:	f7ff ff42 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7ff ff90 	bl	80017b4 <NVIC_EncodePriority>
 8001894:	4602      	mov	r2, r0
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff5f 	bl	8001760 <__NVIC_SetPriority>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff35 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffa2 	bl	8001818 <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b08b      	sub	sp, #44	@ 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e169      	b.n	8001bc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018f4:	2201      	movs	r2, #1
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8158 	bne.w	8001bc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4a9a      	ldr	r2, [pc, #616]	@ (8001b80 <HAL_GPIO_Init+0x2a0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d05e      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800191c:	4a98      	ldr	r2, [pc, #608]	@ (8001b80 <HAL_GPIO_Init+0x2a0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d875      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001922:	4a98      	ldr	r2, [pc, #608]	@ (8001b84 <HAL_GPIO_Init+0x2a4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d058      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001928:	4a96      	ldr	r2, [pc, #600]	@ (8001b84 <HAL_GPIO_Init+0x2a4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d86f      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800192e:	4a96      	ldr	r2, [pc, #600]	@ (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d052      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001934:	4a94      	ldr	r2, [pc, #592]	@ (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d869      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800193a:	4a94      	ldr	r2, [pc, #592]	@ (8001b8c <HAL_GPIO_Init+0x2ac>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d04c      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001940:	4a92      	ldr	r2, [pc, #584]	@ (8001b8c <HAL_GPIO_Init+0x2ac>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d863      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001946:	4a92      	ldr	r2, [pc, #584]	@ (8001b90 <HAL_GPIO_Init+0x2b0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d046      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800194c:	4a90      	ldr	r2, [pc, #576]	@ (8001b90 <HAL_GPIO_Init+0x2b0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d85d      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001952:	2b12      	cmp	r3, #18
 8001954:	d82a      	bhi.n	80019ac <HAL_GPIO_Init+0xcc>
 8001956:	2b12      	cmp	r3, #18
 8001958:	d859      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800195a:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <HAL_GPIO_Init+0x80>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	080019db 	.word	0x080019db
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019c7 	.word	0x080019c7
 800196c:	08001a09 	.word	0x08001a09
 8001970:	08001a0f 	.word	0x08001a0f
 8001974:	08001a0f 	.word	0x08001a0f
 8001978:	08001a0f 	.word	0x08001a0f
 800197c:	08001a0f 	.word	0x08001a0f
 8001980:	08001a0f 	.word	0x08001a0f
 8001984:	08001a0f 	.word	0x08001a0f
 8001988:	08001a0f 	.word	0x08001a0f
 800198c:	08001a0f 	.word	0x08001a0f
 8001990:	08001a0f 	.word	0x08001a0f
 8001994:	08001a0f 	.word	0x08001a0f
 8001998:	08001a0f 	.word	0x08001a0f
 800199c:	08001a0f 	.word	0x08001a0f
 80019a0:	08001a0f 	.word	0x08001a0f
 80019a4:	080019bd 	.word	0x080019bd
 80019a8:	080019d1 	.word	0x080019d1
 80019ac:	4a79      	ldr	r2, [pc, #484]	@ (8001b94 <HAL_GPIO_Init+0x2b4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019b2:	e02c      	b.n	8001a0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e029      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e024      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	3308      	adds	r3, #8
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e01f      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	330c      	adds	r3, #12
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	e01a      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019e2:	2304      	movs	r3, #4
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e013      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f0:	2308      	movs	r3, #8
 80019f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	611a      	str	r2, [r3, #16]
          break;
 80019fa:	e009      	b.n	8001a10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2308      	movs	r3, #8
 80019fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	615a      	str	r2, [r3, #20]
          break;
 8001a06:	e003      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          break;
 8001a0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2bff      	cmp	r3, #255	@ 0xff
 8001a14:	d801      	bhi.n	8001a1a <HAL_GPIO_Init+0x13a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	e001      	b.n	8001a1e <HAL_GPIO_Init+0x13e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	@ 0xff
 8001a24:	d802      	bhi.n	8001a2c <HAL_GPIO_Init+0x14c>
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	e002      	b.n	8001a32 <HAL_GPIO_Init+0x152>
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	3b08      	subs	r3, #8
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	210f      	movs	r1, #15
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80b1 	beq.w	8001bc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a60:	4b4d      	ldr	r3, [pc, #308]	@ (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a4c      	ldr	r2, [pc, #304]	@ (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a78:	4a48      	ldr	r2, [pc, #288]	@ (8001b9c <HAL_GPIO_Init+0x2bc>)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a40      	ldr	r2, [pc, #256]	@ (8001ba0 <HAL_GPIO_Init+0x2c0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d013      	beq.n	8001acc <HAL_GPIO_Init+0x1ec>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ba4 <HAL_GPIO_Init+0x2c4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_GPIO_Init+0x1e8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d007      	beq.n	8001ac4 <HAL_GPIO_Init+0x1e4>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3d      	ldr	r2, [pc, #244]	@ (8001bac <HAL_GPIO_Init+0x2cc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d101      	bne.n	8001ac0 <HAL_GPIO_Init+0x1e0>
 8001abc:	2303      	movs	r3, #3
 8001abe:	e006      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	e004      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e002      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001acc:	2300      	movs	r3, #0
 8001ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad0:	f002 0203 	and.w	r2, r2, #3
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	4093      	lsls	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ade:	492f      	ldr	r1, [pc, #188]	@ (8001b9c <HAL_GPIO_Init+0x2bc>)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af8:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	492c      	ldr	r1, [pc, #176]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b06:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4928      	ldr	r1, [pc, #160]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b20:	4b23      	ldr	r3, [pc, #140]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	4922      	ldr	r1, [pc, #136]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b2e:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	491e      	ldr	r1, [pc, #120]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4918      	ldr	r1, [pc, #96]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4914      	ldr	r1, [pc, #80]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d021      	beq.n	8001bb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	490e      	ldr	r1, [pc, #56]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e021      	b.n	8001bc2 <HAL_GPIO_Init+0x2e2>
 8001b7e:	bf00      	nop
 8001b80:	10320000 	.word	0x10320000
 8001b84:	10310000 	.word	0x10310000
 8001b88:	10220000 	.word	0x10220000
 8001b8c:	10210000 	.word	0x10210000
 8001b90:	10120000 	.word	0x10120000
 8001b94:	10110000 	.word	0x10110000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	40011000 	.word	0x40011000
 8001bac:	40011400 	.word	0x40011400
 8001bb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4909      	ldr	r1, [pc, #36]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f47f ae8e 	bne.w	80018f4 <HAL_GPIO_Init+0x14>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	372c      	adds	r7, #44	@ 0x2c
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e001      	b.n	8001c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]
 8001c22:	4613      	mov	r3, r2
 8001c24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c26:	787b      	ldrb	r3, [r7, #1]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2c:	887a      	ldrh	r2, [r7, #2]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c32:	e003      	b.n	8001c3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	041a      	lsls	r2, r3, #16
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	611a      	str	r2, [r3, #16]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f806 	bl	8001c78 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e12b      	b.n	8001ef6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff f8d0 	bl	8000e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2224      	movs	r2, #36	@ 0x24
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cf0:	f000 fcda 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8001cf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a81      	ldr	r2, [pc, #516]	@ (8001f00 <HAL_I2C_Init+0x274>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d807      	bhi.n	8001d10 <HAL_I2C_Init+0x84>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4a80      	ldr	r2, [pc, #512]	@ (8001f04 <HAL_I2C_Init+0x278>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	bf94      	ite	ls
 8001d08:	2301      	movls	r3, #1
 8001d0a:	2300      	movhi	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	e006      	b.n	8001d1e <HAL_I2C_Init+0x92>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a7d      	ldr	r2, [pc, #500]	@ (8001f08 <HAL_I2C_Init+0x27c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	bf94      	ite	ls
 8001d18:	2301      	movls	r3, #1
 8001d1a:	2300      	movhi	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0e7      	b.n	8001ef6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4a78      	ldr	r2, [pc, #480]	@ (8001f0c <HAL_I2C_Init+0x280>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0c9b      	lsrs	r3, r3, #18
 8001d30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a6a      	ldr	r2, [pc, #424]	@ (8001f00 <HAL_I2C_Init+0x274>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d802      	bhi.n	8001d60 <HAL_I2C_Init+0xd4>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	e009      	b.n	8001d74 <HAL_I2C_Init+0xe8>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	4a69      	ldr	r2, [pc, #420]	@ (8001f10 <HAL_I2C_Init+0x284>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	3301      	adds	r3, #1
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	495c      	ldr	r1, [pc, #368]	@ (8001f00 <HAL_I2C_Init+0x274>)
 8001d90:	428b      	cmp	r3, r1
 8001d92:	d819      	bhi.n	8001dc8 <HAL_I2C_Init+0x13c>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1e59      	subs	r1, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da2:	1c59      	adds	r1, r3, #1
 8001da4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001da8:	400b      	ands	r3, r1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00a      	beq.n	8001dc4 <HAL_I2C_Init+0x138>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1e59      	subs	r1, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc2:	e051      	b.n	8001e68 <HAL_I2C_Init+0x1dc>
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	e04f      	b.n	8001e68 <HAL_I2C_Init+0x1dc>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d111      	bne.n	8001df4 <HAL_I2C_Init+0x168>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1e58      	subs	r0, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	440b      	add	r3, r1
 8001dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	e012      	b.n	8001e1a <HAL_I2C_Init+0x18e>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e58      	subs	r0, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	0099      	lsls	r1, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_Init+0x196>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e022      	b.n	8001e68 <HAL_I2C_Init+0x1dc>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10e      	bne.n	8001e48 <HAL_I2C_Init+0x1bc>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1e58      	subs	r0, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6859      	ldr	r1, [r3, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	440b      	add	r3, r1
 8001e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e46:	e00f      	b.n	8001e68 <HAL_I2C_Init+0x1dc>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e58      	subs	r0, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	0099      	lsls	r1, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	6809      	ldr	r1, [r1, #0]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6911      	ldr	r1, [r2, #16]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68d2      	ldr	r2, [r2, #12]
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	000186a0 	.word	0x000186a0
 8001f04:	001e847f 	.word	0x001e847f
 8001f08:	003d08ff 	.word	0x003d08ff
 8001f0c:	431bde83 	.word	0x431bde83
 8001f10:	10624dd3 	.word	0x10624dd3

08001f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e272      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8087 	beq.w	8002042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f34:	4b92      	ldr	r3, [pc, #584]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d00c      	beq.n	8001f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f40:	4b8f      	ldr	r3, [pc, #572]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d112      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5e>
 8001f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f58:	d10b      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5a:	4b89      	ldr	r3, [pc, #548]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d06c      	beq.n	8002040 <HAL_RCC_OscConfig+0x12c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d168      	bne.n	8002040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e24c      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x76>
 8001f7c:	4b80      	ldr	r3, [pc, #512]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a7f      	ldr	r2, [pc, #508]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	e02e      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x98>
 8001f92:	4b7b      	ldr	r3, [pc, #492]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7a      	ldr	r2, [pc, #488]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b78      	ldr	r3, [pc, #480]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a77      	ldr	r2, [pc, #476]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e01d      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xbc>
 8001fb6:	4b72      	ldr	r3, [pc, #456]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a71      	ldr	r2, [pc, #452]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b68      	ldr	r3, [pc, #416]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a67      	ldr	r2, [pc, #412]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fb3a 	bl	8001668 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7ff fb36 	bl	8001668 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	@ 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e200      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b5d      	ldr	r3, [pc, #372]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xe4>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fb26 	bl	8001668 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7ff fb22 	bl	8001668 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	@ 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1ec      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	4b53      	ldr	r3, [pc, #332]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x10c>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d063      	beq.n	8002116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800204e:	4b4c      	ldr	r3, [pc, #304]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800205a:	4b49      	ldr	r3, [pc, #292]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b08      	cmp	r3, #8
 8002064:	d11c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x18c>
 8002066:	4b46      	ldr	r3, [pc, #280]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d116      	bne.n	80020a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	4b43      	ldr	r3, [pc, #268]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x176>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e1c0      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	4b3d      	ldr	r3, [pc, #244]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4939      	ldr	r1, [pc, #228]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	e03a      	b.n	8002116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a8:	4b36      	ldr	r3, [pc, #216]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7ff fadb 	bl	8001668 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b6:	f7ff fad7 	bl	8001668 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e1a1      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4927      	ldr	r1, [pc, #156]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e015      	b.n	8002116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ea:	4b26      	ldr	r3, [pc, #152]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff faba 	bl	8001668 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f8:	f7ff fab6 	bl	8001668 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e180      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d03a      	beq.n	8002198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d019      	beq.n	800215e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212a:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <HAL_RCC_OscConfig+0x274>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7ff fa9a 	bl	8001668 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002138:	f7ff fa96 	bl	8001668 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e160      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002156:	2001      	movs	r0, #1
 8002158:	f000 face 	bl	80026f8 <RCC_Delay>
 800215c:	e01c      	b.n	8002198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215e:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <HAL_RCC_OscConfig+0x274>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7ff fa80 	bl	8001668 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216a:	e00f      	b.n	800218c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7ff fa7c 	bl	8001668 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d908      	bls.n	800218c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e146      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	42420000 	.word	0x42420000
 8002188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	4b92      	ldr	r3, [pc, #584]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e9      	bne.n	800216c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a6 	beq.w	80022f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021aa:	4b8b      	ldr	r3, [pc, #556]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10d      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	4b88      	ldr	r3, [pc, #544]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4a87      	ldr	r2, [pc, #540]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	61d3      	str	r3, [r2, #28]
 80021c2:	4b85      	ldr	r3, [pc, #532]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ce:	2301      	movs	r3, #1
 80021d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b82      	ldr	r3, [pc, #520]	@ (80023dc <HAL_RCC_OscConfig+0x4c8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d118      	bne.n	8002210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021de:	4b7f      	ldr	r3, [pc, #508]	@ (80023dc <HAL_RCC_OscConfig+0x4c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7e      	ldr	r2, [pc, #504]	@ (80023dc <HAL_RCC_OscConfig+0x4c8>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ea:	f7ff fa3d 	bl	8001668 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f2:	f7ff fa39 	bl	8001668 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b64      	cmp	r3, #100	@ 0x64
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e103      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	4b75      	ldr	r3, [pc, #468]	@ (80023dc <HAL_RCC_OscConfig+0x4c8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x312>
 8002218:	4b6f      	ldr	r3, [pc, #444]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a6e      	ldr	r2, [pc, #440]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	e02d      	b.n	8002282 <HAL_RCC_OscConfig+0x36e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x334>
 800222e:	4b6a      	ldr	r3, [pc, #424]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a69      	ldr	r2, [pc, #420]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	6213      	str	r3, [r2, #32]
 800223a:	4b67      	ldr	r3, [pc, #412]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a66      	ldr	r2, [pc, #408]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 0304 	bic.w	r3, r3, #4
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	e01c      	b.n	8002282 <HAL_RCC_OscConfig+0x36e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d10c      	bne.n	800226a <HAL_RCC_OscConfig+0x356>
 8002250:	4b61      	ldr	r3, [pc, #388]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4a60      	ldr	r2, [pc, #384]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	6213      	str	r3, [r2, #32]
 800225c:	4b5e      	ldr	r3, [pc, #376]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a5d      	ldr	r2, [pc, #372]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6213      	str	r3, [r2, #32]
 8002268:	e00b      	b.n	8002282 <HAL_RCC_OscConfig+0x36e>
 800226a:	4b5b      	ldr	r3, [pc, #364]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a5a      	ldr	r2, [pc, #360]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6213      	str	r3, [r2, #32]
 8002276:	4b58      	ldr	r3, [pc, #352]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a57      	ldr	r2, [pc, #348]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d015      	beq.n	80022b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7ff f9ed 	bl	8001668 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002290:	e00a      	b.n	80022a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7ff f9e9 	bl	8001668 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0b1      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	4b4b      	ldr	r3, [pc, #300]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ee      	beq.n	8002292 <HAL_RCC_OscConfig+0x37e>
 80022b4:	e014      	b.n	80022e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7ff f9d7 	bl	8001668 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7ff f9d3 	bl	8001668 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e09b      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d4:	4b40      	ldr	r3, [pc, #256]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ee      	bne.n	80022be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d105      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e6:	4b3c      	ldr	r3, [pc, #240]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4a3b      	ldr	r2, [pc, #236]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8087 	beq.w	800240a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fc:	4b36      	ldr	r3, [pc, #216]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d061      	beq.n	80023cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d146      	bne.n	800239e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002310:	4b33      	ldr	r3, [pc, #204]	@ (80023e0 <HAL_RCC_OscConfig+0x4cc>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7ff f9a7 	bl	8001668 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7ff f9a3 	bl	8001668 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e06d      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002344:	d108      	bne.n	8002358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002346:	4b24      	ldr	r3, [pc, #144]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4921      	ldr	r1, [pc, #132]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a19      	ldr	r1, [r3, #32]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	430b      	orrs	r3, r1
 800236a:	491b      	ldr	r1, [pc, #108]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7ff f977 	bl	8001668 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7ff f973 	bl	8001668 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e03d      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x46a>
 800239c:	e035      	b.n	800240a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_RCC_OscConfig+0x4cc>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff f960 	bl	8001668 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7ff f95c 	bl	8001668 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e026      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x498>
 80023ca:	e01e      	b.n	800240a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e019      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_OscConfig+0x500>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0d0      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b6a      	ldr	r3, [pc, #424]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b67      	ldr	r3, [pc, #412]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4965      	ldr	r1, [pc, #404]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002474:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a58      	ldr	r2, [pc, #352]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800247e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800248c:	4b53      	ldr	r3, [pc, #332]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a52      	ldr	r2, [pc, #328]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b50      	ldr	r3, [pc, #320]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	494d      	ldr	r1, [pc, #308]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d040      	beq.n	8002538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b47      	ldr	r3, [pc, #284]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e073      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3d      	ldr	r3, [pc, #244]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e06b      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b39      	ldr	r3, [pc, #228]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4936      	ldr	r1, [pc, #216]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002508:	f7ff f8ae 	bl	8001668 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7ff f8aa 	bl	8001668 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e053      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2d      	ldr	r3, [pc, #180]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b27      	ldr	r3, [pc, #156]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d210      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0207 	bic.w	r2, r3, #7
 800254e:	4922      	ldr	r1, [pc, #136]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e032      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4916      	ldr	r1, [pc, #88]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490e      	ldr	r1, [pc, #56]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f821 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490a      	ldr	r1, [pc, #40]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a09      	ldr	r2, [pc, #36]	@ (80025e4 <HAL_RCC_ClockConfig+0x1cc>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_RCC_ClockConfig+0x1d0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff f80c 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08003b04 	.word	0x08003b04
 80025e4:	20000004 	.word	0x20000004
 80025e8:	20000008 	.word	0x20000008

080025ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x94>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x30>
 8002616:	2b08      	cmp	r3, #8
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x36>
 800261a:	e027      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800261c:	4b19      	ldr	r3, [pc, #100]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800261e:	613b      	str	r3, [r7, #16]
      break;
 8002620:	e027      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	0c9b      	lsrs	r3, r3, #18
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	4a17      	ldr	r2, [pc, #92]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x9c>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d010      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800263a:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x94>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0c5b      	lsrs	r3, r3, #17
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	4a11      	ldr	r2, [pc, #68]	@ (800268c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a0d      	ldr	r2, [pc, #52]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800264e:	fb03 f202 	mul.w	r2, r3, r2
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e004      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0c      	ldr	r2, [pc, #48]	@ (8002690 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	613b      	str	r3, [r7, #16]
      break;
 800266a:	e002      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002672:	693b      	ldr	r3, [r7, #16]
}
 8002674:	4618      	mov	r0, r3
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	007a1200 	.word	0x007a1200
 8002688:	08003b1c 	.word	0x08003b1c
 800268c:	08003b2c 	.word	0x08003b2c
 8002690:	003d0900 	.word	0x003d0900

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b02      	ldr	r3, [pc, #8]	@ (80026a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000004 	.word	0x20000004

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026ac:	f7ff fff2 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08003b14 	.word	0x08003b14

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d4:	f7ff ffde 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08003b14 	.word	0x08003b14

080026f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002700:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <RCC_Delay+0x34>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <RCC_Delay+0x38>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a5b      	lsrs	r3, r3, #9
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002714:	bf00      	nop
  }
  while (Delay --);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <RCC_Delay+0x1c>
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000004 	.word	0x20000004
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e076      	b.n	8002834 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002756:	d009      	beq.n	800276c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
 800275e:	e005      	b.n	800276c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fd8e 	bl	80012a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	0c1a      	lsrs	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f002 0204 	and.w	r2, r2, #4
 8002812:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002822:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800284c:	f7fe ff0c 	bl	8001668 <HAL_GetTick>
 8002850:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	e12a      	b.n	8002abc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_Transmit+0x36>
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e122      	b.n	8002abc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_SPI_Transmit+0x48>
 8002880:	2302      	movs	r3, #2
 8002882:	e11b      	b.n	8002abc <HAL_SPI_Transmit+0x280>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2203      	movs	r2, #3
 8002890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028d2:	d10f      	bne.n	80028f4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fe:	2b40      	cmp	r3, #64	@ 0x40
 8002900:	d007      	beq.n	8002912 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800291a:	d152      	bne.n	80029c2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_SPI_Transmit+0xee>
 8002924:	8b7b      	ldrh	r3, [r7, #26]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d145      	bne.n	80029b6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	881a      	ldrh	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	1c9a      	adds	r2, r3, #2
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800294e:	e032      	b.n	80029b6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d112      	bne.n	8002984 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	881a      	ldrh	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	1c9a      	adds	r2, r3, #2
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002982:	e018      	b.n	80029b6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002984:	f7fe fe70 	bl	8001668 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d803      	bhi.n	800299c <HAL_SPI_Transmit+0x160>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299a:	d102      	bne.n	80029a2 <HAL_SPI_Transmit+0x166>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e082      	b.n	8002abc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1c7      	bne.n	8002950 <HAL_SPI_Transmit+0x114>
 80029c0:	e053      	b.n	8002a6a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_Transmit+0x194>
 80029ca:	8b7b      	ldrh	r3, [r7, #26]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d147      	bne.n	8002a60 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029f6:	e033      	b.n	8002a60 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d113      	bne.n	8002a2e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	330c      	adds	r3, #12
 8002a10:	7812      	ldrb	r2, [r2, #0]
 8002a12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a2c:	e018      	b.n	8002a60 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a2e:	f7fe fe1b 	bl	8001668 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d803      	bhi.n	8002a46 <HAL_SPI_Transmit+0x20a>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d102      	bne.n	8002a4c <HAL_SPI_Transmit+0x210>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e02d      	b.n	8002abc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1c6      	bne.n	80029f8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	6839      	ldr	r1, [r7, #0]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fa66 	bl	8002f40 <SPI_EndRxTxTransaction>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002aba:	2300      	movs	r3, #0
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	@ 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ad6:	f7fe fdc7 	bl	8001668 <HAL_GetTick>
 8002ada:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ae2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002aee:	7ffb      	ldrb	r3, [r7, #31]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d00c      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x4a>
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002afa:	d106      	bne.n	8002b0a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <HAL_SPI_TransmitReceive+0x46>
 8002b04:	7ffb      	ldrb	r3, [r7, #31]
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d001      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e17f      	b.n	8002e0e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x5c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x5c>
 8002b1a:	887b      	ldrh	r3, [r7, #2]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e174      	b.n	8002e0e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x6e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e16d      	b.n	8002e0e <HAL_SPI_TransmitReceive+0x34a>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d003      	beq.n	8002b4e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2205      	movs	r2, #5
 8002b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	887a      	ldrh	r2, [r7, #2]
 8002b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	887a      	ldrh	r2, [r7, #2]
 8002b76:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8e:	2b40      	cmp	r3, #64	@ 0x40
 8002b90:	d007      	beq.n	8002ba2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002baa:	d17e      	bne.n	8002caa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_SPI_TransmitReceive+0xf6>
 8002bb4:	8afb      	ldrh	r3, [r7, #22]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d16c      	bne.n	8002c94 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	881a      	ldrh	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	1c9a      	adds	r2, r3, #2
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bde:	e059      	b.n	8002c94 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d11b      	bne.n	8002c26 <HAL_SPI_TransmitReceive+0x162>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d016      	beq.n	8002c26 <HAL_SPI_TransmitReceive+0x162>
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d113      	bne.n	8002c26 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d119      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x1a4>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d014      	beq.n	8002c68 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	b292      	uxth	r2, r2
 8002c4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c50:	1c9a      	adds	r2, r3, #2
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c64:	2301      	movs	r3, #1
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c68:	f7fe fcfe 	bl	8001668 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d80d      	bhi.n	8002c94 <HAL_SPI_TransmitReceive+0x1d0>
 8002c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d009      	beq.n	8002c94 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e0bc      	b.n	8002e0e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1a0      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x11c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d19b      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x11c>
 8002ca8:	e082      	b.n	8002db0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_SPI_TransmitReceive+0x1f4>
 8002cb2:	8afb      	ldrh	r3, [r7, #22]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d171      	bne.n	8002d9c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cde:	e05d      	b.n	8002d9c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d11c      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x264>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d017      	beq.n	8002d28 <HAL_SPI_TransmitReceive+0x264>
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d114      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d119      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x2a6>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d014      	beq.n	8002d6a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d66:	2301      	movs	r3, #1
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d6a:	f7fe fc7d 	bl	8001668 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d803      	bhi.n	8002d82 <HAL_SPI_TransmitReceive+0x2be>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d102      	bne.n	8002d88 <HAL_SPI_TransmitReceive+0x2c4>
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e038      	b.n	8002e0e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d19c      	bne.n	8002ce0 <HAL_SPI_TransmitReceive+0x21c>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d197      	bne.n	8002ce0 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002db0:	6a3a      	ldr	r2, [r7, #32]
 8002db2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f8c3 	bl	8002f40 <SPI_EndRxTxTransaction>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e01d      	b.n	8002e0e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10a      	bne.n	8002df0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3728      	adds	r7, #40	@ 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e24:	b2db      	uxtb	r3, r3
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e40:	f7fe fc12 	bl	8001668 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e50:	f7fe fc0a 	bl	8001668 <HAL_GetTick>
 8002e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e56:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	015b      	lsls	r3, r3, #5
 8002e5c:	0d1b      	lsrs	r3, r3, #20
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e66:	e054      	b.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d050      	beq.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e70:	f7fe fbfa 	bl	8001668 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d902      	bls.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d13d      	bne.n	8002f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e9e:	d111      	bne.n	8002ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ea8:	d004      	beq.n	8002eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb2:	d107      	bne.n	8002ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ecc:	d10f      	bne.n	8002eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e017      	b.n	8002f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d19b      	bne.n	8002e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000004 	.word	0x20000004

08002f40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2201      	movs	r2, #1
 8002f54:	2102      	movs	r1, #2
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff ff6a 	bl	8002e30 <SPI_WaitFlagStateUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e013      	b.n	8002f9a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2180      	movs	r1, #128	@ 0x80
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff ff57 	bl	8002e30 <SPI_WaitFlagStateUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e000      	b.n	8002f9a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e042      	b.n	800303a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d106      	bne.n	8002fce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7fe fa83 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2224      	movs	r2, #36	@ 0x24
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fe4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f82c 	bl	8003044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ffa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800300a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800301a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800307e:	f023 030c 	bic.w	r3, r3, #12
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	430b      	orrs	r3, r1
 800308a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003158 <UART_SetConfig+0x114>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d103      	bne.n	80030b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030ac:	f7ff fb10 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	e002      	b.n	80030ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7ff faf8 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 80030b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009a      	lsls	r2, r3, #2
 80030c4:	441a      	add	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	4a22      	ldr	r2, [pc, #136]	@ (800315c <UART_SetConfig+0x118>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	0119      	lsls	r1, r3, #4
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	009a      	lsls	r2, r3, #2
 80030e4:	441a      	add	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f0:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <UART_SetConfig+0x118>)
 80030f2:	fba3 0302 	umull	r0, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2064      	movs	r0, #100	@ 0x64
 80030fa:	fb00 f303 	mul.w	r3, r0, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	3332      	adds	r3, #50	@ 0x32
 8003104:	4a15      	ldr	r2, [pc, #84]	@ (800315c <UART_SetConfig+0x118>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003110:	4419      	add	r1, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	009a      	lsls	r2, r3, #2
 800311c:	441a      	add	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	fbb2 f2f3 	udiv	r2, r2, r3
 8003128:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <UART_SetConfig+0x118>)
 800312a:	fba3 0302 	umull	r0, r3, r3, r2
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2064      	movs	r0, #100	@ 0x64
 8003132:	fb00 f303 	mul.w	r3, r0, r3
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	3332      	adds	r3, #50	@ 0x32
 800313c:	4a07      	ldr	r2, [pc, #28]	@ (800315c <UART_SetConfig+0x118>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	440a      	add	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40013800 	.word	0x40013800
 800315c:	51eb851f 	.word	0x51eb851f

08003160 <siprintf>:
 8003160:	b40e      	push	{r1, r2, r3}
 8003162:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003166:	b500      	push	{lr}
 8003168:	b09c      	sub	sp, #112	@ 0x70
 800316a:	ab1d      	add	r3, sp, #116	@ 0x74
 800316c:	9002      	str	r0, [sp, #8]
 800316e:	9006      	str	r0, [sp, #24]
 8003170:	9107      	str	r1, [sp, #28]
 8003172:	9104      	str	r1, [sp, #16]
 8003174:	4808      	ldr	r0, [pc, #32]	@ (8003198 <siprintf+0x38>)
 8003176:	4909      	ldr	r1, [pc, #36]	@ (800319c <siprintf+0x3c>)
 8003178:	f853 2b04 	ldr.w	r2, [r3], #4
 800317c:	9105      	str	r1, [sp, #20]
 800317e:	6800      	ldr	r0, [r0, #0]
 8003180:	a902      	add	r1, sp, #8
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	f000 f9a0 	bl	80034c8 <_svfiprintf_r>
 8003188:	2200      	movs	r2, #0
 800318a:	9b02      	ldr	r3, [sp, #8]
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	b01c      	add	sp, #112	@ 0x70
 8003190:	f85d eb04 	ldr.w	lr, [sp], #4
 8003194:	b003      	add	sp, #12
 8003196:	4770      	bx	lr
 8003198:	20000010 	.word	0x20000010
 800319c:	ffff0208 	.word	0xffff0208

080031a0 <memset>:
 80031a0:	4603      	mov	r3, r0
 80031a2:	4402      	add	r2, r0
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d100      	bne.n	80031aa <memset+0xa>
 80031a8:	4770      	bx	lr
 80031aa:	f803 1b01 	strb.w	r1, [r3], #1
 80031ae:	e7f9      	b.n	80031a4 <memset+0x4>

080031b0 <__errno>:
 80031b0:	4b01      	ldr	r3, [pc, #4]	@ (80031b8 <__errno+0x8>)
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000010 	.word	0x20000010

080031bc <__libc_init_array>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	2600      	movs	r6, #0
 80031c0:	4d0c      	ldr	r5, [pc, #48]	@ (80031f4 <__libc_init_array+0x38>)
 80031c2:	4c0d      	ldr	r4, [pc, #52]	@ (80031f8 <__libc_init_array+0x3c>)
 80031c4:	1b64      	subs	r4, r4, r5
 80031c6:	10a4      	asrs	r4, r4, #2
 80031c8:	42a6      	cmp	r6, r4
 80031ca:	d109      	bne.n	80031e0 <__libc_init_array+0x24>
 80031cc:	f000 fc78 	bl	8003ac0 <_init>
 80031d0:	2600      	movs	r6, #0
 80031d2:	4d0a      	ldr	r5, [pc, #40]	@ (80031fc <__libc_init_array+0x40>)
 80031d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003200 <__libc_init_array+0x44>)
 80031d6:	1b64      	subs	r4, r4, r5
 80031d8:	10a4      	asrs	r4, r4, #2
 80031da:	42a6      	cmp	r6, r4
 80031dc:	d105      	bne.n	80031ea <__libc_init_array+0x2e>
 80031de:	bd70      	pop	{r4, r5, r6, pc}
 80031e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e4:	4798      	blx	r3
 80031e6:	3601      	adds	r6, #1
 80031e8:	e7ee      	b.n	80031c8 <__libc_init_array+0xc>
 80031ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ee:	4798      	blx	r3
 80031f0:	3601      	adds	r6, #1
 80031f2:	e7f2      	b.n	80031da <__libc_init_array+0x1e>
 80031f4:	08003b6c 	.word	0x08003b6c
 80031f8:	08003b6c 	.word	0x08003b6c
 80031fc:	08003b6c 	.word	0x08003b6c
 8003200:	08003b70 	.word	0x08003b70

08003204 <__retarget_lock_acquire_recursive>:
 8003204:	4770      	bx	lr

08003206 <__retarget_lock_release_recursive>:
 8003206:	4770      	bx	lr

08003208 <memcpy>:
 8003208:	440a      	add	r2, r1
 800320a:	4291      	cmp	r1, r2
 800320c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003210:	d100      	bne.n	8003214 <memcpy+0xc>
 8003212:	4770      	bx	lr
 8003214:	b510      	push	{r4, lr}
 8003216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800321a:	4291      	cmp	r1, r2
 800321c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003220:	d1f9      	bne.n	8003216 <memcpy+0xe>
 8003222:	bd10      	pop	{r4, pc}

08003224 <_free_r>:
 8003224:	b538      	push	{r3, r4, r5, lr}
 8003226:	4605      	mov	r5, r0
 8003228:	2900      	cmp	r1, #0
 800322a:	d040      	beq.n	80032ae <_free_r+0x8a>
 800322c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003230:	1f0c      	subs	r4, r1, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	bfb8      	it	lt
 8003236:	18e4      	addlt	r4, r4, r3
 8003238:	f000 f8de 	bl	80033f8 <__malloc_lock>
 800323c:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <_free_r+0x8c>)
 800323e:	6813      	ldr	r3, [r2, #0]
 8003240:	b933      	cbnz	r3, 8003250 <_free_r+0x2c>
 8003242:	6063      	str	r3, [r4, #4]
 8003244:	6014      	str	r4, [r2, #0]
 8003246:	4628      	mov	r0, r5
 8003248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800324c:	f000 b8da 	b.w	8003404 <__malloc_unlock>
 8003250:	42a3      	cmp	r3, r4
 8003252:	d908      	bls.n	8003266 <_free_r+0x42>
 8003254:	6820      	ldr	r0, [r4, #0]
 8003256:	1821      	adds	r1, r4, r0
 8003258:	428b      	cmp	r3, r1
 800325a:	bf01      	itttt	eq
 800325c:	6819      	ldreq	r1, [r3, #0]
 800325e:	685b      	ldreq	r3, [r3, #4]
 8003260:	1809      	addeq	r1, r1, r0
 8003262:	6021      	streq	r1, [r4, #0]
 8003264:	e7ed      	b.n	8003242 <_free_r+0x1e>
 8003266:	461a      	mov	r2, r3
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	b10b      	cbz	r3, 8003270 <_free_r+0x4c>
 800326c:	42a3      	cmp	r3, r4
 800326e:	d9fa      	bls.n	8003266 <_free_r+0x42>
 8003270:	6811      	ldr	r1, [r2, #0]
 8003272:	1850      	adds	r0, r2, r1
 8003274:	42a0      	cmp	r0, r4
 8003276:	d10b      	bne.n	8003290 <_free_r+0x6c>
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	4401      	add	r1, r0
 800327c:	1850      	adds	r0, r2, r1
 800327e:	4283      	cmp	r3, r0
 8003280:	6011      	str	r1, [r2, #0]
 8003282:	d1e0      	bne.n	8003246 <_free_r+0x22>
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4408      	add	r0, r1
 800328a:	6010      	str	r0, [r2, #0]
 800328c:	6053      	str	r3, [r2, #4]
 800328e:	e7da      	b.n	8003246 <_free_r+0x22>
 8003290:	d902      	bls.n	8003298 <_free_r+0x74>
 8003292:	230c      	movs	r3, #12
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	e7d6      	b.n	8003246 <_free_r+0x22>
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	1821      	adds	r1, r4, r0
 800329c:	428b      	cmp	r3, r1
 800329e:	bf01      	itttt	eq
 80032a0:	6819      	ldreq	r1, [r3, #0]
 80032a2:	685b      	ldreq	r3, [r3, #4]
 80032a4:	1809      	addeq	r1, r1, r0
 80032a6:	6021      	streq	r1, [r4, #0]
 80032a8:	6063      	str	r3, [r4, #4]
 80032aa:	6054      	str	r4, [r2, #4]
 80032ac:	e7cb      	b.n	8003246 <_free_r+0x22>
 80032ae:	bd38      	pop	{r3, r4, r5, pc}
 80032b0:	20000820 	.word	0x20000820

080032b4 <sbrk_aligned>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	4e0f      	ldr	r6, [pc, #60]	@ (80032f4 <sbrk_aligned+0x40>)
 80032b8:	460c      	mov	r4, r1
 80032ba:	6831      	ldr	r1, [r6, #0]
 80032bc:	4605      	mov	r5, r0
 80032be:	b911      	cbnz	r1, 80032c6 <sbrk_aligned+0x12>
 80032c0:	f000 fbaa 	bl	8003a18 <_sbrk_r>
 80032c4:	6030      	str	r0, [r6, #0]
 80032c6:	4621      	mov	r1, r4
 80032c8:	4628      	mov	r0, r5
 80032ca:	f000 fba5 	bl	8003a18 <_sbrk_r>
 80032ce:	1c43      	adds	r3, r0, #1
 80032d0:	d103      	bne.n	80032da <sbrk_aligned+0x26>
 80032d2:	f04f 34ff 	mov.w	r4, #4294967295
 80032d6:	4620      	mov	r0, r4
 80032d8:	bd70      	pop	{r4, r5, r6, pc}
 80032da:	1cc4      	adds	r4, r0, #3
 80032dc:	f024 0403 	bic.w	r4, r4, #3
 80032e0:	42a0      	cmp	r0, r4
 80032e2:	d0f8      	beq.n	80032d6 <sbrk_aligned+0x22>
 80032e4:	1a21      	subs	r1, r4, r0
 80032e6:	4628      	mov	r0, r5
 80032e8:	f000 fb96 	bl	8003a18 <_sbrk_r>
 80032ec:	3001      	adds	r0, #1
 80032ee:	d1f2      	bne.n	80032d6 <sbrk_aligned+0x22>
 80032f0:	e7ef      	b.n	80032d2 <sbrk_aligned+0x1e>
 80032f2:	bf00      	nop
 80032f4:	2000081c 	.word	0x2000081c

080032f8 <_malloc_r>:
 80032f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032fc:	1ccd      	adds	r5, r1, #3
 80032fe:	f025 0503 	bic.w	r5, r5, #3
 8003302:	3508      	adds	r5, #8
 8003304:	2d0c      	cmp	r5, #12
 8003306:	bf38      	it	cc
 8003308:	250c      	movcc	r5, #12
 800330a:	2d00      	cmp	r5, #0
 800330c:	4606      	mov	r6, r0
 800330e:	db01      	blt.n	8003314 <_malloc_r+0x1c>
 8003310:	42a9      	cmp	r1, r5
 8003312:	d904      	bls.n	800331e <_malloc_r+0x26>
 8003314:	230c      	movs	r3, #12
 8003316:	6033      	str	r3, [r6, #0]
 8003318:	2000      	movs	r0, #0
 800331a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800331e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033f4 <_malloc_r+0xfc>
 8003322:	f000 f869 	bl	80033f8 <__malloc_lock>
 8003326:	f8d8 3000 	ldr.w	r3, [r8]
 800332a:	461c      	mov	r4, r3
 800332c:	bb44      	cbnz	r4, 8003380 <_malloc_r+0x88>
 800332e:	4629      	mov	r1, r5
 8003330:	4630      	mov	r0, r6
 8003332:	f7ff ffbf 	bl	80032b4 <sbrk_aligned>
 8003336:	1c43      	adds	r3, r0, #1
 8003338:	4604      	mov	r4, r0
 800333a:	d158      	bne.n	80033ee <_malloc_r+0xf6>
 800333c:	f8d8 4000 	ldr.w	r4, [r8]
 8003340:	4627      	mov	r7, r4
 8003342:	2f00      	cmp	r7, #0
 8003344:	d143      	bne.n	80033ce <_malloc_r+0xd6>
 8003346:	2c00      	cmp	r4, #0
 8003348:	d04b      	beq.n	80033e2 <_malloc_r+0xea>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	4639      	mov	r1, r7
 800334e:	4630      	mov	r0, r6
 8003350:	eb04 0903 	add.w	r9, r4, r3
 8003354:	f000 fb60 	bl	8003a18 <_sbrk_r>
 8003358:	4581      	cmp	r9, r0
 800335a:	d142      	bne.n	80033e2 <_malloc_r+0xea>
 800335c:	6821      	ldr	r1, [r4, #0]
 800335e:	4630      	mov	r0, r6
 8003360:	1a6d      	subs	r5, r5, r1
 8003362:	4629      	mov	r1, r5
 8003364:	f7ff ffa6 	bl	80032b4 <sbrk_aligned>
 8003368:	3001      	adds	r0, #1
 800336a:	d03a      	beq.n	80033e2 <_malloc_r+0xea>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	442b      	add	r3, r5
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	f8d8 3000 	ldr.w	r3, [r8]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	bb62      	cbnz	r2, 80033d4 <_malloc_r+0xdc>
 800337a:	f8c8 7000 	str.w	r7, [r8]
 800337e:	e00f      	b.n	80033a0 <_malloc_r+0xa8>
 8003380:	6822      	ldr	r2, [r4, #0]
 8003382:	1b52      	subs	r2, r2, r5
 8003384:	d420      	bmi.n	80033c8 <_malloc_r+0xd0>
 8003386:	2a0b      	cmp	r2, #11
 8003388:	d917      	bls.n	80033ba <_malloc_r+0xc2>
 800338a:	1961      	adds	r1, r4, r5
 800338c:	42a3      	cmp	r3, r4
 800338e:	6025      	str	r5, [r4, #0]
 8003390:	bf18      	it	ne
 8003392:	6059      	strne	r1, [r3, #4]
 8003394:	6863      	ldr	r3, [r4, #4]
 8003396:	bf08      	it	eq
 8003398:	f8c8 1000 	streq.w	r1, [r8]
 800339c:	5162      	str	r2, [r4, r5]
 800339e:	604b      	str	r3, [r1, #4]
 80033a0:	4630      	mov	r0, r6
 80033a2:	f000 f82f 	bl	8003404 <__malloc_unlock>
 80033a6:	f104 000b 	add.w	r0, r4, #11
 80033aa:	1d23      	adds	r3, r4, #4
 80033ac:	f020 0007 	bic.w	r0, r0, #7
 80033b0:	1ac2      	subs	r2, r0, r3
 80033b2:	bf1c      	itt	ne
 80033b4:	1a1b      	subne	r3, r3, r0
 80033b6:	50a3      	strne	r3, [r4, r2]
 80033b8:	e7af      	b.n	800331a <_malloc_r+0x22>
 80033ba:	6862      	ldr	r2, [r4, #4]
 80033bc:	42a3      	cmp	r3, r4
 80033be:	bf0c      	ite	eq
 80033c0:	f8c8 2000 	streq.w	r2, [r8]
 80033c4:	605a      	strne	r2, [r3, #4]
 80033c6:	e7eb      	b.n	80033a0 <_malloc_r+0xa8>
 80033c8:	4623      	mov	r3, r4
 80033ca:	6864      	ldr	r4, [r4, #4]
 80033cc:	e7ae      	b.n	800332c <_malloc_r+0x34>
 80033ce:	463c      	mov	r4, r7
 80033d0:	687f      	ldr	r7, [r7, #4]
 80033d2:	e7b6      	b.n	8003342 <_malloc_r+0x4a>
 80033d4:	461a      	mov	r2, r3
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	42a3      	cmp	r3, r4
 80033da:	d1fb      	bne.n	80033d4 <_malloc_r+0xdc>
 80033dc:	2300      	movs	r3, #0
 80033de:	6053      	str	r3, [r2, #4]
 80033e0:	e7de      	b.n	80033a0 <_malloc_r+0xa8>
 80033e2:	230c      	movs	r3, #12
 80033e4:	4630      	mov	r0, r6
 80033e6:	6033      	str	r3, [r6, #0]
 80033e8:	f000 f80c 	bl	8003404 <__malloc_unlock>
 80033ec:	e794      	b.n	8003318 <_malloc_r+0x20>
 80033ee:	6005      	str	r5, [r0, #0]
 80033f0:	e7d6      	b.n	80033a0 <_malloc_r+0xa8>
 80033f2:	bf00      	nop
 80033f4:	20000820 	.word	0x20000820

080033f8 <__malloc_lock>:
 80033f8:	4801      	ldr	r0, [pc, #4]	@ (8003400 <__malloc_lock+0x8>)
 80033fa:	f7ff bf03 	b.w	8003204 <__retarget_lock_acquire_recursive>
 80033fe:	bf00      	nop
 8003400:	20000818 	.word	0x20000818

08003404 <__malloc_unlock>:
 8003404:	4801      	ldr	r0, [pc, #4]	@ (800340c <__malloc_unlock+0x8>)
 8003406:	f7ff befe 	b.w	8003206 <__retarget_lock_release_recursive>
 800340a:	bf00      	nop
 800340c:	20000818 	.word	0x20000818

08003410 <__ssputs_r>:
 8003410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003414:	461f      	mov	r7, r3
 8003416:	688e      	ldr	r6, [r1, #8]
 8003418:	4682      	mov	sl, r0
 800341a:	42be      	cmp	r6, r7
 800341c:	460c      	mov	r4, r1
 800341e:	4690      	mov	r8, r2
 8003420:	680b      	ldr	r3, [r1, #0]
 8003422:	d82d      	bhi.n	8003480 <__ssputs_r+0x70>
 8003424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003428:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800342c:	d026      	beq.n	800347c <__ssputs_r+0x6c>
 800342e:	6965      	ldr	r5, [r4, #20]
 8003430:	6909      	ldr	r1, [r1, #16]
 8003432:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003436:	eba3 0901 	sub.w	r9, r3, r1
 800343a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800343e:	1c7b      	adds	r3, r7, #1
 8003440:	444b      	add	r3, r9
 8003442:	106d      	asrs	r5, r5, #1
 8003444:	429d      	cmp	r5, r3
 8003446:	bf38      	it	cc
 8003448:	461d      	movcc	r5, r3
 800344a:	0553      	lsls	r3, r2, #21
 800344c:	d527      	bpl.n	800349e <__ssputs_r+0x8e>
 800344e:	4629      	mov	r1, r5
 8003450:	f7ff ff52 	bl	80032f8 <_malloc_r>
 8003454:	4606      	mov	r6, r0
 8003456:	b360      	cbz	r0, 80034b2 <__ssputs_r+0xa2>
 8003458:	464a      	mov	r2, r9
 800345a:	6921      	ldr	r1, [r4, #16]
 800345c:	f7ff fed4 	bl	8003208 <memcpy>
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346a:	81a3      	strh	r3, [r4, #12]
 800346c:	6126      	str	r6, [r4, #16]
 800346e:	444e      	add	r6, r9
 8003470:	6026      	str	r6, [r4, #0]
 8003472:	463e      	mov	r6, r7
 8003474:	6165      	str	r5, [r4, #20]
 8003476:	eba5 0509 	sub.w	r5, r5, r9
 800347a:	60a5      	str	r5, [r4, #8]
 800347c:	42be      	cmp	r6, r7
 800347e:	d900      	bls.n	8003482 <__ssputs_r+0x72>
 8003480:	463e      	mov	r6, r7
 8003482:	4632      	mov	r2, r6
 8003484:	4641      	mov	r1, r8
 8003486:	6820      	ldr	r0, [r4, #0]
 8003488:	f000 faac 	bl	80039e4 <memmove>
 800348c:	2000      	movs	r0, #0
 800348e:	68a3      	ldr	r3, [r4, #8]
 8003490:	1b9b      	subs	r3, r3, r6
 8003492:	60a3      	str	r3, [r4, #8]
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	4433      	add	r3, r6
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349e:	462a      	mov	r2, r5
 80034a0:	f000 fad8 	bl	8003a54 <_realloc_r>
 80034a4:	4606      	mov	r6, r0
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d1e0      	bne.n	800346c <__ssputs_r+0x5c>
 80034aa:	4650      	mov	r0, sl
 80034ac:	6921      	ldr	r1, [r4, #16]
 80034ae:	f7ff feb9 	bl	8003224 <_free_r>
 80034b2:	230c      	movs	r3, #12
 80034b4:	f8ca 3000 	str.w	r3, [sl]
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	f04f 30ff 	mov.w	r0, #4294967295
 80034be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034c2:	81a3      	strh	r3, [r4, #12]
 80034c4:	e7e9      	b.n	800349a <__ssputs_r+0x8a>
	...

080034c8 <_svfiprintf_r>:
 80034c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034cc:	4698      	mov	r8, r3
 80034ce:	898b      	ldrh	r3, [r1, #12]
 80034d0:	4607      	mov	r7, r0
 80034d2:	061b      	lsls	r3, r3, #24
 80034d4:	460d      	mov	r5, r1
 80034d6:	4614      	mov	r4, r2
 80034d8:	b09d      	sub	sp, #116	@ 0x74
 80034da:	d510      	bpl.n	80034fe <_svfiprintf_r+0x36>
 80034dc:	690b      	ldr	r3, [r1, #16]
 80034de:	b973      	cbnz	r3, 80034fe <_svfiprintf_r+0x36>
 80034e0:	2140      	movs	r1, #64	@ 0x40
 80034e2:	f7ff ff09 	bl	80032f8 <_malloc_r>
 80034e6:	6028      	str	r0, [r5, #0]
 80034e8:	6128      	str	r0, [r5, #16]
 80034ea:	b930      	cbnz	r0, 80034fa <_svfiprintf_r+0x32>
 80034ec:	230c      	movs	r3, #12
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	b01d      	add	sp, #116	@ 0x74
 80034f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fa:	2340      	movs	r3, #64	@ 0x40
 80034fc:	616b      	str	r3, [r5, #20]
 80034fe:	2300      	movs	r3, #0
 8003500:	9309      	str	r3, [sp, #36]	@ 0x24
 8003502:	2320      	movs	r3, #32
 8003504:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003508:	2330      	movs	r3, #48	@ 0x30
 800350a:	f04f 0901 	mov.w	r9, #1
 800350e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003512:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80036ac <_svfiprintf_r+0x1e4>
 8003516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800351a:	4623      	mov	r3, r4
 800351c:	469a      	mov	sl, r3
 800351e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003522:	b10a      	cbz	r2, 8003528 <_svfiprintf_r+0x60>
 8003524:	2a25      	cmp	r2, #37	@ 0x25
 8003526:	d1f9      	bne.n	800351c <_svfiprintf_r+0x54>
 8003528:	ebba 0b04 	subs.w	fp, sl, r4
 800352c:	d00b      	beq.n	8003546 <_svfiprintf_r+0x7e>
 800352e:	465b      	mov	r3, fp
 8003530:	4622      	mov	r2, r4
 8003532:	4629      	mov	r1, r5
 8003534:	4638      	mov	r0, r7
 8003536:	f7ff ff6b 	bl	8003410 <__ssputs_r>
 800353a:	3001      	adds	r0, #1
 800353c:	f000 80a7 	beq.w	800368e <_svfiprintf_r+0x1c6>
 8003540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003542:	445a      	add	r2, fp
 8003544:	9209      	str	r2, [sp, #36]	@ 0x24
 8003546:	f89a 3000 	ldrb.w	r3, [sl]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 809f 	beq.w	800368e <_svfiprintf_r+0x1c6>
 8003550:	2300      	movs	r3, #0
 8003552:	f04f 32ff 	mov.w	r2, #4294967295
 8003556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800355a:	f10a 0a01 	add.w	sl, sl, #1
 800355e:	9304      	str	r3, [sp, #16]
 8003560:	9307      	str	r3, [sp, #28]
 8003562:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003566:	931a      	str	r3, [sp, #104]	@ 0x68
 8003568:	4654      	mov	r4, sl
 800356a:	2205      	movs	r2, #5
 800356c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003570:	484e      	ldr	r0, [pc, #312]	@ (80036ac <_svfiprintf_r+0x1e4>)
 8003572:	f000 fa61 	bl	8003a38 <memchr>
 8003576:	9a04      	ldr	r2, [sp, #16]
 8003578:	b9d8      	cbnz	r0, 80035b2 <_svfiprintf_r+0xea>
 800357a:	06d0      	lsls	r0, r2, #27
 800357c:	bf44      	itt	mi
 800357e:	2320      	movmi	r3, #32
 8003580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003584:	0711      	lsls	r1, r2, #28
 8003586:	bf44      	itt	mi
 8003588:	232b      	movmi	r3, #43	@ 0x2b
 800358a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800358e:	f89a 3000 	ldrb.w	r3, [sl]
 8003592:	2b2a      	cmp	r3, #42	@ 0x2a
 8003594:	d015      	beq.n	80035c2 <_svfiprintf_r+0xfa>
 8003596:	4654      	mov	r4, sl
 8003598:	2000      	movs	r0, #0
 800359a:	f04f 0c0a 	mov.w	ip, #10
 800359e:	9a07      	ldr	r2, [sp, #28]
 80035a0:	4621      	mov	r1, r4
 80035a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035a6:	3b30      	subs	r3, #48	@ 0x30
 80035a8:	2b09      	cmp	r3, #9
 80035aa:	d94b      	bls.n	8003644 <_svfiprintf_r+0x17c>
 80035ac:	b1b0      	cbz	r0, 80035dc <_svfiprintf_r+0x114>
 80035ae:	9207      	str	r2, [sp, #28]
 80035b0:	e014      	b.n	80035dc <_svfiprintf_r+0x114>
 80035b2:	eba0 0308 	sub.w	r3, r0, r8
 80035b6:	fa09 f303 	lsl.w	r3, r9, r3
 80035ba:	4313      	orrs	r3, r2
 80035bc:	46a2      	mov	sl, r4
 80035be:	9304      	str	r3, [sp, #16]
 80035c0:	e7d2      	b.n	8003568 <_svfiprintf_r+0xa0>
 80035c2:	9b03      	ldr	r3, [sp, #12]
 80035c4:	1d19      	adds	r1, r3, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	9103      	str	r1, [sp, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bfbb      	ittet	lt
 80035ce:	425b      	neglt	r3, r3
 80035d0:	f042 0202 	orrlt.w	r2, r2, #2
 80035d4:	9307      	strge	r3, [sp, #28]
 80035d6:	9307      	strlt	r3, [sp, #28]
 80035d8:	bfb8      	it	lt
 80035da:	9204      	strlt	r2, [sp, #16]
 80035dc:	7823      	ldrb	r3, [r4, #0]
 80035de:	2b2e      	cmp	r3, #46	@ 0x2e
 80035e0:	d10a      	bne.n	80035f8 <_svfiprintf_r+0x130>
 80035e2:	7863      	ldrb	r3, [r4, #1]
 80035e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80035e6:	d132      	bne.n	800364e <_svfiprintf_r+0x186>
 80035e8:	9b03      	ldr	r3, [sp, #12]
 80035ea:	3402      	adds	r4, #2
 80035ec:	1d1a      	adds	r2, r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	9203      	str	r2, [sp, #12]
 80035f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035f6:	9305      	str	r3, [sp, #20]
 80035f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80036b0 <_svfiprintf_r+0x1e8>
 80035fc:	2203      	movs	r2, #3
 80035fe:	4650      	mov	r0, sl
 8003600:	7821      	ldrb	r1, [r4, #0]
 8003602:	f000 fa19 	bl	8003a38 <memchr>
 8003606:	b138      	cbz	r0, 8003618 <_svfiprintf_r+0x150>
 8003608:	2240      	movs	r2, #64	@ 0x40
 800360a:	9b04      	ldr	r3, [sp, #16]
 800360c:	eba0 000a 	sub.w	r0, r0, sl
 8003610:	4082      	lsls	r2, r0
 8003612:	4313      	orrs	r3, r2
 8003614:	3401      	adds	r4, #1
 8003616:	9304      	str	r3, [sp, #16]
 8003618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800361c:	2206      	movs	r2, #6
 800361e:	4825      	ldr	r0, [pc, #148]	@ (80036b4 <_svfiprintf_r+0x1ec>)
 8003620:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003624:	f000 fa08 	bl	8003a38 <memchr>
 8003628:	2800      	cmp	r0, #0
 800362a:	d036      	beq.n	800369a <_svfiprintf_r+0x1d2>
 800362c:	4b22      	ldr	r3, [pc, #136]	@ (80036b8 <_svfiprintf_r+0x1f0>)
 800362e:	bb1b      	cbnz	r3, 8003678 <_svfiprintf_r+0x1b0>
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	3307      	adds	r3, #7
 8003634:	f023 0307 	bic.w	r3, r3, #7
 8003638:	3308      	adds	r3, #8
 800363a:	9303      	str	r3, [sp, #12]
 800363c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800363e:	4433      	add	r3, r6
 8003640:	9309      	str	r3, [sp, #36]	@ 0x24
 8003642:	e76a      	b.n	800351a <_svfiprintf_r+0x52>
 8003644:	460c      	mov	r4, r1
 8003646:	2001      	movs	r0, #1
 8003648:	fb0c 3202 	mla	r2, ip, r2, r3
 800364c:	e7a8      	b.n	80035a0 <_svfiprintf_r+0xd8>
 800364e:	2300      	movs	r3, #0
 8003650:	f04f 0c0a 	mov.w	ip, #10
 8003654:	4619      	mov	r1, r3
 8003656:	3401      	adds	r4, #1
 8003658:	9305      	str	r3, [sp, #20]
 800365a:	4620      	mov	r0, r4
 800365c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003660:	3a30      	subs	r2, #48	@ 0x30
 8003662:	2a09      	cmp	r2, #9
 8003664:	d903      	bls.n	800366e <_svfiprintf_r+0x1a6>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0c6      	beq.n	80035f8 <_svfiprintf_r+0x130>
 800366a:	9105      	str	r1, [sp, #20]
 800366c:	e7c4      	b.n	80035f8 <_svfiprintf_r+0x130>
 800366e:	4604      	mov	r4, r0
 8003670:	2301      	movs	r3, #1
 8003672:	fb0c 2101 	mla	r1, ip, r1, r2
 8003676:	e7f0      	b.n	800365a <_svfiprintf_r+0x192>
 8003678:	ab03      	add	r3, sp, #12
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	462a      	mov	r2, r5
 800367e:	4638      	mov	r0, r7
 8003680:	4b0e      	ldr	r3, [pc, #56]	@ (80036bc <_svfiprintf_r+0x1f4>)
 8003682:	a904      	add	r1, sp, #16
 8003684:	f3af 8000 	nop.w
 8003688:	1c42      	adds	r2, r0, #1
 800368a:	4606      	mov	r6, r0
 800368c:	d1d6      	bne.n	800363c <_svfiprintf_r+0x174>
 800368e:	89ab      	ldrh	r3, [r5, #12]
 8003690:	065b      	lsls	r3, r3, #25
 8003692:	f53f af2d 	bmi.w	80034f0 <_svfiprintf_r+0x28>
 8003696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003698:	e72c      	b.n	80034f4 <_svfiprintf_r+0x2c>
 800369a:	ab03      	add	r3, sp, #12
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	462a      	mov	r2, r5
 80036a0:	4638      	mov	r0, r7
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <_svfiprintf_r+0x1f4>)
 80036a4:	a904      	add	r1, sp, #16
 80036a6:	f000 f87d 	bl	80037a4 <_printf_i>
 80036aa:	e7ed      	b.n	8003688 <_svfiprintf_r+0x1c0>
 80036ac:	08003b2e 	.word	0x08003b2e
 80036b0:	08003b34 	.word	0x08003b34
 80036b4:	08003b38 	.word	0x08003b38
 80036b8:	00000000 	.word	0x00000000
 80036bc:	08003411 	.word	0x08003411

080036c0 <_printf_common>:
 80036c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c4:	4616      	mov	r6, r2
 80036c6:	4698      	mov	r8, r3
 80036c8:	688a      	ldr	r2, [r1, #8]
 80036ca:	690b      	ldr	r3, [r1, #16]
 80036cc:	4607      	mov	r7, r0
 80036ce:	4293      	cmp	r3, r2
 80036d0:	bfb8      	it	lt
 80036d2:	4613      	movlt	r3, r2
 80036d4:	6033      	str	r3, [r6, #0]
 80036d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036da:	460c      	mov	r4, r1
 80036dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036e0:	b10a      	cbz	r2, 80036e6 <_printf_common+0x26>
 80036e2:	3301      	adds	r3, #1
 80036e4:	6033      	str	r3, [r6, #0]
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	0699      	lsls	r1, r3, #26
 80036ea:	bf42      	ittt	mi
 80036ec:	6833      	ldrmi	r3, [r6, #0]
 80036ee:	3302      	addmi	r3, #2
 80036f0:	6033      	strmi	r3, [r6, #0]
 80036f2:	6825      	ldr	r5, [r4, #0]
 80036f4:	f015 0506 	ands.w	r5, r5, #6
 80036f8:	d106      	bne.n	8003708 <_printf_common+0x48>
 80036fa:	f104 0a19 	add.w	sl, r4, #25
 80036fe:	68e3      	ldr	r3, [r4, #12]
 8003700:	6832      	ldr	r2, [r6, #0]
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	42ab      	cmp	r3, r5
 8003706:	dc2b      	bgt.n	8003760 <_printf_common+0xa0>
 8003708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800370c:	6822      	ldr	r2, [r4, #0]
 800370e:	3b00      	subs	r3, #0
 8003710:	bf18      	it	ne
 8003712:	2301      	movne	r3, #1
 8003714:	0692      	lsls	r2, r2, #26
 8003716:	d430      	bmi.n	800377a <_printf_common+0xba>
 8003718:	4641      	mov	r1, r8
 800371a:	4638      	mov	r0, r7
 800371c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003720:	47c8      	blx	r9
 8003722:	3001      	adds	r0, #1
 8003724:	d023      	beq.n	800376e <_printf_common+0xae>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	6922      	ldr	r2, [r4, #16]
 800372a:	f003 0306 	and.w	r3, r3, #6
 800372e:	2b04      	cmp	r3, #4
 8003730:	bf14      	ite	ne
 8003732:	2500      	movne	r5, #0
 8003734:	6833      	ldreq	r3, [r6, #0]
 8003736:	f04f 0600 	mov.w	r6, #0
 800373a:	bf08      	it	eq
 800373c:	68e5      	ldreq	r5, [r4, #12]
 800373e:	f104 041a 	add.w	r4, r4, #26
 8003742:	bf08      	it	eq
 8003744:	1aed      	subeq	r5, r5, r3
 8003746:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800374a:	bf08      	it	eq
 800374c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003750:	4293      	cmp	r3, r2
 8003752:	bfc4      	itt	gt
 8003754:	1a9b      	subgt	r3, r3, r2
 8003756:	18ed      	addgt	r5, r5, r3
 8003758:	42b5      	cmp	r5, r6
 800375a:	d11a      	bne.n	8003792 <_printf_common+0xd2>
 800375c:	2000      	movs	r0, #0
 800375e:	e008      	b.n	8003772 <_printf_common+0xb2>
 8003760:	2301      	movs	r3, #1
 8003762:	4652      	mov	r2, sl
 8003764:	4641      	mov	r1, r8
 8003766:	4638      	mov	r0, r7
 8003768:	47c8      	blx	r9
 800376a:	3001      	adds	r0, #1
 800376c:	d103      	bne.n	8003776 <_printf_common+0xb6>
 800376e:	f04f 30ff 	mov.w	r0, #4294967295
 8003772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003776:	3501      	adds	r5, #1
 8003778:	e7c1      	b.n	80036fe <_printf_common+0x3e>
 800377a:	2030      	movs	r0, #48	@ 0x30
 800377c:	18e1      	adds	r1, r4, r3
 800377e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003788:	4422      	add	r2, r4
 800378a:	3302      	adds	r3, #2
 800378c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003790:	e7c2      	b.n	8003718 <_printf_common+0x58>
 8003792:	2301      	movs	r3, #1
 8003794:	4622      	mov	r2, r4
 8003796:	4641      	mov	r1, r8
 8003798:	4638      	mov	r0, r7
 800379a:	47c8      	blx	r9
 800379c:	3001      	adds	r0, #1
 800379e:	d0e6      	beq.n	800376e <_printf_common+0xae>
 80037a0:	3601      	adds	r6, #1
 80037a2:	e7d9      	b.n	8003758 <_printf_common+0x98>

080037a4 <_printf_i>:
 80037a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037a8:	7e0f      	ldrb	r7, [r1, #24]
 80037aa:	4691      	mov	r9, r2
 80037ac:	2f78      	cmp	r7, #120	@ 0x78
 80037ae:	4680      	mov	r8, r0
 80037b0:	460c      	mov	r4, r1
 80037b2:	469a      	mov	sl, r3
 80037b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037ba:	d807      	bhi.n	80037cc <_printf_i+0x28>
 80037bc:	2f62      	cmp	r7, #98	@ 0x62
 80037be:	d80a      	bhi.n	80037d6 <_printf_i+0x32>
 80037c0:	2f00      	cmp	r7, #0
 80037c2:	f000 80d3 	beq.w	800396c <_printf_i+0x1c8>
 80037c6:	2f58      	cmp	r7, #88	@ 0x58
 80037c8:	f000 80ba 	beq.w	8003940 <_printf_i+0x19c>
 80037cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037d4:	e03a      	b.n	800384c <_printf_i+0xa8>
 80037d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037da:	2b15      	cmp	r3, #21
 80037dc:	d8f6      	bhi.n	80037cc <_printf_i+0x28>
 80037de:	a101      	add	r1, pc, #4	@ (adr r1, 80037e4 <_printf_i+0x40>)
 80037e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037e4:	0800383d 	.word	0x0800383d
 80037e8:	08003851 	.word	0x08003851
 80037ec:	080037cd 	.word	0x080037cd
 80037f0:	080037cd 	.word	0x080037cd
 80037f4:	080037cd 	.word	0x080037cd
 80037f8:	080037cd 	.word	0x080037cd
 80037fc:	08003851 	.word	0x08003851
 8003800:	080037cd 	.word	0x080037cd
 8003804:	080037cd 	.word	0x080037cd
 8003808:	080037cd 	.word	0x080037cd
 800380c:	080037cd 	.word	0x080037cd
 8003810:	08003953 	.word	0x08003953
 8003814:	0800387b 	.word	0x0800387b
 8003818:	0800390d 	.word	0x0800390d
 800381c:	080037cd 	.word	0x080037cd
 8003820:	080037cd 	.word	0x080037cd
 8003824:	08003975 	.word	0x08003975
 8003828:	080037cd 	.word	0x080037cd
 800382c:	0800387b 	.word	0x0800387b
 8003830:	080037cd 	.word	0x080037cd
 8003834:	080037cd 	.word	0x080037cd
 8003838:	08003915 	.word	0x08003915
 800383c:	6833      	ldr	r3, [r6, #0]
 800383e:	1d1a      	adds	r2, r3, #4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6032      	str	r2, [r6, #0]
 8003844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800384c:	2301      	movs	r3, #1
 800384e:	e09e      	b.n	800398e <_printf_i+0x1ea>
 8003850:	6833      	ldr	r3, [r6, #0]
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	1d19      	adds	r1, r3, #4
 8003856:	6031      	str	r1, [r6, #0]
 8003858:	0606      	lsls	r6, r0, #24
 800385a:	d501      	bpl.n	8003860 <_printf_i+0xbc>
 800385c:	681d      	ldr	r5, [r3, #0]
 800385e:	e003      	b.n	8003868 <_printf_i+0xc4>
 8003860:	0645      	lsls	r5, r0, #25
 8003862:	d5fb      	bpl.n	800385c <_printf_i+0xb8>
 8003864:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003868:	2d00      	cmp	r5, #0
 800386a:	da03      	bge.n	8003874 <_printf_i+0xd0>
 800386c:	232d      	movs	r3, #45	@ 0x2d
 800386e:	426d      	negs	r5, r5
 8003870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003874:	230a      	movs	r3, #10
 8003876:	4859      	ldr	r0, [pc, #356]	@ (80039dc <_printf_i+0x238>)
 8003878:	e011      	b.n	800389e <_printf_i+0xfa>
 800387a:	6821      	ldr	r1, [r4, #0]
 800387c:	6833      	ldr	r3, [r6, #0]
 800387e:	0608      	lsls	r0, r1, #24
 8003880:	f853 5b04 	ldr.w	r5, [r3], #4
 8003884:	d402      	bmi.n	800388c <_printf_i+0xe8>
 8003886:	0649      	lsls	r1, r1, #25
 8003888:	bf48      	it	mi
 800388a:	b2ad      	uxthmi	r5, r5
 800388c:	2f6f      	cmp	r7, #111	@ 0x6f
 800388e:	6033      	str	r3, [r6, #0]
 8003890:	bf14      	ite	ne
 8003892:	230a      	movne	r3, #10
 8003894:	2308      	moveq	r3, #8
 8003896:	4851      	ldr	r0, [pc, #324]	@ (80039dc <_printf_i+0x238>)
 8003898:	2100      	movs	r1, #0
 800389a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800389e:	6866      	ldr	r6, [r4, #4]
 80038a0:	2e00      	cmp	r6, #0
 80038a2:	bfa8      	it	ge
 80038a4:	6821      	ldrge	r1, [r4, #0]
 80038a6:	60a6      	str	r6, [r4, #8]
 80038a8:	bfa4      	itt	ge
 80038aa:	f021 0104 	bicge.w	r1, r1, #4
 80038ae:	6021      	strge	r1, [r4, #0]
 80038b0:	b90d      	cbnz	r5, 80038b6 <_printf_i+0x112>
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	d04b      	beq.n	800394e <_printf_i+0x1aa>
 80038b6:	4616      	mov	r6, r2
 80038b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80038bc:	fb03 5711 	mls	r7, r3, r1, r5
 80038c0:	5dc7      	ldrb	r7, [r0, r7]
 80038c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038c6:	462f      	mov	r7, r5
 80038c8:	42bb      	cmp	r3, r7
 80038ca:	460d      	mov	r5, r1
 80038cc:	d9f4      	bls.n	80038b8 <_printf_i+0x114>
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d10b      	bne.n	80038ea <_printf_i+0x146>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	07df      	lsls	r7, r3, #31
 80038d6:	d508      	bpl.n	80038ea <_printf_i+0x146>
 80038d8:	6923      	ldr	r3, [r4, #16]
 80038da:	6861      	ldr	r1, [r4, #4]
 80038dc:	4299      	cmp	r1, r3
 80038de:	bfde      	ittt	le
 80038e0:	2330      	movle	r3, #48	@ 0x30
 80038e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038ea:	1b92      	subs	r2, r2, r6
 80038ec:	6122      	str	r2, [r4, #16]
 80038ee:	464b      	mov	r3, r9
 80038f0:	4621      	mov	r1, r4
 80038f2:	4640      	mov	r0, r8
 80038f4:	f8cd a000 	str.w	sl, [sp]
 80038f8:	aa03      	add	r2, sp, #12
 80038fa:	f7ff fee1 	bl	80036c0 <_printf_common>
 80038fe:	3001      	adds	r0, #1
 8003900:	d14a      	bne.n	8003998 <_printf_i+0x1f4>
 8003902:	f04f 30ff 	mov.w	r0, #4294967295
 8003906:	b004      	add	sp, #16
 8003908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	f043 0320 	orr.w	r3, r3, #32
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	2778      	movs	r7, #120	@ 0x78
 8003916:	4832      	ldr	r0, [pc, #200]	@ (80039e0 <_printf_i+0x23c>)
 8003918:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	6831      	ldr	r1, [r6, #0]
 8003920:	061f      	lsls	r7, r3, #24
 8003922:	f851 5b04 	ldr.w	r5, [r1], #4
 8003926:	d402      	bmi.n	800392e <_printf_i+0x18a>
 8003928:	065f      	lsls	r7, r3, #25
 800392a:	bf48      	it	mi
 800392c:	b2ad      	uxthmi	r5, r5
 800392e:	6031      	str	r1, [r6, #0]
 8003930:	07d9      	lsls	r1, r3, #31
 8003932:	bf44      	itt	mi
 8003934:	f043 0320 	orrmi.w	r3, r3, #32
 8003938:	6023      	strmi	r3, [r4, #0]
 800393a:	b11d      	cbz	r5, 8003944 <_printf_i+0x1a0>
 800393c:	2310      	movs	r3, #16
 800393e:	e7ab      	b.n	8003898 <_printf_i+0xf4>
 8003940:	4826      	ldr	r0, [pc, #152]	@ (80039dc <_printf_i+0x238>)
 8003942:	e7e9      	b.n	8003918 <_printf_i+0x174>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	f023 0320 	bic.w	r3, r3, #32
 800394a:	6023      	str	r3, [r4, #0]
 800394c:	e7f6      	b.n	800393c <_printf_i+0x198>
 800394e:	4616      	mov	r6, r2
 8003950:	e7bd      	b.n	80038ce <_printf_i+0x12a>
 8003952:	6833      	ldr	r3, [r6, #0]
 8003954:	6825      	ldr	r5, [r4, #0]
 8003956:	1d18      	adds	r0, r3, #4
 8003958:	6961      	ldr	r1, [r4, #20]
 800395a:	6030      	str	r0, [r6, #0]
 800395c:	062e      	lsls	r6, r5, #24
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	d501      	bpl.n	8003966 <_printf_i+0x1c2>
 8003962:	6019      	str	r1, [r3, #0]
 8003964:	e002      	b.n	800396c <_printf_i+0x1c8>
 8003966:	0668      	lsls	r0, r5, #25
 8003968:	d5fb      	bpl.n	8003962 <_printf_i+0x1be>
 800396a:	8019      	strh	r1, [r3, #0]
 800396c:	2300      	movs	r3, #0
 800396e:	4616      	mov	r6, r2
 8003970:	6123      	str	r3, [r4, #16]
 8003972:	e7bc      	b.n	80038ee <_printf_i+0x14a>
 8003974:	6833      	ldr	r3, [r6, #0]
 8003976:	2100      	movs	r1, #0
 8003978:	1d1a      	adds	r2, r3, #4
 800397a:	6032      	str	r2, [r6, #0]
 800397c:	681e      	ldr	r6, [r3, #0]
 800397e:	6862      	ldr	r2, [r4, #4]
 8003980:	4630      	mov	r0, r6
 8003982:	f000 f859 	bl	8003a38 <memchr>
 8003986:	b108      	cbz	r0, 800398c <_printf_i+0x1e8>
 8003988:	1b80      	subs	r0, r0, r6
 800398a:	6060      	str	r0, [r4, #4]
 800398c:	6863      	ldr	r3, [r4, #4]
 800398e:	6123      	str	r3, [r4, #16]
 8003990:	2300      	movs	r3, #0
 8003992:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003996:	e7aa      	b.n	80038ee <_printf_i+0x14a>
 8003998:	4632      	mov	r2, r6
 800399a:	4649      	mov	r1, r9
 800399c:	4640      	mov	r0, r8
 800399e:	6923      	ldr	r3, [r4, #16]
 80039a0:	47d0      	blx	sl
 80039a2:	3001      	adds	r0, #1
 80039a4:	d0ad      	beq.n	8003902 <_printf_i+0x15e>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	079b      	lsls	r3, r3, #30
 80039aa:	d413      	bmi.n	80039d4 <_printf_i+0x230>
 80039ac:	68e0      	ldr	r0, [r4, #12]
 80039ae:	9b03      	ldr	r3, [sp, #12]
 80039b0:	4298      	cmp	r0, r3
 80039b2:	bfb8      	it	lt
 80039b4:	4618      	movlt	r0, r3
 80039b6:	e7a6      	b.n	8003906 <_printf_i+0x162>
 80039b8:	2301      	movs	r3, #1
 80039ba:	4632      	mov	r2, r6
 80039bc:	4649      	mov	r1, r9
 80039be:	4640      	mov	r0, r8
 80039c0:	47d0      	blx	sl
 80039c2:	3001      	adds	r0, #1
 80039c4:	d09d      	beq.n	8003902 <_printf_i+0x15e>
 80039c6:	3501      	adds	r5, #1
 80039c8:	68e3      	ldr	r3, [r4, #12]
 80039ca:	9903      	ldr	r1, [sp, #12]
 80039cc:	1a5b      	subs	r3, r3, r1
 80039ce:	42ab      	cmp	r3, r5
 80039d0:	dcf2      	bgt.n	80039b8 <_printf_i+0x214>
 80039d2:	e7eb      	b.n	80039ac <_printf_i+0x208>
 80039d4:	2500      	movs	r5, #0
 80039d6:	f104 0619 	add.w	r6, r4, #25
 80039da:	e7f5      	b.n	80039c8 <_printf_i+0x224>
 80039dc:	08003b3f 	.word	0x08003b3f
 80039e0:	08003b50 	.word	0x08003b50

080039e4 <memmove>:
 80039e4:	4288      	cmp	r0, r1
 80039e6:	b510      	push	{r4, lr}
 80039e8:	eb01 0402 	add.w	r4, r1, r2
 80039ec:	d902      	bls.n	80039f4 <memmove+0x10>
 80039ee:	4284      	cmp	r4, r0
 80039f0:	4623      	mov	r3, r4
 80039f2:	d807      	bhi.n	8003a04 <memmove+0x20>
 80039f4:	1e43      	subs	r3, r0, #1
 80039f6:	42a1      	cmp	r1, r4
 80039f8:	d008      	beq.n	8003a0c <memmove+0x28>
 80039fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a02:	e7f8      	b.n	80039f6 <memmove+0x12>
 8003a04:	4601      	mov	r1, r0
 8003a06:	4402      	add	r2, r0
 8003a08:	428a      	cmp	r2, r1
 8003a0a:	d100      	bne.n	8003a0e <memmove+0x2a>
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a16:	e7f7      	b.n	8003a08 <memmove+0x24>

08003a18 <_sbrk_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	4d05      	ldr	r5, [pc, #20]	@ (8003a34 <_sbrk_r+0x1c>)
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4608      	mov	r0, r1
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	f7fd fcf0 	bl	8001408 <_sbrk>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_sbrk_r+0x1a>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_sbrk_r+0x1a>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	20000814 	.word	0x20000814

08003a38 <memchr>:
 8003a38:	4603      	mov	r3, r0
 8003a3a:	b510      	push	{r4, lr}
 8003a3c:	b2c9      	uxtb	r1, r1
 8003a3e:	4402      	add	r2, r0
 8003a40:	4293      	cmp	r3, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	d101      	bne.n	8003a4a <memchr+0x12>
 8003a46:	2000      	movs	r0, #0
 8003a48:	e003      	b.n	8003a52 <memchr+0x1a>
 8003a4a:	7804      	ldrb	r4, [r0, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	428c      	cmp	r4, r1
 8003a50:	d1f6      	bne.n	8003a40 <memchr+0x8>
 8003a52:	bd10      	pop	{r4, pc}

08003a54 <_realloc_r>:
 8003a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a58:	4680      	mov	r8, r0
 8003a5a:	4615      	mov	r5, r2
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	b921      	cbnz	r1, 8003a6a <_realloc_r+0x16>
 8003a60:	4611      	mov	r1, r2
 8003a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a66:	f7ff bc47 	b.w	80032f8 <_malloc_r>
 8003a6a:	b92a      	cbnz	r2, 8003a78 <_realloc_r+0x24>
 8003a6c:	f7ff fbda 	bl	8003224 <_free_r>
 8003a70:	2400      	movs	r4, #0
 8003a72:	4620      	mov	r0, r4
 8003a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a78:	f000 f81a 	bl	8003ab0 <_malloc_usable_size_r>
 8003a7c:	4285      	cmp	r5, r0
 8003a7e:	4606      	mov	r6, r0
 8003a80:	d802      	bhi.n	8003a88 <_realloc_r+0x34>
 8003a82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a86:	d8f4      	bhi.n	8003a72 <_realloc_r+0x1e>
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	f7ff fc34 	bl	80032f8 <_malloc_r>
 8003a90:	4607      	mov	r7, r0
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d0ec      	beq.n	8003a70 <_realloc_r+0x1c>
 8003a96:	42b5      	cmp	r5, r6
 8003a98:	462a      	mov	r2, r5
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	bf28      	it	cs
 8003a9e:	4632      	movcs	r2, r6
 8003aa0:	f7ff fbb2 	bl	8003208 <memcpy>
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	4640      	mov	r0, r8
 8003aa8:	f7ff fbbc 	bl	8003224 <_free_r>
 8003aac:	463c      	mov	r4, r7
 8003aae:	e7e0      	b.n	8003a72 <_realloc_r+0x1e>

08003ab0 <_malloc_usable_size_r>:
 8003ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab4:	1f18      	subs	r0, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bfbc      	itt	lt
 8003aba:	580b      	ldrlt	r3, [r1, r0]
 8003abc:	18c0      	addlt	r0, r0, r3
 8003abe:	4770      	bx	lr

08003ac0 <_init>:
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	bf00      	nop
 8003ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac6:	bc08      	pop	{r3}
 8003ac8:	469e      	mov	lr, r3
 8003aca:	4770      	bx	lr

08003acc <_fini>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	bf00      	nop
 8003ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad2:	bc08      	pop	{r3}
 8003ad4:	469e      	mov	lr, r3
 8003ad6:	4770      	bx	lr
