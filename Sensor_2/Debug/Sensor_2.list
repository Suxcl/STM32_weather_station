
Sensor_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009058  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08009168  08009168  0000a168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800955c  0800955c  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800955c  0800955c  0000a55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009564  08009564  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009564  08009564  0000a564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009568  08009568  0000a568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800956c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  200001e0  08009748  0000b1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  08009748  0000b980  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aad6  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f8  00000000  00000000  00015cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00017fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000849  00000000  00000000  00018ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e21  00000000  00000000  00019321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee05  00000000  00000000  00032142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c5a  00000000  00000000  00040f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000401c  00000000  00000000  000c7be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000cbc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009150 	.word	0x08009150

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009150 	.word	0x08009150

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <__aeabi_uldivmod>:
 8001030:	b953      	cbnz	r3, 8001048 <__aeabi_uldivmod+0x18>
 8001032:	b94a      	cbnz	r2, 8001048 <__aeabi_uldivmod+0x18>
 8001034:	2900      	cmp	r1, #0
 8001036:	bf08      	it	eq
 8001038:	2800      	cmpeq	r0, #0
 800103a:	bf1c      	itt	ne
 800103c:	f04f 31ff 	movne.w	r1, #4294967295
 8001040:	f04f 30ff 	movne.w	r0, #4294967295
 8001044:	f000 b968 	b.w	8001318 <__aeabi_idiv0>
 8001048:	f1ad 0c08 	sub.w	ip, sp, #8
 800104c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001050:	f000 f806 	bl	8001060 <__udivmoddi4>
 8001054:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800105c:	b004      	add	sp, #16
 800105e:	4770      	bx	lr

08001060 <__udivmoddi4>:
 8001060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001064:	9d08      	ldr	r5, [sp, #32]
 8001066:	460c      	mov	r4, r1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d14e      	bne.n	800110a <__udivmoddi4+0xaa>
 800106c:	4694      	mov	ip, r2
 800106e:	458c      	cmp	ip, r1
 8001070:	4686      	mov	lr, r0
 8001072:	fab2 f282 	clz	r2, r2
 8001076:	d962      	bls.n	800113e <__udivmoddi4+0xde>
 8001078:	b14a      	cbz	r2, 800108e <__udivmoddi4+0x2e>
 800107a:	f1c2 0320 	rsb	r3, r2, #32
 800107e:	4091      	lsls	r1, r2
 8001080:	fa20 f303 	lsr.w	r3, r0, r3
 8001084:	fa0c fc02 	lsl.w	ip, ip, r2
 8001088:	4319      	orrs	r1, r3
 800108a:	fa00 fe02 	lsl.w	lr, r0, r2
 800108e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001092:	fbb1 f4f7 	udiv	r4, r1, r7
 8001096:	fb07 1114 	mls	r1, r7, r4, r1
 800109a:	fa1f f68c 	uxth.w	r6, ip
 800109e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010a6:	fb04 f106 	mul.w	r1, r4, r6
 80010aa:	4299      	cmp	r1, r3
 80010ac:	d90a      	bls.n	80010c4 <__udivmoddi4+0x64>
 80010ae:	eb1c 0303 	adds.w	r3, ip, r3
 80010b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80010b6:	f080 8110 	bcs.w	80012da <__udivmoddi4+0x27a>
 80010ba:	4299      	cmp	r1, r3
 80010bc:	f240 810d 	bls.w	80012da <__udivmoddi4+0x27a>
 80010c0:	3c02      	subs	r4, #2
 80010c2:	4463      	add	r3, ip
 80010c4:	1a59      	subs	r1, r3, r1
 80010c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80010ca:	fb07 1110 	mls	r1, r7, r0, r1
 80010ce:	fb00 f606 	mul.w	r6, r0, r6
 80010d2:	fa1f f38e 	uxth.w	r3, lr
 80010d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010da:	429e      	cmp	r6, r3
 80010dc:	d90a      	bls.n	80010f4 <__udivmoddi4+0x94>
 80010de:	eb1c 0303 	adds.w	r3, ip, r3
 80010e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010e6:	f080 80fa 	bcs.w	80012de <__udivmoddi4+0x27e>
 80010ea:	429e      	cmp	r6, r3
 80010ec:	f240 80f7 	bls.w	80012de <__udivmoddi4+0x27e>
 80010f0:	4463      	add	r3, ip
 80010f2:	3802      	subs	r0, #2
 80010f4:	2100      	movs	r1, #0
 80010f6:	1b9b      	subs	r3, r3, r6
 80010f8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010fc:	b11d      	cbz	r5, 8001106 <__udivmoddi4+0xa6>
 80010fe:	40d3      	lsrs	r3, r2
 8001100:	2200      	movs	r2, #0
 8001102:	e9c5 3200 	strd	r3, r2, [r5]
 8001106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800110a:	428b      	cmp	r3, r1
 800110c:	d905      	bls.n	800111a <__udivmoddi4+0xba>
 800110e:	b10d      	cbz	r5, 8001114 <__udivmoddi4+0xb4>
 8001110:	e9c5 0100 	strd	r0, r1, [r5]
 8001114:	2100      	movs	r1, #0
 8001116:	4608      	mov	r0, r1
 8001118:	e7f5      	b.n	8001106 <__udivmoddi4+0xa6>
 800111a:	fab3 f183 	clz	r1, r3
 800111e:	2900      	cmp	r1, #0
 8001120:	d146      	bne.n	80011b0 <__udivmoddi4+0x150>
 8001122:	42a3      	cmp	r3, r4
 8001124:	d302      	bcc.n	800112c <__udivmoddi4+0xcc>
 8001126:	4290      	cmp	r0, r2
 8001128:	f0c0 80ee 	bcc.w	8001308 <__udivmoddi4+0x2a8>
 800112c:	1a86      	subs	r6, r0, r2
 800112e:	eb64 0303 	sbc.w	r3, r4, r3
 8001132:	2001      	movs	r0, #1
 8001134:	2d00      	cmp	r5, #0
 8001136:	d0e6      	beq.n	8001106 <__udivmoddi4+0xa6>
 8001138:	e9c5 6300 	strd	r6, r3, [r5]
 800113c:	e7e3      	b.n	8001106 <__udivmoddi4+0xa6>
 800113e:	2a00      	cmp	r2, #0
 8001140:	f040 808f 	bne.w	8001262 <__udivmoddi4+0x202>
 8001144:	eba1 040c 	sub.w	r4, r1, ip
 8001148:	2101      	movs	r1, #1
 800114a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800114e:	fa1f f78c 	uxth.w	r7, ip
 8001152:	fbb4 f6f8 	udiv	r6, r4, r8
 8001156:	fb08 4416 	mls	r4, r8, r6, r4
 800115a:	fb07 f006 	mul.w	r0, r7, r6
 800115e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001162:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001166:	4298      	cmp	r0, r3
 8001168:	d908      	bls.n	800117c <__udivmoddi4+0x11c>
 800116a:	eb1c 0303 	adds.w	r3, ip, r3
 800116e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001172:	d202      	bcs.n	800117a <__udivmoddi4+0x11a>
 8001174:	4298      	cmp	r0, r3
 8001176:	f200 80cb 	bhi.w	8001310 <__udivmoddi4+0x2b0>
 800117a:	4626      	mov	r6, r4
 800117c:	1a1c      	subs	r4, r3, r0
 800117e:	fbb4 f0f8 	udiv	r0, r4, r8
 8001182:	fb08 4410 	mls	r4, r8, r0, r4
 8001186:	fb00 f707 	mul.w	r7, r0, r7
 800118a:	fa1f f38e 	uxth.w	r3, lr
 800118e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001192:	429f      	cmp	r7, r3
 8001194:	d908      	bls.n	80011a8 <__udivmoddi4+0x148>
 8001196:	eb1c 0303 	adds.w	r3, ip, r3
 800119a:	f100 34ff 	add.w	r4, r0, #4294967295
 800119e:	d202      	bcs.n	80011a6 <__udivmoddi4+0x146>
 80011a0:	429f      	cmp	r7, r3
 80011a2:	f200 80ae 	bhi.w	8001302 <__udivmoddi4+0x2a2>
 80011a6:	4620      	mov	r0, r4
 80011a8:	1bdb      	subs	r3, r3, r7
 80011aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80011ae:	e7a5      	b.n	80010fc <__udivmoddi4+0x9c>
 80011b0:	f1c1 0720 	rsb	r7, r1, #32
 80011b4:	408b      	lsls	r3, r1
 80011b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80011ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80011be:	fa24 f607 	lsr.w	r6, r4, r7
 80011c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011c6:	fbb6 f8f9 	udiv	r8, r6, r9
 80011ca:	fa1f fe8c 	uxth.w	lr, ip
 80011ce:	fb09 6618 	mls	r6, r9, r8, r6
 80011d2:	fa20 f307 	lsr.w	r3, r0, r7
 80011d6:	408c      	lsls	r4, r1
 80011d8:	fa00 fa01 	lsl.w	sl, r0, r1
 80011dc:	fb08 f00e 	mul.w	r0, r8, lr
 80011e0:	431c      	orrs	r4, r3
 80011e2:	0c23      	lsrs	r3, r4, #16
 80011e4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011e8:	4298      	cmp	r0, r3
 80011ea:	fa02 f201 	lsl.w	r2, r2, r1
 80011ee:	d90a      	bls.n	8001206 <__udivmoddi4+0x1a6>
 80011f0:	eb1c 0303 	adds.w	r3, ip, r3
 80011f4:	f108 36ff 	add.w	r6, r8, #4294967295
 80011f8:	f080 8081 	bcs.w	80012fe <__udivmoddi4+0x29e>
 80011fc:	4298      	cmp	r0, r3
 80011fe:	d97e      	bls.n	80012fe <__udivmoddi4+0x29e>
 8001200:	f1a8 0802 	sub.w	r8, r8, #2
 8001204:	4463      	add	r3, ip
 8001206:	1a1e      	subs	r6, r3, r0
 8001208:	fbb6 f3f9 	udiv	r3, r6, r9
 800120c:	fb09 6613 	mls	r6, r9, r3, r6
 8001210:	fb03 fe0e 	mul.w	lr, r3, lr
 8001214:	b2a4      	uxth	r4, r4
 8001216:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800121a:	45a6      	cmp	lr, r4
 800121c:	d908      	bls.n	8001230 <__udivmoddi4+0x1d0>
 800121e:	eb1c 0404 	adds.w	r4, ip, r4
 8001222:	f103 30ff 	add.w	r0, r3, #4294967295
 8001226:	d266      	bcs.n	80012f6 <__udivmoddi4+0x296>
 8001228:	45a6      	cmp	lr, r4
 800122a:	d964      	bls.n	80012f6 <__udivmoddi4+0x296>
 800122c:	3b02      	subs	r3, #2
 800122e:	4464      	add	r4, ip
 8001230:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001234:	fba0 8302 	umull	r8, r3, r0, r2
 8001238:	eba4 040e 	sub.w	r4, r4, lr
 800123c:	429c      	cmp	r4, r3
 800123e:	46c6      	mov	lr, r8
 8001240:	461e      	mov	r6, r3
 8001242:	d350      	bcc.n	80012e6 <__udivmoddi4+0x286>
 8001244:	d04d      	beq.n	80012e2 <__udivmoddi4+0x282>
 8001246:	b155      	cbz	r5, 800125e <__udivmoddi4+0x1fe>
 8001248:	ebba 030e 	subs.w	r3, sl, lr
 800124c:	eb64 0406 	sbc.w	r4, r4, r6
 8001250:	fa04 f707 	lsl.w	r7, r4, r7
 8001254:	40cb      	lsrs	r3, r1
 8001256:	431f      	orrs	r7, r3
 8001258:	40cc      	lsrs	r4, r1
 800125a:	e9c5 7400 	strd	r7, r4, [r5]
 800125e:	2100      	movs	r1, #0
 8001260:	e751      	b.n	8001106 <__udivmoddi4+0xa6>
 8001262:	fa0c fc02 	lsl.w	ip, ip, r2
 8001266:	f1c2 0320 	rsb	r3, r2, #32
 800126a:	40d9      	lsrs	r1, r3
 800126c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001270:	fa20 f303 	lsr.w	r3, r0, r3
 8001274:	fa00 fe02 	lsl.w	lr, r0, r2
 8001278:	fbb1 f0f8 	udiv	r0, r1, r8
 800127c:	fb08 1110 	mls	r1, r8, r0, r1
 8001280:	4094      	lsls	r4, r2
 8001282:	431c      	orrs	r4, r3
 8001284:	fa1f f78c 	uxth.w	r7, ip
 8001288:	0c23      	lsrs	r3, r4, #16
 800128a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800128e:	fb00 f107 	mul.w	r1, r0, r7
 8001292:	4299      	cmp	r1, r3
 8001294:	d908      	bls.n	80012a8 <__udivmoddi4+0x248>
 8001296:	eb1c 0303 	adds.w	r3, ip, r3
 800129a:	f100 36ff 	add.w	r6, r0, #4294967295
 800129e:	d22c      	bcs.n	80012fa <__udivmoddi4+0x29a>
 80012a0:	4299      	cmp	r1, r3
 80012a2:	d92a      	bls.n	80012fa <__udivmoddi4+0x29a>
 80012a4:	3802      	subs	r0, #2
 80012a6:	4463      	add	r3, ip
 80012a8:	1a5b      	subs	r3, r3, r1
 80012aa:	fbb3 f1f8 	udiv	r1, r3, r8
 80012ae:	fb08 3311 	mls	r3, r8, r1, r3
 80012b2:	b2a4      	uxth	r4, r4
 80012b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012b8:	fb01 f307 	mul.w	r3, r1, r7
 80012bc:	42a3      	cmp	r3, r4
 80012be:	d908      	bls.n	80012d2 <__udivmoddi4+0x272>
 80012c0:	eb1c 0404 	adds.w	r4, ip, r4
 80012c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80012c8:	d213      	bcs.n	80012f2 <__udivmoddi4+0x292>
 80012ca:	42a3      	cmp	r3, r4
 80012cc:	d911      	bls.n	80012f2 <__udivmoddi4+0x292>
 80012ce:	3902      	subs	r1, #2
 80012d0:	4464      	add	r4, ip
 80012d2:	1ae4      	subs	r4, r4, r3
 80012d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012d8:	e73b      	b.n	8001152 <__udivmoddi4+0xf2>
 80012da:	4604      	mov	r4, r0
 80012dc:	e6f2      	b.n	80010c4 <__udivmoddi4+0x64>
 80012de:	4608      	mov	r0, r1
 80012e0:	e708      	b.n	80010f4 <__udivmoddi4+0x94>
 80012e2:	45c2      	cmp	sl, r8
 80012e4:	d2af      	bcs.n	8001246 <__udivmoddi4+0x1e6>
 80012e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80012ea:	eb63 060c 	sbc.w	r6, r3, ip
 80012ee:	3801      	subs	r0, #1
 80012f0:	e7a9      	b.n	8001246 <__udivmoddi4+0x1e6>
 80012f2:	4631      	mov	r1, r6
 80012f4:	e7ed      	b.n	80012d2 <__udivmoddi4+0x272>
 80012f6:	4603      	mov	r3, r0
 80012f8:	e79a      	b.n	8001230 <__udivmoddi4+0x1d0>
 80012fa:	4630      	mov	r0, r6
 80012fc:	e7d4      	b.n	80012a8 <__udivmoddi4+0x248>
 80012fe:	46b0      	mov	r8, r6
 8001300:	e781      	b.n	8001206 <__udivmoddi4+0x1a6>
 8001302:	4463      	add	r3, ip
 8001304:	3802      	subs	r0, #2
 8001306:	e74f      	b.n	80011a8 <__udivmoddi4+0x148>
 8001308:	4606      	mov	r6, r0
 800130a:	4623      	mov	r3, r4
 800130c:	4608      	mov	r0, r1
 800130e:	e711      	b.n	8001134 <__udivmoddi4+0xd4>
 8001310:	3e02      	subs	r6, #2
 8001312:	4463      	add	r3, ip
 8001314:	e732      	b.n	800117c <__udivmoddi4+0x11c>
 8001316:	bf00      	nop

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	0000      	movs	r0, r0
	...

08001320 <AHT20_Read>:
#include "AHT20.h"
#include "i2c.h"

void AHT20_Read(float* Temp, float* Humid)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af04      	add	r7, sp, #16
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	uint8_t dum[6];
	HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 800132a:	2364      	movs	r3, #100	@ 0x64
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2301      	movs	r3, #1
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	2271      	movs	r2, #113	@ 0x71
 800133c:	2170      	movs	r1, #112	@ 0x70
 800133e:	484c      	ldr	r0, [pc, #304]	@ (8001470 <AHT20_Read+0x150>)
 8001340:	f002 fc68 	bl	8003c14 <HAL_I2C_Mem_Read>

	if(!(dum[0]&(1<<3)))
 8001344:	7a3b      	ldrb	r3, [r7, #8]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <AHT20_Read+0x52>
	{
		dum[0] = 0xBE, dum[1] = 0x08, dum[2] = 0x00;
 800134e:	23be      	movs	r3, #190	@ 0xbe
 8001350:	723b      	strb	r3, [r7, #8]
 8001352:	2308      	movs	r3, #8
 8001354:	727b      	strb	r3, [r7, #9]
 8001356:	2300      	movs	r3, #0
 8001358:	72bb      	strb	r3, [r7, #10]
		HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 800135a:	f107 0208 	add.w	r2, r7, #8
 800135e:	2364      	movs	r3, #100	@ 0x64
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2303      	movs	r3, #3
 8001364:	2170      	movs	r1, #112	@ 0x70
 8001366:	4842      	ldr	r0, [pc, #264]	@ (8001470 <AHT20_Read+0x150>)
 8001368:	f001 fff0 	bl	800334c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800136c:	200a      	movs	r0, #10
 800136e:	f001 fba1 	bl	8002ab4 <HAL_Delay>
	}

	dum[0] = 0xAC, dum[1] = 0x33, dum[2] = 0x00;
 8001372:	23ac      	movs	r3, #172	@ 0xac
 8001374:	723b      	strb	r3, [r7, #8]
 8001376:	2333      	movs	r3, #51	@ 0x33
 8001378:	727b      	strb	r3, [r7, #9]
 800137a:	2300      	movs	r3, #0
 800137c:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 800137e:	f107 0208 	add.w	r2, r7, #8
 8001382:	2364      	movs	r3, #100	@ 0x64
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2303      	movs	r3, #3
 8001388:	2170      	movs	r1, #112	@ 0x70
 800138a:	4839      	ldr	r0, [pc, #228]	@ (8001470 <AHT20_Read+0x150>)
 800138c:	f001 ffde 	bl	800334c <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8001390:	2050      	movs	r0, #80	@ 0x50
 8001392:	f001 fb8f 	bl	8002ab4 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 8001396:	2364      	movs	r3, #100	@ 0x64
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2301      	movs	r3, #1
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	2271      	movs	r2, #113	@ 0x71
 80013a8:	2170      	movs	r1, #112	@ 0x70
 80013aa:	4831      	ldr	r0, [pc, #196]	@ (8001470 <AHT20_Read+0x150>)
 80013ac:	f002 fc32 	bl	8003c14 <HAL_I2C_Mem_Read>
		HAL_Delay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f001 fb7f 	bl	8002ab4 <HAL_Delay>
	} while(dum[0]&(1<<7));
 80013b6:	7a3b      	ldrb	r3, [r7, #8]
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dbeb      	blt.n	8001396 <AHT20_Read+0x76>

	HAL_I2C_Master_Receive(&HI2C, AHT_ADDR, dum, 6, 100);
 80013be:	f107 0208 	add.w	r2, r7, #8
 80013c2:	2364      	movs	r3, #100	@ 0x64
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2306      	movs	r3, #6
 80013c8:	2170      	movs	r1, #112	@ 0x70
 80013ca:	4829      	ldr	r0, [pc, #164]	@ (8001470 <AHT20_Read+0x150>)
 80013cc:	f002 f8bc 	bl	8003548 <HAL_I2C_Master_Receive>
	uint32_t h20 = (dum[1])<<12 | (dum[2])<<4 | (dum[3]>>4);
 80013d0:	7a7b      	ldrb	r3, [r7, #9]
 80013d2:	031a      	lsls	r2, r3, #12
 80013d4:	7abb      	ldrb	r3, [r7, #10]
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	4313      	orrs	r3, r2
 80013da:	7afa      	ldrb	r2, [r7, #11]
 80013dc:	0912      	lsrs	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	4313      	orrs	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
	uint32_t t20 = (dum[3]&0x0F)<<16 | (dum[4])<<8 | dum[5];
 80013e4:	7afb      	ldrb	r3, [r7, #11]
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	4313      	orrs	r3, r2
 80013f2:	7b7a      	ldrb	r2, [r7, #13]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
	*Temp = (t20 / 1048576.0)*200.0 - 50.0;
 80013f8:	6938      	ldr	r0, [r7, #16]
 80013fa:	f7fe fff3 	bl	80003e4 <__aeabi_ui2d>
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <AHT20_Read+0x154>)
 8001404:	f7ff f992 	bl	800072c <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <AHT20_Read+0x158>)
 8001416:	f7ff f85f 	bl	80004d8 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <AHT20_Read+0x15c>)
 8001428:	f7fe fe9e 	bl	8000168 <__aeabi_dsub>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb28 	bl	8000a88 <__aeabi_d2f>
 8001438:	4602      	mov	r2, r0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	601a      	str	r2, [r3, #0]
	*Humid = h20 / 10485.76;
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7fe ffd0 	bl	80003e4 <__aeabi_ui2d>
 8001444:	a308      	add	r3, pc, #32	@ (adr r3, 8001468 <AHT20_Read+0x148>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f96f 	bl	800072c <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fb17 	bl	8000a88 <__aeabi_d2f>
 800145a:	4602      	mov	r2, r0
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	47ae147b 	.word	0x47ae147b
 800146c:	40c47ae1 	.word	0x40c47ae1
 8001470:	20000218 	.word	0x20000218
 8001474:	41300000 	.word	0x41300000
 8001478:	40690000 	.word	0x40690000
 800147c:	40490000 	.word	0x40490000

08001480 <BMP280_Init>:
int32_t t_fine;


/* Function to initialize BMP280 */
HAL_StatusTypeDef BMP280_Init(I2C_HandleTypeDef *hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	@ 0x38
 8001484:	af04      	add	r7, sp, #16
 8001486:	6078      	str	r0, [r7, #4]
    uint8_t chip_id = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t data[24];

    /* Check chip ID */
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDR << 1, BMP280_CHIP_ID_REG, 1, &chip_id, 1, 1000);
 800148e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	22d0      	movs	r2, #208	@ 0xd0
 80014a2:	21ee      	movs	r1, #238	@ 0xee
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f002 fbb5 	bl	8003c14 <HAL_I2C_Mem_Read>
    if (chip_id != 0x58) // BMP280 chip id
 80014aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014ae:	2b58      	cmp	r3, #88	@ 0x58
 80014b0:	d001      	beq.n	80014b6 <BMP280_Init+0x36>
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0b7      	b.n	8001626 <BMP280_Init+0x1a6>

    /* Reset the sensor */
    uint8_t reset_cmd = 0xB6;
 80014b6:	23b6      	movs	r3, #182	@ 0xb6
 80014b8:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c, BMP280_I2C_ADDR << 1, BMP280_RESET_REG, 1, &reset_cmd, 1, 1000);
 80014ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	2301      	movs	r3, #1
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	f107 030b 	add.w	r3, r7, #11
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	22e0      	movs	r2, #224	@ 0xe0
 80014ce:	21ee      	movs	r1, #238	@ 0xee
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f002 faa5 	bl	8003a20 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80014d6:	200a      	movs	r0, #10
 80014d8:	f001 faec 	bl	8002ab4 <HAL_Delay>

    /* Read calibration data */
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDR << 1, BMP280_DIG_T1_LSB_REG, 1, data, 24, 1000);
 80014dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	2318      	movs	r3, #24
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2301      	movs	r3, #1
 80014ee:	2288      	movs	r2, #136	@ 0x88
 80014f0:	21ee      	movs	r1, #238	@ 0xee
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f002 fb8e 	bl	8003c14 <HAL_I2C_Mem_Read>

    calibData.dig_T1 = (data[1] << 8) | data[0];
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	7b3b      	ldrb	r3, [r7, #12]
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21b      	sxth	r3, r3
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b49      	ldr	r3, [pc, #292]	@ (8001630 <BMP280_Init+0x1b0>)
 800150a:	801a      	strh	r2, [r3, #0]
    calibData.dig_T2 = (data[3] << 8) | data[2];
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	7bbb      	ldrb	r3, [r7, #14]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21a      	sxth	r2, r3
 800151a:	4b45      	ldr	r3, [pc, #276]	@ (8001630 <BMP280_Init+0x1b0>)
 800151c:	805a      	strh	r2, [r3, #2]
    calibData.dig_T3 = (data[5] << 8) | data[4];
 800151e:	7c7b      	ldrb	r3, [r7, #17]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	7c3b      	ldrb	r3, [r7, #16]
 8001526:	b21b      	sxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b40      	ldr	r3, [pc, #256]	@ (8001630 <BMP280_Init+0x1b0>)
 800152e:	809a      	strh	r2, [r3, #4]
    calibData.dig_P1 = (data[7] << 8) | data[6];
 8001530:	7cfb      	ldrb	r3, [r7, #19]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	7cbb      	ldrb	r3, [r7, #18]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21b      	sxth	r3, r3
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <BMP280_Init+0x1b0>)
 8001542:	80da      	strh	r2, [r3, #6]
    calibData.dig_P2 = (data[9] << 8) | data[8];
 8001544:	7d7b      	ldrb	r3, [r7, #21]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7d3b      	ldrb	r3, [r7, #20]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21a      	sxth	r2, r3
 8001552:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <BMP280_Init+0x1b0>)
 8001554:	811a      	strh	r2, [r3, #8]
    calibData.dig_P3 = (data[11] << 8) | data[10];
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b21a      	sxth	r2, r3
 800155c:	7dbb      	ldrb	r3, [r7, #22]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <BMP280_Init+0x1b0>)
 8001566:	815a      	strh	r2, [r3, #10]
    calibData.dig_P4 = (data[13] << 8) | data[12];
 8001568:	7e7b      	ldrb	r3, [r7, #25]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	7e3b      	ldrb	r3, [r7, #24]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <BMP280_Init+0x1b0>)
 8001578:	819a      	strh	r2, [r3, #12]
    calibData.dig_P5 = (data[15] << 8) | data[14];
 800157a:	7efb      	ldrb	r3, [r7, #27]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	7ebb      	ldrb	r3, [r7, #26]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <BMP280_Init+0x1b0>)
 800158a:	81da      	strh	r2, [r3, #14]
    calibData.dig_P6 = (data[17] << 8) | data[16];
 800158c:	7f7b      	ldrb	r3, [r7, #29]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	7f3b      	ldrb	r3, [r7, #28]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <BMP280_Init+0x1b0>)
 800159c:	821a      	strh	r2, [r3, #16]
    calibData.dig_P7 = (data[19] << 8) | data[18];
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <BMP280_Init+0x1b0>)
 80015ae:	825a      	strh	r2, [r3, #18]
    calibData.dig_P8 = (data[21] << 8) | data[20];
 80015b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015bc:	b21b      	sxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <BMP280_Init+0x1b0>)
 80015c4:	829a      	strh	r2, [r3, #20]
    calibData.dig_P9 = (data[23] << 8) | data[22];
 80015c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <BMP280_Init+0x1b0>)
 80015da:	82da      	strh	r2, [r3, #22]

    /* Configure the sensor */
    uint8_t config = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	72bb      	strb	r3, [r7, #10]
    config = (0x04 << 5) | (0x04 << 2) | 0x00; // Standby time 500ms, Filter coefficient 16, SPI disabled
 80015e0:	2390      	movs	r3, #144	@ 0x90
 80015e2:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(hi2c, BMP280_I2C_ADDR << 1, BMP280_CONFIG_REG, 1, &config, 1, 1000);
 80015e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	f107 030a 	add.w	r3, r7, #10
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	22f5      	movs	r2, #245	@ 0xf5
 80015f8:	21ee      	movs	r1, #238	@ 0xee
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f002 fa10 	bl	8003a20 <HAL_I2C_Mem_Write>

    /* Set measurement settings */
    uint8_t ctrl_meas = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	727b      	strb	r3, [r7, #9]
    ctrl_meas = (0x02 << 5) | (0x05 << 2) | 0x03; // Oversampling x4 for temp, x16 for pressure, normal mode
 8001604:	2357      	movs	r3, #87	@ 0x57
 8001606:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Mem_Write(hi2c, BMP280_I2C_ADDR << 1, BMP280_CTRL_MEAS_REG, 1, &ctrl_meas, 1, 1000);
 8001608:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	2301      	movs	r3, #1
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	f107 0309 	add.w	r3, r7, #9
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	22f4      	movs	r2, #244	@ 0xf4
 800161c:	21ee      	movs	r1, #238	@ 0xee
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f002 f9fe 	bl	8003a20 <HAL_I2C_Mem_Write>

    return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001fc 	.word	0x200001fc

08001634 <BMP280_ReadPressure>:

/* Function to read pressure */
float BMP280_ReadPressure(I2C_HandleTypeDef *hi2c)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	@ 0x38
 8001638:	af04      	add	r7, sp, #16
 800163a:	6078      	str	r0, [r7, #4]
    int32_t adc_P, adc_T;
    int32_t var1, var2;
    uint32_t pressure;

    /* Read pressure and temperature data */
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDR << 1, BMP280_PRESS_MSB_REG, 1, data, 6, 1000);
 800163c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	2306      	movs	r3, #6
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	22f7      	movs	r2, #247	@ 0xf7
 8001650:	21ee      	movs	r1, #238	@ 0xee
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f002 fade 	bl	8003c14 <HAL_I2C_Mem_Read>

    adc_P = ((uint32_t)data[0] << 12) | ((uint32_t)data[1] << 4) | ((uint32_t)data[2] >> 4);
 8001658:	7b3b      	ldrb	r3, [r7, #12]
 800165a:	031a      	lsls	r2, r3, #12
 800165c:	7b7b      	ldrb	r3, [r7, #13]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4313      	orrs	r3, r2
 8001662:	7bba      	ldrb	r2, [r7, #14]
 8001664:	0912      	lsrs	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	4313      	orrs	r3, r2
 800166a:	623b      	str	r3, [r7, #32]
    adc_T = ((uint32_t)data[3] << 12) | ((uint32_t)data[4] << 4) | ((uint32_t)data[5] >> 4);
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	031a      	lsls	r2, r3, #12
 8001670:	7c3b      	ldrb	r3, [r7, #16]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4313      	orrs	r3, r2
 8001676:	7c7a      	ldrb	r2, [r7, #17]
 8001678:	0912      	lsrs	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	4313      	orrs	r3, r2
 800167e:	61fb      	str	r3, [r7, #28]

    /* Calculate temperature (just to get t_fine value) */
    var1 = ((((adc_T >> 3) - ((int32_t)calibData.dig_T1 << 1))) * ((int32_t)calibData.dig_T2)) >> 11;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	10da      	asrs	r2, r3, #3
 8001684:	4b5f      	ldr	r3, [pc, #380]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	4a5d      	ldr	r2, [pc, #372]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 800168e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	12db      	asrs	r3, r3, #11
 8001698:	61bb      	str	r3, [r7, #24]
    var2 = (((((adc_T >> 4) - ((int32_t)calibData.dig_T1)) * ((adc_T >> 4) - ((int32_t)calibData.dig_T1))) >> 12) * ((int32_t)calibData.dig_T3)) >> 14;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	111b      	asrs	r3, r3, #4
 800169e:	4a59      	ldr	r2, [pc, #356]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80016a0:	8812      	ldrh	r2, [r2, #0]
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	1112      	asrs	r2, r2, #4
 80016a8:	4956      	ldr	r1, [pc, #344]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80016aa:	8809      	ldrh	r1, [r1, #0]
 80016ac:	1a52      	subs	r2, r2, r1
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	131b      	asrs	r3, r3, #12
 80016b4:	4a53      	ldr	r2, [pc, #332]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80016b6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	139b      	asrs	r3, r3, #14
 80016c0:	617b      	str	r3, [r7, #20]
    t_fine = var1 + var2;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001808 <BMP280_ReadPressure+0x1d4>)
 80016ca:	6013      	str	r3, [r2, #0]

    /* Calculate pressure */
    var1 = (((int32_t)t_fine) >> 1) - (int32_t)64000;
 80016cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001808 <BMP280_ReadPressure+0x1d4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	105b      	asrs	r3, r3, #1
 80016d2:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 80016d6:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t)calibData.dig_P6);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	109b      	asrs	r3, r3, #2
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	1092      	asrs	r2, r2, #2
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	12db      	asrs	r3, r3, #11
 80016e6:	4a47      	ldr	r2, [pc, #284]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80016e8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calibData.dig_P5)) << 1);
 80016f2:	4b44      	ldr	r3, [pc, #272]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80016f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016f8:	461a      	mov	r2, r3
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4413      	add	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
    var2 = (var2 >> 2) + (((int32_t)calibData.dig_P4) << 16);
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	109a      	asrs	r2, r3, #2
 800170c:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 800170e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	4413      	add	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
    var1 = (((calibData.dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int32_t)calibData.dig_P2) * var1) >> 1)) >> 18;
 8001718:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 800171a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800171e:	4619      	mov	r1, r3
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	109b      	asrs	r3, r3, #2
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	1092      	asrs	r2, r2, #2
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	135b      	asrs	r3, r3, #13
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	10da      	asrs	r2, r3, #3
 8001734:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 8001736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800173a:	4619      	mov	r1, r3
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	105b      	asrs	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	149b      	asrs	r3, r3, #18
 8001748:	61bb      	str	r3, [r7, #24]
    var1 = ((((32768 + var1)) * ((int32_t)calibData.dig_P1)) >> 15);
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001750:	4a2c      	ldr	r2, [pc, #176]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 8001752:	88d2      	ldrh	r2, [r2, #6]
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	13db      	asrs	r3, r3, #15
 800175a:	61bb      	str	r3, [r7, #24]

    if (var1 == 0)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <BMP280_ReadPressure+0x134>
        return 0;
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e049      	b.n	80017fc <BMP280_ReadPressure+0x1c8>

    pressure = (((uint32_t)(((int32_t)1048576) - adc_P) - (var2 >> 12))) * 3125;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	131b      	asrs	r3, r3, #12
 800176c:	461a      	mov	r2, r3
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	4413      	add	r3, r2
 8001772:	4a26      	ldr	r2, [pc, #152]	@ (800180c <BMP280_ReadPressure+0x1d8>)
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 800177c:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    if (pressure < 0x80000000)
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	db06      	blt.n	8001796 <BMP280_ReadPressure+0x162>
        pressure = (pressure << 1) / ((uint32_t)var1);
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	005a      	lsls	r2, r3, #1
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
 8001794:	e005      	b.n	80017a2 <BMP280_ReadPressure+0x16e>
    else
        pressure = (pressure / (uint32_t)var1) * 2;
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24

    var1 = (((int32_t)calibData.dig_P9) * ((int32_t)(((pressure >> 3) * (pressure >> 3)) >> 13))) >> 12;
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80017a4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017a8:	4619      	mov	r1, r3
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b0:	08d2      	lsrs	r2, r2, #3
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	0b5b      	lsrs	r3, r3, #13
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	131b      	asrs	r3, r3, #12
 80017be:	61bb      	str	r3, [r7, #24]
    var2 = (((int32_t)(pressure >> 2)) * ((int32_t)calibData.dig_P8)) >> 13;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80017c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	135b      	asrs	r3, r3, #13
 80017d2:	617b      	str	r3, [r7, #20]
    pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calibData.dig_P7) >> 4));
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	4413      	add	r3, r2
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <BMP280_ReadPressure+0x1d0>)
 80017dc:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80017e0:	4413      	add	r3, r2
 80017e2:	111a      	asrs	r2, r3, #4
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	4413      	add	r3, r2
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24

    return pressure / 100.0f; // Return pressure in hPa
 80017ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017ec:	f7ff fa52 	bl	8000c94 <__aeabi_ui2f>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4907      	ldr	r1, [pc, #28]	@ (8001810 <BMP280_ReadPressure+0x1dc>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fb59 	bl	8000eac <__aeabi_fdiv>
 80017fa:	4603      	mov	r3, r0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3728      	adds	r7, #40	@ 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200001fc 	.word	0x200001fc
 8001808:	20000214 	.word	0x20000214
 800180c:	fffff3cb 	.word	0xfffff3cb
 8001810:	42c80000 	.word	0x42c80000

08001814 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fbd0 	bl	8001fce <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fbeb 	bl	800200e <SX1278_hw_SPIReadByte>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fb88 	bl	8001f58 <SX1278_hw_SetNSS>
	return tmp;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	70fb      	strb	r3, [r7, #3]
 800185e:	4613      	mov	r3, r2
 8001860:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fb75 	bl	8001f58 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4619      	mov	r1, r3
 800187c:	4610      	mov	r0, r2
 800187e:	f000 fba6 	bl	8001fce <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	78ba      	ldrb	r2, [r7, #2]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fb9f 	bl	8001fce <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2101      	movs	r1, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fb5e 	bl	8001f58 <SX1278_hw_SetNSS>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	461a      	mov	r2, r3
 80018b0:	460b      	mov	r3, r1
 80018b2:	72fb      	strb	r3, [r7, #11]
 80018b4:	4613      	mov	r3, r2
 80018b6:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80018b8:	7abb      	ldrb	r3, [r7, #10]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d927      	bls.n	800190e <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fb47 	bl	8001f58 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	7afa      	ldrb	r2, [r7, #11]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fb7b 	bl	8001fce <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80018d8:	2300      	movs	r3, #0
 80018da:	75fb      	strb	r3, [r7, #23]
 80018dc:	e00c      	b.n	80018f8 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6819      	ldr	r1, [r3, #0]
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	18d4      	adds	r4, r2, r3
 80018e8:	4608      	mov	r0, r1
 80018ea:	f000 fb90 	bl	800200e <SX1278_hw_SPIReadByte>
 80018ee:	4603      	mov	r3, r0
 80018f0:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	3301      	adds	r3, #1
 80018f6:	75fb      	strb	r3, [r7, #23]
 80018f8:	7dfa      	ldrb	r2, [r7, #23]
 80018fa:	7abb      	ldrb	r3, [r7, #10]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3ee      	bcc.n	80018de <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2101      	movs	r1, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fb26 	bl	8001f58 <SX1278_hw_SetNSS>
 800190c:	e000      	b.n	8001910 <SX1278_SPIBurstRead+0x6c>
		return;
 800190e:	bf00      	nop
	}
}
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}

08001916 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	461a      	mov	r2, r3
 8001922:	460b      	mov	r3, r1
 8001924:	72fb      	strb	r3, [r7, #11]
 8001926:	4613      	mov	r3, r2
 8001928:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800192a:	7abb      	ldrb	r3, [r7, #10]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d929      	bls.n	8001984 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fb0e 	bl	8001f58 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4619      	mov	r1, r3
 800194a:	4610      	mov	r0, r2
 800194c:	f000 fb3f 	bl	8001fce <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001950:	2300      	movs	r3, #0
 8001952:	75fb      	strb	r3, [r7, #23]
 8001954:	e00b      	b.n	800196e <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4619      	mov	r1, r3
 8001964:	f000 fb33 	bl	8001fce <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	3301      	adds	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
 800196e:	7dfa      	ldrb	r2, [r7, #23]
 8001970:	7abb      	ldrb	r3, [r7, #10]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3ef      	bcc.n	8001956 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2101      	movs	r1, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f000 faeb 	bl	8001f58 <SX1278_hw_SetNSS>
 8001982:	e000      	b.n	8001986 <SX1278_SPIBurstWrite+0x70>
		return;
 8001984:	bf00      	nop
	}
}
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f90d 	bl	8001bb4 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800199a:	200f      	movs	r0, #15
 800199c:	f000 fb5d 	bl	800205a <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f917 	bl	8001bd4 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019ac:	f04f 0000 	mov.w	r0, #0
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	04d9      	lsls	r1, r3, #19
 80019b6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80019ba:	04d0      	lsls	r0, r2, #19
 80019bc:	4a6f      	ldr	r2, [pc, #444]	@ (8001b7c <SX1278_config+0x1f0>)
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	f7ff fb35 	bl	8001030 <__aeabi_uldivmod>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80019ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	0c02      	lsrs	r2, r0, #16
 80019dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80019e0:	0c0b      	lsrs	r3, r1, #16
 80019e2:	b2d3      	uxtb	r3, r2
 80019e4:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80019e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	0a02      	lsrs	r2, r0, #8
 80019f4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80019f8:	0a0b      	lsrs	r3, r1, #8
 80019fa:	b2d3      	uxtb	r3, r2
 80019fc:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80019fe:	7c3b      	ldrb	r3, [r7, #16]
 8001a00:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8001a02:	f107 020c 	add.w	r2, r7, #12
 8001a06:	2303      	movs	r3, #3
 8001a08:	2106      	movs	r1, #6
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff83 	bl	8001916 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8001a10:	2234      	movs	r2, #52	@ 0x34
 8001a12:	2139      	movs	r1, #57	@ 0x39
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff1c 	bl	8001852 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7c1b      	ldrb	r3, [r3, #16]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b57      	ldr	r3, [pc, #348]	@ (8001b80 <SX1278_config+0x1f4>)
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	461a      	mov	r2, r3
 8001a26:	2109      	movs	r1, #9
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff12 	bl	8001852 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001a2e:	220b      	movs	r2, #11
 8001a30:	210b      	movs	r1, #11
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff0d 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001a38:	2223      	movs	r2, #35	@ 0x23
 8001a3a:	210c      	movs	r1, #12
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff08 	bl	8001852 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7c5b      	ldrb	r3, [r3, #17]
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b4e      	ldr	r3, [pc, #312]	@ (8001b84 <SX1278_config+0x1f8>)
 8001a4a:	5c9b      	ldrb	r3, [r3, r2]
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	d147      	bne.n	8001ae0 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7c9b      	ldrb	r3, [r3, #18]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b4c      	ldr	r3, [pc, #304]	@ (8001b88 <SX1278_config+0x1fc>)
 8001a58:	5c9b      	ldrb	r3, [r3, r2]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7cdb      	ldrb	r3, [r3, #19]
 8001a62:	4619      	mov	r1, r3
 8001a64:	4b49      	ldr	r3, [pc, #292]	@ (8001b8c <SX1278_config+0x200>)
 8001a66:	5c5b      	ldrb	r3, [r3, r1]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	211d      	movs	r1, #29
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff feea 	bl	8001852 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7c5b      	ldrb	r3, [r3, #17]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b3f      	ldr	r3, [pc, #252]	@ (8001b84 <SX1278_config+0x1f8>)
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7d1b      	ldrb	r3, [r3, #20]
 8001a90:	4619      	mov	r1, r3
 8001a92:	4b3f      	ldr	r3, [pc, #252]	@ (8001b90 <SX1278_config+0x204>)
 8001a94:	5c5b      	ldrb	r3, [r3, r1]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001a9e:	3303      	adds	r3, #3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	211e      	movs	r1, #30
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fed3 	bl	8001852 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8001aac:	2131      	movs	r1, #49	@ 0x31
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff feb0 	bl	8001814 <SX1278_SPIRead>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	f023 0307 	bic.w	r3, r3, #7
 8001abe:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	f043 0305 	orr.w	r3, r3, #5
 8001ac6:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	461a      	mov	r2, r3
 8001acc:	2131      	movs	r1, #49	@ 0x31
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff febf 	bl	8001852 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	2137      	movs	r1, #55	@ 0x37
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff feba 	bl	8001852 <SX1278_SPIWrite>
 8001ade:	e029      	b.n	8001b34 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7c9b      	ldrb	r3, [r3, #18]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <SX1278_config+0x1fc>)
 8001ae8:	5c9b      	ldrb	r3, [r3, r2]
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7cdb      	ldrb	r3, [r3, #19]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <SX1278_config+0x200>)
 8001af6:	5c5b      	ldrb	r3, [r3, r1]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001afc:	4413      	add	r3, r2
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	211d      	movs	r1, #29
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fea4 	bl	8001852 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7c5b      	ldrb	r3, [r3, #17]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <SX1278_config+0x1f8>)
 8001b12:	5c9b      	ldrb	r3, [r3, r2]
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7d1b      	ldrb	r3, [r3, #20]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <SX1278_config+0x204>)
 8001b20:	5c5b      	ldrb	r3, [r3, r1]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001b26:	4413      	add	r3, r2
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	211e      	movs	r1, #30
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fe8f 	bl	8001852 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8001b34:	2204      	movs	r2, #4
 8001b36:	2126      	movs	r1, #38	@ 0x26
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff fe8a 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001b3e:	2208      	movs	r2, #8
 8001b40:	211f      	movs	r1, #31
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fe85 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fe80 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8001b52:	2208      	movs	r2, #8
 8001b54:	2121      	movs	r1, #33	@ 0x21
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fe7b 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2141      	movs	r1, #65	@ 0x41
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fe76 	bl	8001852 <SX1278_SPIWrite>
	module->readBytes = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f810 	bl	8001b94 <SX1278_standby>
}
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	01e84800 	.word	0x01e84800
 8001b80:	08009188 	.word	0x08009188
 8001b84:	0800918c 	.word	0x0800918c
 8001b88:	08009194 	.word	0x08009194
 8001b8c:	080091a0 	.word	0x080091a0
 8001b90:	080091a4 	.word	0x080091a4

08001b94 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001b9c:	2209      	movs	r2, #9
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fe56 	bl	8001852 <SX1278_SPIWrite>
	module->status = STANDBY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	759a      	strb	r2, [r3, #22]
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fe46 	bl	8001852 <SX1278_SPIWrite>
	module->status = SLEEP;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	759a      	strb	r2, [r3, #22]
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001bdc:	2288      	movs	r2, #136	@ 0x88
 8001bde:	2101      	movs	r1, #1
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff fe36 	bl	8001852 <SX1278_SPIWrite>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8001bf6:	22ff      	movs	r2, #255	@ 0xff
 8001bf8:	2112      	movs	r1, #18
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fe29 	bl	8001852 <SX1278_SPIWrite>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	460b      	mov	r3, r1
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	7afa      	ldrb	r2, [r7, #11]
 8001c1a:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7ff feb5 	bl	800198c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8001c22:	2284      	movs	r2, #132	@ 0x84
 8001c24:	214d      	movs	r1, #77	@ 0x4d
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7ff fe13 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001c2c:	22ff      	movs	r2, #255	@ 0xff
 8001c2e:	2124      	movs	r1, #36	@ 0x24
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff fe0e 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001c36:	2201      	movs	r2, #1
 8001c38:	2140      	movs	r1, #64	@ 0x40
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fe09 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8001c40:	223f      	movs	r2, #63	@ 0x3f
 8001c42:	2111      	movs	r1, #17
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7ff fe04 	bl	8001852 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff ffcf 	bl	8001bee <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	461a      	mov	r2, r3
 8001c54:	2122      	movs	r1, #34	@ 0x22
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7ff fdfb 	bl	8001852 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f7ff fdd8 	bl	8001814 <SX1278_SPIRead>
 8001c64:	4603      	mov	r3, r0
 8001c66:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	210d      	movs	r1, #13
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f7ff fdef 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001c74:	228d      	movs	r2, #141	@ 0x8d
 8001c76:	2101      	movs	r1, #1
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7ff fdea 	bl	8001852 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001c86:	2118      	movs	r1, #24
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fdc3 	bl	8001814 <SX1278_SPIRead>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d104      	bne.n	8001ca2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	759a      	strb	r2, [r3, #22]
			return 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e013      	b.n	8001cca <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f967 	bl	8001f86 <SX1278_hw_Reset>
			SX1278_config(module);
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7ff fe67 	bl	800198c <SX1278_config>
			return 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e003      	b.n	8001cca <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 f9c9 	bl	800205a <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001cc8:	e7dd      	b.n	8001c86 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f9c6 	bl	8002070 <SX1278_hw_GetDIO0>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d030      	beq.n	8001d4c <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3317      	adds	r3, #23
 8001cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fce6 	bl	80066c6 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8001cfa:	2110      	movs	r1, #16
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff fd89 	bl	8001814 <SX1278_SPIRead>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8001d06:	7bbb      	ldrb	r3, [r7, #14]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	210d      	movs	r1, #13
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fda0 	bl	8001852 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7c5b      	ldrb	r3, [r3, #17]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7d5b      	ldrb	r3, [r3, #21]
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e005      	b.n	8001d2e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8001d22:	2113      	movs	r1, #19
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fd75 	bl	8001814 <SX1278_SPIRead>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f103 0217 	add.w	r2, r3, #23
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2100      	movs	r1, #0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fdb3 	bl	80018a4 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff51 	bl	8001bee <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	460b      	mov	r3, r1
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	7afa      	ldrb	r2, [r7, #11]
 8001d6c:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fe0c 	bl	800198c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8001d74:	2287      	movs	r2, #135	@ 0x87
 8001d76:	214d      	movs	r1, #77	@ 0x4d
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff fd6a 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2124      	movs	r1, #36	@ 0x24
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fd65 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001d88:	2241      	movs	r2, #65	@ 0x41
 8001d8a:	2140      	movs	r1, #64	@ 0x40
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fd60 	bl	8001852 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff ff2b 	bl	8001bee <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8001d98:	22f7      	movs	r2, #247	@ 0xf7
 8001d9a:	2111      	movs	r1, #17
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff fd58 	bl	8001852 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8001da2:	7afb      	ldrb	r3, [r7, #11]
 8001da4:	461a      	mov	r2, r3
 8001da6:	2122      	movs	r1, #34	@ 0x22
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff fd52 	bl	8001852 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001dae:	210e      	movs	r1, #14
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff fd2f 	bl	8001814 <SX1278_SPIRead>
 8001db6:	4603      	mov	r3, r0
 8001db8:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	210d      	movs	r1, #13
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f7ff fd46 	bl	8001852 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8001dc6:	2122      	movs	r1, #34	@ 0x22
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7ff fd23 	bl	8001814 <SX1278_SPIRead>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8001dd2:	7dba      	ldrb	r2, [r7, #22]
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d104      	bne.n	8001de4 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	759a      	strb	r2, [r3, #22]
			return 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e00e      	b.n	8001e02 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ea      	bne.n	8001dc6 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f8c6 	bl	8001f86 <SX1278_hw_Reset>
			SX1278_config(module);
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff fdc6 	bl	800198c <SX1278_config>
			return 0;
 8001e00:	2300      	movs	r3, #0
		}
	}
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	2100      	movs	r1, #0
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fd78 	bl	8001916 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001e26:	228b      	movs	r2, #139	@ 0x8b
 8001e28:	2101      	movs	r1, #1
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7ff fd11 	bl	8001852 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 f91b 	bl	8002070 <SX1278_hw_GetDIO0>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8001e40:	2112      	movs	r1, #18
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff fce6 	bl	8001814 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff fed0 	bl	8001bee <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff fea0 	bl	8001b94 <SX1278_standby>
			return 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e013      	b.n	8001e80 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 f88c 	bl	8001f86 <SX1278_hw_Reset>
			SX1278_config(module);
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7ff fd8c 	bl	800198c <SX1278_config>
			return 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e003      	b.n	8001e80 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f000 f8ee 	bl	800205a <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001e7e:	e7d7      	b.n	8001e30 <SX1278_LoRaTxPacket+0x26>
	}
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 f848 	bl	8001f2e <SX1278_hw_init>
	module->frequency = frequency;
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	7e3a      	ldrb	r2, [r7, #24]
 8001eac:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	7f3a      	ldrb	r2, [r7, #28]
 8001eb2:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001eba:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001ec2:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001eca:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001ed2:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7ff fd59 	bl	800198c <SX1278_config>
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	4613      	mov	r3, r2
 8001eee:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8001ef6:	79fa      	ldrb	r2, [r7, #7]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d003      	beq.n	8001f04 <SX1278_read+0x22>
		length = module->readBytes;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8001f02:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3317      	adds	r3, #23
 8001f08:	79fa      	ldrb	r2, [r7, #7]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f004 fc68 	bl	80067e2 <memcpy>
	rxBuf[length] = '\0';
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	4413      	add	r3, r2
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001f36:	2101      	movs	r1, #1
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f80d 	bl	8001f58 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6858      	ldr	r0, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f001 f87f 	bl	800304e <HAL_GPIO_WritePin>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6958      	ldr	r0, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	b299      	uxth	r1, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f001 f868 	bl	800304e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001f8e:	2101      	movs	r1, #1
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ffe1 	bl	8001f58 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6858      	ldr	r0, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f001 f853 	bl	800304e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f000 f856 	bl	800205a <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6858      	ldr	r0, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f001 f847 	bl	800304e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001fc0:	2064      	movs	r0, #100	@ 0x64
 8001fc2:	f000 f84a 	bl	800205a <SX1278_hw_DelayMs>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ffbb 	bl	8001f58 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6998      	ldr	r0, [r3, #24]
 8001fe6:	1cf9      	adds	r1, r7, #3
 8001fe8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fec:	2201      	movs	r2, #1
 8001fee:	f003 fa09 	bl	8005404 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001ff2:	bf00      	nop
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fcf0 	bl	80059de <HAL_SPI_GetState>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d1f7      	bne.n	8001ff4 <SX1278_hw_SPICommand+0x26>
		;
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af02      	add	r7, sp, #8
 8002014:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800201a:	2300      	movs	r3, #0
 800201c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800201e:	2100      	movs	r1, #0
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff99 	bl	8001f58 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6998      	ldr	r0, [r3, #24]
 800202a:	f107 020e 	add.w	r2, r7, #14
 800202e:	f107 010f 	add.w	r1, r7, #15
 8002032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2301      	movs	r3, #1
 800203a:	f003 fb27 	bl	800568c <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800203e:	bf00      	nop
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4618      	mov	r0, r3
 8002046:	f003 fcca 	bl	80059de <HAL_SPI_GetState>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d1f7      	bne.n	8002040 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8002050:	7bbb      	ldrb	r3, [r7, #14]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fd26 	bl	8002ab4 <HAL_Delay>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4619      	mov	r1, r3
 8002084:	4610      	mov	r0, r2
 8002086:	f000 ffcb 	bl	8003020 <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b4:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a40      	ldr	r2, [pc, #256]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b3e      	ldr	r3, [pc, #248]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020cc:	4b3b      	ldr	r3, [pc, #236]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a3a      	ldr	r2, [pc, #232]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020d2:	f043 0320 	orr.w	r3, r3, #32
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	4b35      	ldr	r3, [pc, #212]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a34      	ldr	r2, [pc, #208]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b32      	ldr	r3, [pc, #200]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fc:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <MX_GPIO_Init+0x11c>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4a2e      	ldr	r2, [pc, #184]	@ (80021bc <MX_GPIO_Init+0x11c>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6193      	str	r3, [r2, #24]
 8002108:	4b2c      	ldr	r3, [pc, #176]	@ (80021bc <MX_GPIO_Init+0x11c>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800211a:	4829      	ldr	r0, [pc, #164]	@ (80021c0 <MX_GPIO_Init+0x120>)
 800211c:	f000 ff97 	bl	800304e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	2110      	movs	r1, #16
 8002124:	4827      	ldr	r0, [pc, #156]	@ (80021c4 <MX_GPIO_Init+0x124>)
 8002126:	f000 ff92 	bl	800304e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	2101      	movs	r1, #1
 800212e:	4826      	ldr	r0, [pc, #152]	@ (80021c8 <MX_GPIO_Init+0x128>)
 8002130:	f000 ff8d 	bl	800304e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2302      	movs	r3, #2
 8002144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 0310 	add.w	r3, r7, #16
 800214a:	4619      	mov	r1, r3
 800214c:	481c      	ldr	r0, [pc, #112]	@ (80021c0 <MX_GPIO_Init+0x120>)
 800214e:	f000 fde3 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8002152:	2310      	movs	r3, #16
 8002154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002156:	2301      	movs	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2302      	movs	r3, #2
 8002160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	4619      	mov	r1, r3
 8002168:	4816      	ldr	r0, [pc, #88]	@ (80021c4 <MX_GPIO_Init+0x124>)
 800216a:	f000 fdd5 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 800216e:	2301      	movs	r3, #1
 8002170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2302      	movs	r3, #2
 800217c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 0310 	add.w	r3, r7, #16
 8002182:	4619      	mov	r1, r3
 8002184:	4810      	ldr	r0, [pc, #64]	@ (80021c8 <MX_GPIO_Init+0x128>)
 8002186:	f000 fdc7 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800218a:	2302      	movs	r3, #2
 800218c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <MX_GPIO_Init+0x12c>)
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 0310 	add.w	r3, r7, #16
 800219a:	4619      	mov	r1, r3
 800219c:	480a      	ldr	r0, [pc, #40]	@ (80021c8 <MX_GPIO_Init+0x128>)
 800219e:	f000 fdbb 	bl	8002d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2007      	movs	r0, #7
 80021a8:	f000 fd7f 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80021ac:	2007      	movs	r0, #7
 80021ae:	f000 fd98 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

}
 80021b2:	bf00      	nop
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40011000 	.word	0x40011000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	10110000 	.word	0x10110000

080021d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021d4:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021d6:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <MX_I2C1_Init+0x54>)
 80021d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021dc:	4a12      	ldr	r2, [pc, #72]	@ (8002228 <MX_I2C1_Init+0x58>)
 80021de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <MX_I2C1_Init+0x50>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002200:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <MX_I2C1_Init+0x50>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <MX_I2C1_Init+0x50>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800220c:	4804      	ldr	r0, [pc, #16]	@ (8002220 <MX_I2C1_Init+0x50>)
 800220e:	f000 ff59 	bl	80030c4 <HAL_I2C_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002218:	f000 fa11 	bl	800263e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000218 	.word	0x20000218
 8002224:	40005400 	.word	0x40005400
 8002228:	000186a0 	.word	0x000186a0

0800222c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a15      	ldr	r2, [pc, #84]	@ (800229c <HAL_I2C_MspInit+0x70>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d123      	bne.n	8002294 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a13      	ldr	r2, [pc, #76]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002264:	23c0      	movs	r3, #192	@ 0xc0
 8002266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002268:	2312      	movs	r3, #18
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4619      	mov	r1, r3
 8002276:	480b      	ldr	r0, [pc, #44]	@ (80022a4 <HAL_I2C_MspInit+0x78>)
 8002278:	f000 fd4e 	bl	8002d18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a07      	ldr	r2, [pc, #28]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 8002282:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002286:	61d3      	str	r3, [r2, #28]
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40005400 	.word	0x40005400
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010c00 	.word	0x40010c00

080022a8 <clearTx>:

/*  ----------------------------------
 * 		LoRa Functions
 *  ----------------------------------
 */
void clearTx(){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	memset(LoRaTxBuffer,0,sizeof(LoRaTxBuffer));
 80022ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022b0:	2100      	movs	r1, #0
 80022b2:	4802      	ldr	r0, [pc, #8]	@ (80022bc <clearTx+0x14>)
 80022b4:	f004 fa07 	bl	80066c6 <memset>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200003c0 	.word	0x200003c0

080022c0 <clearRx>:

void clearRx(){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	memset(LoRaRxBuffer,0,sizeof(LoRaRxBuffer));
 80022c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022c8:	2100      	movs	r1, #0
 80022ca:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <clearRx+0x14>)
 80022cc:	f004 f9fb 	bl	80066c6 <memset>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200005c0 	.word	0x200005c0

080022d8 <LoRaSetRxMode>:
// Puts LoRa module in receive mode
// -- LED should be off --
void LoRaSetRxMode(){
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	clearRx();
 80022dc:	f7ff fff0 	bl	80022c0 <clearRx>
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 1000);
 80022e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022e4:	2110      	movs	r1, #16
 80022e6:	480a      	ldr	r0, [pc, #40]	@ (8002310 <LoRaSetRxMode+0x38>)
 80022e8:	f7ff fc8e 	bl	8001c08 <SX1278_LoRaEntryRx>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <LoRaSetRxMode+0x3c>)
 80022f0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022f8:	4807      	ldr	r0, [pc, #28]	@ (8002318 <LoRaSetRxMode+0x40>)
 80022fa:	f000 fea8 	bl	800304e <HAL_GPIO_WritePin>
	receiver = 1;
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <LoRaSetRxMode+0x44>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 8002304:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002308:	f000 fbd4 	bl	8002ab4 <HAL_Delay>
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200002a0 	.word	0x200002a0
 8002314:	200003bc 	.word	0x200003bc
 8002318:	40011000 	.word	0x40011000
 800231c:	200003b8 	.word	0x200003b8

08002320 <LoRaSetTxMode>:

// Puts LoRa module in transmit mode
// -- LED should be on --
void LoRaSetTxMode(){
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	clearTx();
 8002324:	f7ff ffc0 	bl	80022a8 <clearTx>
	ret = SX1278_LoRaEntryTx(&SX1278, 16, 1000);
 8002328:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800232c:	2110      	movs	r1, #16
 800232e:	480a      	ldr	r0, [pc, #40]	@ (8002358 <LoRaSetTxMode+0x38>)
 8002330:	f7ff fd13 	bl	8001d5a <SX1278_LoRaEntryTx>
 8002334:	4603      	mov	r3, r0
 8002336:	4a09      	ldr	r2, [pc, #36]	@ (800235c <LoRaSetTxMode+0x3c>)
 8002338:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002340:	4807      	ldr	r0, [pc, #28]	@ (8002360 <LoRaSetTxMode+0x40>)
 8002342:	f000 fe84 	bl	800304e <HAL_GPIO_WritePin>
	receiver = 0;
 8002346:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <LoRaSetTxMode+0x44>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 800234c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002350:	f000 fbb0 	bl	8002ab4 <HAL_Delay>
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	200002a0 	.word	0x200002a0
 800235c:	200003bc 	.word	0x200003bc
 8002360:	40011000 	.word	0x40011000
 8002364:	200003b8 	.word	0x200003b8

08002368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236e:	f000 fb3f 	bl	80029f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002372:	f000 f91f 	bl	80025b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002376:	f7ff fe93 	bl	80020a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800237a:	f000 f967 	bl	800264c <MX_SPI1_Init>
  MX_I2C1_Init();
 800237e:	f7ff ff27 	bl	80021d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // ===== BMP sensor setup =====
  // SAK
  BMP280_Init(&hi2c1);
 8002382:	4873      	ldr	r0, [pc, #460]	@ (8002550 <main+0x1e8>)
 8002384:	f7ff f87c 	bl	8001480 <BMP280_Init>
// ===== LoRa setup =====
  receiver = 0;
 8002388:	4b72      	ldr	r3, [pc, #456]	@ (8002554 <main+0x1ec>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]

  control_val++;
 800238e:	4b72      	ldr	r3, [pc, #456]	@ (8002558 <main+0x1f0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	4a70      	ldr	r2, [pc, #448]	@ (8002558 <main+0x1f0>)
 8002396:	6013      	str	r3, [r2, #0]
  	//initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8002398:	4b70      	ldr	r3, [pc, #448]	@ (800255c <main+0x1f4>)
 800239a:	4a71      	ldr	r2, [pc, #452]	@ (8002560 <main+0x1f8>)
 800239c:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 800239e:	4b6f      	ldr	r3, [pc, #444]	@ (800255c <main+0x1f4>)
 80023a0:	2202      	movs	r2, #2
 80023a2:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 80023a4:	4b6d      	ldr	r3, [pc, #436]	@ (800255c <main+0x1f4>)
 80023a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002564 <main+0x1fc>)
 80023a8:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 80023aa:	4b6c      	ldr	r3, [pc, #432]	@ (800255c <main+0x1f4>)
 80023ac:	2210      	movs	r2, #16
 80023ae:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RST_GPIO_Port;
 80023b0:	4b6a      	ldr	r3, [pc, #424]	@ (800255c <main+0x1f4>)
 80023b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002560 <main+0x1f8>)
 80023b4:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RST_Pin;
 80023b6:	4b69      	ldr	r3, [pc, #420]	@ (800255c <main+0x1f4>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 80023bc:	4b67      	ldr	r3, [pc, #412]	@ (800255c <main+0x1f4>)
 80023be:	4a6a      	ldr	r2, [pc, #424]	@ (8002568 <main+0x200>)
 80023c0:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 80023c2:	4b6a      	ldr	r3, [pc, #424]	@ (800256c <main+0x204>)
 80023c4:	4a65      	ldr	r2, [pc, #404]	@ (800255c <main+0x1f4>)
 80023c6:	601a      	str	r2, [r3, #0]

  control_val++;
 80023c8:	4b63      	ldr	r3, [pc, #396]	@ (8002558 <main+0x1f0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a62      	ldr	r2, [pc, #392]	@ (8002558 <main+0x1f0>)
 80023d0:	6013      	str	r3, [r2, #0]
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 80023d2:	230a      	movs	r3, #10
 80023d4:	9305      	str	r3, [sp, #20]
 80023d6:	2300      	movs	r3, #0
 80023d8:	9304      	str	r3, [sp, #16]
 80023da:	2300      	movs	r3, #0
 80023dc:	9303      	str	r3, [sp, #12]
 80023de:	2307      	movs	r3, #7
 80023e0:	9302      	str	r3, [sp, #8]
 80023e2:	2301      	movs	r3, #1
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	2301      	movs	r3, #1
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	a357      	add	r3, pc, #348	@ (adr r3, 8002548 <main+0x1e0>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	485e      	ldr	r0, [pc, #376]	@ (800256c <main+0x204>)
 80023f2:	f7ff fd49 	bl	8001e88 <SX1278_init>
		  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  control_val++;
 80023f6:	4b58      	ldr	r3, [pc, #352]	@ (8002558 <main+0x1f0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	4a56      	ldr	r2, [pc, #344]	@ (8002558 <main+0x1f0>)
 80023fe:	6013      	str	r3, [r2, #0]


  LoRaSetRxMode();
 8002400:	f7ff ff6a 	bl	80022d8 <LoRaSetRxMode>
  control_val++;
 8002404:	4b54      	ldr	r3, [pc, #336]	@ (8002558 <main+0x1f0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	4a53      	ldr	r2, [pc, #332]	@ (8002558 <main+0x1f0>)
 800240c:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  control_val = 0;
 800240e:	4b52      	ldr	r3, [pc, #328]	@ (8002558 <main+0x1f0>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
	  ret = SX1278_LoRaRxPacket(&SX1278);
 8002414:	4855      	ldr	r0, [pc, #340]	@ (800256c <main+0x204>)
 8002416:	f7ff fc5c 	bl	8001cd2 <SX1278_LoRaRxPacket>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	4b54      	ldr	r3, [pc, #336]	@ (8002570 <main+0x208>)
 8002420:	601a      	str	r2, [r3, #0]
	  if (ret > 0) {
 8002422:	4b53      	ldr	r3, [pc, #332]	@ (8002570 <main+0x208>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f340 8087 	ble.w	800253a <main+0x1d2>
		  // Setup Timers
		  current_time = HAL_GetTick();
 800242c:	f000 fb38 	bl	8002aa0 <HAL_GetTick>
 8002430:	4603      	mov	r3, r0
 8002432:	4a50      	ldr	r2, [pc, #320]	@ (8002574 <main+0x20c>)
 8002434:	6013      	str	r3, [r2, #0]

		  // Read buffer
		  SX1278_read(&SX1278, (uint8_t*) LoRaRxBuffer, ret);
 8002436:	4b4e      	ldr	r3, [pc, #312]	@ (8002570 <main+0x208>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	494e      	ldr	r1, [pc, #312]	@ (8002578 <main+0x210>)
 8002440:	484a      	ldr	r0, [pc, #296]	@ (800256c <main+0x204>)
 8002442:	f7ff fd4e 	bl	8001ee2 <SX1278_read>
//		  sscanf(LoRaRxBuffer, "%[^,],%d",s_id, &reverse_time);
		  sscanf(LoRaRxBuffer, "%d,%d",&rec_sensor_id, &reverse_time);
 8002446:	4b4d      	ldr	r3, [pc, #308]	@ (800257c <main+0x214>)
 8002448:	4a4d      	ldr	r2, [pc, #308]	@ (8002580 <main+0x218>)
 800244a:	494e      	ldr	r1, [pc, #312]	@ (8002584 <main+0x21c>)
 800244c:	484a      	ldr	r0, [pc, #296]	@ (8002578 <main+0x210>)
 800244e:	f004 f8cb 	bl	80065e8 <siscanf>

//		  if(strstr((char *)LoRaRxBuffer,"S2")){	// 	If good sensor_id
		  if(rec_sensor_id == sensor_id){
 8002452:	4b4b      	ldr	r3, [pc, #300]	@ (8002580 <main+0x218>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b4c      	ldr	r3, [pc, #304]	@ (8002588 <main+0x220>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d16d      	bne.n	800253a <main+0x1d2>

			  LoRaSetTxMode();							// 	Go into TX mode
 800245e:	f7ff ff5f 	bl	8002320 <LoRaSetTxMode>

			  AHT20_Read(&temperature, &humidity); 				// Read sensor data
 8002462:	494a      	ldr	r1, [pc, #296]	@ (800258c <main+0x224>)
 8002464:	484a      	ldr	r0, [pc, #296]	@ (8002590 <main+0x228>)
 8002466:	f7fe ff5b 	bl	8001320 <AHT20_Read>
			  pressure = BMP280_ReadPressure(&hi2c1);
 800246a:	4839      	ldr	r0, [pc, #228]	@ (8002550 <main+0x1e8>)
 800246c:	f7ff f8e2 	bl	8001634 <BMP280_ReadPressure>
 8002470:	4603      	mov	r3, r0
 8002472:	4a48      	ldr	r2, [pc, #288]	@ (8002594 <main+0x22c>)
 8002474:	6013      	str	r3, [r2, #0]
			  temperature_int = (int)temperature;
 8002476:	4b46      	ldr	r3, [pc, #280]	@ (8002590 <main+0x228>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fdb2 	bl	8000fe4 <__aeabi_f2iz>
 8002480:	4603      	mov	r3, r0
 8002482:	4a45      	ldr	r2, [pc, #276]	@ (8002598 <main+0x230>)
 8002484:	6013      	str	r3, [r2, #0]
			  humidity_int = (int)humidity;
 8002486:	4b41      	ldr	r3, [pc, #260]	@ (800258c <main+0x224>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fdaa 	bl	8000fe4 <__aeabi_f2iz>
 8002490:	4603      	mov	r3, r0
 8002492:	4a42      	ldr	r2, [pc, #264]	@ (800259c <main+0x234>)
 8002494:	6013      	str	r3, [r2, #0]
			  pressure_int = (int)pressure;
 8002496:	4b3f      	ldr	r3, [pc, #252]	@ (8002594 <main+0x22c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fda2 	bl	8000fe4 <__aeabi_f2iz>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a3f      	ldr	r2, [pc, #252]	@ (80025a0 <main+0x238>)
 80024a4:	6013      	str	r3, [r2, #0]

			  current_time = HAL_GetTick();
 80024a6:	f000 fafb 	bl	8002aa0 <HAL_GetTick>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4a31      	ldr	r2, [pc, #196]	@ (8002574 <main+0x20c>)
 80024ae:	6013      	str	r3, [r2, #0]
			  inside_counter = current_time + (reverse_time * 1000);
 80024b0:	4b32      	ldr	r3, [pc, #200]	@ (800257c <main+0x214>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024b8:	fb02 f303 	mul.w	r3, r2, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	4b2d      	ldr	r3, [pc, #180]	@ (8002574 <main+0x20c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a37      	ldr	r2, [pc, #220]	@ (80025a4 <main+0x23c>)
 80024c6:	6013      	str	r3, [r2, #0]

			  tx_len = sprintf(LoRaTxBuffer, "%d,%d,%d,%d",sensor_id, temperature_int, humidity_int, pressure_int);
 80024c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002588 <main+0x220>)
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	4b32      	ldr	r3, [pc, #200]	@ (8002598 <main+0x230>)
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	4b32      	ldr	r3, [pc, #200]	@ (800259c <main+0x234>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a32      	ldr	r2, [pc, #200]	@ (80025a0 <main+0x238>)
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	9201      	str	r2, [sp, #4]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	4603      	mov	r3, r0
 80024de:	460a      	mov	r2, r1
 80024e0:	4931      	ldr	r1, [pc, #196]	@ (80025a8 <main+0x240>)
 80024e2:	4832      	ldr	r0, [pc, #200]	@ (80025ac <main+0x244>)
 80024e4:	f004 f860 	bl	80065a8 <siprintf>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4a31      	ldr	r2, [pc, #196]	@ (80025b0 <main+0x248>)
 80024ec:	6013      	str	r3, [r2, #0]

			  while(HAL_GetTick()<=inside_counter){
 80024ee:	e017      	b.n	8002520 <main+0x1b8>
				  ret = SX1278_LoRaEntryTx(&SX1278, tx_len, 2000);
 80024f0:	4b2f      	ldr	r3, [pc, #188]	@ (80025b0 <main+0x248>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80024fa:	4619      	mov	r1, r3
 80024fc:	481b      	ldr	r0, [pc, #108]	@ (800256c <main+0x204>)
 80024fe:	f7ff fc2c 	bl	8001d5a <SX1278_LoRaEntryTx>
 8002502:	4603      	mov	r3, r0
 8002504:	4a1a      	ldr	r2, [pc, #104]	@ (8002570 <main+0x208>)
 8002506:	6013      	str	r3, [r2, #0]
				  ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) LoRaTxBuffer,tx_len, 2000);
 8002508:	4b29      	ldr	r3, [pc, #164]	@ (80025b0 <main+0x248>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002512:	4926      	ldr	r1, [pc, #152]	@ (80025ac <main+0x244>)
 8002514:	4815      	ldr	r0, [pc, #84]	@ (800256c <main+0x204>)
 8002516:	f7ff fc78 	bl	8001e0a <SX1278_LoRaTxPacket>
 800251a:	4603      	mov	r3, r0
 800251c:	4a14      	ldr	r2, [pc, #80]	@ (8002570 <main+0x208>)
 800251e:	6013      	str	r3, [r2, #0]
			  while(HAL_GetTick()<=inside_counter){
 8002520:	f000 fabe 	bl	8002aa0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <main+0x23c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d9e0      	bls.n	80024f0 <main+0x188>
			  }

			  // Switch to RX mode
			  LoRaSetRxMode();
 800252e:	f7ff fed3 	bl	80022d8 <LoRaSetRxMode>
			  rec_sensor_id = -1;
 8002532:	4b13      	ldr	r3, [pc, #76]	@ (8002580 <main+0x218>)
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	601a      	str	r2, [r3, #0]
		  }
	  }
	  control_val = -1;
 800253a:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <main+0x1f0>)
 800253c:	f04f 32ff 	mov.w	r2, #4294967295
 8002540:	601a      	str	r2, [r3, #0]
	  control_val = 0;
 8002542:	e764      	b.n	800240e <main+0xa6>
 8002544:	f3af 8000 	nop.w
 8002548:	19de5080 	.word	0x19de5080
 800254c:	00000000 	.word	0x00000000
 8002550:	20000218 	.word	0x20000218
 8002554:	200003b8 	.word	0x200003b8
 8002558:	200007c4 	.word	0x200007c4
 800255c:	20000284 	.word	0x20000284
 8002560:	40010c00 	.word	0x40010c00
 8002564:	40010800 	.word	0x40010800
 8002568:	200007d4 	.word	0x200007d4
 800256c:	200002a0 	.word	0x200002a0
 8002570:	200003bc 	.word	0x200003bc
 8002574:	200007cc 	.word	0x200007cc
 8002578:	200005c0 	.word	0x200005c0
 800257c:	200007c8 	.word	0x200007c8
 8002580:	20000004 	.word	0x20000004
 8002584:	08009168 	.word	0x08009168
 8002588:	20000000 	.word	0x20000000
 800258c:	20000270 	.word	0x20000270
 8002590:	2000026c 	.word	0x2000026c
 8002594:	20000274 	.word	0x20000274
 8002598:	20000278 	.word	0x20000278
 800259c:	2000027c 	.word	0x2000027c
 80025a0:	20000280 	.word	0x20000280
 80025a4:	200007d0 	.word	0x200007d0
 80025a8:	08009170 	.word	0x08009170
 80025ac:	200003c0 	.word	0x200003c0
 80025b0:	200007c0 	.word	0x200007c0

080025b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b090      	sub	sp, #64	@ 0x40
 80025b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ba:	f107 0318 	add.w	r3, r7, #24
 80025be:	2228      	movs	r2, #40	@ 0x28
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 f87f 	bl	80066c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e4:	2301      	movs	r3, #1
 80025e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e8:	2302      	movs	r3, #2
 80025ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025f2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80025f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f8:	f107 0318 	add.w	r3, r7, #24
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 fa81 	bl	8004b04 <HAL_RCC_OscConfig>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002608:	f000 f819 	bl	800263e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260c:	230f      	movs	r3, #15
 800260e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002610:	2302      	movs	r3, #2
 8002612:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800261c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	2102      	movs	r1, #2
 8002626:	4618      	mov	r0, r3
 8002628:	f002 fcee 	bl	8005008 <HAL_RCC_ClockConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002632:	f000 f804 	bl	800263e <Error_Handler>
  }
}
 8002636:	bf00      	nop
 8002638:	3740      	adds	r7, #64	@ 0x40
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002642:	b672      	cpsid	i
}
 8002644:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002646:	bf00      	nop
 8002648:	e7fd      	b.n	8002646 <Error_Handler+0x8>
	...

0800264c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002650:	4b17      	ldr	r3, [pc, #92]	@ (80026b0 <MX_SPI1_Init+0x64>)
 8002652:	4a18      	ldr	r2, [pc, #96]	@ (80026b4 <MX_SPI1_Init+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002656:	4b16      	ldr	r3, [pc, #88]	@ (80026b0 <MX_SPI1_Init+0x64>)
 8002658:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800265c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800265e:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <MX_SPI1_Init+0x64>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <MX_SPI1_Init+0x64>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800266a:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <MX_SPI1_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002670:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <MX_SPI1_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002676:	4b0e      	ldr	r3, [pc, #56]	@ (80026b0 <MX_SPI1_Init+0x64>)
 8002678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800267c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800267e:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <MX_SPI1_Init+0x64>)
 8002680:	2210      	movs	r2, #16
 8002682:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002684:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <MX_SPI1_Init+0x64>)
 8002686:	2200      	movs	r2, #0
 8002688:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800268a:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <MX_SPI1_Init+0x64>)
 800268c:	2200      	movs	r2, #0
 800268e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002690:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <MX_SPI1_Init+0x64>)
 8002692:	2200      	movs	r2, #0
 8002694:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002696:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <MX_SPI1_Init+0x64>)
 8002698:	220a      	movs	r2, #10
 800269a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800269c:	4804      	ldr	r0, [pc, #16]	@ (80026b0 <MX_SPI1_Init+0x64>)
 800269e:	f002 fe2d 	bl	80052fc <HAL_SPI_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026a8:	f7ff ffc9 	bl	800263e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200007d4 	.word	0x200007d4
 80026b4:	40013000 	.word	0x40013000

080026b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002740 <HAL_SPI_MspInit+0x88>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d12f      	bne.n	8002738 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002744 <HAL_SPI_MspInit+0x8c>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a19      	ldr	r2, [pc, #100]	@ (8002744 <HAL_SPI_MspInit+0x8c>)
 80026de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <HAL_SPI_MspInit+0x8c>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <HAL_SPI_MspInit+0x8c>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a13      	ldr	r2, [pc, #76]	@ (8002744 <HAL_SPI_MspInit+0x8c>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b11      	ldr	r3, [pc, #68]	@ (8002744 <HAL_SPI_MspInit+0x8c>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002708:	23a0      	movs	r3, #160	@ 0xa0
 800270a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002710:	2303      	movs	r3, #3
 8002712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002714:	f107 0310 	add.w	r3, r7, #16
 8002718:	4619      	mov	r1, r3
 800271a:	480b      	ldr	r0, [pc, #44]	@ (8002748 <HAL_SPI_MspInit+0x90>)
 800271c:	f000 fafc 	bl	8002d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002720:	2340      	movs	r3, #64	@ 0x40
 8002722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0310 	add.w	r3, r7, #16
 8002730:	4619      	mov	r1, r3
 8002732:	4805      	ldr	r0, [pc, #20]	@ (8002748 <HAL_SPI_MspInit+0x90>)
 8002734:	f000 faf0 	bl	8002d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002738:	bf00      	nop
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40013000 	.word	0x40013000
 8002744:	40021000 	.word	0x40021000
 8002748:	40010800 	.word	0x40010800

0800274c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002752:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <HAL_MspInit+0x5c>)
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	4a14      	ldr	r2, [pc, #80]	@ (80027a8 <HAL_MspInit+0x5c>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6193      	str	r3, [r2, #24]
 800275e:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <HAL_MspInit+0x5c>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <HAL_MspInit+0x5c>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4a0e      	ldr	r2, [pc, #56]	@ (80027a8 <HAL_MspInit+0x5c>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002774:	61d3      	str	r3, [r2, #28]
 8002776:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <HAL_MspInit+0x5c>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002782:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <HAL_MspInit+0x60>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	4a04      	ldr	r2, [pc, #16]	@ (80027ac <HAL_MspInit+0x60>)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010000 	.word	0x40010000

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <NMI_Handler+0x4>

080027b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <HardFault_Handler+0x4>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <MemManage_Handler+0x4>

080027c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <BusFault_Handler+0x4>

080027d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <UsageFault_Handler+0x4>

080027d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002800:	f000 f93c 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800280c:	2002      	movs	r0, #2
 800280e:	f000 fc37 	bl	8003080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}

08002816 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  return 1;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <_kill>:

int _kill(int pid, int sig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800282e:	f003 ff9d 	bl	800676c <__errno>
 8002832:	4603      	mov	r3, r0
 8002834:	2216      	movs	r2, #22
 8002836:	601a      	str	r2, [r3, #0]
  return -1;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <_exit>:

void _exit (int status)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ffe7 	bl	8002824 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002856:	bf00      	nop
 8002858:	e7fd      	b.n	8002856 <_exit+0x12>

0800285a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e00a      	b.n	8002882 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800286c:	f3af 8000 	nop.w
 8002870:	4601      	mov	r1, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	60ba      	str	r2, [r7, #8]
 8002878:	b2ca      	uxtb	r2, r1
 800287a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	dbf0      	blt.n	800286c <_read+0x12>
  }

  return len;
 800288a:	687b      	ldr	r3, [r7, #4]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e009      	b.n	80028ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	60ba      	str	r2, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	dbf1      	blt.n	80028a6 <_write+0x12>
  }
  return len;
 80028c2:	687b      	ldr	r3, [r7, #4]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_close>:

int _close(int file)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028f2:	605a      	str	r2, [r3, #4]
  return 0;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <_isatty>:

int _isatty(int file)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002934:	4a14      	ldr	r2, [pc, #80]	@ (8002988 <_sbrk+0x5c>)
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <_sbrk+0x60>)
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002940:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <_sbrk+0x64>)
 800294a:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <_sbrk+0x68>)
 800294c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d207      	bcs.n	800296c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800295c:	f003 ff06 	bl	800676c <__errno>
 8002960:	4603      	mov	r3, r0
 8002962:	220c      	movs	r2, #12
 8002964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e009      	b.n	8002980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800296c:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002972:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <_sbrk+0x64>)
 800297c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20005000 	.word	0x20005000
 800298c:	00000400 	.word	0x00000400
 8002990:	2000082c 	.word	0x2000082c
 8002994:	20000980 	.word	0x20000980

08002998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
 	    bl  SystemInit
 80029a4:	f7ff fff8 	bl	8002998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a8:	480b      	ldr	r0, [pc, #44]	@ (80029d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80029aa:	490c      	ldr	r1, [pc, #48]	@ (80029dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80029ac:	4a0c      	ldr	r2, [pc, #48]	@ (80029e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b0:	e002      	b.n	80029b8 <LoopCopyDataInit>

080029b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b6:	3304      	adds	r3, #4

080029b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029bc:	d3f9      	bcc.n	80029b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029be:	4a09      	ldr	r2, [pc, #36]	@ (80029e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80029c0:	4c09      	ldr	r4, [pc, #36]	@ (80029e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c4:	e001      	b.n	80029ca <LoopFillZerobss>

080029c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c8:	3204      	adds	r2, #4

080029ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029cc:	d3fb      	bcc.n	80029c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ce:	f003 fed3 	bl	8006778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029d2:	f7ff fcc9 	bl	8002368 <main>
  bx lr
 80029d6:	4770      	bx	lr
  ldr r0, =_sdata
 80029d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029dc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80029e0:	0800956c 	.word	0x0800956c
  ldr r2, =_sbss
 80029e4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80029e8:	20000980 	.word	0x20000980

080029ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC1_2_IRQHandler>
	...

080029f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f4:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <HAL_Init+0x28>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a07      	ldr	r2, [pc, #28]	@ (8002a18 <HAL_Init+0x28>)
 80029fa:	f043 0310 	orr.w	r3, r3, #16
 80029fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a00:	2003      	movs	r0, #3
 8002a02:	f000 f947 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a06:	200f      	movs	r0, #15
 8002a08:	f000 f808 	bl	8002a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0c:	f7ff fe9e 	bl	800274c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000

08002a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a24:	4b12      	ldr	r3, [pc, #72]	@ (8002a70 <HAL_InitTick+0x54>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_InitTick+0x58>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f95f 	bl	8002cfe <HAL_SYSTICK_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00e      	b.n	8002a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d80a      	bhi.n	8002a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	2200      	movs	r2, #0
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f000 f927 	bl	8002caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	@ (8002a78 <HAL_InitTick+0x5c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000008 	.word	0x20000008
 8002a74:	20000010 	.word	0x20000010
 8002a78:	2000000c 	.word	0x2000000c

08002a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_IncTick+0x1c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_IncTick+0x20>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a03      	ldr	r2, [pc, #12]	@ (8002a9c <HAL_IncTick+0x20>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	20000010 	.word	0x20000010
 8002a9c:	20000830 	.word	0x20000830

08002aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa4:	4b02      	ldr	r3, [pc, #8]	@ (8002ab0 <HAL_GetTick+0x10>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	20000830 	.word	0x20000830

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffe0 	bl	8002aa0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000010 	.word	0x20000010

08002afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	@ (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db0b      	blt.n	8002b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4906      	ldr	r1, [pc, #24]	@ (8002b94 <__NVIC_EnableIRQ+0x34>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2001      	movs	r0, #1
 8002b82:	fa00 f202 	lsl.w	r2, r0, r2
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	@ (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	@ (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	@ 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
         );
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	@ 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff90 	bl	8002b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	@ (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff2d 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cbc:	f7ff ff42 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff ff90 	bl	8002bec <NVIC_EncodePriority>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff5f 	bl	8002b98 <__NVIC_SetPriority>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff35 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffa2 	bl	8002c50 <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b08b      	sub	sp, #44	@ 0x2c
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2a:	e169      	b.n	8003000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	f040 8158 	bne.w	8002ffa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a9a      	ldr	r2, [pc, #616]	@ (8002fb8 <HAL_GPIO_Init+0x2a0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d05e      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
 8002d54:	4a98      	ldr	r2, [pc, #608]	@ (8002fb8 <HAL_GPIO_Init+0x2a0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d875      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d5a:	4a98      	ldr	r2, [pc, #608]	@ (8002fbc <HAL_GPIO_Init+0x2a4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d058      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
 8002d60:	4a96      	ldr	r2, [pc, #600]	@ (8002fbc <HAL_GPIO_Init+0x2a4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d86f      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d66:	4a96      	ldr	r2, [pc, #600]	@ (8002fc0 <HAL_GPIO_Init+0x2a8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d052      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
 8002d6c:	4a94      	ldr	r2, [pc, #592]	@ (8002fc0 <HAL_GPIO_Init+0x2a8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d869      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d72:	4a94      	ldr	r2, [pc, #592]	@ (8002fc4 <HAL_GPIO_Init+0x2ac>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04c      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
 8002d78:	4a92      	ldr	r2, [pc, #584]	@ (8002fc4 <HAL_GPIO_Init+0x2ac>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d863      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d7e:	4a92      	ldr	r2, [pc, #584]	@ (8002fc8 <HAL_GPIO_Init+0x2b0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d046      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
 8002d84:	4a90      	ldr	r2, [pc, #576]	@ (8002fc8 <HAL_GPIO_Init+0x2b0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d85d      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d8a:	2b12      	cmp	r3, #18
 8002d8c:	d82a      	bhi.n	8002de4 <HAL_GPIO_Init+0xcc>
 8002d8e:	2b12      	cmp	r3, #18
 8002d90:	d859      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d92:	a201      	add	r2, pc, #4	@ (adr r2, 8002d98 <HAL_GPIO_Init+0x80>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002e13 	.word	0x08002e13
 8002d9c:	08002ded 	.word	0x08002ded
 8002da0:	08002dff 	.word	0x08002dff
 8002da4:	08002e41 	.word	0x08002e41
 8002da8:	08002e47 	.word	0x08002e47
 8002dac:	08002e47 	.word	0x08002e47
 8002db0:	08002e47 	.word	0x08002e47
 8002db4:	08002e47 	.word	0x08002e47
 8002db8:	08002e47 	.word	0x08002e47
 8002dbc:	08002e47 	.word	0x08002e47
 8002dc0:	08002e47 	.word	0x08002e47
 8002dc4:	08002e47 	.word	0x08002e47
 8002dc8:	08002e47 	.word	0x08002e47
 8002dcc:	08002e47 	.word	0x08002e47
 8002dd0:	08002e47 	.word	0x08002e47
 8002dd4:	08002e47 	.word	0x08002e47
 8002dd8:	08002e47 	.word	0x08002e47
 8002ddc:	08002df5 	.word	0x08002df5
 8002de0:	08002e09 	.word	0x08002e09
 8002de4:	4a79      	ldr	r2, [pc, #484]	@ (8002fcc <HAL_GPIO_Init+0x2b4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dea:	e02c      	b.n	8002e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	623b      	str	r3, [r7, #32]
          break;
 8002df2:	e029      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	623b      	str	r3, [r7, #32]
          break;
 8002dfc:	e024      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	3308      	adds	r3, #8
 8002e04:	623b      	str	r3, [r7, #32]
          break;
 8002e06:	e01f      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	623b      	str	r3, [r7, #32]
          break;
 8002e10:	e01a      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	623b      	str	r3, [r7, #32]
          break;
 8002e1e:	e013      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e28:	2308      	movs	r3, #8
 8002e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	611a      	str	r2, [r3, #16]
          break;
 8002e32:	e009      	b.n	8002e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e34:	2308      	movs	r3, #8
 8002e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	615a      	str	r2, [r3, #20]
          break;
 8002e3e:	e003      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
          break;
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          break;
 8002e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2bff      	cmp	r3, #255	@ 0xff
 8002e4c:	d801      	bhi.n	8002e52 <HAL_GPIO_Init+0x13a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	e001      	b.n	8002e56 <HAL_GPIO_Init+0x13e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2bff      	cmp	r3, #255	@ 0xff
 8002e5c:	d802      	bhi.n	8002e64 <HAL_GPIO_Init+0x14c>
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	e002      	b.n	8002e6a <HAL_GPIO_Init+0x152>
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	3b08      	subs	r3, #8
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	210f      	movs	r1, #15
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	6a39      	ldr	r1, [r7, #32]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	431a      	orrs	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80b1 	beq.w	8002ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e98:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6193      	str	r3, [r2, #24]
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002eb0:	4a48      	ldr	r2, [pc, #288]	@ (8002fd4 <HAL_GPIO_Init+0x2bc>)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a40      	ldr	r2, [pc, #256]	@ (8002fd8 <HAL_GPIO_Init+0x2c0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_GPIO_Init+0x1ec>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3f      	ldr	r2, [pc, #252]	@ (8002fdc <HAL_GPIO_Init+0x2c4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00d      	beq.n	8002f00 <HAL_GPIO_Init+0x1e8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8002fe0 <HAL_GPIO_Init+0x2c8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <HAL_GPIO_Init+0x1e4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a3d      	ldr	r2, [pc, #244]	@ (8002fe4 <HAL_GPIO_Init+0x2cc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <HAL_GPIO_Init+0x1e0>
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e006      	b.n	8002f06 <HAL_GPIO_Init+0x1ee>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e004      	b.n	8002f06 <HAL_GPIO_Init+0x1ee>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e002      	b.n	8002f06 <HAL_GPIO_Init+0x1ee>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_GPIO_Init+0x1ee>
 8002f04:	2300      	movs	r3, #0
 8002f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f08:	f002 0203 	and.w	r2, r2, #3
 8002f0c:	0092      	lsls	r2, r2, #2
 8002f0e:	4093      	lsls	r3, r2
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f16:	492f      	ldr	r1, [pc, #188]	@ (8002fd4 <HAL_GPIO_Init+0x2bc>)
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f30:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	492c      	ldr	r1, [pc, #176]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	4928      	ldr	r1, [pc, #160]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f58:	4b23      	ldr	r3, [pc, #140]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4922      	ldr	r1, [pc, #136]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60cb      	str	r3, [r1, #12]
 8002f64:	e006      	b.n	8002f74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f66:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	491e      	ldr	r1, [pc, #120]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f80:	4b19      	ldr	r3, [pc, #100]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	4918      	ldr	r1, [pc, #96]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f8e:	4b16      	ldr	r3, [pc, #88]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	4914      	ldr	r1, [pc, #80]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d021      	beq.n	8002fec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	490e      	ldr	r1, [pc, #56]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]
 8002fb4:	e021      	b.n	8002ffa <HAL_GPIO_Init+0x2e2>
 8002fb6:	bf00      	nop
 8002fb8:	10320000 	.word	0x10320000
 8002fbc:	10310000 	.word	0x10310000
 8002fc0:	10220000 	.word	0x10220000
 8002fc4:	10210000 	.word	0x10210000
 8002fc8:	10120000 	.word	0x10120000
 8002fcc:	10110000 	.word	0x10110000
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40010000 	.word	0x40010000
 8002fd8:	40010800 	.word	0x40010800
 8002fdc:	40010c00 	.word	0x40010c00
 8002fe0:	40011000 	.word	0x40011000
 8002fe4:	40011400 	.word	0x40011400
 8002fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	4909      	ldr	r1, [pc, #36]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	f47f ae8e 	bne.w	8002d2c <HAL_GPIO_Init+0x14>
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	372c      	adds	r7, #44	@ 0x2c
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	40010400 	.word	0x40010400

08003020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e001      	b.n	8003042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	807b      	strh	r3, [r7, #2]
 800305a:	4613      	mov	r3, r2
 800305c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800305e:	787b      	ldrb	r3, [r7, #1]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003064:	887a      	ldrh	r2, [r7, #2]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800306a:	e003      	b.n	8003074 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	041a      	lsls	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	611a      	str	r2, [r3, #16]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
	...

08003080 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003096:	4a05      	ldr	r2, [pc, #20]	@ (80030ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f806 	bl	80030b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40010400 	.word	0x40010400

080030b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e12b      	b.n	800332e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff f89e 	bl	800222c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	@ 0x24
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003128:	f002 f8b6 	bl	8005298 <HAL_RCC_GetPCLK1Freq>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a81      	ldr	r2, [pc, #516]	@ (8003338 <HAL_I2C_Init+0x274>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d807      	bhi.n	8003148 <HAL_I2C_Init+0x84>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a80      	ldr	r2, [pc, #512]	@ (800333c <HAL_I2C_Init+0x278>)
 800313c:	4293      	cmp	r3, r2
 800313e:	bf94      	ite	ls
 8003140:	2301      	movls	r3, #1
 8003142:	2300      	movhi	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e006      	b.n	8003156 <HAL_I2C_Init+0x92>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a7d      	ldr	r2, [pc, #500]	@ (8003340 <HAL_I2C_Init+0x27c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0e7      	b.n	800332e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a78      	ldr	r2, [pc, #480]	@ (8003344 <HAL_I2C_Init+0x280>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0c9b      	lsrs	r3, r3, #18
 8003168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a6a      	ldr	r2, [pc, #424]	@ (8003338 <HAL_I2C_Init+0x274>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d802      	bhi.n	8003198 <HAL_I2C_Init+0xd4>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3301      	adds	r3, #1
 8003196:	e009      	b.n	80031ac <HAL_I2C_Init+0xe8>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	4a69      	ldr	r2, [pc, #420]	@ (8003348 <HAL_I2C_Init+0x284>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	3301      	adds	r3, #1
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	495c      	ldr	r1, [pc, #368]	@ (8003338 <HAL_I2C_Init+0x274>)
 80031c8:	428b      	cmp	r3, r1
 80031ca:	d819      	bhi.n	8003200 <HAL_I2C_Init+0x13c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e59      	subs	r1, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031e0:	400b      	ands	r3, r1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_I2C_Init+0x138>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1e59      	subs	r1, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fa:	e051      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 80031fc:	2304      	movs	r3, #4
 80031fe:	e04f      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d111      	bne.n	800322c <HAL_I2C_Init+0x168>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1e58      	subs	r0, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	440b      	add	r3, r1
 8003216:	fbb0 f3f3 	udiv	r3, r0, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e012      	b.n	8003252 <HAL_I2C_Init+0x18e>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e58      	subs	r0, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	0099      	lsls	r1, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Init+0x196>
 8003256:	2301      	movs	r3, #1
 8003258:	e022      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10e      	bne.n	8003280 <HAL_I2C_Init+0x1bc>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1e58      	subs	r0, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	440b      	add	r3, r1
 8003270:	fbb0 f3f3 	udiv	r3, r0, r3
 8003274:	3301      	adds	r3, #1
 8003276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800327e:	e00f      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e58      	subs	r0, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	0099      	lsls	r1, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	fbb0 f3f3 	udiv	r3, r0, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	6809      	ldr	r1, [r1, #0]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6911      	ldr	r1, [r2, #16]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68d2      	ldr	r2, [r2, #12]
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	000186a0 	.word	0x000186a0
 800333c:	001e847f 	.word	0x001e847f
 8003340:	003d08ff 	.word	0x003d08ff
 8003344:	431bde83 	.word	0x431bde83
 8003348:	10624dd3 	.word	0x10624dd3

0800334c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	461a      	mov	r2, r3
 8003358:	460b      	mov	r3, r1
 800335a:	817b      	strh	r3, [r7, #10]
 800335c:	4613      	mov	r3, r2
 800335e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff fb9e 	bl	8002aa0 <HAL_GetTick>
 8003364:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b20      	cmp	r3, #32
 8003370:	f040 80e0 	bne.w	8003534 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2319      	movs	r3, #25
 800337a:	2201      	movs	r2, #1
 800337c:	4970      	ldr	r1, [pc, #448]	@ (8003540 <HAL_I2C_Master_Transmit+0x1f4>)
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f001 f98a 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
 800338c:	e0d3      	b.n	8003536 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_I2C_Master_Transmit+0x50>
 8003398:	2302      	movs	r3, #2
 800339a:	e0cc      	b.n	8003536 <HAL_I2C_Master_Transmit+0x1ea>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d007      	beq.n	80033c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2221      	movs	r2, #33	@ 0x21
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2210      	movs	r2, #16
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	893a      	ldrh	r2, [r7, #8]
 80033f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a50      	ldr	r2, [pc, #320]	@ (8003544 <HAL_I2C_Master_Transmit+0x1f8>)
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003404:	8979      	ldrh	r1, [r7, #10]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	6a3a      	ldr	r2, [r7, #32]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fe76 	bl	80040fc <I2C_MasterRequestWrite>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e08d      	b.n	8003536 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003430:	e066      	b.n	8003500 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	6a39      	ldr	r1, [r7, #32]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f001 fa48 	bl	80048cc <I2C_WaitOnTXEFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	2b04      	cmp	r3, #4
 8003448:	d107      	bne.n	800345a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003458:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06b      	b.n	8003536 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	781a      	ldrb	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b04      	cmp	r3, #4
 800349a:	d11b      	bne.n	80034d4 <HAL_I2C_Master_Transmit+0x188>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d017      	beq.n	80034d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	6a39      	ldr	r1, [r7, #32]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f001 fa3f 	bl	800495c <I2C_WaitOnBTFFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d107      	bne.n	80034fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e01a      	b.n	8003536 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	d194      	bne.n	8003432 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	00100002 	.word	0x00100002
 8003544:	ffff0000 	.word	0xffff0000

08003548 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08c      	sub	sp, #48	@ 0x30
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	461a      	mov	r2, r3
 8003554:	460b      	mov	r3, r1
 8003556:	817b      	strh	r3, [r7, #10]
 8003558:	4613      	mov	r3, r2
 800355a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003560:	f7ff fa9e 	bl	8002aa0 <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b20      	cmp	r3, #32
 8003570:	f040 824b 	bne.w	8003a0a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	2319      	movs	r3, #25
 800357a:	2201      	movs	r2, #1
 800357c:	497f      	ldr	r1, [pc, #508]	@ (800377c <HAL_I2C_Master_Receive+0x234>)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f001 f88a 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
 800358c:	e23e      	b.n	8003a0c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_I2C_Master_Receive+0x54>
 8003598:	2302      	movs	r3, #2
 800359a:	e237      	b.n	8003a0c <HAL_I2C_Master_Receive+0x4c4>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d007      	beq.n	80035c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2222      	movs	r2, #34	@ 0x22
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2210      	movs	r2, #16
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	893a      	ldrh	r2, [r7, #8]
 80035f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a5f      	ldr	r2, [pc, #380]	@ (8003780 <HAL_I2C_Master_Receive+0x238>)
 8003602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003604:	8979      	ldrh	r1, [r7, #10]
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fdf8 	bl	8004200 <I2C_MasterRequestRead>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e1f8      	b.n	8003a0c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361e:	2b00      	cmp	r3, #0
 8003620:	d113      	bne.n	800364a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e1cc      	b.n	80039e4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364e:	2b01      	cmp	r3, #1
 8003650:	d11e      	bne.n	8003690 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003660:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003662:	b672      	cpsid	i
}
 8003664:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800368c:	b662      	cpsie	i
}
 800368e:	e035      	b.n	80036fc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	2b02      	cmp	r3, #2
 8003696:	d11e      	bne.n	80036d6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036a8:	b672      	cpsid	i
}
 80036aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036d2:	b662      	cpsie	i
}
 80036d4:	e012      	b.n	80036fc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80036fc:	e172      	b.n	80039e4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003702:	2b03      	cmp	r3, #3
 8003704:	f200 811f 	bhi.w	8003946 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370c:	2b01      	cmp	r3, #1
 800370e:	d123      	bne.n	8003758 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003712:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f001 f969 	bl	80049ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e173      	b.n	8003a0c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003756:	e145      	b.n	80039e4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	2b02      	cmp	r3, #2
 800375e:	d152      	bne.n	8003806 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	2200      	movs	r2, #0
 8003768:	4906      	ldr	r1, [pc, #24]	@ (8003784 <HAL_I2C_Master_Receive+0x23c>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 ff94 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e148      	b.n	8003a0c <HAL_I2C_Master_Receive+0x4c4>
 800377a:	bf00      	nop
 800377c:	00100002 	.word	0x00100002
 8003780:	ffff0000 	.word	0xffff0000
 8003784:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003788:	b672      	cpsid	i
}
 800378a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800379a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037ce:	b662      	cpsie	i
}
 80037d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003804:	e0ee      	b.n	80039e4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	2200      	movs	r2, #0
 800380e:	4981      	ldr	r1, [pc, #516]	@ (8003a14 <HAL_I2C_Master_Receive+0x4cc>)
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 ff41 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0f5      	b.n	8003a0c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800382e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003830:	b672      	cpsid	i
}
 8003832:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003866:	4b6c      	ldr	r3, [pc, #432]	@ (8003a18 <HAL_I2C_Master_Receive+0x4d0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	08db      	lsrs	r3, r3, #3
 800386c:	4a6b      	ldr	r2, [pc, #428]	@ (8003a1c <HAL_I2C_Master_Receive+0x4d4>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0a1a      	lsrs	r2, r3, #8
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	00da      	lsls	r2, r3, #3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	3b01      	subs	r3, #1
 8003884:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d118      	bne.n	80038be <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80038ae:	b662      	cpsie	i
}
 80038b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e0a6      	b.n	8003a0c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d1d9      	bne.n	8003880 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800390e:	b662      	cpsie	i
}
 8003910:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003944:	e04e      	b.n	80039e4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003948:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f001 f84e 	bl	80049ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e058      	b.n	8003a0c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d124      	bne.n	80039e4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d107      	bne.n	80039b2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f ae88 	bne.w	80036fe <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3728      	adds	r7, #40	@ 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	00010004 	.word	0x00010004
 8003a18:	20000008 	.word	0x20000008
 8003a1c:	14f8b589 	.word	0x14f8b589

08003a20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	4608      	mov	r0, r1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	817b      	strh	r3, [r7, #10]
 8003a32:	460b      	mov	r3, r1
 8003a34:	813b      	strh	r3, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a3a:	f7ff f831 	bl	8002aa0 <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	f040 80d9 	bne.w	8003c00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2319      	movs	r3, #25
 8003a54:	2201      	movs	r2, #1
 8003a56:	496d      	ldr	r1, [pc, #436]	@ (8003c0c <HAL_I2C_Mem_Write+0x1ec>)
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fe1d 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
 8003a66:	e0cc      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_I2C_Mem_Write+0x56>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0c5      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d007      	beq.n	8003a9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2221      	movs	r2, #33	@ 0x21
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2240      	movs	r2, #64	@ 0x40
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a3a      	ldr	r2, [r7, #32]
 8003ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a4d      	ldr	r2, [pc, #308]	@ (8003c10 <HAL_I2C_Mem_Write+0x1f0>)
 8003adc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ade:	88f8      	ldrh	r0, [r7, #6]
 8003ae0:	893a      	ldrh	r2, [r7, #8]
 8003ae2:	8979      	ldrh	r1, [r7, #10]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	4603      	mov	r3, r0
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fc54 	bl	800439c <I2C_RequestMemoryWrite>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d052      	beq.n	8003ba0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e081      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fee2 	bl	80048cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d107      	bne.n	8003b26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e06b      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d11b      	bne.n	8003ba0 <HAL_I2C_Mem_Write+0x180>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d017      	beq.n	8003ba0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1aa      	bne.n	8003afe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fed5 	bl	800495c <I2C_WaitOnBTFFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d107      	bne.n	8003bd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e016      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	00100002 	.word	0x00100002
 8003c10:	ffff0000 	.word	0xffff0000

08003c14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08c      	sub	sp, #48	@ 0x30
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	817b      	strh	r3, [r7, #10]
 8003c26:	460b      	mov	r3, r1
 8003c28:	813b      	strh	r3, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c32:	f7fe ff35 	bl	8002aa0 <HAL_GetTick>
 8003c36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	f040 8250 	bne.w	80040e6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	2319      	movs	r3, #25
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4982      	ldr	r1, [pc, #520]	@ (8003e58 <HAL_I2C_Mem_Read+0x244>)
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fd21 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e243      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_I2C_Mem_Read+0x5a>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e23c      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4d4>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d007      	beq.n	8003c94 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2222      	movs	r2, #34	@ 0x22
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2240      	movs	r2, #64	@ 0x40
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a62      	ldr	r2, [pc, #392]	@ (8003e5c <HAL_I2C_Mem_Read+0x248>)
 8003cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cd6:	88f8      	ldrh	r0, [r7, #6]
 8003cd8:	893a      	ldrh	r2, [r7, #8]
 8003cda:	8979      	ldrh	r1, [r7, #10]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fbee 	bl	80044c8 <I2C_RequestMemoryRead>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e1f8      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d113      	bne.n	8003d26 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e1cc      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d11e      	bne.n	8003d6c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d3e:	b672      	cpsid	i
}
 8003d40:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d68:	b662      	cpsie	i
}
 8003d6a:	e035      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d11e      	bne.n	8003db2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d84:	b672      	cpsid	i
}
 8003d86:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dae:	b662      	cpsie	i
}
 8003db0:	e012      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dc0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003dd8:	e172      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	f200 811f 	bhi.w	8004022 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d123      	bne.n	8003e34 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fdfb 	bl	80049ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e173      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e32:	e145      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d152      	bne.n	8003ee2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e42:	2200      	movs	r2, #0
 8003e44:	4906      	ldr	r1, [pc, #24]	@ (8003e60 <HAL_I2C_Mem_Read+0x24c>)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fc26 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e148      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4d4>
 8003e56:	bf00      	nop
 8003e58:	00100002 	.word	0x00100002
 8003e5c:	ffff0000 	.word	0xffff0000
 8003e60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e64:	b672      	cpsid	i
}
 8003e66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003eaa:	b662      	cpsie	i
}
 8003eac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ee0:	e0ee      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee8:	2200      	movs	r2, #0
 8003eea:	4981      	ldr	r1, [pc, #516]	@ (80040f0 <HAL_I2C_Mem_Read+0x4dc>)
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fbd3 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0f5      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f0c:	b672      	cpsid	i
}
 8003f0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f42:	4b6c      	ldr	r3, [pc, #432]	@ (80040f4 <HAL_I2C_Mem_Read+0x4e0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	08db      	lsrs	r3, r3, #3
 8003f48:	4a6b      	ldr	r2, [pc, #428]	@ (80040f8 <HAL_I2C_Mem_Read+0x4e4>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	0a1a      	lsrs	r2, r3, #8
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	00da      	lsls	r2, r3, #3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d118      	bne.n	8003f9a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003f8a:	b662      	cpsie	i
}
 8003f8c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e0a6      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d1d9      	bne.n	8003f5c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fea:	b662      	cpsie	i
}
 8003fec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004020:	e04e      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004024:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fce0 	bl	80049ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e058      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d124      	bne.n	80040c0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	2b03      	cmp	r3, #3
 800407c:	d107      	bne.n	800408e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800408c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f ae88 	bne.w	8003dda <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e000      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3728      	adds	r7, #40	@ 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	00010004 	.word	0x00010004
 80040f4:	20000008 	.word	0x20000008
 80040f8:	14f8b589 	.word	0x14f8b589

080040fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	460b      	mov	r3, r1
 800410a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004110:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d006      	beq.n	8004126 <I2C_MasterRequestWrite+0x2a>
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d003      	beq.n	8004126 <I2C_MasterRequestWrite+0x2a>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004124:	d108      	bne.n	8004138 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e00b      	b.n	8004150 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	2b12      	cmp	r3, #18
 800413e:	d107      	bne.n	8004150 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800414e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fa9b 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004176:	d103      	bne.n	8004180 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e035      	b.n	80041f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800418c:	d108      	bne.n	80041a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800418e:	897b      	ldrh	r3, [r7, #10]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800419c:	611a      	str	r2, [r3, #16]
 800419e:	e01b      	b.n	80041d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041a0:	897b      	ldrh	r3, [r7, #10]
 80041a2:	11db      	asrs	r3, r3, #7
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 0306 	and.w	r3, r3, #6
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f063 030f 	orn	r3, r3, #15
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	490e      	ldr	r1, [pc, #56]	@ (80041f8 <I2C_MasterRequestWrite+0xfc>)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fae4 	bl	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e010      	b.n	80041f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041ce:	897b      	ldrh	r3, [r7, #10]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4907      	ldr	r1, [pc, #28]	@ (80041fc <I2C_MasterRequestWrite+0x100>)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fad4 	bl	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	00010008 	.word	0x00010008
 80041fc:	00010002 	.word	0x00010002

08004200 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004224:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d006      	beq.n	800423a <I2C_MasterRequestRead+0x3a>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d003      	beq.n	800423a <I2C_MasterRequestRead+0x3a>
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004238:	d108      	bne.n	800424c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e00b      	b.n	8004264 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	2b11      	cmp	r3, #17
 8004252:	d107      	bne.n	8004264 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004262:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 fa11 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00d      	beq.n	8004298 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428a:	d103      	bne.n	8004294 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004292:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e079      	b.n	800438c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042a0:	d108      	bne.n	80042b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042a2:	897b      	ldrh	r3, [r7, #10]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	611a      	str	r2, [r3, #16]
 80042b2:	e05f      	b.n	8004374 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042b4:	897b      	ldrh	r3, [r7, #10]
 80042b6:	11db      	asrs	r3, r3, #7
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f003 0306 	and.w	r3, r3, #6
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f063 030f 	orn	r3, r3, #15
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	4930      	ldr	r1, [pc, #192]	@ (8004394 <I2C_MasterRequestRead+0x194>)
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fa5a 	bl	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e054      	b.n	800438c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042e2:	897b      	ldrh	r3, [r7, #10]
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4929      	ldr	r1, [pc, #164]	@ (8004398 <I2C_MasterRequestRead+0x198>)
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fa4a 	bl	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e044      	b.n	800438c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004326:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f9af 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00d      	beq.n	800435c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800434e:	d103      	bne.n	8004358 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e017      	b.n	800438c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800435c:	897b      	ldrh	r3, [r7, #10]
 800435e:	11db      	asrs	r3, r3, #7
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0306 	and.w	r3, r3, #6
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f063 030e 	orn	r3, r3, #14
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4907      	ldr	r1, [pc, #28]	@ (8004398 <I2C_MasterRequestRead+0x198>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fa06 	bl	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	00010008 	.word	0x00010008
 8004398:	00010002 	.word	0x00010002

0800439c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	461a      	mov	r2, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	817b      	strh	r3, [r7, #10]
 80043ae:	460b      	mov	r3, r1
 80043b0:	813b      	strh	r3, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f960 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ec:	d103      	bne.n	80043f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e05f      	b.n	80044ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043fa:	897b      	ldrh	r3, [r7, #10]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004408:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	492d      	ldr	r1, [pc, #180]	@ (80044c4 <I2C_RequestMemoryWrite+0x128>)
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f9bb 	bl	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e04c      	b.n	80044ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004438:	6a39      	ldr	r1, [r7, #32]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fa46 	bl	80048cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	2b04      	cmp	r3, #4
 800444c:	d107      	bne.n	800445e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800445c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e02b      	b.n	80044ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d105      	bne.n	8004474 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004468:	893b      	ldrh	r3, [r7, #8]
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	611a      	str	r2, [r3, #16]
 8004472:	e021      	b.n	80044b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004474:	893b      	ldrh	r3, [r7, #8]
 8004476:	0a1b      	lsrs	r3, r3, #8
 8004478:	b29b      	uxth	r3, r3
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004484:	6a39      	ldr	r1, [r7, #32]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa20 	bl	80048cc <I2C_WaitOnTXEFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00d      	beq.n	80044ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	2b04      	cmp	r3, #4
 8004498:	d107      	bne.n	80044aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e005      	b.n	80044ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ae:	893b      	ldrh	r3, [r7, #8]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	00010002 	.word	0x00010002

080044c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	4608      	mov	r0, r1
 80044d2:	4611      	mov	r1, r2
 80044d4:	461a      	mov	r2, r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	817b      	strh	r3, [r7, #10]
 80044da:	460b      	mov	r3, r1
 80044dc:	813b      	strh	r3, [r7, #8]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004500:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	2200      	movs	r2, #0
 800450a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f8c2 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004528:	d103      	bne.n	8004532 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e0aa      	b.n	800468c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004536:	897b      	ldrh	r3, [r7, #10]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004544:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	6a3a      	ldr	r2, [r7, #32]
 800454a:	4952      	ldr	r1, [pc, #328]	@ (8004694 <I2C_RequestMemoryRead+0x1cc>)
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f91d 	bl	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e097      	b.n	800468c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004574:	6a39      	ldr	r1, [r7, #32]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f9a8 	bl	80048cc <I2C_WaitOnTXEFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00d      	beq.n	800459e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	2b04      	cmp	r3, #4
 8004588:	d107      	bne.n	800459a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004598:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e076      	b.n	800468c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045a4:	893b      	ldrh	r3, [r7, #8]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	611a      	str	r2, [r3, #16]
 80045ae:	e021      	b.n	80045f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045b0:	893b      	ldrh	r3, [r7, #8]
 80045b2:	0a1b      	lsrs	r3, r3, #8
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c0:	6a39      	ldr	r1, [r7, #32]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f982 	bl	80048cc <I2C_WaitOnTXEFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d107      	bne.n	80045e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e050      	b.n	800468c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ea:	893b      	ldrh	r3, [r7, #8]
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f6:	6a39      	ldr	r1, [r7, #32]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f967 	bl	80048cc <I2C_WaitOnTXEFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00d      	beq.n	8004620 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	2b04      	cmp	r3, #4
 800460a:	d107      	bne.n	800461c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e035      	b.n	800468c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800462e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2200      	movs	r2, #0
 8004638:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f82b 	bl	8004698 <I2C_WaitOnFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00d      	beq.n	8004664 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004656:	d103      	bne.n	8004660 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800465e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e013      	b.n	800468c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004664:	897b      	ldrh	r3, [r7, #10]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	4906      	ldr	r1, [pc, #24]	@ (8004694 <I2C_RequestMemoryRead+0x1cc>)
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f886 	bl	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	00010002 	.word	0x00010002

08004698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a8:	e048      	b.n	800473c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d044      	beq.n	800473c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fe f9f5 	bl	8002aa0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d139      	bne.n	800473c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10d      	bne.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	43da      	mvns	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4013      	ands	r3, r2
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bf0c      	ite	eq
 80046e4:	2301      	moveq	r3, #1
 80046e6:	2300      	movne	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	e00c      	b.n	8004708 <I2C_WaitOnFlagUntilTimeout+0x70>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	43da      	mvns	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4013      	ands	r3, r2
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	429a      	cmp	r2, r3
 800470c:	d116      	bne.n	800473c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	f043 0220 	orr.w	r2, r3, #32
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e023      	b.n	8004784 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d10d      	bne.n	8004762 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	43da      	mvns	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	4013      	ands	r3, r2
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf0c      	ite	eq
 8004758:	2301      	moveq	r3, #1
 800475a:	2300      	movne	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	e00c      	b.n	800477c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	43da      	mvns	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4013      	ands	r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	429a      	cmp	r2, r3
 8004780:	d093      	beq.n	80046aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800479a:	e071      	b.n	8004880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047aa:	d123      	bne.n	80047f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	f043 0204 	orr.w	r2, r3, #4
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e067      	b.n	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d041      	beq.n	8004880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fc:	f7fe f950 	bl	8002aa0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d302      	bcc.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d136      	bne.n	8004880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d10c      	bne.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	43da      	mvns	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4013      	ands	r3, r2
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	e00b      	b.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	43da      	mvns	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4013      	ands	r3, r2
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e021      	b.n	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	0c1b      	lsrs	r3, r3, #16
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d10c      	bne.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	43da      	mvns	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4013      	ands	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e00b      	b.n	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	43da      	mvns	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bf14      	ite	ne
 80048b6:	2301      	movne	r3, #1
 80048b8:	2300      	moveq	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f47f af6d 	bne.w	800479c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d8:	e034      	b.n	8004944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f8e3 	bl	8004aa6 <I2C_IsAcknowledgeFailed>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e034      	b.n	8004954 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d028      	beq.n	8004944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f2:	f7fe f8d5 	bl	8002aa0 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d302      	bcc.n	8004908 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d11d      	bne.n	8004944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004912:	2b80      	cmp	r3, #128	@ 0x80
 8004914:	d016      	beq.n	8004944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	f043 0220 	orr.w	r2, r3, #32
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e007      	b.n	8004954 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494e:	2b80      	cmp	r3, #128	@ 0x80
 8004950:	d1c3      	bne.n	80048da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004968:	e034      	b.n	80049d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f89b 	bl	8004aa6 <I2C_IsAcknowledgeFailed>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e034      	b.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d028      	beq.n	80049d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004982:	f7fe f88d 	bl	8002aa0 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	d302      	bcc.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d11d      	bne.n	80049d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d016      	beq.n	80049d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e007      	b.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d1c3      	bne.n	800496a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049f8:	e049      	b.n	8004a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d119      	bne.n	8004a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0210 	mvn.w	r2, #16
 8004a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e030      	b.n	8004a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3c:	f7fe f830 	bl	8002aa0 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d302      	bcc.n	8004a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11d      	bne.n	8004a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5c:	2b40      	cmp	r3, #64	@ 0x40
 8004a5e:	d016      	beq.n	8004a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f043 0220 	orr.w	r2, r3, #32
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e007      	b.n	8004a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a98:	2b40      	cmp	r3, #64	@ 0x40
 8004a9a:	d1ae      	bne.n	80049fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004abc:	d11b      	bne.n	8004af6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ac6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	f043 0204 	orr.w	r2, r3, #4
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e272      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8087 	beq.w	8004c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b24:	4b92      	ldr	r3, [pc, #584]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d00c      	beq.n	8004b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b30:	4b8f      	ldr	r3, [pc, #572]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d112      	bne.n	8004b62 <HAL_RCC_OscConfig+0x5e>
 8004b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b48:	d10b      	bne.n	8004b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4a:	4b89      	ldr	r3, [pc, #548]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d06c      	beq.n	8004c30 <HAL_RCC_OscConfig+0x12c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d168      	bne.n	8004c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e24c      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCC_OscConfig+0x76>
 8004b6c:	4b80      	ldr	r3, [pc, #512]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a7f      	ldr	r2, [pc, #508]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	e02e      	b.n	8004bd8 <HAL_RCC_OscConfig+0xd4>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x98>
 8004b82:	4b7b      	ldr	r3, [pc, #492]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7a      	ldr	r2, [pc, #488]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b78      	ldr	r3, [pc, #480]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a77      	ldr	r2, [pc, #476]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e01d      	b.n	8004bd8 <HAL_RCC_OscConfig+0xd4>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0xbc>
 8004ba6:	4b72      	ldr	r3, [pc, #456]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a71      	ldr	r2, [pc, #452]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a6e      	ldr	r2, [pc, #440]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0xd4>
 8004bc0:	4b6b      	ldr	r3, [pc, #428]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a6a      	ldr	r2, [pc, #424]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4b68      	ldr	r3, [pc, #416]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a67      	ldr	r2, [pc, #412]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d013      	beq.n	8004c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fd ff5e 	bl	8002aa0 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fd ff5a 	bl	8002aa0 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	@ 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e200      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0xe4>
 8004c06:	e014      	b.n	8004c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fd ff4a 	bl	8002aa0 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c10:	f7fd ff46 	bl	8002aa0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	@ 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e1ec      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c22:	4b53      	ldr	r3, [pc, #332]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x10c>
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d063      	beq.n	8004d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c4a:	4b49      	ldr	r3, [pc, #292]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d11c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x18c>
 8004c56:	4b46      	ldr	r3, [pc, #280]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d116      	bne.n	8004c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c62:	4b43      	ldr	r3, [pc, #268]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_RCC_OscConfig+0x176>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e1c0      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4939      	ldr	r1, [pc, #228]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8e:	e03a      	b.n	8004d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d020      	beq.n	8004cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c98:	4b36      	ldr	r3, [pc, #216]	@ (8004d74 <HAL_RCC_OscConfig+0x270>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9e:	f7fd feff 	bl	8002aa0 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca6:	f7fd fefb 	bl	8002aa0 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e1a1      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4927      	ldr	r1, [pc, #156]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	600b      	str	r3, [r1, #0]
 8004cd8:	e015      	b.n	8004d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cda:	4b26      	ldr	r3, [pc, #152]	@ (8004d74 <HAL_RCC_OscConfig+0x270>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fd fede 	bl	8002aa0 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce8:	f7fd feda 	bl	8002aa0 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e180      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d03a      	beq.n	8004d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d019      	beq.n	8004d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d1a:	4b17      	ldr	r3, [pc, #92]	@ (8004d78 <HAL_RCC_OscConfig+0x274>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d20:	f7fd febe 	bl	8002aa0 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d28:	f7fd feba 	bl	8002aa0 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e160      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d70 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d46:	2001      	movs	r0, #1
 8004d48:	f000 faba 	bl	80052c0 <RCC_Delay>
 8004d4c:	e01c      	b.n	8004d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d78 <HAL_RCC_OscConfig+0x274>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d54:	f7fd fea4 	bl	8002aa0 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5a:	e00f      	b.n	8004d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5c:	f7fd fea0 	bl	8002aa0 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d908      	bls.n	8004d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e146      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
 8004d6e:	bf00      	nop
 8004d70:	40021000 	.word	0x40021000
 8004d74:	42420000 	.word	0x42420000
 8004d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	4b92      	ldr	r3, [pc, #584]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e9      	bne.n	8004d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80a6 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d9a:	4b8b      	ldr	r3, [pc, #556]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10d      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da6:	4b88      	ldr	r3, [pc, #544]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	4a87      	ldr	r2, [pc, #540]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db0:	61d3      	str	r3, [r2, #28]
 8004db2:	4b85      	ldr	r3, [pc, #532]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	60bb      	str	r3, [r7, #8]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc2:	4b82      	ldr	r3, [pc, #520]	@ (8004fcc <HAL_RCC_OscConfig+0x4c8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d118      	bne.n	8004e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dce:	4b7f      	ldr	r3, [pc, #508]	@ (8004fcc <HAL_RCC_OscConfig+0x4c8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8004fcc <HAL_RCC_OscConfig+0x4c8>)
 8004dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dda:	f7fd fe61 	bl	8002aa0 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de2:	f7fd fe5d 	bl	8002aa0 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b64      	cmp	r3, #100	@ 0x64
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e103      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df4:	4b75      	ldr	r3, [pc, #468]	@ (8004fcc <HAL_RCC_OscConfig+0x4c8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d106      	bne.n	8004e16 <HAL_RCC_OscConfig+0x312>
 8004e08:	4b6f      	ldr	r3, [pc, #444]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6213      	str	r3, [r2, #32]
 8004e14:	e02d      	b.n	8004e72 <HAL_RCC_OscConfig+0x36e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x334>
 8004e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	4a69      	ldr	r2, [pc, #420]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	6213      	str	r3, [r2, #32]
 8004e2a:	4b67      	ldr	r3, [pc, #412]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	4a66      	ldr	r2, [pc, #408]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	6213      	str	r3, [r2, #32]
 8004e36:	e01c      	b.n	8004e72 <HAL_RCC_OscConfig+0x36e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b05      	cmp	r3, #5
 8004e3e:	d10c      	bne.n	8004e5a <HAL_RCC_OscConfig+0x356>
 8004e40:	4b61      	ldr	r3, [pc, #388]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	4a60      	ldr	r2, [pc, #384]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e46:	f043 0304 	orr.w	r3, r3, #4
 8004e4a:	6213      	str	r3, [r2, #32]
 8004e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4a5d      	ldr	r2, [pc, #372]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6213      	str	r3, [r2, #32]
 8004e58:	e00b      	b.n	8004e72 <HAL_RCC_OscConfig+0x36e>
 8004e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	6213      	str	r3, [r2, #32]
 8004e66:	4b58      	ldr	r3, [pc, #352]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4a57      	ldr	r2, [pc, #348]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d015      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7a:	f7fd fe11 	bl	8002aa0 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e82:	f7fd fe0d 	bl	8002aa0 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e0b1      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e98:	4b4b      	ldr	r3, [pc, #300]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0ee      	beq.n	8004e82 <HAL_RCC_OscConfig+0x37e>
 8004ea4:	e014      	b.n	8004ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea6:	f7fd fdfb 	bl	8002aa0 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eae:	f7fd fdf7 	bl	8002aa0 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e09b      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec4:	4b40      	ldr	r3, [pc, #256]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ee      	bne.n	8004eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d105      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	4a3b      	ldr	r2, [pc, #236]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 8087 	beq.w	8004ffa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eec:	4b36      	ldr	r3, [pc, #216]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 030c 	and.w	r3, r3, #12
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d061      	beq.n	8004fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d146      	bne.n	8004f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f00:	4b33      	ldr	r3, [pc, #204]	@ (8004fd0 <HAL_RCC_OscConfig+0x4cc>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fd fdcb 	bl	8002aa0 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fd fdc7 	bl	8002aa0 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e06d      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f20:	4b29      	ldr	r3, [pc, #164]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f34:	d108      	bne.n	8004f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f36:	4b24      	ldr	r3, [pc, #144]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4921      	ldr	r1, [pc, #132]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f48:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a19      	ldr	r1, [r3, #32]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	491b      	ldr	r1, [pc, #108]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f60:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd0 <HAL_RCC_OscConfig+0x4cc>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f66:	f7fd fd9b 	bl	8002aa0 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6e:	f7fd fd97 	bl	8002aa0 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e03d      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f80:	4b11      	ldr	r3, [pc, #68]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x46a>
 8004f8c:	e035      	b.n	8004ffa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8e:	4b10      	ldr	r3, [pc, #64]	@ (8004fd0 <HAL_RCC_OscConfig+0x4cc>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fd fd84 	bl	8002aa0 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9c:	f7fd fd80 	bl	8002aa0 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e026      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fae:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <HAL_RCC_OscConfig+0x4c4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x498>
 8004fba:	e01e      	b.n	8004ffa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e019      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	40007000 	.word	0x40007000
 8004fd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <HAL_RCC_OscConfig+0x500>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d106      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0d0      	b.n	80051be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800501c:	4b6a      	ldr	r3, [pc, #424]	@ (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d910      	bls.n	800504c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b67      	ldr	r3, [pc, #412]	@ (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 0207 	bic.w	r2, r3, #7
 8005032:	4965      	ldr	r1, [pc, #404]	@ (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b63      	ldr	r3, [pc, #396]	@ (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0b8      	b.n	80051be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d020      	beq.n	800509a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005064:	4b59      	ldr	r3, [pc, #356]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a58      	ldr	r2, [pc, #352]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 800506a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800506e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800507c:	4b53      	ldr	r3, [pc, #332]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4a52      	ldr	r2, [pc, #328]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 8005082:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005088:	4b50      	ldr	r3, [pc, #320]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	494d      	ldr	r1, [pc, #308]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	4313      	orrs	r3, r2
 8005098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d040      	beq.n	8005128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ae:	4b47      	ldr	r3, [pc, #284]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d115      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e07f      	b.n	80051be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c6:	4b41      	ldr	r3, [pc, #260]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e073      	b.n	80051be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d6:	4b3d      	ldr	r3, [pc, #244]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e06b      	b.n	80051be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050e6:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f023 0203 	bic.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4936      	ldr	r1, [pc, #216]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f8:	f7fd fcd2 	bl	8002aa0 <HAL_GetTick>
 80050fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005100:	f7fd fcce 	bl	8002aa0 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e053      	b.n	80051be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	4b2d      	ldr	r3, [pc, #180]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 020c 	and.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	429a      	cmp	r2, r3
 8005126:	d1eb      	bne.n	8005100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005128:	4b27      	ldr	r3, [pc, #156]	@ (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d210      	bcs.n	8005158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b24      	ldr	r3, [pc, #144]	@ (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 0207 	bic.w	r2, r3, #7
 800513e:	4922      	ldr	r1, [pc, #136]	@ (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005146:	4b20      	ldr	r3, [pc, #128]	@ (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e032      	b.n	80051be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005164:	4b19      	ldr	r3, [pc, #100]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4916      	ldr	r1, [pc, #88]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	4313      	orrs	r3, r2
 8005174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005182:	4b12      	ldr	r3, [pc, #72]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	490e      	ldr	r1, [pc, #56]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	4313      	orrs	r3, r2
 8005194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005196:	f000 f821 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 800519a:	4602      	mov	r2, r0
 800519c:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	091b      	lsrs	r3, r3, #4
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	490a      	ldr	r1, [pc, #40]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c8>)
 80051a8:	5ccb      	ldrb	r3, [r1, r3]
 80051aa:	fa22 f303 	lsr.w	r3, r2, r3
 80051ae:	4a09      	ldr	r2, [pc, #36]	@ (80051d4 <HAL_RCC_ClockConfig+0x1cc>)
 80051b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051b2:	4b09      	ldr	r3, [pc, #36]	@ (80051d8 <HAL_RCC_ClockConfig+0x1d0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fd fc30 	bl	8002a1c <HAL_InitTick>

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40022000 	.word	0x40022000
 80051cc:	40021000 	.word	0x40021000
 80051d0:	080091a8 	.word	0x080091a8
 80051d4:	20000008 	.word	0x20000008
 80051d8:	2000000c 	.word	0x2000000c

080051dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	2300      	movs	r3, #0
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x94>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 030c 	and.w	r3, r3, #12
 8005202:	2b04      	cmp	r3, #4
 8005204:	d002      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x30>
 8005206:	2b08      	cmp	r3, #8
 8005208:	d003      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0x36>
 800520a:	e027      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800520c:	4b19      	ldr	r3, [pc, #100]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x98>)
 800520e:	613b      	str	r3, [r7, #16]
      break;
 8005210:	e027      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	0c9b      	lsrs	r3, r3, #18
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	4a17      	ldr	r2, [pc, #92]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x9c>)
 800521c:	5cd3      	ldrb	r3, [r2, r3]
 800521e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d010      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800522a:	4b11      	ldr	r3, [pc, #68]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x94>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	0c5b      	lsrs	r3, r3, #17
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	4a11      	ldr	r2, [pc, #68]	@ (800527c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005236:	5cd3      	ldrb	r3, [r2, r3]
 8005238:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a0d      	ldr	r2, [pc, #52]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x98>)
 800523e:	fb03 f202 	mul.w	r2, r3, r2
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	e004      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a0c      	ldr	r2, [pc, #48]	@ (8005280 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005250:	fb02 f303 	mul.w	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	613b      	str	r3, [r7, #16]
      break;
 800525a:	e002      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x98>)
 800525e:	613b      	str	r3, [r7, #16]
      break;
 8005260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005262:	693b      	ldr	r3, [r7, #16]
}
 8005264:	4618      	mov	r0, r3
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	007a1200 	.word	0x007a1200
 8005278:	080091c0 	.word	0x080091c0
 800527c:	080091d0 	.word	0x080091d0
 8005280:	003d0900 	.word	0x003d0900

08005284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005288:	4b02      	ldr	r3, [pc, #8]	@ (8005294 <HAL_RCC_GetHCLKFreq+0x10>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	20000008 	.word	0x20000008

08005298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800529c:	f7ff fff2 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4903      	ldr	r1, [pc, #12]	@ (80052bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	080091b8 	.word	0x080091b8

080052c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052c8:	4b0a      	ldr	r3, [pc, #40]	@ (80052f4 <RCC_Delay+0x34>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	@ (80052f8 <RCC_Delay+0x38>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	0a5b      	lsrs	r3, r3, #9
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052dc:	bf00      	nop
  }
  while (Delay --);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1e5a      	subs	r2, r3, #1
 80052e2:	60fa      	str	r2, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f9      	bne.n	80052dc <RCC_Delay+0x1c>
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	20000008 	.word	0x20000008
 80052f8:	10624dd3 	.word	0x10624dd3

080052fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e076      	b.n	80053fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800531e:	d009      	beq.n	8005334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	61da      	str	r2, [r3, #28]
 8005326:	e005      	b.n	8005334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fd f9b2 	bl	80026b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800536a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b8:	ea42 0103 	orr.w	r1, r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	0c1a      	lsrs	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f002 0204 	and.w	r2, r2, #4
 80053da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005414:	f7fd fb44 	bl	8002aa0 <HAL_GetTick>
 8005418:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	d001      	beq.n	800542e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800542a:	2302      	movs	r3, #2
 800542c:	e12a      	b.n	8005684 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_SPI_Transmit+0x36>
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e122      	b.n	8005684 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_SPI_Transmit+0x48>
 8005448:	2302      	movs	r3, #2
 800544a:	e11b      	b.n	8005684 <HAL_SPI_Transmit+0x280>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2203      	movs	r2, #3
 8005458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	88fa      	ldrh	r2, [r7, #6]
 8005472:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800549a:	d10f      	bne.n	80054bc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c6:	2b40      	cmp	r3, #64	@ 0x40
 80054c8:	d007      	beq.n	80054da <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054e2:	d152      	bne.n	800558a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_SPI_Transmit+0xee>
 80054ec:	8b7b      	ldrh	r3, [r7, #26]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d145      	bne.n	800557e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	881a      	ldrh	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	1c9a      	adds	r2, r3, #2
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005516:	e032      	b.n	800557e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b02      	cmp	r3, #2
 8005524:	d112      	bne.n	800554c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552a:	881a      	ldrh	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	1c9a      	adds	r2, r3, #2
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	86da      	strh	r2, [r3, #54]	@ 0x36
 800554a:	e018      	b.n	800557e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800554c:	f7fd faa8 	bl	8002aa0 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d803      	bhi.n	8005564 <HAL_SPI_Transmit+0x160>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d102      	bne.n	800556a <HAL_SPI_Transmit+0x166>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e082      	b.n	8005684 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1c7      	bne.n	8005518 <HAL_SPI_Transmit+0x114>
 8005588:	e053      	b.n	8005632 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Transmit+0x194>
 8005592:	8b7b      	ldrh	r3, [r7, #26]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d147      	bne.n	8005628 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055be:	e033      	b.n	8005628 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d113      	bne.n	80055f6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	7812      	ldrb	r2, [r2, #0]
 80055da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055f4:	e018      	b.n	8005628 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f6:	f7fd fa53 	bl	8002aa0 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d803      	bhi.n	800560e <HAL_SPI_Transmit+0x20a>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d102      	bne.n	8005614 <HAL_SPI_Transmit+0x210>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e02d      	b.n	8005684 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1c6      	bne.n	80055c0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	6839      	ldr	r1, [r7, #0]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fa66 	bl	8005b08 <SPI_EndRxTxTransaction>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005682:	2300      	movs	r3, #0
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	@ 0x28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800569a:	2301      	movs	r3, #1
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800569e:	f7fd f9ff 	bl	8002aa0 <HAL_GetTick>
 80056a2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056aa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056b2:	887b      	ldrh	r3, [r7, #2]
 80056b4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056b6:	7ffb      	ldrb	r3, [r7, #31]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d00c      	beq.n	80056d6 <HAL_SPI_TransmitReceive+0x4a>
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c2:	d106      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x46>
 80056cc:	7ffb      	ldrb	r3, [r7, #31]
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d001      	beq.n	80056d6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80056d2:	2302      	movs	r3, #2
 80056d4:	e17f      	b.n	80059d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x5c>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x5c>
 80056e2:	887b      	ldrh	r3, [r7, #2]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e174      	b.n	80059d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_SPI_TransmitReceive+0x6e>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e16d      	b.n	80059d6 <HAL_SPI_TransmitReceive+0x34a>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b04      	cmp	r3, #4
 800570c:	d003      	beq.n	8005716 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2205      	movs	r2, #5
 8005712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	887a      	ldrh	r2, [r7, #2]
 8005726:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	887a      	ldrh	r2, [r7, #2]
 800572c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	887a      	ldrh	r2, [r7, #2]
 8005738:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	887a      	ldrh	r2, [r7, #2]
 800573e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005756:	2b40      	cmp	r3, #64	@ 0x40
 8005758:	d007      	beq.n	800576a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005768:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005772:	d17e      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_SPI_TransmitReceive+0xf6>
 800577c:	8afb      	ldrh	r3, [r7, #22]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d16c      	bne.n	800585c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005786:	881a      	ldrh	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005792:	1c9a      	adds	r2, r3, #2
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057a6:	e059      	b.n	800585c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d11b      	bne.n	80057ee <HAL_SPI_TransmitReceive+0x162>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d016      	beq.n	80057ee <HAL_SPI_TransmitReceive+0x162>
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d113      	bne.n	80057ee <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	881a      	ldrh	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d6:	1c9a      	adds	r2, r3, #2
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d119      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x1a4>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d014      	beq.n	8005830 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	b292      	uxth	r2, r2
 8005812:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005818:	1c9a      	adds	r2, r3, #2
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800582c:	2301      	movs	r3, #1
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005830:	f7fd f936 	bl	8002aa0 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800583c:	429a      	cmp	r2, r3
 800583e:	d80d      	bhi.n	800585c <HAL_SPI_TransmitReceive+0x1d0>
 8005840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d009      	beq.n	800585c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e0bc      	b.n	80059d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1a0      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x11c>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d19b      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x11c>
 8005870:	e082      	b.n	8005978 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_SPI_TransmitReceive+0x1f4>
 800587a:	8afb      	ldrh	r3, [r7, #22]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d171      	bne.n	8005964 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058a6:	e05d      	b.n	8005964 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d11c      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x264>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d017      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x264>
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d114      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	7812      	ldrb	r2, [r2, #0]
 80058d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d119      	bne.n	8005932 <HAL_SPI_TransmitReceive+0x2a6>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d014      	beq.n	8005932 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800592e:	2301      	movs	r3, #1
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005932:	f7fd f8b5 	bl	8002aa0 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800593e:	429a      	cmp	r2, r3
 8005940:	d803      	bhi.n	800594a <HAL_SPI_TransmitReceive+0x2be>
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005948:	d102      	bne.n	8005950 <HAL_SPI_TransmitReceive+0x2c4>
 800594a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e038      	b.n	80059d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d19c      	bne.n	80058a8 <HAL_SPI_TransmitReceive+0x21c>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d197      	bne.n	80058a8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005978:	6a3a      	ldr	r2, [r7, #32]
 800597a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f8c3 	bl	8005b08 <SPI_EndRxTxTransaction>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e01d      	b.n	80059d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80059d4:	2300      	movs	r3, #0
  }
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3728      	adds	r7, #40	@ 0x28
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059ec:	b2db      	uxtb	r3, r3
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a08:	f7fd f84a 	bl	8002aa0 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	4413      	add	r3, r2
 8005a16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a18:	f7fd f842 	bl	8002aa0 <HAL_GetTick>
 8005a1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a1e:	4b39      	ldr	r3, [pc, #228]	@ (8005b04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	015b      	lsls	r3, r3, #5
 8005a24:	0d1b      	lsrs	r3, r3, #20
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a2e:	e054      	b.n	8005ada <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d050      	beq.n	8005ada <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a38:	f7fd f832 	bl	8002aa0 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d902      	bls.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d13d      	bne.n	8005aca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a66:	d111      	bne.n	8005a8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a70:	d004      	beq.n	8005a7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a7a:	d107      	bne.n	8005a8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a94:	d10f      	bne.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ab4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e017      	b.n	8005afa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d19b      	bne.n	8005a30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000008 	.word	0x20000008

08005b08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	2102      	movs	r1, #2
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff ff6a 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2e:	f043 0220 	orr.w	r2, r3, #32
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e013      	b.n	8005b62 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2200      	movs	r2, #0
 8005b42:	2180      	movs	r1, #128	@ 0x80
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff ff57 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b54:	f043 0220 	orr.w	r2, r3, #32
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e000      	b.n	8005b62 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <__cvt>:
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b70:	461d      	mov	r5, r3
 8005b72:	bfbb      	ittet	lt
 8005b74:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005b78:	461d      	movlt	r5, r3
 8005b7a:	2300      	movge	r3, #0
 8005b7c:	232d      	movlt	r3, #45	@ 0x2d
 8005b7e:	b088      	sub	sp, #32
 8005b80:	4614      	mov	r4, r2
 8005b82:	bfb8      	it	lt
 8005b84:	4614      	movlt	r4, r2
 8005b86:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b88:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005b8a:	7013      	strb	r3, [r2, #0]
 8005b8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b8e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005b92:	f023 0820 	bic.w	r8, r3, #32
 8005b96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b9a:	d005      	beq.n	8005ba8 <__cvt+0x3e>
 8005b9c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005ba0:	d100      	bne.n	8005ba4 <__cvt+0x3a>
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e000      	b.n	8005baa <__cvt+0x40>
 8005ba8:	2303      	movs	r3, #3
 8005baa:	aa07      	add	r2, sp, #28
 8005bac:	9204      	str	r2, [sp, #16]
 8005bae:	aa06      	add	r2, sp, #24
 8005bb0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005bb4:	e9cd 3600 	strd	r3, r6, [sp]
 8005bb8:	4622      	mov	r2, r4
 8005bba:	462b      	mov	r3, r5
 8005bbc:	f000 fea8 	bl	8006910 <_dtoa_r>
 8005bc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	d119      	bne.n	8005bfc <__cvt+0x92>
 8005bc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005bca:	07db      	lsls	r3, r3, #31
 8005bcc:	d50e      	bpl.n	8005bec <__cvt+0x82>
 8005bce:	eb00 0906 	add.w	r9, r0, r6
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	4629      	mov	r1, r5
 8005bda:	f7fa fee5 	bl	80009a8 <__aeabi_dcmpeq>
 8005bde:	b108      	cbz	r0, 8005be4 <__cvt+0x7a>
 8005be0:	f8cd 901c 	str.w	r9, [sp, #28]
 8005be4:	2230      	movs	r2, #48	@ 0x30
 8005be6:	9b07      	ldr	r3, [sp, #28]
 8005be8:	454b      	cmp	r3, r9
 8005bea:	d31e      	bcc.n	8005c2a <__cvt+0xc0>
 8005bec:	4638      	mov	r0, r7
 8005bee:	9b07      	ldr	r3, [sp, #28]
 8005bf0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005bf2:	1bdb      	subs	r3, r3, r7
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	b008      	add	sp, #32
 8005bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c00:	eb00 0906 	add.w	r9, r0, r6
 8005c04:	d1e5      	bne.n	8005bd2 <__cvt+0x68>
 8005c06:	7803      	ldrb	r3, [r0, #0]
 8005c08:	2b30      	cmp	r3, #48	@ 0x30
 8005c0a:	d10a      	bne.n	8005c22 <__cvt+0xb8>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2300      	movs	r3, #0
 8005c10:	4620      	mov	r0, r4
 8005c12:	4629      	mov	r1, r5
 8005c14:	f7fa fec8 	bl	80009a8 <__aeabi_dcmpeq>
 8005c18:	b918      	cbnz	r0, 8005c22 <__cvt+0xb8>
 8005c1a:	f1c6 0601 	rsb	r6, r6, #1
 8005c1e:	f8ca 6000 	str.w	r6, [sl]
 8005c22:	f8da 3000 	ldr.w	r3, [sl]
 8005c26:	4499      	add	r9, r3
 8005c28:	e7d3      	b.n	8005bd2 <__cvt+0x68>
 8005c2a:	1c59      	adds	r1, r3, #1
 8005c2c:	9107      	str	r1, [sp, #28]
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	e7d9      	b.n	8005be6 <__cvt+0x7c>

08005c32 <__exponent>:
 8005c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c34:	2900      	cmp	r1, #0
 8005c36:	bfb6      	itet	lt
 8005c38:	232d      	movlt	r3, #45	@ 0x2d
 8005c3a:	232b      	movge	r3, #43	@ 0x2b
 8005c3c:	4249      	neglt	r1, r1
 8005c3e:	2909      	cmp	r1, #9
 8005c40:	7002      	strb	r2, [r0, #0]
 8005c42:	7043      	strb	r3, [r0, #1]
 8005c44:	dd29      	ble.n	8005c9a <__exponent+0x68>
 8005c46:	f10d 0307 	add.w	r3, sp, #7
 8005c4a:	461d      	mov	r5, r3
 8005c4c:	270a      	movs	r7, #10
 8005c4e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c52:	461a      	mov	r2, r3
 8005c54:	fb07 1416 	mls	r4, r7, r6, r1
 8005c58:	3430      	adds	r4, #48	@ 0x30
 8005c5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c5e:	460c      	mov	r4, r1
 8005c60:	2c63      	cmp	r4, #99	@ 0x63
 8005c62:	4631      	mov	r1, r6
 8005c64:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c68:	dcf1      	bgt.n	8005c4e <__exponent+0x1c>
 8005c6a:	3130      	adds	r1, #48	@ 0x30
 8005c6c:	1e94      	subs	r4, r2, #2
 8005c6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c72:	4623      	mov	r3, r4
 8005c74:	1c41      	adds	r1, r0, #1
 8005c76:	42ab      	cmp	r3, r5
 8005c78:	d30a      	bcc.n	8005c90 <__exponent+0x5e>
 8005c7a:	f10d 0309 	add.w	r3, sp, #9
 8005c7e:	1a9b      	subs	r3, r3, r2
 8005c80:	42ac      	cmp	r4, r5
 8005c82:	bf88      	it	hi
 8005c84:	2300      	movhi	r3, #0
 8005c86:	3302      	adds	r3, #2
 8005c88:	4403      	add	r3, r0
 8005c8a:	1a18      	subs	r0, r3, r0
 8005c8c:	b003      	add	sp, #12
 8005c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c98:	e7ed      	b.n	8005c76 <__exponent+0x44>
 8005c9a:	2330      	movs	r3, #48	@ 0x30
 8005c9c:	3130      	adds	r1, #48	@ 0x30
 8005c9e:	7083      	strb	r3, [r0, #2]
 8005ca0:	70c1      	strb	r1, [r0, #3]
 8005ca2:	1d03      	adds	r3, r0, #4
 8005ca4:	e7f1      	b.n	8005c8a <__exponent+0x58>
	...

08005ca8 <_printf_float>:
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	b091      	sub	sp, #68	@ 0x44
 8005cae:	460c      	mov	r4, r1
 8005cb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	461f      	mov	r7, r3
 8005cb8:	4605      	mov	r5, r0
 8005cba:	f000 fd0d 	bl	80066d8 <_localeconv_r>
 8005cbe:	6803      	ldr	r3, [r0, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	9308      	str	r3, [sp, #32]
 8005cc4:	f7fa fa44 	bl	8000150 <strlen>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd0:	9009      	str	r0, [sp, #36]	@ 0x24
 8005cd2:	3307      	adds	r3, #7
 8005cd4:	f023 0307 	bic.w	r3, r3, #7
 8005cd8:	f103 0208 	add.w	r2, r3, #8
 8005cdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ce0:	f8d4 b000 	ldr.w	fp, [r4]
 8005ce4:	f8c8 2000 	str.w	r2, [r8]
 8005ce8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cf2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005cfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d02:	4b9c      	ldr	r3, [pc, #624]	@ (8005f74 <_printf_float+0x2cc>)
 8005d04:	f7fa fe82 	bl	8000a0c <__aeabi_dcmpun>
 8005d08:	bb70      	cbnz	r0, 8005d68 <_printf_float+0xc0>
 8005d0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d12:	4b98      	ldr	r3, [pc, #608]	@ (8005f74 <_printf_float+0x2cc>)
 8005d14:	f7fa fe5c 	bl	80009d0 <__aeabi_dcmple>
 8005d18:	bb30      	cbnz	r0, 8005d68 <_printf_float+0xc0>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4640      	mov	r0, r8
 8005d20:	4649      	mov	r1, r9
 8005d22:	f7fa fe4b 	bl	80009bc <__aeabi_dcmplt>
 8005d26:	b110      	cbz	r0, 8005d2e <_printf_float+0x86>
 8005d28:	232d      	movs	r3, #45	@ 0x2d
 8005d2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d2e:	4a92      	ldr	r2, [pc, #584]	@ (8005f78 <_printf_float+0x2d0>)
 8005d30:	4b92      	ldr	r3, [pc, #584]	@ (8005f7c <_printf_float+0x2d4>)
 8005d32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d36:	bf94      	ite	ls
 8005d38:	4690      	movls	r8, r2
 8005d3a:	4698      	movhi	r8, r3
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	f04f 0900 	mov.w	r9, #0
 8005d42:	6123      	str	r3, [r4, #16]
 8005d44:	f02b 0304 	bic.w	r3, fp, #4
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	4633      	mov	r3, r6
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	9700      	str	r7, [sp, #0]
 8005d52:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005d54:	f000 f9d4 	bl	8006100 <_printf_common>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f040 8090 	bne.w	8005e7e <_printf_float+0x1d6>
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d62:	b011      	add	sp, #68	@ 0x44
 8005d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d68:	4642      	mov	r2, r8
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	4649      	mov	r1, r9
 8005d70:	f7fa fe4c 	bl	8000a0c <__aeabi_dcmpun>
 8005d74:	b148      	cbz	r0, 8005d8a <_printf_float+0xe2>
 8005d76:	464b      	mov	r3, r9
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bfb8      	it	lt
 8005d7c:	232d      	movlt	r3, #45	@ 0x2d
 8005d7e:	4a80      	ldr	r2, [pc, #512]	@ (8005f80 <_printf_float+0x2d8>)
 8005d80:	bfb8      	it	lt
 8005d82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d86:	4b7f      	ldr	r3, [pc, #508]	@ (8005f84 <_printf_float+0x2dc>)
 8005d88:	e7d3      	b.n	8005d32 <_printf_float+0x8a>
 8005d8a:	6863      	ldr	r3, [r4, #4]
 8005d8c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	d13f      	bne.n	8005e14 <_printf_float+0x16c>
 8005d94:	2306      	movs	r3, #6
 8005d96:	6063      	str	r3, [r4, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	9206      	str	r2, [sp, #24]
 8005da2:	aa0e      	add	r2, sp, #56	@ 0x38
 8005da4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005da8:	aa0d      	add	r2, sp, #52	@ 0x34
 8005daa:	9203      	str	r2, [sp, #12]
 8005dac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005db0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005db4:	6863      	ldr	r3, [r4, #4]
 8005db6:	4642      	mov	r2, r8
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	4628      	mov	r0, r5
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	910a      	str	r1, [sp, #40]	@ 0x28
 8005dc0:	f7ff fed3 	bl	8005b6a <__cvt>
 8005dc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	2947      	cmp	r1, #71	@ 0x47
 8005dca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005dcc:	d128      	bne.n	8005e20 <_printf_float+0x178>
 8005dce:	1cc8      	adds	r0, r1, #3
 8005dd0:	db02      	blt.n	8005dd8 <_printf_float+0x130>
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	4299      	cmp	r1, r3
 8005dd6:	dd40      	ble.n	8005e5a <_printf_float+0x1b2>
 8005dd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ddc:	fa5f fa8a 	uxtb.w	sl, sl
 8005de0:	4652      	mov	r2, sl
 8005de2:	3901      	subs	r1, #1
 8005de4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005de8:	910d      	str	r1, [sp, #52]	@ 0x34
 8005dea:	f7ff ff22 	bl	8005c32 <__exponent>
 8005dee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005df0:	4681      	mov	r9, r0
 8005df2:	1813      	adds	r3, r2, r0
 8005df4:	2a01      	cmp	r2, #1
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	dc02      	bgt.n	8005e00 <_printf_float+0x158>
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	07d2      	lsls	r2, r2, #31
 8005dfe:	d501      	bpl.n	8005e04 <_printf_float+0x15c>
 8005e00:	3301      	adds	r3, #1
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d09e      	beq.n	8005d4a <_printf_float+0xa2>
 8005e0c:	232d      	movs	r3, #45	@ 0x2d
 8005e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e12:	e79a      	b.n	8005d4a <_printf_float+0xa2>
 8005e14:	2947      	cmp	r1, #71	@ 0x47
 8005e16:	d1bf      	bne.n	8005d98 <_printf_float+0xf0>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1bd      	bne.n	8005d98 <_printf_float+0xf0>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e7ba      	b.n	8005d96 <_printf_float+0xee>
 8005e20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e24:	d9dc      	bls.n	8005de0 <_printf_float+0x138>
 8005e26:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e2a:	d118      	bne.n	8005e5e <_printf_float+0x1b6>
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	6863      	ldr	r3, [r4, #4]
 8005e30:	dd0b      	ble.n	8005e4a <_printf_float+0x1a2>
 8005e32:	6121      	str	r1, [r4, #16]
 8005e34:	b913      	cbnz	r3, 8005e3c <_printf_float+0x194>
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	07d0      	lsls	r0, r2, #31
 8005e3a:	d502      	bpl.n	8005e42 <_printf_float+0x19a>
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	440b      	add	r3, r1
 8005e40:	6123      	str	r3, [r4, #16]
 8005e42:	f04f 0900 	mov.w	r9, #0
 8005e46:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e48:	e7dc      	b.n	8005e04 <_printf_float+0x15c>
 8005e4a:	b913      	cbnz	r3, 8005e52 <_printf_float+0x1aa>
 8005e4c:	6822      	ldr	r2, [r4, #0]
 8005e4e:	07d2      	lsls	r2, r2, #31
 8005e50:	d501      	bpl.n	8005e56 <_printf_float+0x1ae>
 8005e52:	3302      	adds	r3, #2
 8005e54:	e7f4      	b.n	8005e40 <_printf_float+0x198>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e7f2      	b.n	8005e40 <_printf_float+0x198>
 8005e5a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e60:	4299      	cmp	r1, r3
 8005e62:	db05      	blt.n	8005e70 <_printf_float+0x1c8>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	6121      	str	r1, [r4, #16]
 8005e68:	07d8      	lsls	r0, r3, #31
 8005e6a:	d5ea      	bpl.n	8005e42 <_printf_float+0x19a>
 8005e6c:	1c4b      	adds	r3, r1, #1
 8005e6e:	e7e7      	b.n	8005e40 <_printf_float+0x198>
 8005e70:	2900      	cmp	r1, #0
 8005e72:	bfcc      	ite	gt
 8005e74:	2201      	movgt	r2, #1
 8005e76:	f1c1 0202 	rsble	r2, r1, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	e7e0      	b.n	8005e40 <_printf_float+0x198>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	055a      	lsls	r2, r3, #21
 8005e82:	d407      	bmi.n	8005e94 <_printf_float+0x1ec>
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	4642      	mov	r2, r8
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d12b      	bne.n	8005eea <_printf_float+0x242>
 8005e92:	e764      	b.n	8005d5e <_printf_float+0xb6>
 8005e94:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e98:	f240 80dc 	bls.w	8006054 <_printf_float+0x3ac>
 8005e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f7fa fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d033      	beq.n	8005f14 <_printf_float+0x26c>
 8005eac:	2301      	movs	r3, #1
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	4a35      	ldr	r2, [pc, #212]	@ (8005f88 <_printf_float+0x2e0>)
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f af51 	beq.w	8005d5e <_printf_float+0xb6>
 8005ebc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005ec0:	4543      	cmp	r3, r8
 8005ec2:	db02      	blt.n	8005eca <_printf_float+0x222>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	07d8      	lsls	r0, r3, #31
 8005ec8:	d50f      	bpl.n	8005eea <_printf_float+0x242>
 8005eca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ece:	4631      	mov	r1, r6
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	47b8      	blx	r7
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f43f af42 	beq.w	8005d5e <_printf_float+0xb6>
 8005eda:	f04f 0900 	mov.w	r9, #0
 8005ede:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ee2:	f104 0a1a 	add.w	sl, r4, #26
 8005ee6:	45c8      	cmp	r8, r9
 8005ee8:	dc09      	bgt.n	8005efe <_printf_float+0x256>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	079b      	lsls	r3, r3, #30
 8005eee:	f100 8102 	bmi.w	80060f6 <_printf_float+0x44e>
 8005ef2:	68e0      	ldr	r0, [r4, #12]
 8005ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ef6:	4298      	cmp	r0, r3
 8005ef8:	bfb8      	it	lt
 8005efa:	4618      	movlt	r0, r3
 8005efc:	e731      	b.n	8005d62 <_printf_float+0xba>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4652      	mov	r2, sl
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	f43f af28 	beq.w	8005d5e <_printf_float+0xb6>
 8005f0e:	f109 0901 	add.w	r9, r9, #1
 8005f12:	e7e8      	b.n	8005ee6 <_printf_float+0x23e>
 8005f14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dc38      	bgt.n	8005f8c <_printf_float+0x2e4>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4628      	mov	r0, r5
 8005f20:	4a19      	ldr	r2, [pc, #100]	@ (8005f88 <_printf_float+0x2e0>)
 8005f22:	47b8      	blx	r7
 8005f24:	3001      	adds	r0, #1
 8005f26:	f43f af1a 	beq.w	8005d5e <_printf_float+0xb6>
 8005f2a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005f2e:	ea59 0303 	orrs.w	r3, r9, r3
 8005f32:	d102      	bne.n	8005f3a <_printf_float+0x292>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	07d9      	lsls	r1, r3, #31
 8005f38:	d5d7      	bpl.n	8005eea <_printf_float+0x242>
 8005f3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	f43f af0a 	beq.w	8005d5e <_printf_float+0xb6>
 8005f4a:	f04f 0a00 	mov.w	sl, #0
 8005f4e:	f104 0b1a 	add.w	fp, r4, #26
 8005f52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f54:	425b      	negs	r3, r3
 8005f56:	4553      	cmp	r3, sl
 8005f58:	dc01      	bgt.n	8005f5e <_printf_float+0x2b6>
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	e793      	b.n	8005e86 <_printf_float+0x1de>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	465a      	mov	r2, fp
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	f43f aef8 	beq.w	8005d5e <_printf_float+0xb6>
 8005f6e:	f10a 0a01 	add.w	sl, sl, #1
 8005f72:	e7ee      	b.n	8005f52 <_printf_float+0x2aa>
 8005f74:	7fefffff 	.word	0x7fefffff
 8005f78:	080091d2 	.word	0x080091d2
 8005f7c:	080091d6 	.word	0x080091d6
 8005f80:	080091da 	.word	0x080091da
 8005f84:	080091de 	.word	0x080091de
 8005f88:	0800940f 	.word	0x0800940f
 8005f8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f8e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f92:	4553      	cmp	r3, sl
 8005f94:	bfa8      	it	ge
 8005f96:	4653      	movge	r3, sl
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	4699      	mov	r9, r3
 8005f9c:	dc36      	bgt.n	800600c <_printf_float+0x364>
 8005f9e:	f04f 0b00 	mov.w	fp, #0
 8005fa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fa6:	f104 021a 	add.w	r2, r4, #26
 8005faa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fac:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fae:	eba3 0309 	sub.w	r3, r3, r9
 8005fb2:	455b      	cmp	r3, fp
 8005fb4:	dc31      	bgt.n	800601a <_printf_float+0x372>
 8005fb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fb8:	459a      	cmp	sl, r3
 8005fba:	dc3a      	bgt.n	8006032 <_printf_float+0x38a>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	07da      	lsls	r2, r3, #31
 8005fc0:	d437      	bmi.n	8006032 <_printf_float+0x38a>
 8005fc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fc4:	ebaa 0903 	sub.w	r9, sl, r3
 8005fc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fca:	ebaa 0303 	sub.w	r3, sl, r3
 8005fce:	4599      	cmp	r9, r3
 8005fd0:	bfa8      	it	ge
 8005fd2:	4699      	movge	r9, r3
 8005fd4:	f1b9 0f00 	cmp.w	r9, #0
 8005fd8:	dc33      	bgt.n	8006042 <_printf_float+0x39a>
 8005fda:	f04f 0800 	mov.w	r8, #0
 8005fde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fe2:	f104 0b1a 	add.w	fp, r4, #26
 8005fe6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fe8:	ebaa 0303 	sub.w	r3, sl, r3
 8005fec:	eba3 0309 	sub.w	r3, r3, r9
 8005ff0:	4543      	cmp	r3, r8
 8005ff2:	f77f af7a 	ble.w	8005eea <_printf_float+0x242>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	465a      	mov	r2, fp
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	f43f aeac 	beq.w	8005d5e <_printf_float+0xb6>
 8006006:	f108 0801 	add.w	r8, r8, #1
 800600a:	e7ec      	b.n	8005fe6 <_printf_float+0x33e>
 800600c:	4642      	mov	r2, r8
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	d1c2      	bne.n	8005f9e <_printf_float+0x2f6>
 8006018:	e6a1      	b.n	8005d5e <_printf_float+0xb6>
 800601a:	2301      	movs	r3, #1
 800601c:	4631      	mov	r1, r6
 800601e:	4628      	mov	r0, r5
 8006020:	920a      	str	r2, [sp, #40]	@ 0x28
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	f43f ae9a 	beq.w	8005d5e <_printf_float+0xb6>
 800602a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800602c:	f10b 0b01 	add.w	fp, fp, #1
 8006030:	e7bb      	b.n	8005faa <_printf_float+0x302>
 8006032:	4631      	mov	r1, r6
 8006034:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	d1c0      	bne.n	8005fc2 <_printf_float+0x31a>
 8006040:	e68d      	b.n	8005d5e <_printf_float+0xb6>
 8006042:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006044:	464b      	mov	r3, r9
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	4442      	add	r2, r8
 800604c:	47b8      	blx	r7
 800604e:	3001      	adds	r0, #1
 8006050:	d1c3      	bne.n	8005fda <_printf_float+0x332>
 8006052:	e684      	b.n	8005d5e <_printf_float+0xb6>
 8006054:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006058:	f1ba 0f01 	cmp.w	sl, #1
 800605c:	dc01      	bgt.n	8006062 <_printf_float+0x3ba>
 800605e:	07db      	lsls	r3, r3, #31
 8006060:	d536      	bpl.n	80060d0 <_printf_float+0x428>
 8006062:	2301      	movs	r3, #1
 8006064:	4642      	mov	r2, r8
 8006066:	4631      	mov	r1, r6
 8006068:	4628      	mov	r0, r5
 800606a:	47b8      	blx	r7
 800606c:	3001      	adds	r0, #1
 800606e:	f43f ae76 	beq.w	8005d5e <_printf_float+0xb6>
 8006072:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006076:	4631      	mov	r1, r6
 8006078:	4628      	mov	r0, r5
 800607a:	47b8      	blx	r7
 800607c:	3001      	adds	r0, #1
 800607e:	f43f ae6e 	beq.w	8005d5e <_printf_float+0xb6>
 8006082:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006086:	2200      	movs	r2, #0
 8006088:	2300      	movs	r3, #0
 800608a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800608e:	f7fa fc8b 	bl	80009a8 <__aeabi_dcmpeq>
 8006092:	b9c0      	cbnz	r0, 80060c6 <_printf_float+0x41e>
 8006094:	4653      	mov	r3, sl
 8006096:	f108 0201 	add.w	r2, r8, #1
 800609a:	4631      	mov	r1, r6
 800609c:	4628      	mov	r0, r5
 800609e:	47b8      	blx	r7
 80060a0:	3001      	adds	r0, #1
 80060a2:	d10c      	bne.n	80060be <_printf_float+0x416>
 80060a4:	e65b      	b.n	8005d5e <_printf_float+0xb6>
 80060a6:	2301      	movs	r3, #1
 80060a8:	465a      	mov	r2, fp
 80060aa:	4631      	mov	r1, r6
 80060ac:	4628      	mov	r0, r5
 80060ae:	47b8      	blx	r7
 80060b0:	3001      	adds	r0, #1
 80060b2:	f43f ae54 	beq.w	8005d5e <_printf_float+0xb6>
 80060b6:	f108 0801 	add.w	r8, r8, #1
 80060ba:	45d0      	cmp	r8, sl
 80060bc:	dbf3      	blt.n	80060a6 <_printf_float+0x3fe>
 80060be:	464b      	mov	r3, r9
 80060c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060c4:	e6e0      	b.n	8005e88 <_printf_float+0x1e0>
 80060c6:	f04f 0800 	mov.w	r8, #0
 80060ca:	f104 0b1a 	add.w	fp, r4, #26
 80060ce:	e7f4      	b.n	80060ba <_printf_float+0x412>
 80060d0:	2301      	movs	r3, #1
 80060d2:	4642      	mov	r2, r8
 80060d4:	e7e1      	b.n	800609a <_printf_float+0x3f2>
 80060d6:	2301      	movs	r3, #1
 80060d8:	464a      	mov	r2, r9
 80060da:	4631      	mov	r1, r6
 80060dc:	4628      	mov	r0, r5
 80060de:	47b8      	blx	r7
 80060e0:	3001      	adds	r0, #1
 80060e2:	f43f ae3c 	beq.w	8005d5e <_printf_float+0xb6>
 80060e6:	f108 0801 	add.w	r8, r8, #1
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80060ee:	1a5b      	subs	r3, r3, r1
 80060f0:	4543      	cmp	r3, r8
 80060f2:	dcf0      	bgt.n	80060d6 <_printf_float+0x42e>
 80060f4:	e6fd      	b.n	8005ef2 <_printf_float+0x24a>
 80060f6:	f04f 0800 	mov.w	r8, #0
 80060fa:	f104 0919 	add.w	r9, r4, #25
 80060fe:	e7f4      	b.n	80060ea <_printf_float+0x442>

08006100 <_printf_common>:
 8006100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	4616      	mov	r6, r2
 8006106:	4698      	mov	r8, r3
 8006108:	688a      	ldr	r2, [r1, #8]
 800610a:	690b      	ldr	r3, [r1, #16]
 800610c:	4607      	mov	r7, r0
 800610e:	4293      	cmp	r3, r2
 8006110:	bfb8      	it	lt
 8006112:	4613      	movlt	r3, r2
 8006114:	6033      	str	r3, [r6, #0]
 8006116:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800611a:	460c      	mov	r4, r1
 800611c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006120:	b10a      	cbz	r2, 8006126 <_printf_common+0x26>
 8006122:	3301      	adds	r3, #1
 8006124:	6033      	str	r3, [r6, #0]
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	0699      	lsls	r1, r3, #26
 800612a:	bf42      	ittt	mi
 800612c:	6833      	ldrmi	r3, [r6, #0]
 800612e:	3302      	addmi	r3, #2
 8006130:	6033      	strmi	r3, [r6, #0]
 8006132:	6825      	ldr	r5, [r4, #0]
 8006134:	f015 0506 	ands.w	r5, r5, #6
 8006138:	d106      	bne.n	8006148 <_printf_common+0x48>
 800613a:	f104 0a19 	add.w	sl, r4, #25
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	6832      	ldr	r2, [r6, #0]
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	42ab      	cmp	r3, r5
 8006146:	dc2b      	bgt.n	80061a0 <_printf_common+0xa0>
 8006148:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800614c:	6822      	ldr	r2, [r4, #0]
 800614e:	3b00      	subs	r3, #0
 8006150:	bf18      	it	ne
 8006152:	2301      	movne	r3, #1
 8006154:	0692      	lsls	r2, r2, #26
 8006156:	d430      	bmi.n	80061ba <_printf_common+0xba>
 8006158:	4641      	mov	r1, r8
 800615a:	4638      	mov	r0, r7
 800615c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006160:	47c8      	blx	r9
 8006162:	3001      	adds	r0, #1
 8006164:	d023      	beq.n	80061ae <_printf_common+0xae>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	6922      	ldr	r2, [r4, #16]
 800616a:	f003 0306 	and.w	r3, r3, #6
 800616e:	2b04      	cmp	r3, #4
 8006170:	bf14      	ite	ne
 8006172:	2500      	movne	r5, #0
 8006174:	6833      	ldreq	r3, [r6, #0]
 8006176:	f04f 0600 	mov.w	r6, #0
 800617a:	bf08      	it	eq
 800617c:	68e5      	ldreq	r5, [r4, #12]
 800617e:	f104 041a 	add.w	r4, r4, #26
 8006182:	bf08      	it	eq
 8006184:	1aed      	subeq	r5, r5, r3
 8006186:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800618a:	bf08      	it	eq
 800618c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006190:	4293      	cmp	r3, r2
 8006192:	bfc4      	itt	gt
 8006194:	1a9b      	subgt	r3, r3, r2
 8006196:	18ed      	addgt	r5, r5, r3
 8006198:	42b5      	cmp	r5, r6
 800619a:	d11a      	bne.n	80061d2 <_printf_common+0xd2>
 800619c:	2000      	movs	r0, #0
 800619e:	e008      	b.n	80061b2 <_printf_common+0xb2>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4652      	mov	r2, sl
 80061a4:	4641      	mov	r1, r8
 80061a6:	4638      	mov	r0, r7
 80061a8:	47c8      	blx	r9
 80061aa:	3001      	adds	r0, #1
 80061ac:	d103      	bne.n	80061b6 <_printf_common+0xb6>
 80061ae:	f04f 30ff 	mov.w	r0, #4294967295
 80061b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b6:	3501      	adds	r5, #1
 80061b8:	e7c1      	b.n	800613e <_printf_common+0x3e>
 80061ba:	2030      	movs	r0, #48	@ 0x30
 80061bc:	18e1      	adds	r1, r4, r3
 80061be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061c8:	4422      	add	r2, r4
 80061ca:	3302      	adds	r3, #2
 80061cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061d0:	e7c2      	b.n	8006158 <_printf_common+0x58>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4622      	mov	r2, r4
 80061d6:	4641      	mov	r1, r8
 80061d8:	4638      	mov	r0, r7
 80061da:	47c8      	blx	r9
 80061dc:	3001      	adds	r0, #1
 80061de:	d0e6      	beq.n	80061ae <_printf_common+0xae>
 80061e0:	3601      	adds	r6, #1
 80061e2:	e7d9      	b.n	8006198 <_printf_common+0x98>

080061e4 <_printf_i>:
 80061e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e8:	7e0f      	ldrb	r7, [r1, #24]
 80061ea:	4691      	mov	r9, r2
 80061ec:	2f78      	cmp	r7, #120	@ 0x78
 80061ee:	4680      	mov	r8, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	469a      	mov	sl, r3
 80061f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061fa:	d807      	bhi.n	800620c <_printf_i+0x28>
 80061fc:	2f62      	cmp	r7, #98	@ 0x62
 80061fe:	d80a      	bhi.n	8006216 <_printf_i+0x32>
 8006200:	2f00      	cmp	r7, #0
 8006202:	f000 80d3 	beq.w	80063ac <_printf_i+0x1c8>
 8006206:	2f58      	cmp	r7, #88	@ 0x58
 8006208:	f000 80ba 	beq.w	8006380 <_printf_i+0x19c>
 800620c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006214:	e03a      	b.n	800628c <_printf_i+0xa8>
 8006216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800621a:	2b15      	cmp	r3, #21
 800621c:	d8f6      	bhi.n	800620c <_printf_i+0x28>
 800621e:	a101      	add	r1, pc, #4	@ (adr r1, 8006224 <_printf_i+0x40>)
 8006220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006224:	0800627d 	.word	0x0800627d
 8006228:	08006291 	.word	0x08006291
 800622c:	0800620d 	.word	0x0800620d
 8006230:	0800620d 	.word	0x0800620d
 8006234:	0800620d 	.word	0x0800620d
 8006238:	0800620d 	.word	0x0800620d
 800623c:	08006291 	.word	0x08006291
 8006240:	0800620d 	.word	0x0800620d
 8006244:	0800620d 	.word	0x0800620d
 8006248:	0800620d 	.word	0x0800620d
 800624c:	0800620d 	.word	0x0800620d
 8006250:	08006393 	.word	0x08006393
 8006254:	080062bb 	.word	0x080062bb
 8006258:	0800634d 	.word	0x0800634d
 800625c:	0800620d 	.word	0x0800620d
 8006260:	0800620d 	.word	0x0800620d
 8006264:	080063b5 	.word	0x080063b5
 8006268:	0800620d 	.word	0x0800620d
 800626c:	080062bb 	.word	0x080062bb
 8006270:	0800620d 	.word	0x0800620d
 8006274:	0800620d 	.word	0x0800620d
 8006278:	08006355 	.word	0x08006355
 800627c:	6833      	ldr	r3, [r6, #0]
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6032      	str	r2, [r6, #0]
 8006284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800628c:	2301      	movs	r3, #1
 800628e:	e09e      	b.n	80063ce <_printf_i+0x1ea>
 8006290:	6833      	ldr	r3, [r6, #0]
 8006292:	6820      	ldr	r0, [r4, #0]
 8006294:	1d19      	adds	r1, r3, #4
 8006296:	6031      	str	r1, [r6, #0]
 8006298:	0606      	lsls	r6, r0, #24
 800629a:	d501      	bpl.n	80062a0 <_printf_i+0xbc>
 800629c:	681d      	ldr	r5, [r3, #0]
 800629e:	e003      	b.n	80062a8 <_printf_i+0xc4>
 80062a0:	0645      	lsls	r5, r0, #25
 80062a2:	d5fb      	bpl.n	800629c <_printf_i+0xb8>
 80062a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	da03      	bge.n	80062b4 <_printf_i+0xd0>
 80062ac:	232d      	movs	r3, #45	@ 0x2d
 80062ae:	426d      	negs	r5, r5
 80062b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062b4:	230a      	movs	r3, #10
 80062b6:	4859      	ldr	r0, [pc, #356]	@ (800641c <_printf_i+0x238>)
 80062b8:	e011      	b.n	80062de <_printf_i+0xfa>
 80062ba:	6821      	ldr	r1, [r4, #0]
 80062bc:	6833      	ldr	r3, [r6, #0]
 80062be:	0608      	lsls	r0, r1, #24
 80062c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80062c4:	d402      	bmi.n	80062cc <_printf_i+0xe8>
 80062c6:	0649      	lsls	r1, r1, #25
 80062c8:	bf48      	it	mi
 80062ca:	b2ad      	uxthmi	r5, r5
 80062cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80062ce:	6033      	str	r3, [r6, #0]
 80062d0:	bf14      	ite	ne
 80062d2:	230a      	movne	r3, #10
 80062d4:	2308      	moveq	r3, #8
 80062d6:	4851      	ldr	r0, [pc, #324]	@ (800641c <_printf_i+0x238>)
 80062d8:	2100      	movs	r1, #0
 80062da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062de:	6866      	ldr	r6, [r4, #4]
 80062e0:	2e00      	cmp	r6, #0
 80062e2:	bfa8      	it	ge
 80062e4:	6821      	ldrge	r1, [r4, #0]
 80062e6:	60a6      	str	r6, [r4, #8]
 80062e8:	bfa4      	itt	ge
 80062ea:	f021 0104 	bicge.w	r1, r1, #4
 80062ee:	6021      	strge	r1, [r4, #0]
 80062f0:	b90d      	cbnz	r5, 80062f6 <_printf_i+0x112>
 80062f2:	2e00      	cmp	r6, #0
 80062f4:	d04b      	beq.n	800638e <_printf_i+0x1aa>
 80062f6:	4616      	mov	r6, r2
 80062f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80062fc:	fb03 5711 	mls	r7, r3, r1, r5
 8006300:	5dc7      	ldrb	r7, [r0, r7]
 8006302:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006306:	462f      	mov	r7, r5
 8006308:	42bb      	cmp	r3, r7
 800630a:	460d      	mov	r5, r1
 800630c:	d9f4      	bls.n	80062f8 <_printf_i+0x114>
 800630e:	2b08      	cmp	r3, #8
 8006310:	d10b      	bne.n	800632a <_printf_i+0x146>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	07df      	lsls	r7, r3, #31
 8006316:	d508      	bpl.n	800632a <_printf_i+0x146>
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	6861      	ldr	r1, [r4, #4]
 800631c:	4299      	cmp	r1, r3
 800631e:	bfde      	ittt	le
 8006320:	2330      	movle	r3, #48	@ 0x30
 8006322:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006326:	f106 36ff 	addle.w	r6, r6, #4294967295
 800632a:	1b92      	subs	r2, r2, r6
 800632c:	6122      	str	r2, [r4, #16]
 800632e:	464b      	mov	r3, r9
 8006330:	4621      	mov	r1, r4
 8006332:	4640      	mov	r0, r8
 8006334:	f8cd a000 	str.w	sl, [sp]
 8006338:	aa03      	add	r2, sp, #12
 800633a:	f7ff fee1 	bl	8006100 <_printf_common>
 800633e:	3001      	adds	r0, #1
 8006340:	d14a      	bne.n	80063d8 <_printf_i+0x1f4>
 8006342:	f04f 30ff 	mov.w	r0, #4294967295
 8006346:	b004      	add	sp, #16
 8006348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	f043 0320 	orr.w	r3, r3, #32
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	2778      	movs	r7, #120	@ 0x78
 8006356:	4832      	ldr	r0, [pc, #200]	@ (8006420 <_printf_i+0x23c>)
 8006358:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	6831      	ldr	r1, [r6, #0]
 8006360:	061f      	lsls	r7, r3, #24
 8006362:	f851 5b04 	ldr.w	r5, [r1], #4
 8006366:	d402      	bmi.n	800636e <_printf_i+0x18a>
 8006368:	065f      	lsls	r7, r3, #25
 800636a:	bf48      	it	mi
 800636c:	b2ad      	uxthmi	r5, r5
 800636e:	6031      	str	r1, [r6, #0]
 8006370:	07d9      	lsls	r1, r3, #31
 8006372:	bf44      	itt	mi
 8006374:	f043 0320 	orrmi.w	r3, r3, #32
 8006378:	6023      	strmi	r3, [r4, #0]
 800637a:	b11d      	cbz	r5, 8006384 <_printf_i+0x1a0>
 800637c:	2310      	movs	r3, #16
 800637e:	e7ab      	b.n	80062d8 <_printf_i+0xf4>
 8006380:	4826      	ldr	r0, [pc, #152]	@ (800641c <_printf_i+0x238>)
 8006382:	e7e9      	b.n	8006358 <_printf_i+0x174>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	f023 0320 	bic.w	r3, r3, #32
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	e7f6      	b.n	800637c <_printf_i+0x198>
 800638e:	4616      	mov	r6, r2
 8006390:	e7bd      	b.n	800630e <_printf_i+0x12a>
 8006392:	6833      	ldr	r3, [r6, #0]
 8006394:	6825      	ldr	r5, [r4, #0]
 8006396:	1d18      	adds	r0, r3, #4
 8006398:	6961      	ldr	r1, [r4, #20]
 800639a:	6030      	str	r0, [r6, #0]
 800639c:	062e      	lsls	r6, r5, #24
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	d501      	bpl.n	80063a6 <_printf_i+0x1c2>
 80063a2:	6019      	str	r1, [r3, #0]
 80063a4:	e002      	b.n	80063ac <_printf_i+0x1c8>
 80063a6:	0668      	lsls	r0, r5, #25
 80063a8:	d5fb      	bpl.n	80063a2 <_printf_i+0x1be>
 80063aa:	8019      	strh	r1, [r3, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	4616      	mov	r6, r2
 80063b0:	6123      	str	r3, [r4, #16]
 80063b2:	e7bc      	b.n	800632e <_printf_i+0x14a>
 80063b4:	6833      	ldr	r3, [r6, #0]
 80063b6:	2100      	movs	r1, #0
 80063b8:	1d1a      	adds	r2, r3, #4
 80063ba:	6032      	str	r2, [r6, #0]
 80063bc:	681e      	ldr	r6, [r3, #0]
 80063be:	6862      	ldr	r2, [r4, #4]
 80063c0:	4630      	mov	r0, r6
 80063c2:	f000 fa00 	bl	80067c6 <memchr>
 80063c6:	b108      	cbz	r0, 80063cc <_printf_i+0x1e8>
 80063c8:	1b80      	subs	r0, r0, r6
 80063ca:	6060      	str	r0, [r4, #4]
 80063cc:	6863      	ldr	r3, [r4, #4]
 80063ce:	6123      	str	r3, [r4, #16]
 80063d0:	2300      	movs	r3, #0
 80063d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063d6:	e7aa      	b.n	800632e <_printf_i+0x14a>
 80063d8:	4632      	mov	r2, r6
 80063da:	4649      	mov	r1, r9
 80063dc:	4640      	mov	r0, r8
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	47d0      	blx	sl
 80063e2:	3001      	adds	r0, #1
 80063e4:	d0ad      	beq.n	8006342 <_printf_i+0x15e>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	079b      	lsls	r3, r3, #30
 80063ea:	d413      	bmi.n	8006414 <_printf_i+0x230>
 80063ec:	68e0      	ldr	r0, [r4, #12]
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	4298      	cmp	r0, r3
 80063f2:	bfb8      	it	lt
 80063f4:	4618      	movlt	r0, r3
 80063f6:	e7a6      	b.n	8006346 <_printf_i+0x162>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4632      	mov	r2, r6
 80063fc:	4649      	mov	r1, r9
 80063fe:	4640      	mov	r0, r8
 8006400:	47d0      	blx	sl
 8006402:	3001      	adds	r0, #1
 8006404:	d09d      	beq.n	8006342 <_printf_i+0x15e>
 8006406:	3501      	adds	r5, #1
 8006408:	68e3      	ldr	r3, [r4, #12]
 800640a:	9903      	ldr	r1, [sp, #12]
 800640c:	1a5b      	subs	r3, r3, r1
 800640e:	42ab      	cmp	r3, r5
 8006410:	dcf2      	bgt.n	80063f8 <_printf_i+0x214>
 8006412:	e7eb      	b.n	80063ec <_printf_i+0x208>
 8006414:	2500      	movs	r5, #0
 8006416:	f104 0619 	add.w	r6, r4, #25
 800641a:	e7f5      	b.n	8006408 <_printf_i+0x224>
 800641c:	080091e2 	.word	0x080091e2
 8006420:	080091f3 	.word	0x080091f3

08006424 <std>:
 8006424:	2300      	movs	r3, #0
 8006426:	b510      	push	{r4, lr}
 8006428:	4604      	mov	r4, r0
 800642a:	e9c0 3300 	strd	r3, r3, [r0]
 800642e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006432:	6083      	str	r3, [r0, #8]
 8006434:	8181      	strh	r1, [r0, #12]
 8006436:	6643      	str	r3, [r0, #100]	@ 0x64
 8006438:	81c2      	strh	r2, [r0, #14]
 800643a:	6183      	str	r3, [r0, #24]
 800643c:	4619      	mov	r1, r3
 800643e:	2208      	movs	r2, #8
 8006440:	305c      	adds	r0, #92	@ 0x5c
 8006442:	f000 f940 	bl	80066c6 <memset>
 8006446:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <std+0x58>)
 8006448:	6224      	str	r4, [r4, #32]
 800644a:	6263      	str	r3, [r4, #36]	@ 0x24
 800644c:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <std+0x5c>)
 800644e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006450:	4b0c      	ldr	r3, [pc, #48]	@ (8006484 <std+0x60>)
 8006452:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006454:	4b0c      	ldr	r3, [pc, #48]	@ (8006488 <std+0x64>)
 8006456:	6323      	str	r3, [r4, #48]	@ 0x30
 8006458:	4b0c      	ldr	r3, [pc, #48]	@ (800648c <std+0x68>)
 800645a:	429c      	cmp	r4, r3
 800645c:	d006      	beq.n	800646c <std+0x48>
 800645e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006462:	4294      	cmp	r4, r2
 8006464:	d002      	beq.n	800646c <std+0x48>
 8006466:	33d0      	adds	r3, #208	@ 0xd0
 8006468:	429c      	cmp	r4, r3
 800646a:	d105      	bne.n	8006478 <std+0x54>
 800646c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006474:	f000 b9a4 	b.w	80067c0 <__retarget_lock_init_recursive>
 8006478:	bd10      	pop	{r4, pc}
 800647a:	bf00      	nop
 800647c:	0800663d 	.word	0x0800663d
 8006480:	08006663 	.word	0x08006663
 8006484:	0800669b 	.word	0x0800669b
 8006488:	080066bf 	.word	0x080066bf
 800648c:	20000834 	.word	0x20000834

08006490 <stdio_exit_handler>:
 8006490:	4a02      	ldr	r2, [pc, #8]	@ (800649c <stdio_exit_handler+0xc>)
 8006492:	4903      	ldr	r1, [pc, #12]	@ (80064a0 <stdio_exit_handler+0x10>)
 8006494:	4803      	ldr	r0, [pc, #12]	@ (80064a4 <stdio_exit_handler+0x14>)
 8006496:	f000 b869 	b.w	800656c <_fwalk_sglue>
 800649a:	bf00      	nop
 800649c:	20000014 	.word	0x20000014
 80064a0:	08008779 	.word	0x08008779
 80064a4:	20000024 	.word	0x20000024

080064a8 <cleanup_stdio>:
 80064a8:	6841      	ldr	r1, [r0, #4]
 80064aa:	4b0c      	ldr	r3, [pc, #48]	@ (80064dc <cleanup_stdio+0x34>)
 80064ac:	b510      	push	{r4, lr}
 80064ae:	4299      	cmp	r1, r3
 80064b0:	4604      	mov	r4, r0
 80064b2:	d001      	beq.n	80064b8 <cleanup_stdio+0x10>
 80064b4:	f002 f960 	bl	8008778 <_fflush_r>
 80064b8:	68a1      	ldr	r1, [r4, #8]
 80064ba:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <cleanup_stdio+0x38>)
 80064bc:	4299      	cmp	r1, r3
 80064be:	d002      	beq.n	80064c6 <cleanup_stdio+0x1e>
 80064c0:	4620      	mov	r0, r4
 80064c2:	f002 f959 	bl	8008778 <_fflush_r>
 80064c6:	68e1      	ldr	r1, [r4, #12]
 80064c8:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <cleanup_stdio+0x3c>)
 80064ca:	4299      	cmp	r1, r3
 80064cc:	d004      	beq.n	80064d8 <cleanup_stdio+0x30>
 80064ce:	4620      	mov	r0, r4
 80064d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d4:	f002 b950 	b.w	8008778 <_fflush_r>
 80064d8:	bd10      	pop	{r4, pc}
 80064da:	bf00      	nop
 80064dc:	20000834 	.word	0x20000834
 80064e0:	2000089c 	.word	0x2000089c
 80064e4:	20000904 	.word	0x20000904

080064e8 <global_stdio_init.part.0>:
 80064e8:	b510      	push	{r4, lr}
 80064ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006518 <global_stdio_init.part.0+0x30>)
 80064ec:	4c0b      	ldr	r4, [pc, #44]	@ (800651c <global_stdio_init.part.0+0x34>)
 80064ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006520 <global_stdio_init.part.0+0x38>)
 80064f0:	4620      	mov	r0, r4
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	2104      	movs	r1, #4
 80064f6:	2200      	movs	r2, #0
 80064f8:	f7ff ff94 	bl	8006424 <std>
 80064fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006500:	2201      	movs	r2, #1
 8006502:	2109      	movs	r1, #9
 8006504:	f7ff ff8e 	bl	8006424 <std>
 8006508:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800650c:	2202      	movs	r2, #2
 800650e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006512:	2112      	movs	r1, #18
 8006514:	f7ff bf86 	b.w	8006424 <std>
 8006518:	2000096c 	.word	0x2000096c
 800651c:	20000834 	.word	0x20000834
 8006520:	08006491 	.word	0x08006491

08006524 <__sfp_lock_acquire>:
 8006524:	4801      	ldr	r0, [pc, #4]	@ (800652c <__sfp_lock_acquire+0x8>)
 8006526:	f000 b94c 	b.w	80067c2 <__retarget_lock_acquire_recursive>
 800652a:	bf00      	nop
 800652c:	20000975 	.word	0x20000975

08006530 <__sfp_lock_release>:
 8006530:	4801      	ldr	r0, [pc, #4]	@ (8006538 <__sfp_lock_release+0x8>)
 8006532:	f000 b947 	b.w	80067c4 <__retarget_lock_release_recursive>
 8006536:	bf00      	nop
 8006538:	20000975 	.word	0x20000975

0800653c <__sinit>:
 800653c:	b510      	push	{r4, lr}
 800653e:	4604      	mov	r4, r0
 8006540:	f7ff fff0 	bl	8006524 <__sfp_lock_acquire>
 8006544:	6a23      	ldr	r3, [r4, #32]
 8006546:	b11b      	cbz	r3, 8006550 <__sinit+0x14>
 8006548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800654c:	f7ff bff0 	b.w	8006530 <__sfp_lock_release>
 8006550:	4b04      	ldr	r3, [pc, #16]	@ (8006564 <__sinit+0x28>)
 8006552:	6223      	str	r3, [r4, #32]
 8006554:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <__sinit+0x2c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f5      	bne.n	8006548 <__sinit+0xc>
 800655c:	f7ff ffc4 	bl	80064e8 <global_stdio_init.part.0>
 8006560:	e7f2      	b.n	8006548 <__sinit+0xc>
 8006562:	bf00      	nop
 8006564:	080064a9 	.word	0x080064a9
 8006568:	2000096c 	.word	0x2000096c

0800656c <_fwalk_sglue>:
 800656c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006570:	4607      	mov	r7, r0
 8006572:	4688      	mov	r8, r1
 8006574:	4614      	mov	r4, r2
 8006576:	2600      	movs	r6, #0
 8006578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800657c:	f1b9 0901 	subs.w	r9, r9, #1
 8006580:	d505      	bpl.n	800658e <_fwalk_sglue+0x22>
 8006582:	6824      	ldr	r4, [r4, #0]
 8006584:	2c00      	cmp	r4, #0
 8006586:	d1f7      	bne.n	8006578 <_fwalk_sglue+0xc>
 8006588:	4630      	mov	r0, r6
 800658a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658e:	89ab      	ldrh	r3, [r5, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d907      	bls.n	80065a4 <_fwalk_sglue+0x38>
 8006594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006598:	3301      	adds	r3, #1
 800659a:	d003      	beq.n	80065a4 <_fwalk_sglue+0x38>
 800659c:	4629      	mov	r1, r5
 800659e:	4638      	mov	r0, r7
 80065a0:	47c0      	blx	r8
 80065a2:	4306      	orrs	r6, r0
 80065a4:	3568      	adds	r5, #104	@ 0x68
 80065a6:	e7e9      	b.n	800657c <_fwalk_sglue+0x10>

080065a8 <siprintf>:
 80065a8:	b40e      	push	{r1, r2, r3}
 80065aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065ae:	b500      	push	{lr}
 80065b0:	b09c      	sub	sp, #112	@ 0x70
 80065b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80065b4:	9002      	str	r0, [sp, #8]
 80065b6:	9006      	str	r0, [sp, #24]
 80065b8:	9107      	str	r1, [sp, #28]
 80065ba:	9104      	str	r1, [sp, #16]
 80065bc:	4808      	ldr	r0, [pc, #32]	@ (80065e0 <siprintf+0x38>)
 80065be:	4909      	ldr	r1, [pc, #36]	@ (80065e4 <siprintf+0x3c>)
 80065c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c4:	9105      	str	r1, [sp, #20]
 80065c6:	6800      	ldr	r0, [r0, #0]
 80065c8:	a902      	add	r1, sp, #8
 80065ca:	9301      	str	r3, [sp, #4]
 80065cc:	f001 fc42 	bl	8007e54 <_svfiprintf_r>
 80065d0:	2200      	movs	r2, #0
 80065d2:	9b02      	ldr	r3, [sp, #8]
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	b01c      	add	sp, #112	@ 0x70
 80065d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065dc:	b003      	add	sp, #12
 80065de:	4770      	bx	lr
 80065e0:	20000020 	.word	0x20000020
 80065e4:	ffff0208 	.word	0xffff0208

080065e8 <siscanf>:
 80065e8:	b40e      	push	{r1, r2, r3}
 80065ea:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80065ee:	b530      	push	{r4, r5, lr}
 80065f0:	b09c      	sub	sp, #112	@ 0x70
 80065f2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80065f4:	f854 5b04 	ldr.w	r5, [r4], #4
 80065f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80065fc:	9002      	str	r0, [sp, #8]
 80065fe:	9006      	str	r0, [sp, #24]
 8006600:	f7f9 fda6 	bl	8000150 <strlen>
 8006604:	4b0b      	ldr	r3, [pc, #44]	@ (8006634 <siscanf+0x4c>)
 8006606:	9003      	str	r0, [sp, #12]
 8006608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800660a:	2300      	movs	r3, #0
 800660c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800660e:	9314      	str	r3, [sp, #80]	@ 0x50
 8006610:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006614:	9007      	str	r0, [sp, #28]
 8006616:	4808      	ldr	r0, [pc, #32]	@ (8006638 <siscanf+0x50>)
 8006618:	f8ad 3016 	strh.w	r3, [sp, #22]
 800661c:	462a      	mov	r2, r5
 800661e:	4623      	mov	r3, r4
 8006620:	a902      	add	r1, sp, #8
 8006622:	6800      	ldr	r0, [r0, #0]
 8006624:	9401      	str	r4, [sp, #4]
 8006626:	f001 fd69 	bl	80080fc <__ssvfiscanf_r>
 800662a:	b01c      	add	sp, #112	@ 0x70
 800662c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006630:	b003      	add	sp, #12
 8006632:	4770      	bx	lr
 8006634:	0800665f 	.word	0x0800665f
 8006638:	20000020 	.word	0x20000020

0800663c <__sread>:
 800663c:	b510      	push	{r4, lr}
 800663e:	460c      	mov	r4, r1
 8006640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006644:	f000 f86e 	bl	8006724 <_read_r>
 8006648:	2800      	cmp	r0, #0
 800664a:	bfab      	itete	ge
 800664c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800664e:	89a3      	ldrhlt	r3, [r4, #12]
 8006650:	181b      	addge	r3, r3, r0
 8006652:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006656:	bfac      	ite	ge
 8006658:	6563      	strge	r3, [r4, #84]	@ 0x54
 800665a:	81a3      	strhlt	r3, [r4, #12]
 800665c:	bd10      	pop	{r4, pc}

0800665e <__seofread>:
 800665e:	2000      	movs	r0, #0
 8006660:	4770      	bx	lr

08006662 <__swrite>:
 8006662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006666:	461f      	mov	r7, r3
 8006668:	898b      	ldrh	r3, [r1, #12]
 800666a:	4605      	mov	r5, r0
 800666c:	05db      	lsls	r3, r3, #23
 800666e:	460c      	mov	r4, r1
 8006670:	4616      	mov	r6, r2
 8006672:	d505      	bpl.n	8006680 <__swrite+0x1e>
 8006674:	2302      	movs	r3, #2
 8006676:	2200      	movs	r2, #0
 8006678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667c:	f000 f840 	bl	8006700 <_lseek_r>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	4632      	mov	r2, r6
 8006684:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006688:	81a3      	strh	r3, [r4, #12]
 800668a:	4628      	mov	r0, r5
 800668c:	463b      	mov	r3, r7
 800668e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006696:	f000 b857 	b.w	8006748 <_write_r>

0800669a <__sseek>:
 800669a:	b510      	push	{r4, lr}
 800669c:	460c      	mov	r4, r1
 800669e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a2:	f000 f82d 	bl	8006700 <_lseek_r>
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	bf15      	itete	ne
 80066ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066b6:	81a3      	strheq	r3, [r4, #12]
 80066b8:	bf18      	it	ne
 80066ba:	81a3      	strhne	r3, [r4, #12]
 80066bc:	bd10      	pop	{r4, pc}

080066be <__sclose>:
 80066be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c2:	f000 b80d 	b.w	80066e0 <_close_r>

080066c6 <memset>:
 80066c6:	4603      	mov	r3, r0
 80066c8:	4402      	add	r2, r0
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d100      	bne.n	80066d0 <memset+0xa>
 80066ce:	4770      	bx	lr
 80066d0:	f803 1b01 	strb.w	r1, [r3], #1
 80066d4:	e7f9      	b.n	80066ca <memset+0x4>
	...

080066d8 <_localeconv_r>:
 80066d8:	4800      	ldr	r0, [pc, #0]	@ (80066dc <_localeconv_r+0x4>)
 80066da:	4770      	bx	lr
 80066dc:	20000160 	.word	0x20000160

080066e0 <_close_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	2300      	movs	r3, #0
 80066e4:	4d05      	ldr	r5, [pc, #20]	@ (80066fc <_close_r+0x1c>)
 80066e6:	4604      	mov	r4, r0
 80066e8:	4608      	mov	r0, r1
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	f7fc f8ee 	bl	80028cc <_close>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_close_r+0x1a>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_close_r+0x1a>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	20000970 	.word	0x20000970

08006700 <_lseek_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	4611      	mov	r1, r2
 8006708:	2200      	movs	r2, #0
 800670a:	4d05      	ldr	r5, [pc, #20]	@ (8006720 <_lseek_r+0x20>)
 800670c:	602a      	str	r2, [r5, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	f7fc f900 	bl	8002914 <_lseek>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d102      	bne.n	800671e <_lseek_r+0x1e>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	b103      	cbz	r3, 800671e <_lseek_r+0x1e>
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	20000970 	.word	0x20000970

08006724 <_read_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4604      	mov	r4, r0
 8006728:	4608      	mov	r0, r1
 800672a:	4611      	mov	r1, r2
 800672c:	2200      	movs	r2, #0
 800672e:	4d05      	ldr	r5, [pc, #20]	@ (8006744 <_read_r+0x20>)
 8006730:	602a      	str	r2, [r5, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f7fc f891 	bl	800285a <_read>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_read_r+0x1e>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	b103      	cbz	r3, 8006742 <_read_r+0x1e>
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	20000970 	.word	0x20000970

08006748 <_write_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4604      	mov	r4, r0
 800674c:	4608      	mov	r0, r1
 800674e:	4611      	mov	r1, r2
 8006750:	2200      	movs	r2, #0
 8006752:	4d05      	ldr	r5, [pc, #20]	@ (8006768 <_write_r+0x20>)
 8006754:	602a      	str	r2, [r5, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	f7fc f89c 	bl	8002894 <_write>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d102      	bne.n	8006766 <_write_r+0x1e>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	b103      	cbz	r3, 8006766 <_write_r+0x1e>
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	bd38      	pop	{r3, r4, r5, pc}
 8006768:	20000970 	.word	0x20000970

0800676c <__errno>:
 800676c:	4b01      	ldr	r3, [pc, #4]	@ (8006774 <__errno+0x8>)
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20000020 	.word	0x20000020

08006778 <__libc_init_array>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	2600      	movs	r6, #0
 800677c:	4d0c      	ldr	r5, [pc, #48]	@ (80067b0 <__libc_init_array+0x38>)
 800677e:	4c0d      	ldr	r4, [pc, #52]	@ (80067b4 <__libc_init_array+0x3c>)
 8006780:	1b64      	subs	r4, r4, r5
 8006782:	10a4      	asrs	r4, r4, #2
 8006784:	42a6      	cmp	r6, r4
 8006786:	d109      	bne.n	800679c <__libc_init_array+0x24>
 8006788:	f002 fce2 	bl	8009150 <_init>
 800678c:	2600      	movs	r6, #0
 800678e:	4d0a      	ldr	r5, [pc, #40]	@ (80067b8 <__libc_init_array+0x40>)
 8006790:	4c0a      	ldr	r4, [pc, #40]	@ (80067bc <__libc_init_array+0x44>)
 8006792:	1b64      	subs	r4, r4, r5
 8006794:	10a4      	asrs	r4, r4, #2
 8006796:	42a6      	cmp	r6, r4
 8006798:	d105      	bne.n	80067a6 <__libc_init_array+0x2e>
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a0:	4798      	blx	r3
 80067a2:	3601      	adds	r6, #1
 80067a4:	e7ee      	b.n	8006784 <__libc_init_array+0xc>
 80067a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067aa:	4798      	blx	r3
 80067ac:	3601      	adds	r6, #1
 80067ae:	e7f2      	b.n	8006796 <__libc_init_array+0x1e>
 80067b0:	08009564 	.word	0x08009564
 80067b4:	08009564 	.word	0x08009564
 80067b8:	08009564 	.word	0x08009564
 80067bc:	08009568 	.word	0x08009568

080067c0 <__retarget_lock_init_recursive>:
 80067c0:	4770      	bx	lr

080067c2 <__retarget_lock_acquire_recursive>:
 80067c2:	4770      	bx	lr

080067c4 <__retarget_lock_release_recursive>:
 80067c4:	4770      	bx	lr

080067c6 <memchr>:
 80067c6:	4603      	mov	r3, r0
 80067c8:	b510      	push	{r4, lr}
 80067ca:	b2c9      	uxtb	r1, r1
 80067cc:	4402      	add	r2, r0
 80067ce:	4293      	cmp	r3, r2
 80067d0:	4618      	mov	r0, r3
 80067d2:	d101      	bne.n	80067d8 <memchr+0x12>
 80067d4:	2000      	movs	r0, #0
 80067d6:	e003      	b.n	80067e0 <memchr+0x1a>
 80067d8:	7804      	ldrb	r4, [r0, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	428c      	cmp	r4, r1
 80067de:	d1f6      	bne.n	80067ce <memchr+0x8>
 80067e0:	bd10      	pop	{r4, pc}

080067e2 <memcpy>:
 80067e2:	440a      	add	r2, r1
 80067e4:	4291      	cmp	r1, r2
 80067e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80067ea:	d100      	bne.n	80067ee <memcpy+0xc>
 80067ec:	4770      	bx	lr
 80067ee:	b510      	push	{r4, lr}
 80067f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067f4:	4291      	cmp	r1, r2
 80067f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067fa:	d1f9      	bne.n	80067f0 <memcpy+0xe>
 80067fc:	bd10      	pop	{r4, pc}

080067fe <quorem>:
 80067fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006802:	6903      	ldr	r3, [r0, #16]
 8006804:	690c      	ldr	r4, [r1, #16]
 8006806:	4607      	mov	r7, r0
 8006808:	42a3      	cmp	r3, r4
 800680a:	db7e      	blt.n	800690a <quorem+0x10c>
 800680c:	3c01      	subs	r4, #1
 800680e:	00a3      	lsls	r3, r4, #2
 8006810:	f100 0514 	add.w	r5, r0, #20
 8006814:	f101 0814 	add.w	r8, r1, #20
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006828:	3301      	adds	r3, #1
 800682a:	429a      	cmp	r2, r3
 800682c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006830:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006834:	d32e      	bcc.n	8006894 <quorem+0x96>
 8006836:	f04f 0a00 	mov.w	sl, #0
 800683a:	46c4      	mov	ip, r8
 800683c:	46ae      	mov	lr, r5
 800683e:	46d3      	mov	fp, sl
 8006840:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006844:	b298      	uxth	r0, r3
 8006846:	fb06 a000 	mla	r0, r6, r0, sl
 800684a:	0c1b      	lsrs	r3, r3, #16
 800684c:	0c02      	lsrs	r2, r0, #16
 800684e:	fb06 2303 	mla	r3, r6, r3, r2
 8006852:	f8de 2000 	ldr.w	r2, [lr]
 8006856:	b280      	uxth	r0, r0
 8006858:	b292      	uxth	r2, r2
 800685a:	1a12      	subs	r2, r2, r0
 800685c:	445a      	add	r2, fp
 800685e:	f8de 0000 	ldr.w	r0, [lr]
 8006862:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006866:	b29b      	uxth	r3, r3
 8006868:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800686c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006870:	b292      	uxth	r2, r2
 8006872:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006876:	45e1      	cmp	r9, ip
 8006878:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800687c:	f84e 2b04 	str.w	r2, [lr], #4
 8006880:	d2de      	bcs.n	8006840 <quorem+0x42>
 8006882:	9b00      	ldr	r3, [sp, #0]
 8006884:	58eb      	ldr	r3, [r5, r3]
 8006886:	b92b      	cbnz	r3, 8006894 <quorem+0x96>
 8006888:	9b01      	ldr	r3, [sp, #4]
 800688a:	3b04      	subs	r3, #4
 800688c:	429d      	cmp	r5, r3
 800688e:	461a      	mov	r2, r3
 8006890:	d32f      	bcc.n	80068f2 <quorem+0xf4>
 8006892:	613c      	str	r4, [r7, #16]
 8006894:	4638      	mov	r0, r7
 8006896:	f001 f979 	bl	8007b8c <__mcmp>
 800689a:	2800      	cmp	r0, #0
 800689c:	db25      	blt.n	80068ea <quorem+0xec>
 800689e:	4629      	mov	r1, r5
 80068a0:	2000      	movs	r0, #0
 80068a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80068a6:	f8d1 c000 	ldr.w	ip, [r1]
 80068aa:	fa1f fe82 	uxth.w	lr, r2
 80068ae:	fa1f f38c 	uxth.w	r3, ip
 80068b2:	eba3 030e 	sub.w	r3, r3, lr
 80068b6:	4403      	add	r3, r0
 80068b8:	0c12      	lsrs	r2, r2, #16
 80068ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068c8:	45c1      	cmp	r9, r8
 80068ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068ce:	f841 3b04 	str.w	r3, [r1], #4
 80068d2:	d2e6      	bcs.n	80068a2 <quorem+0xa4>
 80068d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068dc:	b922      	cbnz	r2, 80068e8 <quorem+0xea>
 80068de:	3b04      	subs	r3, #4
 80068e0:	429d      	cmp	r5, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	d30b      	bcc.n	80068fe <quorem+0x100>
 80068e6:	613c      	str	r4, [r7, #16]
 80068e8:	3601      	adds	r6, #1
 80068ea:	4630      	mov	r0, r6
 80068ec:	b003      	add	sp, #12
 80068ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	3b04      	subs	r3, #4
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	d1cb      	bne.n	8006892 <quorem+0x94>
 80068fa:	3c01      	subs	r4, #1
 80068fc:	e7c6      	b.n	800688c <quorem+0x8e>
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	3b04      	subs	r3, #4
 8006902:	2a00      	cmp	r2, #0
 8006904:	d1ef      	bne.n	80068e6 <quorem+0xe8>
 8006906:	3c01      	subs	r4, #1
 8006908:	e7ea      	b.n	80068e0 <quorem+0xe2>
 800690a:	2000      	movs	r0, #0
 800690c:	e7ee      	b.n	80068ec <quorem+0xee>
	...

08006910 <_dtoa_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	4614      	mov	r4, r2
 8006916:	461d      	mov	r5, r3
 8006918:	69c7      	ldr	r7, [r0, #28]
 800691a:	b097      	sub	sp, #92	@ 0x5c
 800691c:	4683      	mov	fp, r0
 800691e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006922:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006924:	b97f      	cbnz	r7, 8006946 <_dtoa_r+0x36>
 8006926:	2010      	movs	r0, #16
 8006928:	f000 fe02 	bl	8007530 <malloc>
 800692c:	4602      	mov	r2, r0
 800692e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006932:	b920      	cbnz	r0, 800693e <_dtoa_r+0x2e>
 8006934:	21ef      	movs	r1, #239	@ 0xef
 8006936:	4ba8      	ldr	r3, [pc, #672]	@ (8006bd8 <_dtoa_r+0x2c8>)
 8006938:	48a8      	ldr	r0, [pc, #672]	@ (8006bdc <_dtoa_r+0x2cc>)
 800693a:	f001 ffe1 	bl	8008900 <__assert_func>
 800693e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006942:	6007      	str	r7, [r0, #0]
 8006944:	60c7      	str	r7, [r0, #12]
 8006946:	f8db 301c 	ldr.w	r3, [fp, #28]
 800694a:	6819      	ldr	r1, [r3, #0]
 800694c:	b159      	cbz	r1, 8006966 <_dtoa_r+0x56>
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	2301      	movs	r3, #1
 8006952:	4093      	lsls	r3, r2
 8006954:	604a      	str	r2, [r1, #4]
 8006956:	608b      	str	r3, [r1, #8]
 8006958:	4658      	mov	r0, fp
 800695a:	f000 fedf 	bl	800771c <_Bfree>
 800695e:	2200      	movs	r2, #0
 8006960:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	1e2b      	subs	r3, r5, #0
 8006968:	bfaf      	iteee	ge
 800696a:	2300      	movge	r3, #0
 800696c:	2201      	movlt	r2, #1
 800696e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006972:	9303      	strlt	r3, [sp, #12]
 8006974:	bfa8      	it	ge
 8006976:	6033      	strge	r3, [r6, #0]
 8006978:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800697c:	4b98      	ldr	r3, [pc, #608]	@ (8006be0 <_dtoa_r+0x2d0>)
 800697e:	bfb8      	it	lt
 8006980:	6032      	strlt	r2, [r6, #0]
 8006982:	ea33 0308 	bics.w	r3, r3, r8
 8006986:	d112      	bne.n	80069ae <_dtoa_r+0x9e>
 8006988:	f242 730f 	movw	r3, #9999	@ 0x270f
 800698c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006994:	4323      	orrs	r3, r4
 8006996:	f000 8550 	beq.w	800743a <_dtoa_r+0xb2a>
 800699a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800699c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006be4 <_dtoa_r+0x2d4>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8552 	beq.w	800744a <_dtoa_r+0xb3a>
 80069a6:	f10a 0303 	add.w	r3, sl, #3
 80069aa:	f000 bd4c 	b.w	8007446 <_dtoa_r+0xb36>
 80069ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80069b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069ba:	2200      	movs	r2, #0
 80069bc:	2300      	movs	r3, #0
 80069be:	f7f9 fff3 	bl	80009a8 <__aeabi_dcmpeq>
 80069c2:	4607      	mov	r7, r0
 80069c4:	b158      	cbz	r0, 80069de <_dtoa_r+0xce>
 80069c6:	2301      	movs	r3, #1
 80069c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069ce:	b113      	cbz	r3, 80069d6 <_dtoa_r+0xc6>
 80069d0:	4b85      	ldr	r3, [pc, #532]	@ (8006be8 <_dtoa_r+0x2d8>)
 80069d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006bec <_dtoa_r+0x2dc>
 80069da:	f000 bd36 	b.w	800744a <_dtoa_r+0xb3a>
 80069de:	ab14      	add	r3, sp, #80	@ 0x50
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	ab15      	add	r3, sp, #84	@ 0x54
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	4658      	mov	r0, fp
 80069e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80069ec:	f001 f97e 	bl	8007cec <__d2b>
 80069f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80069f4:	4681      	mov	r9, r0
 80069f6:	2e00      	cmp	r6, #0
 80069f8:	d077      	beq.n	8006aea <_dtoa_r+0x1da>
 80069fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a10:	9712      	str	r7, [sp, #72]	@ 0x48
 8006a12:	4619      	mov	r1, r3
 8006a14:	2200      	movs	r2, #0
 8006a16:	4b76      	ldr	r3, [pc, #472]	@ (8006bf0 <_dtoa_r+0x2e0>)
 8006a18:	f7f9 fba6 	bl	8000168 <__aeabi_dsub>
 8006a1c:	a368      	add	r3, pc, #416	@ (adr r3, 8006bc0 <_dtoa_r+0x2b0>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f7f9 fd59 	bl	80004d8 <__aeabi_dmul>
 8006a26:	a368      	add	r3, pc, #416	@ (adr r3, 8006bc8 <_dtoa_r+0x2b8>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f7f9 fb9e 	bl	800016c <__adddf3>
 8006a30:	4604      	mov	r4, r0
 8006a32:	4630      	mov	r0, r6
 8006a34:	460d      	mov	r5, r1
 8006a36:	f7f9 fce5 	bl	8000404 <__aeabi_i2d>
 8006a3a:	a365      	add	r3, pc, #404	@ (adr r3, 8006bd0 <_dtoa_r+0x2c0>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fd4a 	bl	80004d8 <__aeabi_dmul>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4620      	mov	r0, r4
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	f7f9 fb8e 	bl	800016c <__adddf3>
 8006a50:	4604      	mov	r4, r0
 8006a52:	460d      	mov	r5, r1
 8006a54:	f7f9 fff0 	bl	8000a38 <__aeabi_d2iz>
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4607      	mov	r7, r0
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4629      	mov	r1, r5
 8006a62:	f7f9 ffab 	bl	80009bc <__aeabi_dcmplt>
 8006a66:	b140      	cbz	r0, 8006a7a <_dtoa_r+0x16a>
 8006a68:	4638      	mov	r0, r7
 8006a6a:	f7f9 fccb 	bl	8000404 <__aeabi_i2d>
 8006a6e:	4622      	mov	r2, r4
 8006a70:	462b      	mov	r3, r5
 8006a72:	f7f9 ff99 	bl	80009a8 <__aeabi_dcmpeq>
 8006a76:	b900      	cbnz	r0, 8006a7a <_dtoa_r+0x16a>
 8006a78:	3f01      	subs	r7, #1
 8006a7a:	2f16      	cmp	r7, #22
 8006a7c:	d853      	bhi.n	8006b26 <_dtoa_r+0x216>
 8006a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a82:	4b5c      	ldr	r3, [pc, #368]	@ (8006bf4 <_dtoa_r+0x2e4>)
 8006a84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 ff96 	bl	80009bc <__aeabi_dcmplt>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d04a      	beq.n	8006b2a <_dtoa_r+0x21a>
 8006a94:	2300      	movs	r3, #0
 8006a96:	3f01      	subs	r7, #1
 8006a98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a9c:	1b9b      	subs	r3, r3, r6
 8006a9e:	1e5a      	subs	r2, r3, #1
 8006aa0:	bf46      	itte	mi
 8006aa2:	f1c3 0801 	rsbmi	r8, r3, #1
 8006aa6:	2300      	movmi	r3, #0
 8006aa8:	f04f 0800 	movpl.w	r8, #0
 8006aac:	9209      	str	r2, [sp, #36]	@ 0x24
 8006aae:	bf48      	it	mi
 8006ab0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006ab2:	2f00      	cmp	r7, #0
 8006ab4:	db3b      	blt.n	8006b2e <_dtoa_r+0x21e>
 8006ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab8:	970e      	str	r7, [sp, #56]	@ 0x38
 8006aba:	443b      	add	r3, r7
 8006abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006abe:	2300      	movs	r3, #0
 8006ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d866      	bhi.n	8006b96 <_dtoa_r+0x286>
 8006ac8:	2b05      	cmp	r3, #5
 8006aca:	bfc4      	itt	gt
 8006acc:	3b04      	subgt	r3, #4
 8006ace:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006ad0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ad2:	bfc8      	it	gt
 8006ad4:	2400      	movgt	r4, #0
 8006ad6:	f1a3 0302 	sub.w	r3, r3, #2
 8006ada:	bfd8      	it	le
 8006adc:	2401      	movle	r4, #1
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d864      	bhi.n	8006bac <_dtoa_r+0x29c>
 8006ae2:	e8df f003 	tbb	[pc, r3]
 8006ae6:	382b      	.short	0x382b
 8006ae8:	5636      	.short	0x5636
 8006aea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006aee:	441e      	add	r6, r3
 8006af0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	bfc1      	itttt	gt
 8006af8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006afc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006b00:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b04:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b08:	bfd6      	itet	le
 8006b0a:	f1c3 0320 	rsble	r3, r3, #32
 8006b0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006b12:	fa04 f003 	lslle.w	r0, r4, r3
 8006b16:	f7f9 fc65 	bl	80003e4 <__aeabi_ui2d>
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b20:	3e01      	subs	r6, #1
 8006b22:	9212      	str	r2, [sp, #72]	@ 0x48
 8006b24:	e775      	b.n	8006a12 <_dtoa_r+0x102>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e7b6      	b.n	8006a98 <_dtoa_r+0x188>
 8006b2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006b2c:	e7b5      	b.n	8006a9a <_dtoa_r+0x18a>
 8006b2e:	427b      	negs	r3, r7
 8006b30:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b32:	2300      	movs	r3, #0
 8006b34:	eba8 0807 	sub.w	r8, r8, r7
 8006b38:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b3a:	e7c2      	b.n	8006ac2 <_dtoa_r+0x1b2>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	dc35      	bgt.n	8006bb2 <_dtoa_r+0x2a2>
 8006b46:	2301      	movs	r3, #1
 8006b48:	461a      	mov	r2, r3
 8006b4a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b4e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006b50:	e00b      	b.n	8006b6a <_dtoa_r+0x25a>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e7f3      	b.n	8006b3e <_dtoa_r+0x22e>
 8006b56:	2300      	movs	r3, #0
 8006b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	9308      	str	r3, [sp, #32]
 8006b60:	3301      	adds	r3, #1
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	9307      	str	r3, [sp, #28]
 8006b66:	bfb8      	it	lt
 8006b68:	2301      	movlt	r3, #1
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b72:	f102 0514 	add.w	r5, r2, #20
 8006b76:	429d      	cmp	r5, r3
 8006b78:	d91f      	bls.n	8006bba <_dtoa_r+0x2aa>
 8006b7a:	6041      	str	r1, [r0, #4]
 8006b7c:	4658      	mov	r0, fp
 8006b7e:	f000 fd8d 	bl	800769c <_Balloc>
 8006b82:	4682      	mov	sl, r0
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d139      	bne.n	8006bfc <_dtoa_r+0x2ec>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf8 <_dtoa_r+0x2e8>)
 8006b90:	e6d2      	b.n	8006938 <_dtoa_r+0x28>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e7e0      	b.n	8006b58 <_dtoa_r+0x248>
 8006b96:	2401      	movs	r4, #1
 8006b98:	2300      	movs	r3, #0
 8006b9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ba8:	2312      	movs	r3, #18
 8006baa:	e7d0      	b.n	8006b4e <_dtoa_r+0x23e>
 8006bac:	2301      	movs	r3, #1
 8006bae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bb0:	e7f5      	b.n	8006b9e <_dtoa_r+0x28e>
 8006bb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006bb8:	e7d7      	b.n	8006b6a <_dtoa_r+0x25a>
 8006bba:	3101      	adds	r1, #1
 8006bbc:	0052      	lsls	r2, r2, #1
 8006bbe:	e7d8      	b.n	8006b72 <_dtoa_r+0x262>
 8006bc0:	636f4361 	.word	0x636f4361
 8006bc4:	3fd287a7 	.word	0x3fd287a7
 8006bc8:	8b60c8b3 	.word	0x8b60c8b3
 8006bcc:	3fc68a28 	.word	0x3fc68a28
 8006bd0:	509f79fb 	.word	0x509f79fb
 8006bd4:	3fd34413 	.word	0x3fd34413
 8006bd8:	08009211 	.word	0x08009211
 8006bdc:	08009228 	.word	0x08009228
 8006be0:	7ff00000 	.word	0x7ff00000
 8006be4:	0800920d 	.word	0x0800920d
 8006be8:	08009410 	.word	0x08009410
 8006bec:	0800940f 	.word	0x0800940f
 8006bf0:	3ff80000 	.word	0x3ff80000
 8006bf4:	08009320 	.word	0x08009320
 8006bf8:	08009280 	.word	0x08009280
 8006bfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c00:	6018      	str	r0, [r3, #0]
 8006c02:	9b07      	ldr	r3, [sp, #28]
 8006c04:	2b0e      	cmp	r3, #14
 8006c06:	f200 80a4 	bhi.w	8006d52 <_dtoa_r+0x442>
 8006c0a:	2c00      	cmp	r4, #0
 8006c0c:	f000 80a1 	beq.w	8006d52 <_dtoa_r+0x442>
 8006c10:	2f00      	cmp	r7, #0
 8006c12:	dd33      	ble.n	8006c7c <_dtoa_r+0x36c>
 8006c14:	4b86      	ldr	r3, [pc, #536]	@ (8006e30 <_dtoa_r+0x520>)
 8006c16:	f007 020f 	and.w	r2, r7, #15
 8006c1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c1e:	05f8      	lsls	r0, r7, #23
 8006c20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c2c:	d516      	bpl.n	8006c5c <_dtoa_r+0x34c>
 8006c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c32:	4b80      	ldr	r3, [pc, #512]	@ (8006e34 <_dtoa_r+0x524>)
 8006c34:	2603      	movs	r6, #3
 8006c36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c3a:	f7f9 fd77 	bl	800072c <__aeabi_ddiv>
 8006c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c42:	f004 040f 	and.w	r4, r4, #15
 8006c46:	4d7b      	ldr	r5, [pc, #492]	@ (8006e34 <_dtoa_r+0x524>)
 8006c48:	b954      	cbnz	r4, 8006c60 <_dtoa_r+0x350>
 8006c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c52:	f7f9 fd6b 	bl	800072c <__aeabi_ddiv>
 8006c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c5a:	e028      	b.n	8006cae <_dtoa_r+0x39e>
 8006c5c:	2602      	movs	r6, #2
 8006c5e:	e7f2      	b.n	8006c46 <_dtoa_r+0x336>
 8006c60:	07e1      	lsls	r1, r4, #31
 8006c62:	d508      	bpl.n	8006c76 <_dtoa_r+0x366>
 8006c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c6c:	f7f9 fc34 	bl	80004d8 <__aeabi_dmul>
 8006c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c74:	3601      	adds	r6, #1
 8006c76:	1064      	asrs	r4, r4, #1
 8006c78:	3508      	adds	r5, #8
 8006c7a:	e7e5      	b.n	8006c48 <_dtoa_r+0x338>
 8006c7c:	f000 80d2 	beq.w	8006e24 <_dtoa_r+0x514>
 8006c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c84:	427c      	negs	r4, r7
 8006c86:	4b6a      	ldr	r3, [pc, #424]	@ (8006e30 <_dtoa_r+0x520>)
 8006c88:	f004 020f 	and.w	r2, r4, #15
 8006c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	f7f9 fc20 	bl	80004d8 <__aeabi_dmul>
 8006c98:	2602      	movs	r6, #2
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ca0:	4d64      	ldr	r5, [pc, #400]	@ (8006e34 <_dtoa_r+0x524>)
 8006ca2:	1124      	asrs	r4, r4, #4
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	f040 80b2 	bne.w	8006e0e <_dtoa_r+0x4fe>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1d3      	bne.n	8006c56 <_dtoa_r+0x346>
 8006cae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006cb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80b7 	beq.w	8006e28 <_dtoa_r+0x518>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4b5d      	ldr	r3, [pc, #372]	@ (8006e38 <_dtoa_r+0x528>)
 8006cc2:	f7f9 fe7b 	bl	80009bc <__aeabi_dcmplt>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	f000 80ae 	beq.w	8006e28 <_dtoa_r+0x518>
 8006ccc:	9b07      	ldr	r3, [sp, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80aa 	beq.w	8006e28 <_dtoa_r+0x518>
 8006cd4:	9b08      	ldr	r3, [sp, #32]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dd37      	ble.n	8006d4a <_dtoa_r+0x43a>
 8006cda:	1e7b      	subs	r3, r7, #1
 8006cdc:	4620      	mov	r0, r4
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4b55      	ldr	r3, [pc, #340]	@ (8006e3c <_dtoa_r+0x52c>)
 8006ce6:	f7f9 fbf7 	bl	80004d8 <__aeabi_dmul>
 8006cea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cee:	9c08      	ldr	r4, [sp, #32]
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7f9 fb86 	bl	8000404 <__aeabi_i2d>
 8006cf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cfc:	f7f9 fbec 	bl	80004d8 <__aeabi_dmul>
 8006d00:	2200      	movs	r2, #0
 8006d02:	4b4f      	ldr	r3, [pc, #316]	@ (8006e40 <_dtoa_r+0x530>)
 8006d04:	f7f9 fa32 	bl	800016c <__adddf3>
 8006d08:	4605      	mov	r5, r0
 8006d0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d0e:	2c00      	cmp	r4, #0
 8006d10:	f040 809a 	bne.w	8006e48 <_dtoa_r+0x538>
 8006d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8006e44 <_dtoa_r+0x534>)
 8006d1c:	f7f9 fa24 	bl	8000168 <__aeabi_dsub>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d28:	462a      	mov	r2, r5
 8006d2a:	4633      	mov	r3, r6
 8006d2c:	f7f9 fe64 	bl	80009f8 <__aeabi_dcmpgt>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f040 828e 	bne.w	8007252 <_dtoa_r+0x942>
 8006d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d3a:	462a      	mov	r2, r5
 8006d3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d40:	f7f9 fe3c 	bl	80009bc <__aeabi_dcmplt>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f040 8127 	bne.w	8006f98 <_dtoa_r+0x688>
 8006d4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f2c0 8163 	blt.w	8007020 <_dtoa_r+0x710>
 8006d5a:	2f0e      	cmp	r7, #14
 8006d5c:	f300 8160 	bgt.w	8007020 <_dtoa_r+0x710>
 8006d60:	4b33      	ldr	r3, [pc, #204]	@ (8006e30 <_dtoa_r+0x520>)
 8006d62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	da03      	bge.n	8006d7c <_dtoa_r+0x46c>
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f340 8100 	ble.w	8006f7c <_dtoa_r+0x66c>
 8006d7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d80:	4656      	mov	r6, sl
 8006d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d86:	4620      	mov	r0, r4
 8006d88:	4629      	mov	r1, r5
 8006d8a:	f7f9 fccf 	bl	800072c <__aeabi_ddiv>
 8006d8e:	f7f9 fe53 	bl	8000a38 <__aeabi_d2iz>
 8006d92:	4680      	mov	r8, r0
 8006d94:	f7f9 fb36 	bl	8000404 <__aeabi_i2d>
 8006d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d9c:	f7f9 fb9c 	bl	80004d8 <__aeabi_dmul>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4620      	mov	r0, r4
 8006da6:	4629      	mov	r1, r5
 8006da8:	f7f9 f9de 	bl	8000168 <__aeabi_dsub>
 8006dac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006db0:	9d07      	ldr	r5, [sp, #28]
 8006db2:	f806 4b01 	strb.w	r4, [r6], #1
 8006db6:	eba6 040a 	sub.w	r4, r6, sl
 8006dba:	42a5      	cmp	r5, r4
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	f040 8116 	bne.w	8006ff0 <_dtoa_r+0x6e0>
 8006dc4:	f7f9 f9d2 	bl	800016c <__adddf3>
 8006dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dcc:	4604      	mov	r4, r0
 8006dce:	460d      	mov	r5, r1
 8006dd0:	f7f9 fe12 	bl	80009f8 <__aeabi_dcmpgt>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	f040 80f8 	bne.w	8006fca <_dtoa_r+0x6ba>
 8006dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dde:	4620      	mov	r0, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7f9 fde1 	bl	80009a8 <__aeabi_dcmpeq>
 8006de6:	b118      	cbz	r0, 8006df0 <_dtoa_r+0x4e0>
 8006de8:	f018 0f01 	tst.w	r8, #1
 8006dec:	f040 80ed 	bne.w	8006fca <_dtoa_r+0x6ba>
 8006df0:	4649      	mov	r1, r9
 8006df2:	4658      	mov	r0, fp
 8006df4:	f000 fc92 	bl	800771c <_Bfree>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	7033      	strb	r3, [r6, #0]
 8006dfc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006dfe:	3701      	adds	r7, #1
 8006e00:	601f      	str	r7, [r3, #0]
 8006e02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8320 	beq.w	800744a <_dtoa_r+0xb3a>
 8006e0a:	601e      	str	r6, [r3, #0]
 8006e0c:	e31d      	b.n	800744a <_dtoa_r+0xb3a>
 8006e0e:	07e2      	lsls	r2, r4, #31
 8006e10:	d505      	bpl.n	8006e1e <_dtoa_r+0x50e>
 8006e12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e16:	f7f9 fb5f 	bl	80004d8 <__aeabi_dmul>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	3601      	adds	r6, #1
 8006e1e:	1064      	asrs	r4, r4, #1
 8006e20:	3508      	adds	r5, #8
 8006e22:	e73f      	b.n	8006ca4 <_dtoa_r+0x394>
 8006e24:	2602      	movs	r6, #2
 8006e26:	e742      	b.n	8006cae <_dtoa_r+0x39e>
 8006e28:	9c07      	ldr	r4, [sp, #28]
 8006e2a:	9704      	str	r7, [sp, #16]
 8006e2c:	e761      	b.n	8006cf2 <_dtoa_r+0x3e2>
 8006e2e:	bf00      	nop
 8006e30:	08009320 	.word	0x08009320
 8006e34:	080092f8 	.word	0x080092f8
 8006e38:	3ff00000 	.word	0x3ff00000
 8006e3c:	40240000 	.word	0x40240000
 8006e40:	401c0000 	.word	0x401c0000
 8006e44:	40140000 	.word	0x40140000
 8006e48:	4b70      	ldr	r3, [pc, #448]	@ (800700c <_dtoa_r+0x6fc>)
 8006e4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e54:	4454      	add	r4, sl
 8006e56:	2900      	cmp	r1, #0
 8006e58:	d045      	beq.n	8006ee6 <_dtoa_r+0x5d6>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	496c      	ldr	r1, [pc, #432]	@ (8007010 <_dtoa_r+0x700>)
 8006e5e:	f7f9 fc65 	bl	800072c <__aeabi_ddiv>
 8006e62:	4633      	mov	r3, r6
 8006e64:	462a      	mov	r2, r5
 8006e66:	f7f9 f97f 	bl	8000168 <__aeabi_dsub>
 8006e6a:	4656      	mov	r6, sl
 8006e6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e74:	f7f9 fde0 	bl	8000a38 <__aeabi_d2iz>
 8006e78:	4605      	mov	r5, r0
 8006e7a:	f7f9 fac3 	bl	8000404 <__aeabi_i2d>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e86:	f7f9 f96f 	bl	8000168 <__aeabi_dsub>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	3530      	adds	r5, #48	@ 0x30
 8006e90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e98:	f806 5b01 	strb.w	r5, [r6], #1
 8006e9c:	f7f9 fd8e 	bl	80009bc <__aeabi_dcmplt>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d163      	bne.n	8006f6c <_dtoa_r+0x65c>
 8006ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	495a      	ldr	r1, [pc, #360]	@ (8007014 <_dtoa_r+0x704>)
 8006eac:	f7f9 f95c 	bl	8000168 <__aeabi_dsub>
 8006eb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006eb4:	f7f9 fd82 	bl	80009bc <__aeabi_dcmplt>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	f040 8087 	bne.w	8006fcc <_dtoa_r+0x6bc>
 8006ebe:	42a6      	cmp	r6, r4
 8006ec0:	f43f af43 	beq.w	8006d4a <_dtoa_r+0x43a>
 8006ec4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ec8:	2200      	movs	r2, #0
 8006eca:	4b53      	ldr	r3, [pc, #332]	@ (8007018 <_dtoa_r+0x708>)
 8006ecc:	f7f9 fb04 	bl	80004d8 <__aeabi_dmul>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eda:	4b4f      	ldr	r3, [pc, #316]	@ (8007018 <_dtoa_r+0x708>)
 8006edc:	f7f9 fafc 	bl	80004d8 <__aeabi_dmul>
 8006ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ee4:	e7c4      	b.n	8006e70 <_dtoa_r+0x560>
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f7f9 faf5 	bl	80004d8 <__aeabi_dmul>
 8006eee:	4656      	mov	r6, sl
 8006ef0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ef4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006efa:	f7f9 fd9d 	bl	8000a38 <__aeabi_d2iz>
 8006efe:	4605      	mov	r5, r0
 8006f00:	f7f9 fa80 	bl	8000404 <__aeabi_i2d>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f0c:	f7f9 f92c 	bl	8000168 <__aeabi_dsub>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	3530      	adds	r5, #48	@ 0x30
 8006f16:	f806 5b01 	strb.w	r5, [r6], #1
 8006f1a:	42a6      	cmp	r6, r4
 8006f1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	d124      	bne.n	8006f70 <_dtoa_r+0x660>
 8006f26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f2a:	4b39      	ldr	r3, [pc, #228]	@ (8007010 <_dtoa_r+0x700>)
 8006f2c:	f7f9 f91e 	bl	800016c <__adddf3>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f38:	f7f9 fd5e 	bl	80009f8 <__aeabi_dcmpgt>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d145      	bne.n	8006fcc <_dtoa_r+0x6bc>
 8006f40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f44:	2000      	movs	r0, #0
 8006f46:	4932      	ldr	r1, [pc, #200]	@ (8007010 <_dtoa_r+0x700>)
 8006f48:	f7f9 f90e 	bl	8000168 <__aeabi_dsub>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f54:	f7f9 fd32 	bl	80009bc <__aeabi_dcmplt>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	f43f aef6 	beq.w	8006d4a <_dtoa_r+0x43a>
 8006f5e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f60:	1e73      	subs	r3, r6, #1
 8006f62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f68:	2b30      	cmp	r3, #48	@ 0x30
 8006f6a:	d0f8      	beq.n	8006f5e <_dtoa_r+0x64e>
 8006f6c:	9f04      	ldr	r7, [sp, #16]
 8006f6e:	e73f      	b.n	8006df0 <_dtoa_r+0x4e0>
 8006f70:	4b29      	ldr	r3, [pc, #164]	@ (8007018 <_dtoa_r+0x708>)
 8006f72:	f7f9 fab1 	bl	80004d8 <__aeabi_dmul>
 8006f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f7a:	e7bc      	b.n	8006ef6 <_dtoa_r+0x5e6>
 8006f7c:	d10c      	bne.n	8006f98 <_dtoa_r+0x688>
 8006f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f82:	2200      	movs	r2, #0
 8006f84:	4b25      	ldr	r3, [pc, #148]	@ (800701c <_dtoa_r+0x70c>)
 8006f86:	f7f9 faa7 	bl	80004d8 <__aeabi_dmul>
 8006f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f8e:	f7f9 fd29 	bl	80009e4 <__aeabi_dcmpge>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	f000 815b 	beq.w	800724e <_dtoa_r+0x93e>
 8006f98:	2400      	movs	r4, #0
 8006f9a:	4625      	mov	r5, r4
 8006f9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f9e:	4656      	mov	r6, sl
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	2700      	movs	r7, #0
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4658      	mov	r0, fp
 8006faa:	f000 fbb7 	bl	800771c <_Bfree>
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	d0dc      	beq.n	8006f6c <_dtoa_r+0x65c>
 8006fb2:	b12f      	cbz	r7, 8006fc0 <_dtoa_r+0x6b0>
 8006fb4:	42af      	cmp	r7, r5
 8006fb6:	d003      	beq.n	8006fc0 <_dtoa_r+0x6b0>
 8006fb8:	4639      	mov	r1, r7
 8006fba:	4658      	mov	r0, fp
 8006fbc:	f000 fbae 	bl	800771c <_Bfree>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4658      	mov	r0, fp
 8006fc4:	f000 fbaa 	bl	800771c <_Bfree>
 8006fc8:	e7d0      	b.n	8006f6c <_dtoa_r+0x65c>
 8006fca:	9704      	str	r7, [sp, #16]
 8006fcc:	4633      	mov	r3, r6
 8006fce:	461e      	mov	r6, r3
 8006fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd4:	2a39      	cmp	r2, #57	@ 0x39
 8006fd6:	d107      	bne.n	8006fe8 <_dtoa_r+0x6d8>
 8006fd8:	459a      	cmp	sl, r3
 8006fda:	d1f8      	bne.n	8006fce <_dtoa_r+0x6be>
 8006fdc:	9a04      	ldr	r2, [sp, #16]
 8006fde:	3201      	adds	r2, #1
 8006fe0:	9204      	str	r2, [sp, #16]
 8006fe2:	2230      	movs	r2, #48	@ 0x30
 8006fe4:	f88a 2000 	strb.w	r2, [sl]
 8006fe8:	781a      	ldrb	r2, [r3, #0]
 8006fea:	3201      	adds	r2, #1
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e7bd      	b.n	8006f6c <_dtoa_r+0x65c>
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <_dtoa_r+0x708>)
 8006ff4:	f7f9 fa70 	bl	80004d8 <__aeabi_dmul>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	f7f9 fcd2 	bl	80009a8 <__aeabi_dcmpeq>
 8007004:	2800      	cmp	r0, #0
 8007006:	f43f aebc 	beq.w	8006d82 <_dtoa_r+0x472>
 800700a:	e6f1      	b.n	8006df0 <_dtoa_r+0x4e0>
 800700c:	08009320 	.word	0x08009320
 8007010:	3fe00000 	.word	0x3fe00000
 8007014:	3ff00000 	.word	0x3ff00000
 8007018:	40240000 	.word	0x40240000
 800701c:	40140000 	.word	0x40140000
 8007020:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007022:	2a00      	cmp	r2, #0
 8007024:	f000 80db 	beq.w	80071de <_dtoa_r+0x8ce>
 8007028:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800702a:	2a01      	cmp	r2, #1
 800702c:	f300 80bf 	bgt.w	80071ae <_dtoa_r+0x89e>
 8007030:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007032:	2a00      	cmp	r2, #0
 8007034:	f000 80b7 	beq.w	80071a6 <_dtoa_r+0x896>
 8007038:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800703c:	4646      	mov	r6, r8
 800703e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007042:	2101      	movs	r1, #1
 8007044:	441a      	add	r2, r3
 8007046:	4658      	mov	r0, fp
 8007048:	4498      	add	r8, r3
 800704a:	9209      	str	r2, [sp, #36]	@ 0x24
 800704c:	f000 fc1a 	bl	8007884 <__i2b>
 8007050:	4605      	mov	r5, r0
 8007052:	b15e      	cbz	r6, 800706c <_dtoa_r+0x75c>
 8007054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007056:	2b00      	cmp	r3, #0
 8007058:	dd08      	ble.n	800706c <_dtoa_r+0x75c>
 800705a:	42b3      	cmp	r3, r6
 800705c:	bfa8      	it	ge
 800705e:	4633      	movge	r3, r6
 8007060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007062:	eba8 0803 	sub.w	r8, r8, r3
 8007066:	1af6      	subs	r6, r6, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	9309      	str	r3, [sp, #36]	@ 0x24
 800706c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800706e:	b1f3      	cbz	r3, 80070ae <_dtoa_r+0x79e>
 8007070:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 80b7 	beq.w	80071e6 <_dtoa_r+0x8d6>
 8007078:	b18c      	cbz	r4, 800709e <_dtoa_r+0x78e>
 800707a:	4629      	mov	r1, r5
 800707c:	4622      	mov	r2, r4
 800707e:	4658      	mov	r0, fp
 8007080:	f000 fcbe 	bl	8007a00 <__pow5mult>
 8007084:	464a      	mov	r2, r9
 8007086:	4601      	mov	r1, r0
 8007088:	4605      	mov	r5, r0
 800708a:	4658      	mov	r0, fp
 800708c:	f000 fc10 	bl	80078b0 <__multiply>
 8007090:	4649      	mov	r1, r9
 8007092:	9004      	str	r0, [sp, #16]
 8007094:	4658      	mov	r0, fp
 8007096:	f000 fb41 	bl	800771c <_Bfree>
 800709a:	9b04      	ldr	r3, [sp, #16]
 800709c:	4699      	mov	r9, r3
 800709e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070a0:	1b1a      	subs	r2, r3, r4
 80070a2:	d004      	beq.n	80070ae <_dtoa_r+0x79e>
 80070a4:	4649      	mov	r1, r9
 80070a6:	4658      	mov	r0, fp
 80070a8:	f000 fcaa 	bl	8007a00 <__pow5mult>
 80070ac:	4681      	mov	r9, r0
 80070ae:	2101      	movs	r1, #1
 80070b0:	4658      	mov	r0, fp
 80070b2:	f000 fbe7 	bl	8007884 <__i2b>
 80070b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070b8:	4604      	mov	r4, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 81c9 	beq.w	8007452 <_dtoa_r+0xb42>
 80070c0:	461a      	mov	r2, r3
 80070c2:	4601      	mov	r1, r0
 80070c4:	4658      	mov	r0, fp
 80070c6:	f000 fc9b 	bl	8007a00 <__pow5mult>
 80070ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070cc:	4604      	mov	r4, r0
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	f300 808f 	bgt.w	80071f2 <_dtoa_r+0x8e2>
 80070d4:	9b02      	ldr	r3, [sp, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f040 8087 	bne.w	80071ea <_dtoa_r+0x8da>
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f040 8083 	bne.w	80071ee <_dtoa_r+0x8de>
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070ee:	0d1b      	lsrs	r3, r3, #20
 80070f0:	051b      	lsls	r3, r3, #20
 80070f2:	b12b      	cbz	r3, 8007100 <_dtoa_r+0x7f0>
 80070f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f6:	f108 0801 	add.w	r8, r8, #1
 80070fa:	3301      	adds	r3, #1
 80070fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070fe:	2301      	movs	r3, #1
 8007100:	930a      	str	r3, [sp, #40]	@ 0x28
 8007102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 81aa 	beq.w	800745e <_dtoa_r+0xb4e>
 800710a:	6923      	ldr	r3, [r4, #16]
 800710c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007110:	6918      	ldr	r0, [r3, #16]
 8007112:	f000 fb6b 	bl	80077ec <__hi0bits>
 8007116:	f1c0 0020 	rsb	r0, r0, #32
 800711a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800711c:	4418      	add	r0, r3
 800711e:	f010 001f 	ands.w	r0, r0, #31
 8007122:	d071      	beq.n	8007208 <_dtoa_r+0x8f8>
 8007124:	f1c0 0320 	rsb	r3, r0, #32
 8007128:	2b04      	cmp	r3, #4
 800712a:	dd65      	ble.n	80071f8 <_dtoa_r+0x8e8>
 800712c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712e:	f1c0 001c 	rsb	r0, r0, #28
 8007132:	4403      	add	r3, r0
 8007134:	4480      	add	r8, r0
 8007136:	4406      	add	r6, r0
 8007138:	9309      	str	r3, [sp, #36]	@ 0x24
 800713a:	f1b8 0f00 	cmp.w	r8, #0
 800713e:	dd05      	ble.n	800714c <_dtoa_r+0x83c>
 8007140:	4649      	mov	r1, r9
 8007142:	4642      	mov	r2, r8
 8007144:	4658      	mov	r0, fp
 8007146:	f000 fcb5 	bl	8007ab4 <__lshift>
 800714a:	4681      	mov	r9, r0
 800714c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800714e:	2b00      	cmp	r3, #0
 8007150:	dd05      	ble.n	800715e <_dtoa_r+0x84e>
 8007152:	4621      	mov	r1, r4
 8007154:	461a      	mov	r2, r3
 8007156:	4658      	mov	r0, fp
 8007158:	f000 fcac 	bl	8007ab4 <__lshift>
 800715c:	4604      	mov	r4, r0
 800715e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007160:	2b00      	cmp	r3, #0
 8007162:	d053      	beq.n	800720c <_dtoa_r+0x8fc>
 8007164:	4621      	mov	r1, r4
 8007166:	4648      	mov	r0, r9
 8007168:	f000 fd10 	bl	8007b8c <__mcmp>
 800716c:	2800      	cmp	r0, #0
 800716e:	da4d      	bge.n	800720c <_dtoa_r+0x8fc>
 8007170:	1e7b      	subs	r3, r7, #1
 8007172:	4649      	mov	r1, r9
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	220a      	movs	r2, #10
 8007178:	2300      	movs	r3, #0
 800717a:	4658      	mov	r0, fp
 800717c:	f000 faf0 	bl	8007760 <__multadd>
 8007180:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007182:	4681      	mov	r9, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 816c 	beq.w	8007462 <_dtoa_r+0xb52>
 800718a:	2300      	movs	r3, #0
 800718c:	4629      	mov	r1, r5
 800718e:	220a      	movs	r2, #10
 8007190:	4658      	mov	r0, fp
 8007192:	f000 fae5 	bl	8007760 <__multadd>
 8007196:	9b08      	ldr	r3, [sp, #32]
 8007198:	4605      	mov	r5, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	dc61      	bgt.n	8007262 <_dtoa_r+0x952>
 800719e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	dc3b      	bgt.n	800721c <_dtoa_r+0x90c>
 80071a4:	e05d      	b.n	8007262 <_dtoa_r+0x952>
 80071a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80071ac:	e746      	b.n	800703c <_dtoa_r+0x72c>
 80071ae:	9b07      	ldr	r3, [sp, #28]
 80071b0:	1e5c      	subs	r4, r3, #1
 80071b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	bfbf      	itttt	lt
 80071b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80071ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80071bc:	1ae3      	sublt	r3, r4, r3
 80071be:	18d2      	addlt	r2, r2, r3
 80071c0:	bfa8      	it	ge
 80071c2:	1b1c      	subge	r4, r3, r4
 80071c4:	9b07      	ldr	r3, [sp, #28]
 80071c6:	bfbe      	ittt	lt
 80071c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80071ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80071cc:	2400      	movlt	r4, #0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfb5      	itete	lt
 80071d2:	eba8 0603 	sublt.w	r6, r8, r3
 80071d6:	4646      	movge	r6, r8
 80071d8:	2300      	movlt	r3, #0
 80071da:	9b07      	ldrge	r3, [sp, #28]
 80071dc:	e730      	b.n	8007040 <_dtoa_r+0x730>
 80071de:	4646      	mov	r6, r8
 80071e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071e4:	e735      	b.n	8007052 <_dtoa_r+0x742>
 80071e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071e8:	e75c      	b.n	80070a4 <_dtoa_r+0x794>
 80071ea:	2300      	movs	r3, #0
 80071ec:	e788      	b.n	8007100 <_dtoa_r+0x7f0>
 80071ee:	9b02      	ldr	r3, [sp, #8]
 80071f0:	e786      	b.n	8007100 <_dtoa_r+0x7f0>
 80071f2:	2300      	movs	r3, #0
 80071f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f6:	e788      	b.n	800710a <_dtoa_r+0x7fa>
 80071f8:	d09f      	beq.n	800713a <_dtoa_r+0x82a>
 80071fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071fc:	331c      	adds	r3, #28
 80071fe:	441a      	add	r2, r3
 8007200:	4498      	add	r8, r3
 8007202:	441e      	add	r6, r3
 8007204:	9209      	str	r2, [sp, #36]	@ 0x24
 8007206:	e798      	b.n	800713a <_dtoa_r+0x82a>
 8007208:	4603      	mov	r3, r0
 800720a:	e7f6      	b.n	80071fa <_dtoa_r+0x8ea>
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	9704      	str	r7, [sp, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	dc20      	bgt.n	8007256 <_dtoa_r+0x946>
 8007214:	9308      	str	r3, [sp, #32]
 8007216:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007218:	2b02      	cmp	r3, #2
 800721a:	dd1e      	ble.n	800725a <_dtoa_r+0x94a>
 800721c:	9b08      	ldr	r3, [sp, #32]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f47f aebc 	bne.w	8006f9c <_dtoa_r+0x68c>
 8007224:	4621      	mov	r1, r4
 8007226:	2205      	movs	r2, #5
 8007228:	4658      	mov	r0, fp
 800722a:	f000 fa99 	bl	8007760 <__multadd>
 800722e:	4601      	mov	r1, r0
 8007230:	4604      	mov	r4, r0
 8007232:	4648      	mov	r0, r9
 8007234:	f000 fcaa 	bl	8007b8c <__mcmp>
 8007238:	2800      	cmp	r0, #0
 800723a:	f77f aeaf 	ble.w	8006f9c <_dtoa_r+0x68c>
 800723e:	2331      	movs	r3, #49	@ 0x31
 8007240:	4656      	mov	r6, sl
 8007242:	f806 3b01 	strb.w	r3, [r6], #1
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	3301      	adds	r3, #1
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	e6aa      	b.n	8006fa4 <_dtoa_r+0x694>
 800724e:	9c07      	ldr	r4, [sp, #28]
 8007250:	9704      	str	r7, [sp, #16]
 8007252:	4625      	mov	r5, r4
 8007254:	e7f3      	b.n	800723e <_dtoa_r+0x92e>
 8007256:	9b07      	ldr	r3, [sp, #28]
 8007258:	9308      	str	r3, [sp, #32]
 800725a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 8104 	beq.w	800746a <_dtoa_r+0xb5a>
 8007262:	2e00      	cmp	r6, #0
 8007264:	dd05      	ble.n	8007272 <_dtoa_r+0x962>
 8007266:	4629      	mov	r1, r5
 8007268:	4632      	mov	r2, r6
 800726a:	4658      	mov	r0, fp
 800726c:	f000 fc22 	bl	8007ab4 <__lshift>
 8007270:	4605      	mov	r5, r0
 8007272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007274:	2b00      	cmp	r3, #0
 8007276:	d05a      	beq.n	800732e <_dtoa_r+0xa1e>
 8007278:	4658      	mov	r0, fp
 800727a:	6869      	ldr	r1, [r5, #4]
 800727c:	f000 fa0e 	bl	800769c <_Balloc>
 8007280:	4606      	mov	r6, r0
 8007282:	b928      	cbnz	r0, 8007290 <_dtoa_r+0x980>
 8007284:	4602      	mov	r2, r0
 8007286:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800728a:	4b83      	ldr	r3, [pc, #524]	@ (8007498 <_dtoa_r+0xb88>)
 800728c:	f7ff bb54 	b.w	8006938 <_dtoa_r+0x28>
 8007290:	692a      	ldr	r2, [r5, #16]
 8007292:	f105 010c 	add.w	r1, r5, #12
 8007296:	3202      	adds	r2, #2
 8007298:	0092      	lsls	r2, r2, #2
 800729a:	300c      	adds	r0, #12
 800729c:	f7ff faa1 	bl	80067e2 <memcpy>
 80072a0:	2201      	movs	r2, #1
 80072a2:	4631      	mov	r1, r6
 80072a4:	4658      	mov	r0, fp
 80072a6:	f000 fc05 	bl	8007ab4 <__lshift>
 80072aa:	462f      	mov	r7, r5
 80072ac:	4605      	mov	r5, r0
 80072ae:	f10a 0301 	add.w	r3, sl, #1
 80072b2:	9307      	str	r3, [sp, #28]
 80072b4:	9b08      	ldr	r3, [sp, #32]
 80072b6:	4453      	add	r3, sl
 80072b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072ba:	9b02      	ldr	r3, [sp, #8]
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072c2:	9b07      	ldr	r3, [sp, #28]
 80072c4:	4621      	mov	r1, r4
 80072c6:	3b01      	subs	r3, #1
 80072c8:	4648      	mov	r0, r9
 80072ca:	9302      	str	r3, [sp, #8]
 80072cc:	f7ff fa97 	bl	80067fe <quorem>
 80072d0:	4639      	mov	r1, r7
 80072d2:	9008      	str	r0, [sp, #32]
 80072d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072d8:	4648      	mov	r0, r9
 80072da:	f000 fc57 	bl	8007b8c <__mcmp>
 80072de:	462a      	mov	r2, r5
 80072e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80072e2:	4621      	mov	r1, r4
 80072e4:	4658      	mov	r0, fp
 80072e6:	f000 fc6d 	bl	8007bc4 <__mdiff>
 80072ea:	68c2      	ldr	r2, [r0, #12]
 80072ec:	4606      	mov	r6, r0
 80072ee:	bb02      	cbnz	r2, 8007332 <_dtoa_r+0xa22>
 80072f0:	4601      	mov	r1, r0
 80072f2:	4648      	mov	r0, r9
 80072f4:	f000 fc4a 	bl	8007b8c <__mcmp>
 80072f8:	4602      	mov	r2, r0
 80072fa:	4631      	mov	r1, r6
 80072fc:	4658      	mov	r0, fp
 80072fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007300:	f000 fa0c 	bl	800771c <_Bfree>
 8007304:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007306:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007308:	9e07      	ldr	r6, [sp, #28]
 800730a:	ea43 0102 	orr.w	r1, r3, r2
 800730e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007310:	4319      	orrs	r1, r3
 8007312:	d110      	bne.n	8007336 <_dtoa_r+0xa26>
 8007314:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007318:	d029      	beq.n	800736e <_dtoa_r+0xa5e>
 800731a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800731c:	2b00      	cmp	r3, #0
 800731e:	dd02      	ble.n	8007326 <_dtoa_r+0xa16>
 8007320:	9b08      	ldr	r3, [sp, #32]
 8007322:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007326:	9b02      	ldr	r3, [sp, #8]
 8007328:	f883 8000 	strb.w	r8, [r3]
 800732c:	e63b      	b.n	8006fa6 <_dtoa_r+0x696>
 800732e:	4628      	mov	r0, r5
 8007330:	e7bb      	b.n	80072aa <_dtoa_r+0x99a>
 8007332:	2201      	movs	r2, #1
 8007334:	e7e1      	b.n	80072fa <_dtoa_r+0x9ea>
 8007336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	db04      	blt.n	8007346 <_dtoa_r+0xa36>
 800733c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800733e:	430b      	orrs	r3, r1
 8007340:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007342:	430b      	orrs	r3, r1
 8007344:	d120      	bne.n	8007388 <_dtoa_r+0xa78>
 8007346:	2a00      	cmp	r2, #0
 8007348:	dded      	ble.n	8007326 <_dtoa_r+0xa16>
 800734a:	4649      	mov	r1, r9
 800734c:	2201      	movs	r2, #1
 800734e:	4658      	mov	r0, fp
 8007350:	f000 fbb0 	bl	8007ab4 <__lshift>
 8007354:	4621      	mov	r1, r4
 8007356:	4681      	mov	r9, r0
 8007358:	f000 fc18 	bl	8007b8c <__mcmp>
 800735c:	2800      	cmp	r0, #0
 800735e:	dc03      	bgt.n	8007368 <_dtoa_r+0xa58>
 8007360:	d1e1      	bne.n	8007326 <_dtoa_r+0xa16>
 8007362:	f018 0f01 	tst.w	r8, #1
 8007366:	d0de      	beq.n	8007326 <_dtoa_r+0xa16>
 8007368:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800736c:	d1d8      	bne.n	8007320 <_dtoa_r+0xa10>
 800736e:	2339      	movs	r3, #57	@ 0x39
 8007370:	9a02      	ldr	r2, [sp, #8]
 8007372:	7013      	strb	r3, [r2, #0]
 8007374:	4633      	mov	r3, r6
 8007376:	461e      	mov	r6, r3
 8007378:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800737c:	3b01      	subs	r3, #1
 800737e:	2a39      	cmp	r2, #57	@ 0x39
 8007380:	d052      	beq.n	8007428 <_dtoa_r+0xb18>
 8007382:	3201      	adds	r2, #1
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	e60e      	b.n	8006fa6 <_dtoa_r+0x696>
 8007388:	2a00      	cmp	r2, #0
 800738a:	dd07      	ble.n	800739c <_dtoa_r+0xa8c>
 800738c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007390:	d0ed      	beq.n	800736e <_dtoa_r+0xa5e>
 8007392:	9a02      	ldr	r2, [sp, #8]
 8007394:	f108 0301 	add.w	r3, r8, #1
 8007398:	7013      	strb	r3, [r2, #0]
 800739a:	e604      	b.n	8006fa6 <_dtoa_r+0x696>
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	9a07      	ldr	r2, [sp, #28]
 80073a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80073a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d028      	beq.n	80073fc <_dtoa_r+0xaec>
 80073aa:	4649      	mov	r1, r9
 80073ac:	2300      	movs	r3, #0
 80073ae:	220a      	movs	r2, #10
 80073b0:	4658      	mov	r0, fp
 80073b2:	f000 f9d5 	bl	8007760 <__multadd>
 80073b6:	42af      	cmp	r7, r5
 80073b8:	4681      	mov	r9, r0
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	f04f 020a 	mov.w	r2, #10
 80073c2:	4639      	mov	r1, r7
 80073c4:	4658      	mov	r0, fp
 80073c6:	d107      	bne.n	80073d8 <_dtoa_r+0xac8>
 80073c8:	f000 f9ca 	bl	8007760 <__multadd>
 80073cc:	4607      	mov	r7, r0
 80073ce:	4605      	mov	r5, r0
 80073d0:	9b07      	ldr	r3, [sp, #28]
 80073d2:	3301      	adds	r3, #1
 80073d4:	9307      	str	r3, [sp, #28]
 80073d6:	e774      	b.n	80072c2 <_dtoa_r+0x9b2>
 80073d8:	f000 f9c2 	bl	8007760 <__multadd>
 80073dc:	4629      	mov	r1, r5
 80073de:	4607      	mov	r7, r0
 80073e0:	2300      	movs	r3, #0
 80073e2:	220a      	movs	r2, #10
 80073e4:	4658      	mov	r0, fp
 80073e6:	f000 f9bb 	bl	8007760 <__multadd>
 80073ea:	4605      	mov	r5, r0
 80073ec:	e7f0      	b.n	80073d0 <_dtoa_r+0xac0>
 80073ee:	9b08      	ldr	r3, [sp, #32]
 80073f0:	2700      	movs	r7, #0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bfcc      	ite	gt
 80073f6:	461e      	movgt	r6, r3
 80073f8:	2601      	movle	r6, #1
 80073fa:	4456      	add	r6, sl
 80073fc:	4649      	mov	r1, r9
 80073fe:	2201      	movs	r2, #1
 8007400:	4658      	mov	r0, fp
 8007402:	f000 fb57 	bl	8007ab4 <__lshift>
 8007406:	4621      	mov	r1, r4
 8007408:	4681      	mov	r9, r0
 800740a:	f000 fbbf 	bl	8007b8c <__mcmp>
 800740e:	2800      	cmp	r0, #0
 8007410:	dcb0      	bgt.n	8007374 <_dtoa_r+0xa64>
 8007412:	d102      	bne.n	800741a <_dtoa_r+0xb0a>
 8007414:	f018 0f01 	tst.w	r8, #1
 8007418:	d1ac      	bne.n	8007374 <_dtoa_r+0xa64>
 800741a:	4633      	mov	r3, r6
 800741c:	461e      	mov	r6, r3
 800741e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007422:	2a30      	cmp	r2, #48	@ 0x30
 8007424:	d0fa      	beq.n	800741c <_dtoa_r+0xb0c>
 8007426:	e5be      	b.n	8006fa6 <_dtoa_r+0x696>
 8007428:	459a      	cmp	sl, r3
 800742a:	d1a4      	bne.n	8007376 <_dtoa_r+0xa66>
 800742c:	9b04      	ldr	r3, [sp, #16]
 800742e:	3301      	adds	r3, #1
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	2331      	movs	r3, #49	@ 0x31
 8007434:	f88a 3000 	strb.w	r3, [sl]
 8007438:	e5b5      	b.n	8006fa6 <_dtoa_r+0x696>
 800743a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800743c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800749c <_dtoa_r+0xb8c>
 8007440:	b11b      	cbz	r3, 800744a <_dtoa_r+0xb3a>
 8007442:	f10a 0308 	add.w	r3, sl, #8
 8007446:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	4650      	mov	r0, sl
 800744c:	b017      	add	sp, #92	@ 0x5c
 800744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007452:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007454:	2b01      	cmp	r3, #1
 8007456:	f77f ae3d 	ble.w	80070d4 <_dtoa_r+0x7c4>
 800745a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800745c:	930a      	str	r3, [sp, #40]	@ 0x28
 800745e:	2001      	movs	r0, #1
 8007460:	e65b      	b.n	800711a <_dtoa_r+0x80a>
 8007462:	9b08      	ldr	r3, [sp, #32]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f77f aed6 	ble.w	8007216 <_dtoa_r+0x906>
 800746a:	4656      	mov	r6, sl
 800746c:	4621      	mov	r1, r4
 800746e:	4648      	mov	r0, r9
 8007470:	f7ff f9c5 	bl	80067fe <quorem>
 8007474:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007478:	9b08      	ldr	r3, [sp, #32]
 800747a:	f806 8b01 	strb.w	r8, [r6], #1
 800747e:	eba6 020a 	sub.w	r2, r6, sl
 8007482:	4293      	cmp	r3, r2
 8007484:	ddb3      	ble.n	80073ee <_dtoa_r+0xade>
 8007486:	4649      	mov	r1, r9
 8007488:	2300      	movs	r3, #0
 800748a:	220a      	movs	r2, #10
 800748c:	4658      	mov	r0, fp
 800748e:	f000 f967 	bl	8007760 <__multadd>
 8007492:	4681      	mov	r9, r0
 8007494:	e7ea      	b.n	800746c <_dtoa_r+0xb5c>
 8007496:	bf00      	nop
 8007498:	08009280 	.word	0x08009280
 800749c:	08009204 	.word	0x08009204

080074a0 <_free_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4605      	mov	r5, r0
 80074a4:	2900      	cmp	r1, #0
 80074a6:	d040      	beq.n	800752a <_free_r+0x8a>
 80074a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ac:	1f0c      	subs	r4, r1, #4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfb8      	it	lt
 80074b2:	18e4      	addlt	r4, r4, r3
 80074b4:	f000 f8e6 	bl	8007684 <__malloc_lock>
 80074b8:	4a1c      	ldr	r2, [pc, #112]	@ (800752c <_free_r+0x8c>)
 80074ba:	6813      	ldr	r3, [r2, #0]
 80074bc:	b933      	cbnz	r3, 80074cc <_free_r+0x2c>
 80074be:	6063      	str	r3, [r4, #4]
 80074c0:	6014      	str	r4, [r2, #0]
 80074c2:	4628      	mov	r0, r5
 80074c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074c8:	f000 b8e2 	b.w	8007690 <__malloc_unlock>
 80074cc:	42a3      	cmp	r3, r4
 80074ce:	d908      	bls.n	80074e2 <_free_r+0x42>
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	1821      	adds	r1, r4, r0
 80074d4:	428b      	cmp	r3, r1
 80074d6:	bf01      	itttt	eq
 80074d8:	6819      	ldreq	r1, [r3, #0]
 80074da:	685b      	ldreq	r3, [r3, #4]
 80074dc:	1809      	addeq	r1, r1, r0
 80074de:	6021      	streq	r1, [r4, #0]
 80074e0:	e7ed      	b.n	80074be <_free_r+0x1e>
 80074e2:	461a      	mov	r2, r3
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	b10b      	cbz	r3, 80074ec <_free_r+0x4c>
 80074e8:	42a3      	cmp	r3, r4
 80074ea:	d9fa      	bls.n	80074e2 <_free_r+0x42>
 80074ec:	6811      	ldr	r1, [r2, #0]
 80074ee:	1850      	adds	r0, r2, r1
 80074f0:	42a0      	cmp	r0, r4
 80074f2:	d10b      	bne.n	800750c <_free_r+0x6c>
 80074f4:	6820      	ldr	r0, [r4, #0]
 80074f6:	4401      	add	r1, r0
 80074f8:	1850      	adds	r0, r2, r1
 80074fa:	4283      	cmp	r3, r0
 80074fc:	6011      	str	r1, [r2, #0]
 80074fe:	d1e0      	bne.n	80074c2 <_free_r+0x22>
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	4408      	add	r0, r1
 8007506:	6010      	str	r0, [r2, #0]
 8007508:	6053      	str	r3, [r2, #4]
 800750a:	e7da      	b.n	80074c2 <_free_r+0x22>
 800750c:	d902      	bls.n	8007514 <_free_r+0x74>
 800750e:	230c      	movs	r3, #12
 8007510:	602b      	str	r3, [r5, #0]
 8007512:	e7d6      	b.n	80074c2 <_free_r+0x22>
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	1821      	adds	r1, r4, r0
 8007518:	428b      	cmp	r3, r1
 800751a:	bf01      	itttt	eq
 800751c:	6819      	ldreq	r1, [r3, #0]
 800751e:	685b      	ldreq	r3, [r3, #4]
 8007520:	1809      	addeq	r1, r1, r0
 8007522:	6021      	streq	r1, [r4, #0]
 8007524:	6063      	str	r3, [r4, #4]
 8007526:	6054      	str	r4, [r2, #4]
 8007528:	e7cb      	b.n	80074c2 <_free_r+0x22>
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	2000097c 	.word	0x2000097c

08007530 <malloc>:
 8007530:	4b02      	ldr	r3, [pc, #8]	@ (800753c <malloc+0xc>)
 8007532:	4601      	mov	r1, r0
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	f000 b825 	b.w	8007584 <_malloc_r>
 800753a:	bf00      	nop
 800753c:	20000020 	.word	0x20000020

08007540 <sbrk_aligned>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	4e0f      	ldr	r6, [pc, #60]	@ (8007580 <sbrk_aligned+0x40>)
 8007544:	460c      	mov	r4, r1
 8007546:	6831      	ldr	r1, [r6, #0]
 8007548:	4605      	mov	r5, r0
 800754a:	b911      	cbnz	r1, 8007552 <sbrk_aligned+0x12>
 800754c:	f001 f9c8 	bl	80088e0 <_sbrk_r>
 8007550:	6030      	str	r0, [r6, #0]
 8007552:	4621      	mov	r1, r4
 8007554:	4628      	mov	r0, r5
 8007556:	f001 f9c3 	bl	80088e0 <_sbrk_r>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	d103      	bne.n	8007566 <sbrk_aligned+0x26>
 800755e:	f04f 34ff 	mov.w	r4, #4294967295
 8007562:	4620      	mov	r0, r4
 8007564:	bd70      	pop	{r4, r5, r6, pc}
 8007566:	1cc4      	adds	r4, r0, #3
 8007568:	f024 0403 	bic.w	r4, r4, #3
 800756c:	42a0      	cmp	r0, r4
 800756e:	d0f8      	beq.n	8007562 <sbrk_aligned+0x22>
 8007570:	1a21      	subs	r1, r4, r0
 8007572:	4628      	mov	r0, r5
 8007574:	f001 f9b4 	bl	80088e0 <_sbrk_r>
 8007578:	3001      	adds	r0, #1
 800757a:	d1f2      	bne.n	8007562 <sbrk_aligned+0x22>
 800757c:	e7ef      	b.n	800755e <sbrk_aligned+0x1e>
 800757e:	bf00      	nop
 8007580:	20000978 	.word	0x20000978

08007584 <_malloc_r>:
 8007584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007588:	1ccd      	adds	r5, r1, #3
 800758a:	f025 0503 	bic.w	r5, r5, #3
 800758e:	3508      	adds	r5, #8
 8007590:	2d0c      	cmp	r5, #12
 8007592:	bf38      	it	cc
 8007594:	250c      	movcc	r5, #12
 8007596:	2d00      	cmp	r5, #0
 8007598:	4606      	mov	r6, r0
 800759a:	db01      	blt.n	80075a0 <_malloc_r+0x1c>
 800759c:	42a9      	cmp	r1, r5
 800759e:	d904      	bls.n	80075aa <_malloc_r+0x26>
 80075a0:	230c      	movs	r3, #12
 80075a2:	6033      	str	r3, [r6, #0]
 80075a4:	2000      	movs	r0, #0
 80075a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007680 <_malloc_r+0xfc>
 80075ae:	f000 f869 	bl	8007684 <__malloc_lock>
 80075b2:	f8d8 3000 	ldr.w	r3, [r8]
 80075b6:	461c      	mov	r4, r3
 80075b8:	bb44      	cbnz	r4, 800760c <_malloc_r+0x88>
 80075ba:	4629      	mov	r1, r5
 80075bc:	4630      	mov	r0, r6
 80075be:	f7ff ffbf 	bl	8007540 <sbrk_aligned>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	4604      	mov	r4, r0
 80075c6:	d158      	bne.n	800767a <_malloc_r+0xf6>
 80075c8:	f8d8 4000 	ldr.w	r4, [r8]
 80075cc:	4627      	mov	r7, r4
 80075ce:	2f00      	cmp	r7, #0
 80075d0:	d143      	bne.n	800765a <_malloc_r+0xd6>
 80075d2:	2c00      	cmp	r4, #0
 80075d4:	d04b      	beq.n	800766e <_malloc_r+0xea>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	4639      	mov	r1, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	eb04 0903 	add.w	r9, r4, r3
 80075e0:	f001 f97e 	bl	80088e0 <_sbrk_r>
 80075e4:	4581      	cmp	r9, r0
 80075e6:	d142      	bne.n	800766e <_malloc_r+0xea>
 80075e8:	6821      	ldr	r1, [r4, #0]
 80075ea:	4630      	mov	r0, r6
 80075ec:	1a6d      	subs	r5, r5, r1
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7ff ffa6 	bl	8007540 <sbrk_aligned>
 80075f4:	3001      	adds	r0, #1
 80075f6:	d03a      	beq.n	800766e <_malloc_r+0xea>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	442b      	add	r3, r5
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	bb62      	cbnz	r2, 8007660 <_malloc_r+0xdc>
 8007606:	f8c8 7000 	str.w	r7, [r8]
 800760a:	e00f      	b.n	800762c <_malloc_r+0xa8>
 800760c:	6822      	ldr	r2, [r4, #0]
 800760e:	1b52      	subs	r2, r2, r5
 8007610:	d420      	bmi.n	8007654 <_malloc_r+0xd0>
 8007612:	2a0b      	cmp	r2, #11
 8007614:	d917      	bls.n	8007646 <_malloc_r+0xc2>
 8007616:	1961      	adds	r1, r4, r5
 8007618:	42a3      	cmp	r3, r4
 800761a:	6025      	str	r5, [r4, #0]
 800761c:	bf18      	it	ne
 800761e:	6059      	strne	r1, [r3, #4]
 8007620:	6863      	ldr	r3, [r4, #4]
 8007622:	bf08      	it	eq
 8007624:	f8c8 1000 	streq.w	r1, [r8]
 8007628:	5162      	str	r2, [r4, r5]
 800762a:	604b      	str	r3, [r1, #4]
 800762c:	4630      	mov	r0, r6
 800762e:	f000 f82f 	bl	8007690 <__malloc_unlock>
 8007632:	f104 000b 	add.w	r0, r4, #11
 8007636:	1d23      	adds	r3, r4, #4
 8007638:	f020 0007 	bic.w	r0, r0, #7
 800763c:	1ac2      	subs	r2, r0, r3
 800763e:	bf1c      	itt	ne
 8007640:	1a1b      	subne	r3, r3, r0
 8007642:	50a3      	strne	r3, [r4, r2]
 8007644:	e7af      	b.n	80075a6 <_malloc_r+0x22>
 8007646:	6862      	ldr	r2, [r4, #4]
 8007648:	42a3      	cmp	r3, r4
 800764a:	bf0c      	ite	eq
 800764c:	f8c8 2000 	streq.w	r2, [r8]
 8007650:	605a      	strne	r2, [r3, #4]
 8007652:	e7eb      	b.n	800762c <_malloc_r+0xa8>
 8007654:	4623      	mov	r3, r4
 8007656:	6864      	ldr	r4, [r4, #4]
 8007658:	e7ae      	b.n	80075b8 <_malloc_r+0x34>
 800765a:	463c      	mov	r4, r7
 800765c:	687f      	ldr	r7, [r7, #4]
 800765e:	e7b6      	b.n	80075ce <_malloc_r+0x4a>
 8007660:	461a      	mov	r2, r3
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	42a3      	cmp	r3, r4
 8007666:	d1fb      	bne.n	8007660 <_malloc_r+0xdc>
 8007668:	2300      	movs	r3, #0
 800766a:	6053      	str	r3, [r2, #4]
 800766c:	e7de      	b.n	800762c <_malloc_r+0xa8>
 800766e:	230c      	movs	r3, #12
 8007670:	4630      	mov	r0, r6
 8007672:	6033      	str	r3, [r6, #0]
 8007674:	f000 f80c 	bl	8007690 <__malloc_unlock>
 8007678:	e794      	b.n	80075a4 <_malloc_r+0x20>
 800767a:	6005      	str	r5, [r0, #0]
 800767c:	e7d6      	b.n	800762c <_malloc_r+0xa8>
 800767e:	bf00      	nop
 8007680:	2000097c 	.word	0x2000097c

08007684 <__malloc_lock>:
 8007684:	4801      	ldr	r0, [pc, #4]	@ (800768c <__malloc_lock+0x8>)
 8007686:	f7ff b89c 	b.w	80067c2 <__retarget_lock_acquire_recursive>
 800768a:	bf00      	nop
 800768c:	20000974 	.word	0x20000974

08007690 <__malloc_unlock>:
 8007690:	4801      	ldr	r0, [pc, #4]	@ (8007698 <__malloc_unlock+0x8>)
 8007692:	f7ff b897 	b.w	80067c4 <__retarget_lock_release_recursive>
 8007696:	bf00      	nop
 8007698:	20000974 	.word	0x20000974

0800769c <_Balloc>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	69c6      	ldr	r6, [r0, #28]
 80076a0:	4604      	mov	r4, r0
 80076a2:	460d      	mov	r5, r1
 80076a4:	b976      	cbnz	r6, 80076c4 <_Balloc+0x28>
 80076a6:	2010      	movs	r0, #16
 80076a8:	f7ff ff42 	bl	8007530 <malloc>
 80076ac:	4602      	mov	r2, r0
 80076ae:	61e0      	str	r0, [r4, #28]
 80076b0:	b920      	cbnz	r0, 80076bc <_Balloc+0x20>
 80076b2:	216b      	movs	r1, #107	@ 0x6b
 80076b4:	4b17      	ldr	r3, [pc, #92]	@ (8007714 <_Balloc+0x78>)
 80076b6:	4818      	ldr	r0, [pc, #96]	@ (8007718 <_Balloc+0x7c>)
 80076b8:	f001 f922 	bl	8008900 <__assert_func>
 80076bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076c0:	6006      	str	r6, [r0, #0]
 80076c2:	60c6      	str	r6, [r0, #12]
 80076c4:	69e6      	ldr	r6, [r4, #28]
 80076c6:	68f3      	ldr	r3, [r6, #12]
 80076c8:	b183      	cbz	r3, 80076ec <_Balloc+0x50>
 80076ca:	69e3      	ldr	r3, [r4, #28]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076d2:	b9b8      	cbnz	r0, 8007704 <_Balloc+0x68>
 80076d4:	2101      	movs	r1, #1
 80076d6:	fa01 f605 	lsl.w	r6, r1, r5
 80076da:	1d72      	adds	r2, r6, #5
 80076dc:	4620      	mov	r0, r4
 80076de:	0092      	lsls	r2, r2, #2
 80076e0:	f001 f92c 	bl	800893c <_calloc_r>
 80076e4:	b160      	cbz	r0, 8007700 <_Balloc+0x64>
 80076e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076ea:	e00e      	b.n	800770a <_Balloc+0x6e>
 80076ec:	2221      	movs	r2, #33	@ 0x21
 80076ee:	2104      	movs	r1, #4
 80076f0:	4620      	mov	r0, r4
 80076f2:	f001 f923 	bl	800893c <_calloc_r>
 80076f6:	69e3      	ldr	r3, [r4, #28]
 80076f8:	60f0      	str	r0, [r6, #12]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e4      	bne.n	80076ca <_Balloc+0x2e>
 8007700:	2000      	movs	r0, #0
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	6802      	ldr	r2, [r0, #0]
 8007706:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800770a:	2300      	movs	r3, #0
 800770c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007710:	e7f7      	b.n	8007702 <_Balloc+0x66>
 8007712:	bf00      	nop
 8007714:	08009211 	.word	0x08009211
 8007718:	08009291 	.word	0x08009291

0800771c <_Bfree>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	69c6      	ldr	r6, [r0, #28]
 8007720:	4605      	mov	r5, r0
 8007722:	460c      	mov	r4, r1
 8007724:	b976      	cbnz	r6, 8007744 <_Bfree+0x28>
 8007726:	2010      	movs	r0, #16
 8007728:	f7ff ff02 	bl	8007530 <malloc>
 800772c:	4602      	mov	r2, r0
 800772e:	61e8      	str	r0, [r5, #28]
 8007730:	b920      	cbnz	r0, 800773c <_Bfree+0x20>
 8007732:	218f      	movs	r1, #143	@ 0x8f
 8007734:	4b08      	ldr	r3, [pc, #32]	@ (8007758 <_Bfree+0x3c>)
 8007736:	4809      	ldr	r0, [pc, #36]	@ (800775c <_Bfree+0x40>)
 8007738:	f001 f8e2 	bl	8008900 <__assert_func>
 800773c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007740:	6006      	str	r6, [r0, #0]
 8007742:	60c6      	str	r6, [r0, #12]
 8007744:	b13c      	cbz	r4, 8007756 <_Bfree+0x3a>
 8007746:	69eb      	ldr	r3, [r5, #28]
 8007748:	6862      	ldr	r2, [r4, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007750:	6021      	str	r1, [r4, #0]
 8007752:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	08009211 	.word	0x08009211
 800775c:	08009291 	.word	0x08009291

08007760 <__multadd>:
 8007760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007764:	4607      	mov	r7, r0
 8007766:	460c      	mov	r4, r1
 8007768:	461e      	mov	r6, r3
 800776a:	2000      	movs	r0, #0
 800776c:	690d      	ldr	r5, [r1, #16]
 800776e:	f101 0c14 	add.w	ip, r1, #20
 8007772:	f8dc 3000 	ldr.w	r3, [ip]
 8007776:	3001      	adds	r0, #1
 8007778:	b299      	uxth	r1, r3
 800777a:	fb02 6101 	mla	r1, r2, r1, r6
 800777e:	0c1e      	lsrs	r6, r3, #16
 8007780:	0c0b      	lsrs	r3, r1, #16
 8007782:	fb02 3306 	mla	r3, r2, r6, r3
 8007786:	b289      	uxth	r1, r1
 8007788:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800778c:	4285      	cmp	r5, r0
 800778e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007792:	f84c 1b04 	str.w	r1, [ip], #4
 8007796:	dcec      	bgt.n	8007772 <__multadd+0x12>
 8007798:	b30e      	cbz	r6, 80077de <__multadd+0x7e>
 800779a:	68a3      	ldr	r3, [r4, #8]
 800779c:	42ab      	cmp	r3, r5
 800779e:	dc19      	bgt.n	80077d4 <__multadd+0x74>
 80077a0:	6861      	ldr	r1, [r4, #4]
 80077a2:	4638      	mov	r0, r7
 80077a4:	3101      	adds	r1, #1
 80077a6:	f7ff ff79 	bl	800769c <_Balloc>
 80077aa:	4680      	mov	r8, r0
 80077ac:	b928      	cbnz	r0, 80077ba <__multadd+0x5a>
 80077ae:	4602      	mov	r2, r0
 80077b0:	21ba      	movs	r1, #186	@ 0xba
 80077b2:	4b0c      	ldr	r3, [pc, #48]	@ (80077e4 <__multadd+0x84>)
 80077b4:	480c      	ldr	r0, [pc, #48]	@ (80077e8 <__multadd+0x88>)
 80077b6:	f001 f8a3 	bl	8008900 <__assert_func>
 80077ba:	6922      	ldr	r2, [r4, #16]
 80077bc:	f104 010c 	add.w	r1, r4, #12
 80077c0:	3202      	adds	r2, #2
 80077c2:	0092      	lsls	r2, r2, #2
 80077c4:	300c      	adds	r0, #12
 80077c6:	f7ff f80c 	bl	80067e2 <memcpy>
 80077ca:	4621      	mov	r1, r4
 80077cc:	4638      	mov	r0, r7
 80077ce:	f7ff ffa5 	bl	800771c <_Bfree>
 80077d2:	4644      	mov	r4, r8
 80077d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077d8:	3501      	adds	r5, #1
 80077da:	615e      	str	r6, [r3, #20]
 80077dc:	6125      	str	r5, [r4, #16]
 80077de:	4620      	mov	r0, r4
 80077e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e4:	08009280 	.word	0x08009280
 80077e8:	08009291 	.word	0x08009291

080077ec <__hi0bits>:
 80077ec:	4603      	mov	r3, r0
 80077ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077f2:	bf3a      	itte	cc
 80077f4:	0403      	lslcc	r3, r0, #16
 80077f6:	2010      	movcc	r0, #16
 80077f8:	2000      	movcs	r0, #0
 80077fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077fe:	bf3c      	itt	cc
 8007800:	021b      	lslcc	r3, r3, #8
 8007802:	3008      	addcc	r0, #8
 8007804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007808:	bf3c      	itt	cc
 800780a:	011b      	lslcc	r3, r3, #4
 800780c:	3004      	addcc	r0, #4
 800780e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007812:	bf3c      	itt	cc
 8007814:	009b      	lslcc	r3, r3, #2
 8007816:	3002      	addcc	r0, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	db05      	blt.n	8007828 <__hi0bits+0x3c>
 800781c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007820:	f100 0001 	add.w	r0, r0, #1
 8007824:	bf08      	it	eq
 8007826:	2020      	moveq	r0, #32
 8007828:	4770      	bx	lr

0800782a <__lo0bits>:
 800782a:	6803      	ldr	r3, [r0, #0]
 800782c:	4602      	mov	r2, r0
 800782e:	f013 0007 	ands.w	r0, r3, #7
 8007832:	d00b      	beq.n	800784c <__lo0bits+0x22>
 8007834:	07d9      	lsls	r1, r3, #31
 8007836:	d421      	bmi.n	800787c <__lo0bits+0x52>
 8007838:	0798      	lsls	r0, r3, #30
 800783a:	bf49      	itett	mi
 800783c:	085b      	lsrmi	r3, r3, #1
 800783e:	089b      	lsrpl	r3, r3, #2
 8007840:	2001      	movmi	r0, #1
 8007842:	6013      	strmi	r3, [r2, #0]
 8007844:	bf5c      	itt	pl
 8007846:	2002      	movpl	r0, #2
 8007848:	6013      	strpl	r3, [r2, #0]
 800784a:	4770      	bx	lr
 800784c:	b299      	uxth	r1, r3
 800784e:	b909      	cbnz	r1, 8007854 <__lo0bits+0x2a>
 8007850:	2010      	movs	r0, #16
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	b2d9      	uxtb	r1, r3
 8007856:	b909      	cbnz	r1, 800785c <__lo0bits+0x32>
 8007858:	3008      	adds	r0, #8
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	0719      	lsls	r1, r3, #28
 800785e:	bf04      	itt	eq
 8007860:	091b      	lsreq	r3, r3, #4
 8007862:	3004      	addeq	r0, #4
 8007864:	0799      	lsls	r1, r3, #30
 8007866:	bf04      	itt	eq
 8007868:	089b      	lsreq	r3, r3, #2
 800786a:	3002      	addeq	r0, #2
 800786c:	07d9      	lsls	r1, r3, #31
 800786e:	d403      	bmi.n	8007878 <__lo0bits+0x4e>
 8007870:	085b      	lsrs	r3, r3, #1
 8007872:	f100 0001 	add.w	r0, r0, #1
 8007876:	d003      	beq.n	8007880 <__lo0bits+0x56>
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	4770      	bx	lr
 800787c:	2000      	movs	r0, #0
 800787e:	4770      	bx	lr
 8007880:	2020      	movs	r0, #32
 8007882:	4770      	bx	lr

08007884 <__i2b>:
 8007884:	b510      	push	{r4, lr}
 8007886:	460c      	mov	r4, r1
 8007888:	2101      	movs	r1, #1
 800788a:	f7ff ff07 	bl	800769c <_Balloc>
 800788e:	4602      	mov	r2, r0
 8007890:	b928      	cbnz	r0, 800789e <__i2b+0x1a>
 8007892:	f240 1145 	movw	r1, #325	@ 0x145
 8007896:	4b04      	ldr	r3, [pc, #16]	@ (80078a8 <__i2b+0x24>)
 8007898:	4804      	ldr	r0, [pc, #16]	@ (80078ac <__i2b+0x28>)
 800789a:	f001 f831 	bl	8008900 <__assert_func>
 800789e:	2301      	movs	r3, #1
 80078a0:	6144      	str	r4, [r0, #20]
 80078a2:	6103      	str	r3, [r0, #16]
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	bf00      	nop
 80078a8:	08009280 	.word	0x08009280
 80078ac:	08009291 	.word	0x08009291

080078b0 <__multiply>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	4614      	mov	r4, r2
 80078b6:	690a      	ldr	r2, [r1, #16]
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	460f      	mov	r7, r1
 80078bc:	429a      	cmp	r2, r3
 80078be:	bfa2      	ittt	ge
 80078c0:	4623      	movge	r3, r4
 80078c2:	460c      	movge	r4, r1
 80078c4:	461f      	movge	r7, r3
 80078c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80078ca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80078ce:	68a3      	ldr	r3, [r4, #8]
 80078d0:	6861      	ldr	r1, [r4, #4]
 80078d2:	eb0a 0609 	add.w	r6, sl, r9
 80078d6:	42b3      	cmp	r3, r6
 80078d8:	b085      	sub	sp, #20
 80078da:	bfb8      	it	lt
 80078dc:	3101      	addlt	r1, #1
 80078de:	f7ff fedd 	bl	800769c <_Balloc>
 80078e2:	b930      	cbnz	r0, 80078f2 <__multiply+0x42>
 80078e4:	4602      	mov	r2, r0
 80078e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078ea:	4b43      	ldr	r3, [pc, #268]	@ (80079f8 <__multiply+0x148>)
 80078ec:	4843      	ldr	r0, [pc, #268]	@ (80079fc <__multiply+0x14c>)
 80078ee:	f001 f807 	bl	8008900 <__assert_func>
 80078f2:	f100 0514 	add.w	r5, r0, #20
 80078f6:	462b      	mov	r3, r5
 80078f8:	2200      	movs	r2, #0
 80078fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078fe:	4543      	cmp	r3, r8
 8007900:	d321      	bcc.n	8007946 <__multiply+0x96>
 8007902:	f107 0114 	add.w	r1, r7, #20
 8007906:	f104 0214 	add.w	r2, r4, #20
 800790a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800790e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007912:	9302      	str	r3, [sp, #8]
 8007914:	1b13      	subs	r3, r2, r4
 8007916:	3b15      	subs	r3, #21
 8007918:	f023 0303 	bic.w	r3, r3, #3
 800791c:	3304      	adds	r3, #4
 800791e:	f104 0715 	add.w	r7, r4, #21
 8007922:	42ba      	cmp	r2, r7
 8007924:	bf38      	it	cc
 8007926:	2304      	movcc	r3, #4
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	9b02      	ldr	r3, [sp, #8]
 800792c:	9103      	str	r1, [sp, #12]
 800792e:	428b      	cmp	r3, r1
 8007930:	d80c      	bhi.n	800794c <__multiply+0x9c>
 8007932:	2e00      	cmp	r6, #0
 8007934:	dd03      	ble.n	800793e <__multiply+0x8e>
 8007936:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800793a:	2b00      	cmp	r3, #0
 800793c:	d05a      	beq.n	80079f4 <__multiply+0x144>
 800793e:	6106      	str	r6, [r0, #16]
 8007940:	b005      	add	sp, #20
 8007942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007946:	f843 2b04 	str.w	r2, [r3], #4
 800794a:	e7d8      	b.n	80078fe <__multiply+0x4e>
 800794c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007950:	f1ba 0f00 	cmp.w	sl, #0
 8007954:	d023      	beq.n	800799e <__multiply+0xee>
 8007956:	46a9      	mov	r9, r5
 8007958:	f04f 0c00 	mov.w	ip, #0
 800795c:	f104 0e14 	add.w	lr, r4, #20
 8007960:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007964:	f8d9 3000 	ldr.w	r3, [r9]
 8007968:	fa1f fb87 	uxth.w	fp, r7
 800796c:	b29b      	uxth	r3, r3
 800796e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007972:	4463      	add	r3, ip
 8007974:	f8d9 c000 	ldr.w	ip, [r9]
 8007978:	0c3f      	lsrs	r7, r7, #16
 800797a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800797e:	fb0a c707 	mla	r7, sl, r7, ip
 8007982:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007986:	b29b      	uxth	r3, r3
 8007988:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800798c:	4572      	cmp	r2, lr
 800798e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007992:	f849 3b04 	str.w	r3, [r9], #4
 8007996:	d8e3      	bhi.n	8007960 <__multiply+0xb0>
 8007998:	9b01      	ldr	r3, [sp, #4]
 800799a:	f845 c003 	str.w	ip, [r5, r3]
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	3104      	adds	r1, #4
 80079a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079a6:	f1b9 0f00 	cmp.w	r9, #0
 80079aa:	d021      	beq.n	80079f0 <__multiply+0x140>
 80079ac:	46ae      	mov	lr, r5
 80079ae:	f04f 0a00 	mov.w	sl, #0
 80079b2:	682b      	ldr	r3, [r5, #0]
 80079b4:	f104 0c14 	add.w	ip, r4, #20
 80079b8:	f8bc b000 	ldrh.w	fp, [ip]
 80079bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	fb09 770b 	mla	r7, r9, fp, r7
 80079c6:	4457      	add	r7, sl
 80079c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079cc:	f84e 3b04 	str.w	r3, [lr], #4
 80079d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079d8:	f8be 3000 	ldrh.w	r3, [lr]
 80079dc:	4562      	cmp	r2, ip
 80079de:	fb09 330a 	mla	r3, r9, sl, r3
 80079e2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80079e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079ea:	d8e5      	bhi.n	80079b8 <__multiply+0x108>
 80079ec:	9f01      	ldr	r7, [sp, #4]
 80079ee:	51eb      	str	r3, [r5, r7]
 80079f0:	3504      	adds	r5, #4
 80079f2:	e79a      	b.n	800792a <__multiply+0x7a>
 80079f4:	3e01      	subs	r6, #1
 80079f6:	e79c      	b.n	8007932 <__multiply+0x82>
 80079f8:	08009280 	.word	0x08009280
 80079fc:	08009291 	.word	0x08009291

08007a00 <__pow5mult>:
 8007a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a04:	4615      	mov	r5, r2
 8007a06:	f012 0203 	ands.w	r2, r2, #3
 8007a0a:	4607      	mov	r7, r0
 8007a0c:	460e      	mov	r6, r1
 8007a0e:	d007      	beq.n	8007a20 <__pow5mult+0x20>
 8007a10:	4c25      	ldr	r4, [pc, #148]	@ (8007aa8 <__pow5mult+0xa8>)
 8007a12:	3a01      	subs	r2, #1
 8007a14:	2300      	movs	r3, #0
 8007a16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a1a:	f7ff fea1 	bl	8007760 <__multadd>
 8007a1e:	4606      	mov	r6, r0
 8007a20:	10ad      	asrs	r5, r5, #2
 8007a22:	d03d      	beq.n	8007aa0 <__pow5mult+0xa0>
 8007a24:	69fc      	ldr	r4, [r7, #28]
 8007a26:	b97c      	cbnz	r4, 8007a48 <__pow5mult+0x48>
 8007a28:	2010      	movs	r0, #16
 8007a2a:	f7ff fd81 	bl	8007530 <malloc>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	61f8      	str	r0, [r7, #28]
 8007a32:	b928      	cbnz	r0, 8007a40 <__pow5mult+0x40>
 8007a34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a38:	4b1c      	ldr	r3, [pc, #112]	@ (8007aac <__pow5mult+0xac>)
 8007a3a:	481d      	ldr	r0, [pc, #116]	@ (8007ab0 <__pow5mult+0xb0>)
 8007a3c:	f000 ff60 	bl	8008900 <__assert_func>
 8007a40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a44:	6004      	str	r4, [r0, #0]
 8007a46:	60c4      	str	r4, [r0, #12]
 8007a48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a50:	b94c      	cbnz	r4, 8007a66 <__pow5mult+0x66>
 8007a52:	f240 2171 	movw	r1, #625	@ 0x271
 8007a56:	4638      	mov	r0, r7
 8007a58:	f7ff ff14 	bl	8007884 <__i2b>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	4604      	mov	r4, r0
 8007a60:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a64:	6003      	str	r3, [r0, #0]
 8007a66:	f04f 0900 	mov.w	r9, #0
 8007a6a:	07eb      	lsls	r3, r5, #31
 8007a6c:	d50a      	bpl.n	8007a84 <__pow5mult+0x84>
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4622      	mov	r2, r4
 8007a72:	4638      	mov	r0, r7
 8007a74:	f7ff ff1c 	bl	80078b0 <__multiply>
 8007a78:	4680      	mov	r8, r0
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	f7ff fe4d 	bl	800771c <_Bfree>
 8007a82:	4646      	mov	r6, r8
 8007a84:	106d      	asrs	r5, r5, #1
 8007a86:	d00b      	beq.n	8007aa0 <__pow5mult+0xa0>
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	b938      	cbnz	r0, 8007a9c <__pow5mult+0x9c>
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	4621      	mov	r1, r4
 8007a90:	4638      	mov	r0, r7
 8007a92:	f7ff ff0d 	bl	80078b0 <__multiply>
 8007a96:	6020      	str	r0, [r4, #0]
 8007a98:	f8c0 9000 	str.w	r9, [r0]
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	e7e4      	b.n	8007a6a <__pow5mult+0x6a>
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa6:	bf00      	nop
 8007aa8:	080092ec 	.word	0x080092ec
 8007aac:	08009211 	.word	0x08009211
 8007ab0:	08009291 	.word	0x08009291

08007ab4 <__lshift>:
 8007ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	460c      	mov	r4, r1
 8007aba:	4607      	mov	r7, r0
 8007abc:	4691      	mov	r9, r2
 8007abe:	6923      	ldr	r3, [r4, #16]
 8007ac0:	6849      	ldr	r1, [r1, #4]
 8007ac2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007acc:	f108 0601 	add.w	r6, r8, #1
 8007ad0:	42b3      	cmp	r3, r6
 8007ad2:	db0b      	blt.n	8007aec <__lshift+0x38>
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	f7ff fde1 	bl	800769c <_Balloc>
 8007ada:	4605      	mov	r5, r0
 8007adc:	b948      	cbnz	r0, 8007af2 <__lshift+0x3e>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ae4:	4b27      	ldr	r3, [pc, #156]	@ (8007b84 <__lshift+0xd0>)
 8007ae6:	4828      	ldr	r0, [pc, #160]	@ (8007b88 <__lshift+0xd4>)
 8007ae8:	f000 ff0a 	bl	8008900 <__assert_func>
 8007aec:	3101      	adds	r1, #1
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	e7ee      	b.n	8007ad0 <__lshift+0x1c>
 8007af2:	2300      	movs	r3, #0
 8007af4:	f100 0114 	add.w	r1, r0, #20
 8007af8:	f100 0210 	add.w	r2, r0, #16
 8007afc:	4618      	mov	r0, r3
 8007afe:	4553      	cmp	r3, sl
 8007b00:	db33      	blt.n	8007b6a <__lshift+0xb6>
 8007b02:	6920      	ldr	r0, [r4, #16]
 8007b04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b08:	f104 0314 	add.w	r3, r4, #20
 8007b0c:	f019 091f 	ands.w	r9, r9, #31
 8007b10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b18:	d02b      	beq.n	8007b72 <__lshift+0xbe>
 8007b1a:	468a      	mov	sl, r1
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f1c9 0e20 	rsb	lr, r9, #32
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	fa00 f009 	lsl.w	r0, r0, r9
 8007b28:	4310      	orrs	r0, r2
 8007b2a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b32:	459c      	cmp	ip, r3
 8007b34:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b38:	d8f3      	bhi.n	8007b22 <__lshift+0x6e>
 8007b3a:	ebac 0304 	sub.w	r3, ip, r4
 8007b3e:	3b15      	subs	r3, #21
 8007b40:	f023 0303 	bic.w	r3, r3, #3
 8007b44:	3304      	adds	r3, #4
 8007b46:	f104 0015 	add.w	r0, r4, #21
 8007b4a:	4584      	cmp	ip, r0
 8007b4c:	bf38      	it	cc
 8007b4e:	2304      	movcc	r3, #4
 8007b50:	50ca      	str	r2, [r1, r3]
 8007b52:	b10a      	cbz	r2, 8007b58 <__lshift+0xa4>
 8007b54:	f108 0602 	add.w	r6, r8, #2
 8007b58:	3e01      	subs	r6, #1
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	612e      	str	r6, [r5, #16]
 8007b60:	f7ff fddc 	bl	800771c <_Bfree>
 8007b64:	4628      	mov	r0, r5
 8007b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b6e:	3301      	adds	r3, #1
 8007b70:	e7c5      	b.n	8007afe <__lshift+0x4a>
 8007b72:	3904      	subs	r1, #4
 8007b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b78:	459c      	cmp	ip, r3
 8007b7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b7e:	d8f9      	bhi.n	8007b74 <__lshift+0xc0>
 8007b80:	e7ea      	b.n	8007b58 <__lshift+0xa4>
 8007b82:	bf00      	nop
 8007b84:	08009280 	.word	0x08009280
 8007b88:	08009291 	.word	0x08009291

08007b8c <__mcmp>:
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	690a      	ldr	r2, [r1, #16]
 8007b90:	6900      	ldr	r0, [r0, #16]
 8007b92:	b530      	push	{r4, r5, lr}
 8007b94:	1a80      	subs	r0, r0, r2
 8007b96:	d10e      	bne.n	8007bb6 <__mcmp+0x2a>
 8007b98:	3314      	adds	r3, #20
 8007b9a:	3114      	adds	r1, #20
 8007b9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ba0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ba4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ba8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bac:	4295      	cmp	r5, r2
 8007bae:	d003      	beq.n	8007bb8 <__mcmp+0x2c>
 8007bb0:	d205      	bcs.n	8007bbe <__mcmp+0x32>
 8007bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb6:	bd30      	pop	{r4, r5, pc}
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	d3f3      	bcc.n	8007ba4 <__mcmp+0x18>
 8007bbc:	e7fb      	b.n	8007bb6 <__mcmp+0x2a>
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	e7f9      	b.n	8007bb6 <__mcmp+0x2a>
	...

08007bc4 <__mdiff>:
 8007bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc8:	4689      	mov	r9, r1
 8007bca:	4606      	mov	r6, r0
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4648      	mov	r0, r9
 8007bd0:	4614      	mov	r4, r2
 8007bd2:	f7ff ffdb 	bl	8007b8c <__mcmp>
 8007bd6:	1e05      	subs	r5, r0, #0
 8007bd8:	d112      	bne.n	8007c00 <__mdiff+0x3c>
 8007bda:	4629      	mov	r1, r5
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f7ff fd5d 	bl	800769c <_Balloc>
 8007be2:	4602      	mov	r2, r0
 8007be4:	b928      	cbnz	r0, 8007bf2 <__mdiff+0x2e>
 8007be6:	f240 2137 	movw	r1, #567	@ 0x237
 8007bea:	4b3e      	ldr	r3, [pc, #248]	@ (8007ce4 <__mdiff+0x120>)
 8007bec:	483e      	ldr	r0, [pc, #248]	@ (8007ce8 <__mdiff+0x124>)
 8007bee:	f000 fe87 	bl	8008900 <__assert_func>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	b003      	add	sp, #12
 8007bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c00:	bfbc      	itt	lt
 8007c02:	464b      	movlt	r3, r9
 8007c04:	46a1      	movlt	r9, r4
 8007c06:	4630      	mov	r0, r6
 8007c08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c0c:	bfba      	itte	lt
 8007c0e:	461c      	movlt	r4, r3
 8007c10:	2501      	movlt	r5, #1
 8007c12:	2500      	movge	r5, #0
 8007c14:	f7ff fd42 	bl	800769c <_Balloc>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	b918      	cbnz	r0, 8007c24 <__mdiff+0x60>
 8007c1c:	f240 2145 	movw	r1, #581	@ 0x245
 8007c20:	4b30      	ldr	r3, [pc, #192]	@ (8007ce4 <__mdiff+0x120>)
 8007c22:	e7e3      	b.n	8007bec <__mdiff+0x28>
 8007c24:	f100 0b14 	add.w	fp, r0, #20
 8007c28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c2c:	f109 0310 	add.w	r3, r9, #16
 8007c30:	60c5      	str	r5, [r0, #12]
 8007c32:	f04f 0c00 	mov.w	ip, #0
 8007c36:	f109 0514 	add.w	r5, r9, #20
 8007c3a:	46d9      	mov	r9, fp
 8007c3c:	6926      	ldr	r6, [r4, #16]
 8007c3e:	f104 0e14 	add.w	lr, r4, #20
 8007c42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c46:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	9b01      	ldr	r3, [sp, #4]
 8007c4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c56:	b281      	uxth	r1, r0
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	fa1f f38a 	uxth.w	r3, sl
 8007c5e:	1a5b      	subs	r3, r3, r1
 8007c60:	0c00      	lsrs	r0, r0, #16
 8007c62:	4463      	add	r3, ip
 8007c64:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c68:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c72:	4576      	cmp	r6, lr
 8007c74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c78:	f849 3b04 	str.w	r3, [r9], #4
 8007c7c:	d8e6      	bhi.n	8007c4c <__mdiff+0x88>
 8007c7e:	1b33      	subs	r3, r6, r4
 8007c80:	3b15      	subs	r3, #21
 8007c82:	f023 0303 	bic.w	r3, r3, #3
 8007c86:	3415      	adds	r4, #21
 8007c88:	3304      	adds	r3, #4
 8007c8a:	42a6      	cmp	r6, r4
 8007c8c:	bf38      	it	cc
 8007c8e:	2304      	movcc	r3, #4
 8007c90:	441d      	add	r5, r3
 8007c92:	445b      	add	r3, fp
 8007c94:	461e      	mov	r6, r3
 8007c96:	462c      	mov	r4, r5
 8007c98:	4544      	cmp	r4, r8
 8007c9a:	d30e      	bcc.n	8007cba <__mdiff+0xf6>
 8007c9c:	f108 0103 	add.w	r1, r8, #3
 8007ca0:	1b49      	subs	r1, r1, r5
 8007ca2:	f021 0103 	bic.w	r1, r1, #3
 8007ca6:	3d03      	subs	r5, #3
 8007ca8:	45a8      	cmp	r8, r5
 8007caa:	bf38      	it	cc
 8007cac:	2100      	movcc	r1, #0
 8007cae:	440b      	add	r3, r1
 8007cb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cb4:	b199      	cbz	r1, 8007cde <__mdiff+0x11a>
 8007cb6:	6117      	str	r7, [r2, #16]
 8007cb8:	e79e      	b.n	8007bf8 <__mdiff+0x34>
 8007cba:	46e6      	mov	lr, ip
 8007cbc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007cc0:	fa1f fc81 	uxth.w	ip, r1
 8007cc4:	44f4      	add	ip, lr
 8007cc6:	0c08      	lsrs	r0, r1, #16
 8007cc8:	4471      	add	r1, lr
 8007cca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cce:	b289      	uxth	r1, r1
 8007cd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cd8:	f846 1b04 	str.w	r1, [r6], #4
 8007cdc:	e7dc      	b.n	8007c98 <__mdiff+0xd4>
 8007cde:	3f01      	subs	r7, #1
 8007ce0:	e7e6      	b.n	8007cb0 <__mdiff+0xec>
 8007ce2:	bf00      	nop
 8007ce4:	08009280 	.word	0x08009280
 8007ce8:	08009291 	.word	0x08009291

08007cec <__d2b>:
 8007cec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	4690      	mov	r8, r2
 8007cf4:	4699      	mov	r9, r3
 8007cf6:	9e08      	ldr	r6, [sp, #32]
 8007cf8:	f7ff fcd0 	bl	800769c <_Balloc>
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	b930      	cbnz	r0, 8007d0e <__d2b+0x22>
 8007d00:	4602      	mov	r2, r0
 8007d02:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d06:	4b23      	ldr	r3, [pc, #140]	@ (8007d94 <__d2b+0xa8>)
 8007d08:	4823      	ldr	r0, [pc, #140]	@ (8007d98 <__d2b+0xac>)
 8007d0a:	f000 fdf9 	bl	8008900 <__assert_func>
 8007d0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d16:	b10d      	cbz	r5, 8007d1c <__d2b+0x30>
 8007d18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	f1b8 0300 	subs.w	r3, r8, #0
 8007d22:	d024      	beq.n	8007d6e <__d2b+0x82>
 8007d24:	4668      	mov	r0, sp
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	f7ff fd7f 	bl	800782a <__lo0bits>
 8007d2c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d30:	b1d8      	cbz	r0, 8007d6a <__d2b+0x7e>
 8007d32:	f1c0 0320 	rsb	r3, r0, #32
 8007d36:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3a:	430b      	orrs	r3, r1
 8007d3c:	40c2      	lsrs	r2, r0
 8007d3e:	6163      	str	r3, [r4, #20]
 8007d40:	9201      	str	r2, [sp, #4]
 8007d42:	9b01      	ldr	r3, [sp, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf0c      	ite	eq
 8007d48:	2201      	moveq	r2, #1
 8007d4a:	2202      	movne	r2, #2
 8007d4c:	61a3      	str	r3, [r4, #24]
 8007d4e:	6122      	str	r2, [r4, #16]
 8007d50:	b1ad      	cbz	r5, 8007d7e <__d2b+0x92>
 8007d52:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d56:	4405      	add	r5, r0
 8007d58:	6035      	str	r5, [r6, #0]
 8007d5a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d60:	6018      	str	r0, [r3, #0]
 8007d62:	4620      	mov	r0, r4
 8007d64:	b002      	add	sp, #8
 8007d66:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007d6a:	6161      	str	r1, [r4, #20]
 8007d6c:	e7e9      	b.n	8007d42 <__d2b+0x56>
 8007d6e:	a801      	add	r0, sp, #4
 8007d70:	f7ff fd5b 	bl	800782a <__lo0bits>
 8007d74:	9b01      	ldr	r3, [sp, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	6163      	str	r3, [r4, #20]
 8007d7a:	3020      	adds	r0, #32
 8007d7c:	e7e7      	b.n	8007d4e <__d2b+0x62>
 8007d7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d86:	6030      	str	r0, [r6, #0]
 8007d88:	6918      	ldr	r0, [r3, #16]
 8007d8a:	f7ff fd2f 	bl	80077ec <__hi0bits>
 8007d8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d92:	e7e4      	b.n	8007d5e <__d2b+0x72>
 8007d94:	08009280 	.word	0x08009280
 8007d98:	08009291 	.word	0x08009291

08007d9c <__ssputs_r>:
 8007d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	461f      	mov	r7, r3
 8007da2:	688e      	ldr	r6, [r1, #8]
 8007da4:	4682      	mov	sl, r0
 8007da6:	42be      	cmp	r6, r7
 8007da8:	460c      	mov	r4, r1
 8007daa:	4690      	mov	r8, r2
 8007dac:	680b      	ldr	r3, [r1, #0]
 8007dae:	d82d      	bhi.n	8007e0c <__ssputs_r+0x70>
 8007db0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007db4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007db8:	d026      	beq.n	8007e08 <__ssputs_r+0x6c>
 8007dba:	6965      	ldr	r5, [r4, #20]
 8007dbc:	6909      	ldr	r1, [r1, #16]
 8007dbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dc2:	eba3 0901 	sub.w	r9, r3, r1
 8007dc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dca:	1c7b      	adds	r3, r7, #1
 8007dcc:	444b      	add	r3, r9
 8007dce:	106d      	asrs	r5, r5, #1
 8007dd0:	429d      	cmp	r5, r3
 8007dd2:	bf38      	it	cc
 8007dd4:	461d      	movcc	r5, r3
 8007dd6:	0553      	lsls	r3, r2, #21
 8007dd8:	d527      	bpl.n	8007e2a <__ssputs_r+0x8e>
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f7ff fbd2 	bl	8007584 <_malloc_r>
 8007de0:	4606      	mov	r6, r0
 8007de2:	b360      	cbz	r0, 8007e3e <__ssputs_r+0xa2>
 8007de4:	464a      	mov	r2, r9
 8007de6:	6921      	ldr	r1, [r4, #16]
 8007de8:	f7fe fcfb 	bl	80067e2 <memcpy>
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	6126      	str	r6, [r4, #16]
 8007dfa:	444e      	add	r6, r9
 8007dfc:	6026      	str	r6, [r4, #0]
 8007dfe:	463e      	mov	r6, r7
 8007e00:	6165      	str	r5, [r4, #20]
 8007e02:	eba5 0509 	sub.w	r5, r5, r9
 8007e06:	60a5      	str	r5, [r4, #8]
 8007e08:	42be      	cmp	r6, r7
 8007e0a:	d900      	bls.n	8007e0e <__ssputs_r+0x72>
 8007e0c:	463e      	mov	r6, r7
 8007e0e:	4632      	mov	r2, r6
 8007e10:	4641      	mov	r1, r8
 8007e12:	6820      	ldr	r0, [r4, #0]
 8007e14:	f000 fd49 	bl	80088aa <memmove>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	68a3      	ldr	r3, [r4, #8]
 8007e1c:	1b9b      	subs	r3, r3, r6
 8007e1e:	60a3      	str	r3, [r4, #8]
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	4433      	add	r3, r6
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	f000 fdac 	bl	8008988 <_realloc_r>
 8007e30:	4606      	mov	r6, r0
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d1e0      	bne.n	8007df8 <__ssputs_r+0x5c>
 8007e36:	4650      	mov	r0, sl
 8007e38:	6921      	ldr	r1, [r4, #16]
 8007e3a:	f7ff fb31 	bl	80074a0 <_free_r>
 8007e3e:	230c      	movs	r3, #12
 8007e40:	f8ca 3000 	str.w	r3, [sl]
 8007e44:	89a3      	ldrh	r3, [r4, #12]
 8007e46:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e4e:	81a3      	strh	r3, [r4, #12]
 8007e50:	e7e9      	b.n	8007e26 <__ssputs_r+0x8a>
	...

08007e54 <_svfiprintf_r>:
 8007e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e58:	4698      	mov	r8, r3
 8007e5a:	898b      	ldrh	r3, [r1, #12]
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	061b      	lsls	r3, r3, #24
 8007e60:	460d      	mov	r5, r1
 8007e62:	4614      	mov	r4, r2
 8007e64:	b09d      	sub	sp, #116	@ 0x74
 8007e66:	d510      	bpl.n	8007e8a <_svfiprintf_r+0x36>
 8007e68:	690b      	ldr	r3, [r1, #16]
 8007e6a:	b973      	cbnz	r3, 8007e8a <_svfiprintf_r+0x36>
 8007e6c:	2140      	movs	r1, #64	@ 0x40
 8007e6e:	f7ff fb89 	bl	8007584 <_malloc_r>
 8007e72:	6028      	str	r0, [r5, #0]
 8007e74:	6128      	str	r0, [r5, #16]
 8007e76:	b930      	cbnz	r0, 8007e86 <_svfiprintf_r+0x32>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	b01d      	add	sp, #116	@ 0x74
 8007e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e86:	2340      	movs	r3, #64	@ 0x40
 8007e88:	616b      	str	r3, [r5, #20]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e8e:	2320      	movs	r3, #32
 8007e90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e94:	2330      	movs	r3, #48	@ 0x30
 8007e96:	f04f 0901 	mov.w	r9, #1
 8007e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e9e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008038 <_svfiprintf_r+0x1e4>
 8007ea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ea6:	4623      	mov	r3, r4
 8007ea8:	469a      	mov	sl, r3
 8007eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eae:	b10a      	cbz	r2, 8007eb4 <_svfiprintf_r+0x60>
 8007eb0:	2a25      	cmp	r2, #37	@ 0x25
 8007eb2:	d1f9      	bne.n	8007ea8 <_svfiprintf_r+0x54>
 8007eb4:	ebba 0b04 	subs.w	fp, sl, r4
 8007eb8:	d00b      	beq.n	8007ed2 <_svfiprintf_r+0x7e>
 8007eba:	465b      	mov	r3, fp
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	f7ff ff6b 	bl	8007d9c <__ssputs_r>
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	f000 80a7 	beq.w	800801a <_svfiprintf_r+0x1c6>
 8007ecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ece:	445a      	add	r2, fp
 8007ed0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 809f 	beq.w	800801a <_svfiprintf_r+0x1c6>
 8007edc:	2300      	movs	r3, #0
 8007ede:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ee6:	f10a 0a01 	add.w	sl, sl, #1
 8007eea:	9304      	str	r3, [sp, #16]
 8007eec:	9307      	str	r3, [sp, #28]
 8007eee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ef2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ef4:	4654      	mov	r4, sl
 8007ef6:	2205      	movs	r2, #5
 8007ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efc:	484e      	ldr	r0, [pc, #312]	@ (8008038 <_svfiprintf_r+0x1e4>)
 8007efe:	f7fe fc62 	bl	80067c6 <memchr>
 8007f02:	9a04      	ldr	r2, [sp, #16]
 8007f04:	b9d8      	cbnz	r0, 8007f3e <_svfiprintf_r+0xea>
 8007f06:	06d0      	lsls	r0, r2, #27
 8007f08:	bf44      	itt	mi
 8007f0a:	2320      	movmi	r3, #32
 8007f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f10:	0711      	lsls	r1, r2, #28
 8007f12:	bf44      	itt	mi
 8007f14:	232b      	movmi	r3, #43	@ 0x2b
 8007f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f20:	d015      	beq.n	8007f4e <_svfiprintf_r+0xfa>
 8007f22:	4654      	mov	r4, sl
 8007f24:	2000      	movs	r0, #0
 8007f26:	f04f 0c0a 	mov.w	ip, #10
 8007f2a:	9a07      	ldr	r2, [sp, #28]
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f32:	3b30      	subs	r3, #48	@ 0x30
 8007f34:	2b09      	cmp	r3, #9
 8007f36:	d94b      	bls.n	8007fd0 <_svfiprintf_r+0x17c>
 8007f38:	b1b0      	cbz	r0, 8007f68 <_svfiprintf_r+0x114>
 8007f3a:	9207      	str	r2, [sp, #28]
 8007f3c:	e014      	b.n	8007f68 <_svfiprintf_r+0x114>
 8007f3e:	eba0 0308 	sub.w	r3, r0, r8
 8007f42:	fa09 f303 	lsl.w	r3, r9, r3
 8007f46:	4313      	orrs	r3, r2
 8007f48:	46a2      	mov	sl, r4
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	e7d2      	b.n	8007ef4 <_svfiprintf_r+0xa0>
 8007f4e:	9b03      	ldr	r3, [sp, #12]
 8007f50:	1d19      	adds	r1, r3, #4
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	9103      	str	r1, [sp, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfbb      	ittet	lt
 8007f5a:	425b      	neglt	r3, r3
 8007f5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f60:	9307      	strge	r3, [sp, #28]
 8007f62:	9307      	strlt	r3, [sp, #28]
 8007f64:	bfb8      	it	lt
 8007f66:	9204      	strlt	r2, [sp, #16]
 8007f68:	7823      	ldrb	r3, [r4, #0]
 8007f6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f6c:	d10a      	bne.n	8007f84 <_svfiprintf_r+0x130>
 8007f6e:	7863      	ldrb	r3, [r4, #1]
 8007f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f72:	d132      	bne.n	8007fda <_svfiprintf_r+0x186>
 8007f74:	9b03      	ldr	r3, [sp, #12]
 8007f76:	3402      	adds	r4, #2
 8007f78:	1d1a      	adds	r2, r3, #4
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	9203      	str	r2, [sp, #12]
 8007f7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800803c <_svfiprintf_r+0x1e8>
 8007f88:	2203      	movs	r2, #3
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	7821      	ldrb	r1, [r4, #0]
 8007f8e:	f7fe fc1a 	bl	80067c6 <memchr>
 8007f92:	b138      	cbz	r0, 8007fa4 <_svfiprintf_r+0x150>
 8007f94:	2240      	movs	r2, #64	@ 0x40
 8007f96:	9b04      	ldr	r3, [sp, #16]
 8007f98:	eba0 000a 	sub.w	r0, r0, sl
 8007f9c:	4082      	lsls	r2, r0
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	3401      	adds	r4, #1
 8007fa2:	9304      	str	r3, [sp, #16]
 8007fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa8:	2206      	movs	r2, #6
 8007faa:	4825      	ldr	r0, [pc, #148]	@ (8008040 <_svfiprintf_r+0x1ec>)
 8007fac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fb0:	f7fe fc09 	bl	80067c6 <memchr>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d036      	beq.n	8008026 <_svfiprintf_r+0x1d2>
 8007fb8:	4b22      	ldr	r3, [pc, #136]	@ (8008044 <_svfiprintf_r+0x1f0>)
 8007fba:	bb1b      	cbnz	r3, 8008004 <_svfiprintf_r+0x1b0>
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	3307      	adds	r3, #7
 8007fc0:	f023 0307 	bic.w	r3, r3, #7
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	9303      	str	r3, [sp, #12]
 8007fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fca:	4433      	add	r3, r6
 8007fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fce:	e76a      	b.n	8007ea6 <_svfiprintf_r+0x52>
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fd8:	e7a8      	b.n	8007f2c <_svfiprintf_r+0xd8>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f04f 0c0a 	mov.w	ip, #10
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	3401      	adds	r4, #1
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fec:	3a30      	subs	r2, #48	@ 0x30
 8007fee:	2a09      	cmp	r2, #9
 8007ff0:	d903      	bls.n	8007ffa <_svfiprintf_r+0x1a6>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0c6      	beq.n	8007f84 <_svfiprintf_r+0x130>
 8007ff6:	9105      	str	r1, [sp, #20]
 8007ff8:	e7c4      	b.n	8007f84 <_svfiprintf_r+0x130>
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008002:	e7f0      	b.n	8007fe6 <_svfiprintf_r+0x192>
 8008004:	ab03      	add	r3, sp, #12
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	462a      	mov	r2, r5
 800800a:	4638      	mov	r0, r7
 800800c:	4b0e      	ldr	r3, [pc, #56]	@ (8008048 <_svfiprintf_r+0x1f4>)
 800800e:	a904      	add	r1, sp, #16
 8008010:	f7fd fe4a 	bl	8005ca8 <_printf_float>
 8008014:	1c42      	adds	r2, r0, #1
 8008016:	4606      	mov	r6, r0
 8008018:	d1d6      	bne.n	8007fc8 <_svfiprintf_r+0x174>
 800801a:	89ab      	ldrh	r3, [r5, #12]
 800801c:	065b      	lsls	r3, r3, #25
 800801e:	f53f af2d 	bmi.w	8007e7c <_svfiprintf_r+0x28>
 8008022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008024:	e72c      	b.n	8007e80 <_svfiprintf_r+0x2c>
 8008026:	ab03      	add	r3, sp, #12
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	462a      	mov	r2, r5
 800802c:	4638      	mov	r0, r7
 800802e:	4b06      	ldr	r3, [pc, #24]	@ (8008048 <_svfiprintf_r+0x1f4>)
 8008030:	a904      	add	r1, sp, #16
 8008032:	f7fe f8d7 	bl	80061e4 <_printf_i>
 8008036:	e7ed      	b.n	8008014 <_svfiprintf_r+0x1c0>
 8008038:	080093e8 	.word	0x080093e8
 800803c:	080093ee 	.word	0x080093ee
 8008040:	080093f2 	.word	0x080093f2
 8008044:	08005ca9 	.word	0x08005ca9
 8008048:	08007d9d 	.word	0x08007d9d

0800804c <_sungetc_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	1c4b      	adds	r3, r1, #1
 8008050:	4614      	mov	r4, r2
 8008052:	d103      	bne.n	800805c <_sungetc_r+0x10>
 8008054:	f04f 35ff 	mov.w	r5, #4294967295
 8008058:	4628      	mov	r0, r5
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	8993      	ldrh	r3, [r2, #12]
 800805e:	b2cd      	uxtb	r5, r1
 8008060:	f023 0320 	bic.w	r3, r3, #32
 8008064:	8193      	strh	r3, [r2, #12]
 8008066:	6853      	ldr	r3, [r2, #4]
 8008068:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800806a:	b18a      	cbz	r2, 8008090 <_sungetc_r+0x44>
 800806c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800806e:	429a      	cmp	r2, r3
 8008070:	dd08      	ble.n	8008084 <_sungetc_r+0x38>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	1e5a      	subs	r2, r3, #1
 8008076:	6022      	str	r2, [r4, #0]
 8008078:	f803 5c01 	strb.w	r5, [r3, #-1]
 800807c:	6863      	ldr	r3, [r4, #4]
 800807e:	3301      	adds	r3, #1
 8008080:	6063      	str	r3, [r4, #4]
 8008082:	e7e9      	b.n	8008058 <_sungetc_r+0xc>
 8008084:	4621      	mov	r1, r4
 8008086:	f000 fbd8 	bl	800883a <__submore>
 800808a:	2800      	cmp	r0, #0
 800808c:	d0f1      	beq.n	8008072 <_sungetc_r+0x26>
 800808e:	e7e1      	b.n	8008054 <_sungetc_r+0x8>
 8008090:	6921      	ldr	r1, [r4, #16]
 8008092:	6822      	ldr	r2, [r4, #0]
 8008094:	b141      	cbz	r1, 80080a8 <_sungetc_r+0x5c>
 8008096:	4291      	cmp	r1, r2
 8008098:	d206      	bcs.n	80080a8 <_sungetc_r+0x5c>
 800809a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800809e:	42a9      	cmp	r1, r5
 80080a0:	d102      	bne.n	80080a8 <_sungetc_r+0x5c>
 80080a2:	3a01      	subs	r2, #1
 80080a4:	6022      	str	r2, [r4, #0]
 80080a6:	e7ea      	b.n	800807e <_sungetc_r+0x32>
 80080a8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80080ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80080b2:	2303      	movs	r3, #3
 80080b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80080b6:	4623      	mov	r3, r4
 80080b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	2301      	movs	r3, #1
 80080c0:	e7de      	b.n	8008080 <_sungetc_r+0x34>

080080c2 <__ssrefill_r>:
 80080c2:	b510      	push	{r4, lr}
 80080c4:	460c      	mov	r4, r1
 80080c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80080c8:	b169      	cbz	r1, 80080e6 <__ssrefill_r+0x24>
 80080ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080ce:	4299      	cmp	r1, r3
 80080d0:	d001      	beq.n	80080d6 <__ssrefill_r+0x14>
 80080d2:	f7ff f9e5 	bl	80074a0 <_free_r>
 80080d6:	2000      	movs	r0, #0
 80080d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080da:	6360      	str	r0, [r4, #52]	@ 0x34
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	b113      	cbz	r3, 80080e6 <__ssrefill_r+0x24>
 80080e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80080e2:	6023      	str	r3, [r4, #0]
 80080e4:	bd10      	pop	{r4, pc}
 80080e6:	6923      	ldr	r3, [r4, #16]
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	2300      	movs	r3, #0
 80080f0:	6063      	str	r3, [r4, #4]
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f043 0320 	orr.w	r3, r3, #32
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	e7f3      	b.n	80080e4 <__ssrefill_r+0x22>

080080fc <__ssvfiscanf_r>:
 80080fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008100:	460c      	mov	r4, r1
 8008102:	2100      	movs	r1, #0
 8008104:	4606      	mov	r6, r0
 8008106:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800810a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800810e:	49aa      	ldr	r1, [pc, #680]	@ (80083b8 <__ssvfiscanf_r+0x2bc>)
 8008110:	f10d 0804 	add.w	r8, sp, #4
 8008114:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008116:	49a9      	ldr	r1, [pc, #676]	@ (80083bc <__ssvfiscanf_r+0x2c0>)
 8008118:	4fa9      	ldr	r7, [pc, #676]	@ (80083c0 <__ssvfiscanf_r+0x2c4>)
 800811a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800811e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	7813      	ldrb	r3, [r2, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 8159 	beq.w	80083dc <__ssvfiscanf_r+0x2e0>
 800812a:	5cf9      	ldrb	r1, [r7, r3]
 800812c:	1c55      	adds	r5, r2, #1
 800812e:	f011 0108 	ands.w	r1, r1, #8
 8008132:	d019      	beq.n	8008168 <__ssvfiscanf_r+0x6c>
 8008134:	6863      	ldr	r3, [r4, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	dd0f      	ble.n	800815a <__ssvfiscanf_r+0x5e>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	781a      	ldrb	r2, [r3, #0]
 800813e:	5cba      	ldrb	r2, [r7, r2]
 8008140:	0712      	lsls	r2, r2, #28
 8008142:	d401      	bmi.n	8008148 <__ssvfiscanf_r+0x4c>
 8008144:	462a      	mov	r2, r5
 8008146:	e7ec      	b.n	8008122 <__ssvfiscanf_r+0x26>
 8008148:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800814a:	3301      	adds	r3, #1
 800814c:	3201      	adds	r2, #1
 800814e:	9245      	str	r2, [sp, #276]	@ 0x114
 8008150:	6862      	ldr	r2, [r4, #4]
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	3a01      	subs	r2, #1
 8008156:	6062      	str	r2, [r4, #4]
 8008158:	e7ec      	b.n	8008134 <__ssvfiscanf_r+0x38>
 800815a:	4621      	mov	r1, r4
 800815c:	4630      	mov	r0, r6
 800815e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008160:	4798      	blx	r3
 8008162:	2800      	cmp	r0, #0
 8008164:	d0e9      	beq.n	800813a <__ssvfiscanf_r+0x3e>
 8008166:	e7ed      	b.n	8008144 <__ssvfiscanf_r+0x48>
 8008168:	2b25      	cmp	r3, #37	@ 0x25
 800816a:	d012      	beq.n	8008192 <__ssvfiscanf_r+0x96>
 800816c:	4699      	mov	r9, r3
 800816e:	6863      	ldr	r3, [r4, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f340 8094 	ble.w	800829e <__ssvfiscanf_r+0x1a2>
 8008176:	6822      	ldr	r2, [r4, #0]
 8008178:	7813      	ldrb	r3, [r2, #0]
 800817a:	454b      	cmp	r3, r9
 800817c:	f040 812e 	bne.w	80083dc <__ssvfiscanf_r+0x2e0>
 8008180:	6863      	ldr	r3, [r4, #4]
 8008182:	3201      	adds	r2, #1
 8008184:	3b01      	subs	r3, #1
 8008186:	6063      	str	r3, [r4, #4]
 8008188:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800818a:	6022      	str	r2, [r4, #0]
 800818c:	3301      	adds	r3, #1
 800818e:	9345      	str	r3, [sp, #276]	@ 0x114
 8008190:	e7d8      	b.n	8008144 <__ssvfiscanf_r+0x48>
 8008192:	9141      	str	r1, [sp, #260]	@ 0x104
 8008194:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008196:	7853      	ldrb	r3, [r2, #1]
 8008198:	2b2a      	cmp	r3, #42	@ 0x2a
 800819a:	bf04      	itt	eq
 800819c:	2310      	moveq	r3, #16
 800819e:	1c95      	addeq	r5, r2, #2
 80081a0:	f04f 020a 	mov.w	r2, #10
 80081a4:	bf08      	it	eq
 80081a6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80081a8:	46a9      	mov	r9, r5
 80081aa:	f819 1b01 	ldrb.w	r1, [r9], #1
 80081ae:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80081b2:	2b09      	cmp	r3, #9
 80081b4:	d91e      	bls.n	80081f4 <__ssvfiscanf_r+0xf8>
 80081b6:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80083c4 <__ssvfiscanf_r+0x2c8>
 80081ba:	2203      	movs	r2, #3
 80081bc:	4650      	mov	r0, sl
 80081be:	f7fe fb02 	bl	80067c6 <memchr>
 80081c2:	b138      	cbz	r0, 80081d4 <__ssvfiscanf_r+0xd8>
 80081c4:	2301      	movs	r3, #1
 80081c6:	464d      	mov	r5, r9
 80081c8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80081ca:	eba0 000a 	sub.w	r0, r0, sl
 80081ce:	4083      	lsls	r3, r0
 80081d0:	4313      	orrs	r3, r2
 80081d2:	9341      	str	r3, [sp, #260]	@ 0x104
 80081d4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081d8:	2b78      	cmp	r3, #120	@ 0x78
 80081da:	d806      	bhi.n	80081ea <__ssvfiscanf_r+0xee>
 80081dc:	2b57      	cmp	r3, #87	@ 0x57
 80081de:	d810      	bhi.n	8008202 <__ssvfiscanf_r+0x106>
 80081e0:	2b25      	cmp	r3, #37	@ 0x25
 80081e2:	d0c3      	beq.n	800816c <__ssvfiscanf_r+0x70>
 80081e4:	d856      	bhi.n	8008294 <__ssvfiscanf_r+0x198>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d064      	beq.n	80082b4 <__ssvfiscanf_r+0x1b8>
 80081ea:	2303      	movs	r3, #3
 80081ec:	9347      	str	r3, [sp, #284]	@ 0x11c
 80081ee:	230a      	movs	r3, #10
 80081f0:	9342      	str	r3, [sp, #264]	@ 0x108
 80081f2:	e077      	b.n	80082e4 <__ssvfiscanf_r+0x1e8>
 80081f4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80081f6:	464d      	mov	r5, r9
 80081f8:	fb02 1103 	mla	r1, r2, r3, r1
 80081fc:	3930      	subs	r1, #48	@ 0x30
 80081fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008200:	e7d2      	b.n	80081a8 <__ssvfiscanf_r+0xac>
 8008202:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008206:	2a20      	cmp	r2, #32
 8008208:	d8ef      	bhi.n	80081ea <__ssvfiscanf_r+0xee>
 800820a:	a101      	add	r1, pc, #4	@ (adr r1, 8008210 <__ssvfiscanf_r+0x114>)
 800820c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008210:	080082c3 	.word	0x080082c3
 8008214:	080081eb 	.word	0x080081eb
 8008218:	080081eb 	.word	0x080081eb
 800821c:	0800831d 	.word	0x0800831d
 8008220:	080081eb 	.word	0x080081eb
 8008224:	080081eb 	.word	0x080081eb
 8008228:	080081eb 	.word	0x080081eb
 800822c:	080081eb 	.word	0x080081eb
 8008230:	080081eb 	.word	0x080081eb
 8008234:	080081eb 	.word	0x080081eb
 8008238:	080081eb 	.word	0x080081eb
 800823c:	08008333 	.word	0x08008333
 8008240:	08008319 	.word	0x08008319
 8008244:	0800829b 	.word	0x0800829b
 8008248:	0800829b 	.word	0x0800829b
 800824c:	0800829b 	.word	0x0800829b
 8008250:	080081eb 	.word	0x080081eb
 8008254:	080082d5 	.word	0x080082d5
 8008258:	080081eb 	.word	0x080081eb
 800825c:	080081eb 	.word	0x080081eb
 8008260:	080081eb 	.word	0x080081eb
 8008264:	080081eb 	.word	0x080081eb
 8008268:	08008343 	.word	0x08008343
 800826c:	080082dd 	.word	0x080082dd
 8008270:	080082bb 	.word	0x080082bb
 8008274:	080081eb 	.word	0x080081eb
 8008278:	080081eb 	.word	0x080081eb
 800827c:	0800833f 	.word	0x0800833f
 8008280:	080081eb 	.word	0x080081eb
 8008284:	08008319 	.word	0x08008319
 8008288:	080081eb 	.word	0x080081eb
 800828c:	080081eb 	.word	0x080081eb
 8008290:	080082c3 	.word	0x080082c3
 8008294:	3b45      	subs	r3, #69	@ 0x45
 8008296:	2b02      	cmp	r3, #2
 8008298:	d8a7      	bhi.n	80081ea <__ssvfiscanf_r+0xee>
 800829a:	2305      	movs	r3, #5
 800829c:	e021      	b.n	80082e2 <__ssvfiscanf_r+0x1e6>
 800829e:	4621      	mov	r1, r4
 80082a0:	4630      	mov	r0, r6
 80082a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80082a4:	4798      	blx	r3
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f43f af65 	beq.w	8008176 <__ssvfiscanf_r+0x7a>
 80082ac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f040 808c 	bne.w	80083cc <__ssvfiscanf_r+0x2d0>
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295
 80082b8:	e08c      	b.n	80083d4 <__ssvfiscanf_r+0x2d8>
 80082ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80082bc:	f042 0220 	orr.w	r2, r2, #32
 80082c0:	9241      	str	r2, [sp, #260]	@ 0x104
 80082c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80082c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082c8:	9241      	str	r2, [sp, #260]	@ 0x104
 80082ca:	2210      	movs	r2, #16
 80082cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80082ce:	9242      	str	r2, [sp, #264]	@ 0x108
 80082d0:	d902      	bls.n	80082d8 <__ssvfiscanf_r+0x1dc>
 80082d2:	e005      	b.n	80082e0 <__ssvfiscanf_r+0x1e4>
 80082d4:	2300      	movs	r3, #0
 80082d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80082d8:	2303      	movs	r3, #3
 80082da:	e002      	b.n	80082e2 <__ssvfiscanf_r+0x1e6>
 80082dc:	2308      	movs	r3, #8
 80082de:	9342      	str	r3, [sp, #264]	@ 0x108
 80082e0:	2304      	movs	r3, #4
 80082e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dd39      	ble.n	800835e <__ssvfiscanf_r+0x262>
 80082ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80082ec:	0659      	lsls	r1, r3, #25
 80082ee:	d404      	bmi.n	80082fa <__ssvfiscanf_r+0x1fe>
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	781a      	ldrb	r2, [r3, #0]
 80082f4:	5cba      	ldrb	r2, [r7, r2]
 80082f6:	0712      	lsls	r2, r2, #28
 80082f8:	d438      	bmi.n	800836c <__ssvfiscanf_r+0x270>
 80082fa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	dc47      	bgt.n	8008390 <__ssvfiscanf_r+0x294>
 8008300:	466b      	mov	r3, sp
 8008302:	4622      	mov	r2, r4
 8008304:	4630      	mov	r0, r6
 8008306:	a941      	add	r1, sp, #260	@ 0x104
 8008308:	f000 f86a 	bl	80083e0 <_scanf_chars>
 800830c:	2801      	cmp	r0, #1
 800830e:	d065      	beq.n	80083dc <__ssvfiscanf_r+0x2e0>
 8008310:	2802      	cmp	r0, #2
 8008312:	f47f af17 	bne.w	8008144 <__ssvfiscanf_r+0x48>
 8008316:	e7c9      	b.n	80082ac <__ssvfiscanf_r+0x1b0>
 8008318:	220a      	movs	r2, #10
 800831a:	e7d7      	b.n	80082cc <__ssvfiscanf_r+0x1d0>
 800831c:	4629      	mov	r1, r5
 800831e:	4640      	mov	r0, r8
 8008320:	f000 fa52 	bl	80087c8 <__sccl>
 8008324:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008326:	4605      	mov	r5, r0
 8008328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800832c:	9341      	str	r3, [sp, #260]	@ 0x104
 800832e:	2301      	movs	r3, #1
 8008330:	e7d7      	b.n	80082e2 <__ssvfiscanf_r+0x1e6>
 8008332:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008338:	9341      	str	r3, [sp, #260]	@ 0x104
 800833a:	2300      	movs	r3, #0
 800833c:	e7d1      	b.n	80082e2 <__ssvfiscanf_r+0x1e6>
 800833e:	2302      	movs	r3, #2
 8008340:	e7cf      	b.n	80082e2 <__ssvfiscanf_r+0x1e6>
 8008342:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008344:	06c3      	lsls	r3, r0, #27
 8008346:	f53f aefd 	bmi.w	8008144 <__ssvfiscanf_r+0x48>
 800834a:	9b00      	ldr	r3, [sp, #0]
 800834c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800834e:	1d19      	adds	r1, r3, #4
 8008350:	9100      	str	r1, [sp, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	07c0      	lsls	r0, r0, #31
 8008356:	bf4c      	ite	mi
 8008358:	801a      	strhmi	r2, [r3, #0]
 800835a:	601a      	strpl	r2, [r3, #0]
 800835c:	e6f2      	b.n	8008144 <__ssvfiscanf_r+0x48>
 800835e:	4621      	mov	r1, r4
 8008360:	4630      	mov	r0, r6
 8008362:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008364:	4798      	blx	r3
 8008366:	2800      	cmp	r0, #0
 8008368:	d0bf      	beq.n	80082ea <__ssvfiscanf_r+0x1ee>
 800836a:	e79f      	b.n	80082ac <__ssvfiscanf_r+0x1b0>
 800836c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800836e:	3201      	adds	r2, #1
 8008370:	9245      	str	r2, [sp, #276]	@ 0x114
 8008372:	6862      	ldr	r2, [r4, #4]
 8008374:	3a01      	subs	r2, #1
 8008376:	2a00      	cmp	r2, #0
 8008378:	6062      	str	r2, [r4, #4]
 800837a:	dd02      	ble.n	8008382 <__ssvfiscanf_r+0x286>
 800837c:	3301      	adds	r3, #1
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	e7b6      	b.n	80082f0 <__ssvfiscanf_r+0x1f4>
 8008382:	4621      	mov	r1, r4
 8008384:	4630      	mov	r0, r6
 8008386:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008388:	4798      	blx	r3
 800838a:	2800      	cmp	r0, #0
 800838c:	d0b0      	beq.n	80082f0 <__ssvfiscanf_r+0x1f4>
 800838e:	e78d      	b.n	80082ac <__ssvfiscanf_r+0x1b0>
 8008390:	2b04      	cmp	r3, #4
 8008392:	dc06      	bgt.n	80083a2 <__ssvfiscanf_r+0x2a6>
 8008394:	466b      	mov	r3, sp
 8008396:	4622      	mov	r2, r4
 8008398:	4630      	mov	r0, r6
 800839a:	a941      	add	r1, sp, #260	@ 0x104
 800839c:	f000 f87a 	bl	8008494 <_scanf_i>
 80083a0:	e7b4      	b.n	800830c <__ssvfiscanf_r+0x210>
 80083a2:	4b09      	ldr	r3, [pc, #36]	@ (80083c8 <__ssvfiscanf_r+0x2cc>)
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f43f aecd 	beq.w	8008144 <__ssvfiscanf_r+0x48>
 80083aa:	466b      	mov	r3, sp
 80083ac:	4622      	mov	r2, r4
 80083ae:	4630      	mov	r0, r6
 80083b0:	a941      	add	r1, sp, #260	@ 0x104
 80083b2:	f3af 8000 	nop.w
 80083b6:	e7a9      	b.n	800830c <__ssvfiscanf_r+0x210>
 80083b8:	0800804d 	.word	0x0800804d
 80083bc:	080080c3 	.word	0x080080c3
 80083c0:	0800945b 	.word	0x0800945b
 80083c4:	080093ee 	.word	0x080093ee
 80083c8:	00000000 	.word	0x00000000
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	065b      	lsls	r3, r3, #25
 80083d0:	f53f af70 	bmi.w	80082b4 <__ssvfiscanf_r+0x1b8>
 80083d4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80083d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083dc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80083de:	e7f9      	b.n	80083d4 <__ssvfiscanf_r+0x2d8>

080083e0 <_scanf_chars>:
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e4:	4615      	mov	r5, r2
 80083e6:	688a      	ldr	r2, [r1, #8]
 80083e8:	4680      	mov	r8, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	b932      	cbnz	r2, 80083fc <_scanf_chars+0x1c>
 80083ee:	698a      	ldr	r2, [r1, #24]
 80083f0:	2a00      	cmp	r2, #0
 80083f2:	bf14      	ite	ne
 80083f4:	f04f 32ff 	movne.w	r2, #4294967295
 80083f8:	2201      	moveq	r2, #1
 80083fa:	608a      	str	r2, [r1, #8]
 80083fc:	2700      	movs	r7, #0
 80083fe:	6822      	ldr	r2, [r4, #0]
 8008400:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008490 <_scanf_chars+0xb0>
 8008404:	06d1      	lsls	r1, r2, #27
 8008406:	bf5f      	itttt	pl
 8008408:	681a      	ldrpl	r2, [r3, #0]
 800840a:	1d11      	addpl	r1, r2, #4
 800840c:	6019      	strpl	r1, [r3, #0]
 800840e:	6816      	ldrpl	r6, [r2, #0]
 8008410:	69a0      	ldr	r0, [r4, #24]
 8008412:	b188      	cbz	r0, 8008438 <_scanf_chars+0x58>
 8008414:	2801      	cmp	r0, #1
 8008416:	d107      	bne.n	8008428 <_scanf_chars+0x48>
 8008418:	682b      	ldr	r3, [r5, #0]
 800841a:	781a      	ldrb	r2, [r3, #0]
 800841c:	6963      	ldr	r3, [r4, #20]
 800841e:	5c9b      	ldrb	r3, [r3, r2]
 8008420:	b953      	cbnz	r3, 8008438 <_scanf_chars+0x58>
 8008422:	2f00      	cmp	r7, #0
 8008424:	d031      	beq.n	800848a <_scanf_chars+0xaa>
 8008426:	e022      	b.n	800846e <_scanf_chars+0x8e>
 8008428:	2802      	cmp	r0, #2
 800842a:	d120      	bne.n	800846e <_scanf_chars+0x8e>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008434:	071b      	lsls	r3, r3, #28
 8008436:	d41a      	bmi.n	800846e <_scanf_chars+0x8e>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	3701      	adds	r7, #1
 800843c:	06da      	lsls	r2, r3, #27
 800843e:	bf5e      	ittt	pl
 8008440:	682b      	ldrpl	r3, [r5, #0]
 8008442:	781b      	ldrbpl	r3, [r3, #0]
 8008444:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008448:	682a      	ldr	r2, [r5, #0]
 800844a:	686b      	ldr	r3, [r5, #4]
 800844c:	3201      	adds	r2, #1
 800844e:	602a      	str	r2, [r5, #0]
 8008450:	68a2      	ldr	r2, [r4, #8]
 8008452:	3b01      	subs	r3, #1
 8008454:	3a01      	subs	r2, #1
 8008456:	606b      	str	r3, [r5, #4]
 8008458:	60a2      	str	r2, [r4, #8]
 800845a:	b142      	cbz	r2, 800846e <_scanf_chars+0x8e>
 800845c:	2b00      	cmp	r3, #0
 800845e:	dcd7      	bgt.n	8008410 <_scanf_chars+0x30>
 8008460:	4629      	mov	r1, r5
 8008462:	4640      	mov	r0, r8
 8008464:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008468:	4798      	blx	r3
 800846a:	2800      	cmp	r0, #0
 800846c:	d0d0      	beq.n	8008410 <_scanf_chars+0x30>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	f013 0310 	ands.w	r3, r3, #16
 8008474:	d105      	bne.n	8008482 <_scanf_chars+0xa2>
 8008476:	68e2      	ldr	r2, [r4, #12]
 8008478:	3201      	adds	r2, #1
 800847a:	60e2      	str	r2, [r4, #12]
 800847c:	69a2      	ldr	r2, [r4, #24]
 800847e:	b102      	cbz	r2, 8008482 <_scanf_chars+0xa2>
 8008480:	7033      	strb	r3, [r6, #0]
 8008482:	2000      	movs	r0, #0
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	443b      	add	r3, r7
 8008488:	6123      	str	r3, [r4, #16]
 800848a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800848e:	bf00      	nop
 8008490:	0800945b 	.word	0x0800945b

08008494 <_scanf_i>:
 8008494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008498:	460c      	mov	r4, r1
 800849a:	4698      	mov	r8, r3
 800849c:	4b72      	ldr	r3, [pc, #456]	@ (8008668 <_scanf_i+0x1d4>)
 800849e:	b087      	sub	sp, #28
 80084a0:	4682      	mov	sl, r0
 80084a2:	4616      	mov	r6, r2
 80084a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80084a8:	ab03      	add	r3, sp, #12
 80084aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80084ae:	4b6f      	ldr	r3, [pc, #444]	@ (800866c <_scanf_i+0x1d8>)
 80084b0:	69a1      	ldr	r1, [r4, #24]
 80084b2:	4a6f      	ldr	r2, [pc, #444]	@ (8008670 <_scanf_i+0x1dc>)
 80084b4:	4627      	mov	r7, r4
 80084b6:	2903      	cmp	r1, #3
 80084b8:	bf08      	it	eq
 80084ba:	461a      	moveq	r2, r3
 80084bc:	68a3      	ldr	r3, [r4, #8]
 80084be:	9201      	str	r2, [sp, #4]
 80084c0:	1e5a      	subs	r2, r3, #1
 80084c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80084c6:	bf81      	itttt	hi
 80084c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80084cc:	eb03 0905 	addhi.w	r9, r3, r5
 80084d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80084d4:	60a3      	strhi	r3, [r4, #8]
 80084d6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80084da:	bf98      	it	ls
 80084dc:	f04f 0900 	movls.w	r9, #0
 80084e0:	463d      	mov	r5, r7
 80084e2:	f04f 0b00 	mov.w	fp, #0
 80084e6:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80084ea:	6023      	str	r3, [r4, #0]
 80084ec:	6831      	ldr	r1, [r6, #0]
 80084ee:	ab03      	add	r3, sp, #12
 80084f0:	2202      	movs	r2, #2
 80084f2:	7809      	ldrb	r1, [r1, #0]
 80084f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80084f8:	f7fe f965 	bl	80067c6 <memchr>
 80084fc:	b328      	cbz	r0, 800854a <_scanf_i+0xb6>
 80084fe:	f1bb 0f01 	cmp.w	fp, #1
 8008502:	d159      	bne.n	80085b8 <_scanf_i+0x124>
 8008504:	6862      	ldr	r2, [r4, #4]
 8008506:	b92a      	cbnz	r2, 8008514 <_scanf_i+0x80>
 8008508:	2108      	movs	r1, #8
 800850a:	6822      	ldr	r2, [r4, #0]
 800850c:	6061      	str	r1, [r4, #4]
 800850e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008512:	6022      	str	r2, [r4, #0]
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	68a2      	ldr	r2, [r4, #8]
 800851e:	1e51      	subs	r1, r2, #1
 8008520:	60a1      	str	r1, [r4, #8]
 8008522:	b192      	cbz	r2, 800854a <_scanf_i+0xb6>
 8008524:	6832      	ldr	r2, [r6, #0]
 8008526:	1c51      	adds	r1, r2, #1
 8008528:	6031      	str	r1, [r6, #0]
 800852a:	7812      	ldrb	r2, [r2, #0]
 800852c:	f805 2b01 	strb.w	r2, [r5], #1
 8008530:	6872      	ldr	r2, [r6, #4]
 8008532:	3a01      	subs	r2, #1
 8008534:	2a00      	cmp	r2, #0
 8008536:	6072      	str	r2, [r6, #4]
 8008538:	dc07      	bgt.n	800854a <_scanf_i+0xb6>
 800853a:	4631      	mov	r1, r6
 800853c:	4650      	mov	r0, sl
 800853e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008542:	4790      	blx	r2
 8008544:	2800      	cmp	r0, #0
 8008546:	f040 8085 	bne.w	8008654 <_scanf_i+0x1c0>
 800854a:	f10b 0b01 	add.w	fp, fp, #1
 800854e:	f1bb 0f03 	cmp.w	fp, #3
 8008552:	d1cb      	bne.n	80084ec <_scanf_i+0x58>
 8008554:	6863      	ldr	r3, [r4, #4]
 8008556:	b90b      	cbnz	r3, 800855c <_scanf_i+0xc8>
 8008558:	230a      	movs	r3, #10
 800855a:	6063      	str	r3, [r4, #4]
 800855c:	6863      	ldr	r3, [r4, #4]
 800855e:	4945      	ldr	r1, [pc, #276]	@ (8008674 <_scanf_i+0x1e0>)
 8008560:	6960      	ldr	r0, [r4, #20]
 8008562:	1ac9      	subs	r1, r1, r3
 8008564:	f000 f930 	bl	80087c8 <__sccl>
 8008568:	f04f 0b00 	mov.w	fp, #0
 800856c:	68a3      	ldr	r3, [r4, #8]
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d03d      	beq.n	80085f0 <_scanf_i+0x15c>
 8008574:	6831      	ldr	r1, [r6, #0]
 8008576:	6960      	ldr	r0, [r4, #20]
 8008578:	f891 c000 	ldrb.w	ip, [r1]
 800857c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008580:	2800      	cmp	r0, #0
 8008582:	d035      	beq.n	80085f0 <_scanf_i+0x15c>
 8008584:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008588:	d124      	bne.n	80085d4 <_scanf_i+0x140>
 800858a:	0510      	lsls	r0, r2, #20
 800858c:	d522      	bpl.n	80085d4 <_scanf_i+0x140>
 800858e:	f10b 0b01 	add.w	fp, fp, #1
 8008592:	f1b9 0f00 	cmp.w	r9, #0
 8008596:	d003      	beq.n	80085a0 <_scanf_i+0x10c>
 8008598:	3301      	adds	r3, #1
 800859a:	f109 39ff 	add.w	r9, r9, #4294967295
 800859e:	60a3      	str	r3, [r4, #8]
 80085a0:	6873      	ldr	r3, [r6, #4]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	6073      	str	r3, [r6, #4]
 80085a8:	dd1b      	ble.n	80085e2 <_scanf_i+0x14e>
 80085aa:	6833      	ldr	r3, [r6, #0]
 80085ac:	3301      	adds	r3, #1
 80085ae:	6033      	str	r3, [r6, #0]
 80085b0:	68a3      	ldr	r3, [r4, #8]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	60a3      	str	r3, [r4, #8]
 80085b6:	e7d9      	b.n	800856c <_scanf_i+0xd8>
 80085b8:	f1bb 0f02 	cmp.w	fp, #2
 80085bc:	d1ae      	bne.n	800851c <_scanf_i+0x88>
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80085c4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80085c8:	d1bf      	bne.n	800854a <_scanf_i+0xb6>
 80085ca:	2110      	movs	r1, #16
 80085cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085d0:	6061      	str	r1, [r4, #4]
 80085d2:	e7a2      	b.n	800851a <_scanf_i+0x86>
 80085d4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80085d8:	6022      	str	r2, [r4, #0]
 80085da:	780b      	ldrb	r3, [r1, #0]
 80085dc:	f805 3b01 	strb.w	r3, [r5], #1
 80085e0:	e7de      	b.n	80085a0 <_scanf_i+0x10c>
 80085e2:	4631      	mov	r1, r6
 80085e4:	4650      	mov	r0, sl
 80085e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80085ea:	4798      	blx	r3
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d0df      	beq.n	80085b0 <_scanf_i+0x11c>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	05d9      	lsls	r1, r3, #23
 80085f4:	d50d      	bpl.n	8008612 <_scanf_i+0x17e>
 80085f6:	42bd      	cmp	r5, r7
 80085f8:	d909      	bls.n	800860e <_scanf_i+0x17a>
 80085fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80085fe:	4632      	mov	r2, r6
 8008600:	4650      	mov	r0, sl
 8008602:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008606:	f105 39ff 	add.w	r9, r5, #4294967295
 800860a:	4798      	blx	r3
 800860c:	464d      	mov	r5, r9
 800860e:	42bd      	cmp	r5, r7
 8008610:	d028      	beq.n	8008664 <_scanf_i+0x1d0>
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	f012 0210 	ands.w	r2, r2, #16
 8008618:	d113      	bne.n	8008642 <_scanf_i+0x1ae>
 800861a:	702a      	strb	r2, [r5, #0]
 800861c:	4639      	mov	r1, r7
 800861e:	6863      	ldr	r3, [r4, #4]
 8008620:	4650      	mov	r0, sl
 8008622:	9e01      	ldr	r6, [sp, #4]
 8008624:	47b0      	blx	r6
 8008626:	f8d8 3000 	ldr.w	r3, [r8]
 800862a:	6821      	ldr	r1, [r4, #0]
 800862c:	1d1a      	adds	r2, r3, #4
 800862e:	f8c8 2000 	str.w	r2, [r8]
 8008632:	f011 0f20 	tst.w	r1, #32
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	d00f      	beq.n	800865a <_scanf_i+0x1c6>
 800863a:	6018      	str	r0, [r3, #0]
 800863c:	68e3      	ldr	r3, [r4, #12]
 800863e:	3301      	adds	r3, #1
 8008640:	60e3      	str	r3, [r4, #12]
 8008642:	2000      	movs	r0, #0
 8008644:	6923      	ldr	r3, [r4, #16]
 8008646:	1bed      	subs	r5, r5, r7
 8008648:	445d      	add	r5, fp
 800864a:	442b      	add	r3, r5
 800864c:	6123      	str	r3, [r4, #16]
 800864e:	b007      	add	sp, #28
 8008650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008654:	f04f 0b00 	mov.w	fp, #0
 8008658:	e7ca      	b.n	80085f0 <_scanf_i+0x15c>
 800865a:	07ca      	lsls	r2, r1, #31
 800865c:	bf4c      	ite	mi
 800865e:	8018      	strhmi	r0, [r3, #0]
 8008660:	6018      	strpl	r0, [r3, #0]
 8008662:	e7eb      	b.n	800863c <_scanf_i+0x1a8>
 8008664:	2001      	movs	r0, #1
 8008666:	e7f2      	b.n	800864e <_scanf_i+0x1ba>
 8008668:	0800917c 	.word	0x0800917c
 800866c:	08008ad9 	.word	0x08008ad9
 8008670:	08008bb9 	.word	0x08008bb9
 8008674:	08009409 	.word	0x08009409

08008678 <__sflush_r>:
 8008678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	0716      	lsls	r6, r2, #28
 8008680:	4605      	mov	r5, r0
 8008682:	460c      	mov	r4, r1
 8008684:	d454      	bmi.n	8008730 <__sflush_r+0xb8>
 8008686:	684b      	ldr	r3, [r1, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	dc02      	bgt.n	8008692 <__sflush_r+0x1a>
 800868c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	dd48      	ble.n	8008724 <__sflush_r+0xac>
 8008692:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008694:	2e00      	cmp	r6, #0
 8008696:	d045      	beq.n	8008724 <__sflush_r+0xac>
 8008698:	2300      	movs	r3, #0
 800869a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800869e:	682f      	ldr	r7, [r5, #0]
 80086a0:	6a21      	ldr	r1, [r4, #32]
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	d030      	beq.n	8008708 <__sflush_r+0x90>
 80086a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	0759      	lsls	r1, r3, #29
 80086ac:	d505      	bpl.n	80086ba <__sflush_r+0x42>
 80086ae:	6863      	ldr	r3, [r4, #4]
 80086b0:	1ad2      	subs	r2, r2, r3
 80086b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086b4:	b10b      	cbz	r3, 80086ba <__sflush_r+0x42>
 80086b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086b8:	1ad2      	subs	r2, r2, r3
 80086ba:	2300      	movs	r3, #0
 80086bc:	4628      	mov	r0, r5
 80086be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086c0:	6a21      	ldr	r1, [r4, #32]
 80086c2:	47b0      	blx	r6
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	d106      	bne.n	80086d8 <__sflush_r+0x60>
 80086ca:	6829      	ldr	r1, [r5, #0]
 80086cc:	291d      	cmp	r1, #29
 80086ce:	d82b      	bhi.n	8008728 <__sflush_r+0xb0>
 80086d0:	4a28      	ldr	r2, [pc, #160]	@ (8008774 <__sflush_r+0xfc>)
 80086d2:	410a      	asrs	r2, r1
 80086d4:	07d6      	lsls	r6, r2, #31
 80086d6:	d427      	bmi.n	8008728 <__sflush_r+0xb0>
 80086d8:	2200      	movs	r2, #0
 80086da:	6062      	str	r2, [r4, #4]
 80086dc:	6922      	ldr	r2, [r4, #16]
 80086de:	04d9      	lsls	r1, r3, #19
 80086e0:	6022      	str	r2, [r4, #0]
 80086e2:	d504      	bpl.n	80086ee <__sflush_r+0x76>
 80086e4:	1c42      	adds	r2, r0, #1
 80086e6:	d101      	bne.n	80086ec <__sflush_r+0x74>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b903      	cbnz	r3, 80086ee <__sflush_r+0x76>
 80086ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80086ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086f0:	602f      	str	r7, [r5, #0]
 80086f2:	b1b9      	cbz	r1, 8008724 <__sflush_r+0xac>
 80086f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086f8:	4299      	cmp	r1, r3
 80086fa:	d002      	beq.n	8008702 <__sflush_r+0x8a>
 80086fc:	4628      	mov	r0, r5
 80086fe:	f7fe fecf 	bl	80074a0 <_free_r>
 8008702:	2300      	movs	r3, #0
 8008704:	6363      	str	r3, [r4, #52]	@ 0x34
 8008706:	e00d      	b.n	8008724 <__sflush_r+0xac>
 8008708:	2301      	movs	r3, #1
 800870a:	4628      	mov	r0, r5
 800870c:	47b0      	blx	r6
 800870e:	4602      	mov	r2, r0
 8008710:	1c50      	adds	r0, r2, #1
 8008712:	d1c9      	bne.n	80086a8 <__sflush_r+0x30>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0c6      	beq.n	80086a8 <__sflush_r+0x30>
 800871a:	2b1d      	cmp	r3, #29
 800871c:	d001      	beq.n	8008722 <__sflush_r+0xaa>
 800871e:	2b16      	cmp	r3, #22
 8008720:	d11d      	bne.n	800875e <__sflush_r+0xe6>
 8008722:	602f      	str	r7, [r5, #0]
 8008724:	2000      	movs	r0, #0
 8008726:	e021      	b.n	800876c <__sflush_r+0xf4>
 8008728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800872c:	b21b      	sxth	r3, r3
 800872e:	e01a      	b.n	8008766 <__sflush_r+0xee>
 8008730:	690f      	ldr	r7, [r1, #16]
 8008732:	2f00      	cmp	r7, #0
 8008734:	d0f6      	beq.n	8008724 <__sflush_r+0xac>
 8008736:	0793      	lsls	r3, r2, #30
 8008738:	bf18      	it	ne
 800873a:	2300      	movne	r3, #0
 800873c:	680e      	ldr	r6, [r1, #0]
 800873e:	bf08      	it	eq
 8008740:	694b      	ldreq	r3, [r1, #20]
 8008742:	1bf6      	subs	r6, r6, r7
 8008744:	600f      	str	r7, [r1, #0]
 8008746:	608b      	str	r3, [r1, #8]
 8008748:	2e00      	cmp	r6, #0
 800874a:	ddeb      	ble.n	8008724 <__sflush_r+0xac>
 800874c:	4633      	mov	r3, r6
 800874e:	463a      	mov	r2, r7
 8008750:	4628      	mov	r0, r5
 8008752:	6a21      	ldr	r1, [r4, #32]
 8008754:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008758:	47e0      	blx	ip
 800875a:	2800      	cmp	r0, #0
 800875c:	dc07      	bgt.n	800876e <__sflush_r+0xf6>
 800875e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008766:	f04f 30ff 	mov.w	r0, #4294967295
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800876e:	4407      	add	r7, r0
 8008770:	1a36      	subs	r6, r6, r0
 8008772:	e7e9      	b.n	8008748 <__sflush_r+0xd0>
 8008774:	dfbffffe 	.word	0xdfbffffe

08008778 <_fflush_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	690b      	ldr	r3, [r1, #16]
 800877c:	4605      	mov	r5, r0
 800877e:	460c      	mov	r4, r1
 8008780:	b913      	cbnz	r3, 8008788 <_fflush_r+0x10>
 8008782:	2500      	movs	r5, #0
 8008784:	4628      	mov	r0, r5
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	b118      	cbz	r0, 8008792 <_fflush_r+0x1a>
 800878a:	6a03      	ldr	r3, [r0, #32]
 800878c:	b90b      	cbnz	r3, 8008792 <_fflush_r+0x1a>
 800878e:	f7fd fed5 	bl	800653c <__sinit>
 8008792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0f3      	beq.n	8008782 <_fflush_r+0xa>
 800879a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800879c:	07d0      	lsls	r0, r2, #31
 800879e:	d404      	bmi.n	80087aa <_fflush_r+0x32>
 80087a0:	0599      	lsls	r1, r3, #22
 80087a2:	d402      	bmi.n	80087aa <_fflush_r+0x32>
 80087a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087a6:	f7fe f80c 	bl	80067c2 <__retarget_lock_acquire_recursive>
 80087aa:	4628      	mov	r0, r5
 80087ac:	4621      	mov	r1, r4
 80087ae:	f7ff ff63 	bl	8008678 <__sflush_r>
 80087b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087b4:	4605      	mov	r5, r0
 80087b6:	07da      	lsls	r2, r3, #31
 80087b8:	d4e4      	bmi.n	8008784 <_fflush_r+0xc>
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	059b      	lsls	r3, r3, #22
 80087be:	d4e1      	bmi.n	8008784 <_fflush_r+0xc>
 80087c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087c2:	f7fd ffff 	bl	80067c4 <__retarget_lock_release_recursive>
 80087c6:	e7dd      	b.n	8008784 <_fflush_r+0xc>

080087c8 <__sccl>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	780b      	ldrb	r3, [r1, #0]
 80087cc:	4604      	mov	r4, r0
 80087ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80087d0:	bf0b      	itete	eq
 80087d2:	784b      	ldrbeq	r3, [r1, #1]
 80087d4:	1c4a      	addne	r2, r1, #1
 80087d6:	1c8a      	addeq	r2, r1, #2
 80087d8:	2100      	movne	r1, #0
 80087da:	bf08      	it	eq
 80087dc:	2101      	moveq	r1, #1
 80087de:	3801      	subs	r0, #1
 80087e0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80087e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80087e8:	42a8      	cmp	r0, r5
 80087ea:	d1fb      	bne.n	80087e4 <__sccl+0x1c>
 80087ec:	b90b      	cbnz	r3, 80087f2 <__sccl+0x2a>
 80087ee:	1e50      	subs	r0, r2, #1
 80087f0:	bd70      	pop	{r4, r5, r6, pc}
 80087f2:	f081 0101 	eor.w	r1, r1, #1
 80087f6:	4610      	mov	r0, r2
 80087f8:	54e1      	strb	r1, [r4, r3]
 80087fa:	4602      	mov	r2, r0
 80087fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008800:	2d2d      	cmp	r5, #45	@ 0x2d
 8008802:	d005      	beq.n	8008810 <__sccl+0x48>
 8008804:	2d5d      	cmp	r5, #93	@ 0x5d
 8008806:	d016      	beq.n	8008836 <__sccl+0x6e>
 8008808:	2d00      	cmp	r5, #0
 800880a:	d0f1      	beq.n	80087f0 <__sccl+0x28>
 800880c:	462b      	mov	r3, r5
 800880e:	e7f2      	b.n	80087f6 <__sccl+0x2e>
 8008810:	7846      	ldrb	r6, [r0, #1]
 8008812:	2e5d      	cmp	r6, #93	@ 0x5d
 8008814:	d0fa      	beq.n	800880c <__sccl+0x44>
 8008816:	42b3      	cmp	r3, r6
 8008818:	dcf8      	bgt.n	800880c <__sccl+0x44>
 800881a:	461a      	mov	r2, r3
 800881c:	3002      	adds	r0, #2
 800881e:	3201      	adds	r2, #1
 8008820:	4296      	cmp	r6, r2
 8008822:	54a1      	strb	r1, [r4, r2]
 8008824:	dcfb      	bgt.n	800881e <__sccl+0x56>
 8008826:	1af2      	subs	r2, r6, r3
 8008828:	3a01      	subs	r2, #1
 800882a:	42b3      	cmp	r3, r6
 800882c:	bfa8      	it	ge
 800882e:	2200      	movge	r2, #0
 8008830:	1c5d      	adds	r5, r3, #1
 8008832:	18ab      	adds	r3, r5, r2
 8008834:	e7e1      	b.n	80087fa <__sccl+0x32>
 8008836:	4610      	mov	r0, r2
 8008838:	e7da      	b.n	80087f0 <__sccl+0x28>

0800883a <__submore>:
 800883a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800883e:	460c      	mov	r4, r1
 8008840:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008842:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008846:	4299      	cmp	r1, r3
 8008848:	d11b      	bne.n	8008882 <__submore+0x48>
 800884a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800884e:	f7fe fe99 	bl	8007584 <_malloc_r>
 8008852:	b918      	cbnz	r0, 800885c <__submore+0x22>
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800885c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008860:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008862:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008866:	6360      	str	r0, [r4, #52]	@ 0x34
 8008868:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800886c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008870:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008874:	7043      	strb	r3, [r0, #1]
 8008876:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800887a:	7003      	strb	r3, [r0, #0]
 800887c:	6020      	str	r0, [r4, #0]
 800887e:	2000      	movs	r0, #0
 8008880:	e7ea      	b.n	8008858 <__submore+0x1e>
 8008882:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008884:	0077      	lsls	r7, r6, #1
 8008886:	463a      	mov	r2, r7
 8008888:	f000 f87e 	bl	8008988 <_realloc_r>
 800888c:	4605      	mov	r5, r0
 800888e:	2800      	cmp	r0, #0
 8008890:	d0e0      	beq.n	8008854 <__submore+0x1a>
 8008892:	eb00 0806 	add.w	r8, r0, r6
 8008896:	4601      	mov	r1, r0
 8008898:	4632      	mov	r2, r6
 800889a:	4640      	mov	r0, r8
 800889c:	f7fd ffa1 	bl	80067e2 <memcpy>
 80088a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80088a4:	f8c4 8000 	str.w	r8, [r4]
 80088a8:	e7e9      	b.n	800887e <__submore+0x44>

080088aa <memmove>:
 80088aa:	4288      	cmp	r0, r1
 80088ac:	b510      	push	{r4, lr}
 80088ae:	eb01 0402 	add.w	r4, r1, r2
 80088b2:	d902      	bls.n	80088ba <memmove+0x10>
 80088b4:	4284      	cmp	r4, r0
 80088b6:	4623      	mov	r3, r4
 80088b8:	d807      	bhi.n	80088ca <memmove+0x20>
 80088ba:	1e43      	subs	r3, r0, #1
 80088bc:	42a1      	cmp	r1, r4
 80088be:	d008      	beq.n	80088d2 <memmove+0x28>
 80088c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088c8:	e7f8      	b.n	80088bc <memmove+0x12>
 80088ca:	4601      	mov	r1, r0
 80088cc:	4402      	add	r2, r0
 80088ce:	428a      	cmp	r2, r1
 80088d0:	d100      	bne.n	80088d4 <memmove+0x2a>
 80088d2:	bd10      	pop	{r4, pc}
 80088d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088dc:	e7f7      	b.n	80088ce <memmove+0x24>
	...

080088e0 <_sbrk_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	2300      	movs	r3, #0
 80088e4:	4d05      	ldr	r5, [pc, #20]	@ (80088fc <_sbrk_r+0x1c>)
 80088e6:	4604      	mov	r4, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	602b      	str	r3, [r5, #0]
 80088ec:	f7fa f81e 	bl	800292c <_sbrk>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_sbrk_r+0x1a>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_sbrk_r+0x1a>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	20000970 	.word	0x20000970

08008900 <__assert_func>:
 8008900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008902:	4614      	mov	r4, r2
 8008904:	461a      	mov	r2, r3
 8008906:	4b09      	ldr	r3, [pc, #36]	@ (800892c <__assert_func+0x2c>)
 8008908:	4605      	mov	r5, r0
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68d8      	ldr	r0, [r3, #12]
 800890e:	b954      	cbnz	r4, 8008926 <__assert_func+0x26>
 8008910:	4b07      	ldr	r3, [pc, #28]	@ (8008930 <__assert_func+0x30>)
 8008912:	461c      	mov	r4, r3
 8008914:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008918:	9100      	str	r1, [sp, #0]
 800891a:	462b      	mov	r3, r5
 800891c:	4905      	ldr	r1, [pc, #20]	@ (8008934 <__assert_func+0x34>)
 800891e:	f000 f95b 	bl	8008bd8 <fiprintf>
 8008922:	f000 f96b 	bl	8008bfc <abort>
 8008926:	4b04      	ldr	r3, [pc, #16]	@ (8008938 <__assert_func+0x38>)
 8008928:	e7f4      	b.n	8008914 <__assert_func+0x14>
 800892a:	bf00      	nop
 800892c:	20000020 	.word	0x20000020
 8008930:	08009459 	.word	0x08009459
 8008934:	0800942b 	.word	0x0800942b
 8008938:	0800941e 	.word	0x0800941e

0800893c <_calloc_r>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	fba1 5402 	umull	r5, r4, r1, r2
 8008942:	b93c      	cbnz	r4, 8008954 <_calloc_r+0x18>
 8008944:	4629      	mov	r1, r5
 8008946:	f7fe fe1d 	bl	8007584 <_malloc_r>
 800894a:	4606      	mov	r6, r0
 800894c:	b928      	cbnz	r0, 800895a <_calloc_r+0x1e>
 800894e:	2600      	movs	r6, #0
 8008950:	4630      	mov	r0, r6
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	220c      	movs	r2, #12
 8008956:	6002      	str	r2, [r0, #0]
 8008958:	e7f9      	b.n	800894e <_calloc_r+0x12>
 800895a:	462a      	mov	r2, r5
 800895c:	4621      	mov	r1, r4
 800895e:	f7fd feb2 	bl	80066c6 <memset>
 8008962:	e7f5      	b.n	8008950 <_calloc_r+0x14>

08008964 <__ascii_mbtowc>:
 8008964:	b082      	sub	sp, #8
 8008966:	b901      	cbnz	r1, 800896a <__ascii_mbtowc+0x6>
 8008968:	a901      	add	r1, sp, #4
 800896a:	b142      	cbz	r2, 800897e <__ascii_mbtowc+0x1a>
 800896c:	b14b      	cbz	r3, 8008982 <__ascii_mbtowc+0x1e>
 800896e:	7813      	ldrb	r3, [r2, #0]
 8008970:	600b      	str	r3, [r1, #0]
 8008972:	7812      	ldrb	r2, [r2, #0]
 8008974:	1e10      	subs	r0, r2, #0
 8008976:	bf18      	it	ne
 8008978:	2001      	movne	r0, #1
 800897a:	b002      	add	sp, #8
 800897c:	4770      	bx	lr
 800897e:	4610      	mov	r0, r2
 8008980:	e7fb      	b.n	800897a <__ascii_mbtowc+0x16>
 8008982:	f06f 0001 	mvn.w	r0, #1
 8008986:	e7f8      	b.n	800897a <__ascii_mbtowc+0x16>

08008988 <_realloc_r>:
 8008988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898c:	4680      	mov	r8, r0
 800898e:	4615      	mov	r5, r2
 8008990:	460c      	mov	r4, r1
 8008992:	b921      	cbnz	r1, 800899e <_realloc_r+0x16>
 8008994:	4611      	mov	r1, r2
 8008996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	f7fe bdf3 	b.w	8007584 <_malloc_r>
 800899e:	b92a      	cbnz	r2, 80089ac <_realloc_r+0x24>
 80089a0:	f7fe fd7e 	bl	80074a0 <_free_r>
 80089a4:	2400      	movs	r4, #0
 80089a6:	4620      	mov	r0, r4
 80089a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ac:	f000 f92d 	bl	8008c0a <_malloc_usable_size_r>
 80089b0:	4285      	cmp	r5, r0
 80089b2:	4606      	mov	r6, r0
 80089b4:	d802      	bhi.n	80089bc <_realloc_r+0x34>
 80089b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80089ba:	d8f4      	bhi.n	80089a6 <_realloc_r+0x1e>
 80089bc:	4629      	mov	r1, r5
 80089be:	4640      	mov	r0, r8
 80089c0:	f7fe fde0 	bl	8007584 <_malloc_r>
 80089c4:	4607      	mov	r7, r0
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d0ec      	beq.n	80089a4 <_realloc_r+0x1c>
 80089ca:	42b5      	cmp	r5, r6
 80089cc:	462a      	mov	r2, r5
 80089ce:	4621      	mov	r1, r4
 80089d0:	bf28      	it	cs
 80089d2:	4632      	movcs	r2, r6
 80089d4:	f7fd ff05 	bl	80067e2 <memcpy>
 80089d8:	4621      	mov	r1, r4
 80089da:	4640      	mov	r0, r8
 80089dc:	f7fe fd60 	bl	80074a0 <_free_r>
 80089e0:	463c      	mov	r4, r7
 80089e2:	e7e0      	b.n	80089a6 <_realloc_r+0x1e>

080089e4 <_strtol_l.constprop.0>:
 80089e4:	2b24      	cmp	r3, #36	@ 0x24
 80089e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ea:	4686      	mov	lr, r0
 80089ec:	4690      	mov	r8, r2
 80089ee:	d801      	bhi.n	80089f4 <_strtol_l.constprop.0+0x10>
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d106      	bne.n	8008a02 <_strtol_l.constprop.0+0x1e>
 80089f4:	f7fd feba 	bl	800676c <__errno>
 80089f8:	2316      	movs	r3, #22
 80089fa:	6003      	str	r3, [r0, #0]
 80089fc:	2000      	movs	r0, #0
 80089fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a02:	460d      	mov	r5, r1
 8008a04:	4833      	ldr	r0, [pc, #204]	@ (8008ad4 <_strtol_l.constprop.0+0xf0>)
 8008a06:	462a      	mov	r2, r5
 8008a08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a0c:	5d06      	ldrb	r6, [r0, r4]
 8008a0e:	f016 0608 	ands.w	r6, r6, #8
 8008a12:	d1f8      	bne.n	8008a06 <_strtol_l.constprop.0+0x22>
 8008a14:	2c2d      	cmp	r4, #45	@ 0x2d
 8008a16:	d12d      	bne.n	8008a74 <_strtol_l.constprop.0+0x90>
 8008a18:	2601      	movs	r6, #1
 8008a1a:	782c      	ldrb	r4, [r5, #0]
 8008a1c:	1c95      	adds	r5, r2, #2
 8008a1e:	f033 0210 	bics.w	r2, r3, #16
 8008a22:	d109      	bne.n	8008a38 <_strtol_l.constprop.0+0x54>
 8008a24:	2c30      	cmp	r4, #48	@ 0x30
 8008a26:	d12a      	bne.n	8008a7e <_strtol_l.constprop.0+0x9a>
 8008a28:	782a      	ldrb	r2, [r5, #0]
 8008a2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a2e:	2a58      	cmp	r2, #88	@ 0x58
 8008a30:	d125      	bne.n	8008a7e <_strtol_l.constprop.0+0x9a>
 8008a32:	2310      	movs	r3, #16
 8008a34:	786c      	ldrb	r4, [r5, #1]
 8008a36:	3502      	adds	r5, #2
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008a3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a42:	fbbc f9f3 	udiv	r9, ip, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008a50:	2f09      	cmp	r7, #9
 8008a52:	d81b      	bhi.n	8008a8c <_strtol_l.constprop.0+0xa8>
 8008a54:	463c      	mov	r4, r7
 8008a56:	42a3      	cmp	r3, r4
 8008a58:	dd27      	ble.n	8008aaa <_strtol_l.constprop.0+0xc6>
 8008a5a:	1c57      	adds	r7, r2, #1
 8008a5c:	d007      	beq.n	8008a6e <_strtol_l.constprop.0+0x8a>
 8008a5e:	4581      	cmp	r9, r0
 8008a60:	d320      	bcc.n	8008aa4 <_strtol_l.constprop.0+0xc0>
 8008a62:	d101      	bne.n	8008a68 <_strtol_l.constprop.0+0x84>
 8008a64:	45a2      	cmp	sl, r4
 8008a66:	db1d      	blt.n	8008aa4 <_strtol_l.constprop.0+0xc0>
 8008a68:	2201      	movs	r2, #1
 8008a6a:	fb00 4003 	mla	r0, r0, r3, r4
 8008a6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a72:	e7eb      	b.n	8008a4c <_strtol_l.constprop.0+0x68>
 8008a74:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a76:	bf04      	itt	eq
 8008a78:	782c      	ldrbeq	r4, [r5, #0]
 8008a7a:	1c95      	addeq	r5, r2, #2
 8008a7c:	e7cf      	b.n	8008a1e <_strtol_l.constprop.0+0x3a>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1da      	bne.n	8008a38 <_strtol_l.constprop.0+0x54>
 8008a82:	2c30      	cmp	r4, #48	@ 0x30
 8008a84:	bf0c      	ite	eq
 8008a86:	2308      	moveq	r3, #8
 8008a88:	230a      	movne	r3, #10
 8008a8a:	e7d5      	b.n	8008a38 <_strtol_l.constprop.0+0x54>
 8008a8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008a90:	2f19      	cmp	r7, #25
 8008a92:	d801      	bhi.n	8008a98 <_strtol_l.constprop.0+0xb4>
 8008a94:	3c37      	subs	r4, #55	@ 0x37
 8008a96:	e7de      	b.n	8008a56 <_strtol_l.constprop.0+0x72>
 8008a98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008a9c:	2f19      	cmp	r7, #25
 8008a9e:	d804      	bhi.n	8008aaa <_strtol_l.constprop.0+0xc6>
 8008aa0:	3c57      	subs	r4, #87	@ 0x57
 8008aa2:	e7d8      	b.n	8008a56 <_strtol_l.constprop.0+0x72>
 8008aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa8:	e7e1      	b.n	8008a6e <_strtol_l.constprop.0+0x8a>
 8008aaa:	1c53      	adds	r3, r2, #1
 8008aac:	d108      	bne.n	8008ac0 <_strtol_l.constprop.0+0xdc>
 8008aae:	2322      	movs	r3, #34	@ 0x22
 8008ab0:	4660      	mov	r0, ip
 8008ab2:	f8ce 3000 	str.w	r3, [lr]
 8008ab6:	f1b8 0f00 	cmp.w	r8, #0
 8008aba:	d0a0      	beq.n	80089fe <_strtol_l.constprop.0+0x1a>
 8008abc:	1e69      	subs	r1, r5, #1
 8008abe:	e006      	b.n	8008ace <_strtol_l.constprop.0+0xea>
 8008ac0:	b106      	cbz	r6, 8008ac4 <_strtol_l.constprop.0+0xe0>
 8008ac2:	4240      	negs	r0, r0
 8008ac4:	f1b8 0f00 	cmp.w	r8, #0
 8008ac8:	d099      	beq.n	80089fe <_strtol_l.constprop.0+0x1a>
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	d1f6      	bne.n	8008abc <_strtol_l.constprop.0+0xd8>
 8008ace:	f8c8 1000 	str.w	r1, [r8]
 8008ad2:	e794      	b.n	80089fe <_strtol_l.constprop.0+0x1a>
 8008ad4:	0800945b 	.word	0x0800945b

08008ad8 <_strtol_r>:
 8008ad8:	f7ff bf84 	b.w	80089e4 <_strtol_l.constprop.0>

08008adc <_strtoul_l.constprop.0>:
 8008adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ae0:	4686      	mov	lr, r0
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	4e33      	ldr	r6, [pc, #204]	@ (8008bb4 <_strtoul_l.constprop.0+0xd8>)
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008aec:	5d37      	ldrb	r7, [r6, r4]
 8008aee:	f017 0708 	ands.w	r7, r7, #8
 8008af2:	d1f8      	bne.n	8008ae6 <_strtoul_l.constprop.0+0xa>
 8008af4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008af6:	d12f      	bne.n	8008b58 <_strtoul_l.constprop.0+0x7c>
 8008af8:	2701      	movs	r7, #1
 8008afa:	782c      	ldrb	r4, [r5, #0]
 8008afc:	1c85      	adds	r5, r0, #2
 8008afe:	f033 0010 	bics.w	r0, r3, #16
 8008b02:	d109      	bne.n	8008b18 <_strtoul_l.constprop.0+0x3c>
 8008b04:	2c30      	cmp	r4, #48	@ 0x30
 8008b06:	d12c      	bne.n	8008b62 <_strtoul_l.constprop.0+0x86>
 8008b08:	7828      	ldrb	r0, [r5, #0]
 8008b0a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008b0e:	2858      	cmp	r0, #88	@ 0x58
 8008b10:	d127      	bne.n	8008b62 <_strtoul_l.constprop.0+0x86>
 8008b12:	2310      	movs	r3, #16
 8008b14:	786c      	ldrb	r4, [r5, #1]
 8008b16:	3502      	adds	r5, #2
 8008b18:	f04f 38ff 	mov.w	r8, #4294967295
 8008b1c:	fbb8 f8f3 	udiv	r8, r8, r3
 8008b20:	2600      	movs	r6, #0
 8008b22:	fb03 f908 	mul.w	r9, r3, r8
 8008b26:	4630      	mov	r0, r6
 8008b28:	ea6f 0909 	mvn.w	r9, r9
 8008b2c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008b30:	f1bc 0f09 	cmp.w	ip, #9
 8008b34:	d81c      	bhi.n	8008b70 <_strtoul_l.constprop.0+0x94>
 8008b36:	4664      	mov	r4, ip
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	dd2a      	ble.n	8008b92 <_strtoul_l.constprop.0+0xb6>
 8008b3c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008b40:	d007      	beq.n	8008b52 <_strtoul_l.constprop.0+0x76>
 8008b42:	4580      	cmp	r8, r0
 8008b44:	d322      	bcc.n	8008b8c <_strtoul_l.constprop.0+0xb0>
 8008b46:	d101      	bne.n	8008b4c <_strtoul_l.constprop.0+0x70>
 8008b48:	45a1      	cmp	r9, r4
 8008b4a:	db1f      	blt.n	8008b8c <_strtoul_l.constprop.0+0xb0>
 8008b4c:	2601      	movs	r6, #1
 8008b4e:	fb00 4003 	mla	r0, r0, r3, r4
 8008b52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b56:	e7e9      	b.n	8008b2c <_strtoul_l.constprop.0+0x50>
 8008b58:	2c2b      	cmp	r4, #43	@ 0x2b
 8008b5a:	bf04      	itt	eq
 8008b5c:	782c      	ldrbeq	r4, [r5, #0]
 8008b5e:	1c85      	addeq	r5, r0, #2
 8008b60:	e7cd      	b.n	8008afe <_strtoul_l.constprop.0+0x22>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1d8      	bne.n	8008b18 <_strtoul_l.constprop.0+0x3c>
 8008b66:	2c30      	cmp	r4, #48	@ 0x30
 8008b68:	bf0c      	ite	eq
 8008b6a:	2308      	moveq	r3, #8
 8008b6c:	230a      	movne	r3, #10
 8008b6e:	e7d3      	b.n	8008b18 <_strtoul_l.constprop.0+0x3c>
 8008b70:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008b74:	f1bc 0f19 	cmp.w	ip, #25
 8008b78:	d801      	bhi.n	8008b7e <_strtoul_l.constprop.0+0xa2>
 8008b7a:	3c37      	subs	r4, #55	@ 0x37
 8008b7c:	e7dc      	b.n	8008b38 <_strtoul_l.constprop.0+0x5c>
 8008b7e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008b82:	f1bc 0f19 	cmp.w	ip, #25
 8008b86:	d804      	bhi.n	8008b92 <_strtoul_l.constprop.0+0xb6>
 8008b88:	3c57      	subs	r4, #87	@ 0x57
 8008b8a:	e7d5      	b.n	8008b38 <_strtoul_l.constprop.0+0x5c>
 8008b8c:	f04f 36ff 	mov.w	r6, #4294967295
 8008b90:	e7df      	b.n	8008b52 <_strtoul_l.constprop.0+0x76>
 8008b92:	1c73      	adds	r3, r6, #1
 8008b94:	d106      	bne.n	8008ba4 <_strtoul_l.constprop.0+0xc8>
 8008b96:	2322      	movs	r3, #34	@ 0x22
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f8ce 3000 	str.w	r3, [lr]
 8008b9e:	b932      	cbnz	r2, 8008bae <_strtoul_l.constprop.0+0xd2>
 8008ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ba4:	b107      	cbz	r7, 8008ba8 <_strtoul_l.constprop.0+0xcc>
 8008ba6:	4240      	negs	r0, r0
 8008ba8:	2a00      	cmp	r2, #0
 8008baa:	d0f9      	beq.n	8008ba0 <_strtoul_l.constprop.0+0xc4>
 8008bac:	b106      	cbz	r6, 8008bb0 <_strtoul_l.constprop.0+0xd4>
 8008bae:	1e69      	subs	r1, r5, #1
 8008bb0:	6011      	str	r1, [r2, #0]
 8008bb2:	e7f5      	b.n	8008ba0 <_strtoul_l.constprop.0+0xc4>
 8008bb4:	0800945b 	.word	0x0800945b

08008bb8 <_strtoul_r>:
 8008bb8:	f7ff bf90 	b.w	8008adc <_strtoul_l.constprop.0>

08008bbc <__ascii_wctomb>:
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	b141      	cbz	r1, 8008bd4 <__ascii_wctomb+0x18>
 8008bc2:	2aff      	cmp	r2, #255	@ 0xff
 8008bc4:	d904      	bls.n	8008bd0 <__ascii_wctomb+0x14>
 8008bc6:	228a      	movs	r2, #138	@ 0x8a
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	4770      	bx	lr
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	700a      	strb	r2, [r1, #0]
 8008bd4:	4770      	bx	lr
	...

08008bd8 <fiprintf>:
 8008bd8:	b40e      	push	{r1, r2, r3}
 8008bda:	b503      	push	{r0, r1, lr}
 8008bdc:	4601      	mov	r1, r0
 8008bde:	ab03      	add	r3, sp, #12
 8008be0:	4805      	ldr	r0, [pc, #20]	@ (8008bf8 <fiprintf+0x20>)
 8008be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be6:	6800      	ldr	r0, [r0, #0]
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	f000 f83d 	bl	8008c68 <_vfiprintf_r>
 8008bee:	b002      	add	sp, #8
 8008bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf4:	b003      	add	sp, #12
 8008bf6:	4770      	bx	lr
 8008bf8:	20000020 	.word	0x20000020

08008bfc <abort>:
 8008bfc:	2006      	movs	r0, #6
 8008bfe:	b508      	push	{r3, lr}
 8008c00:	f000 fa06 	bl	8009010 <raise>
 8008c04:	2001      	movs	r0, #1
 8008c06:	f7f9 fe1d 	bl	8002844 <_exit>

08008c0a <_malloc_usable_size_r>:
 8008c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c0e:	1f18      	subs	r0, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	bfbc      	itt	lt
 8008c14:	580b      	ldrlt	r3, [r1, r0]
 8008c16:	18c0      	addlt	r0, r0, r3
 8008c18:	4770      	bx	lr

08008c1a <__sfputc_r>:
 8008c1a:	6893      	ldr	r3, [r2, #8]
 8008c1c:	b410      	push	{r4}
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	6093      	str	r3, [r2, #8]
 8008c24:	da07      	bge.n	8008c36 <__sfputc_r+0x1c>
 8008c26:	6994      	ldr	r4, [r2, #24]
 8008c28:	42a3      	cmp	r3, r4
 8008c2a:	db01      	blt.n	8008c30 <__sfputc_r+0x16>
 8008c2c:	290a      	cmp	r1, #10
 8008c2e:	d102      	bne.n	8008c36 <__sfputc_r+0x1c>
 8008c30:	bc10      	pop	{r4}
 8008c32:	f000 b931 	b.w	8008e98 <__swbuf_r>
 8008c36:	6813      	ldr	r3, [r2, #0]
 8008c38:	1c58      	adds	r0, r3, #1
 8008c3a:	6010      	str	r0, [r2, #0]
 8008c3c:	7019      	strb	r1, [r3, #0]
 8008c3e:	4608      	mov	r0, r1
 8008c40:	bc10      	pop	{r4}
 8008c42:	4770      	bx	lr

08008c44 <__sfputs_r>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	4606      	mov	r6, r0
 8008c48:	460f      	mov	r7, r1
 8008c4a:	4614      	mov	r4, r2
 8008c4c:	18d5      	adds	r5, r2, r3
 8008c4e:	42ac      	cmp	r4, r5
 8008c50:	d101      	bne.n	8008c56 <__sfputs_r+0x12>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e007      	b.n	8008c66 <__sfputs_r+0x22>
 8008c56:	463a      	mov	r2, r7
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5e:	f7ff ffdc 	bl	8008c1a <__sfputc_r>
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	d1f3      	bne.n	8008c4e <__sfputs_r+0xa>
 8008c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c68 <_vfiprintf_r>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	4614      	mov	r4, r2
 8008c70:	4698      	mov	r8, r3
 8008c72:	4606      	mov	r6, r0
 8008c74:	b09d      	sub	sp, #116	@ 0x74
 8008c76:	b118      	cbz	r0, 8008c80 <_vfiprintf_r+0x18>
 8008c78:	6a03      	ldr	r3, [r0, #32]
 8008c7a:	b90b      	cbnz	r3, 8008c80 <_vfiprintf_r+0x18>
 8008c7c:	f7fd fc5e 	bl	800653c <__sinit>
 8008c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c82:	07d9      	lsls	r1, r3, #31
 8008c84:	d405      	bmi.n	8008c92 <_vfiprintf_r+0x2a>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	059a      	lsls	r2, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_vfiprintf_r+0x2a>
 8008c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c8e:	f7fd fd98 	bl	80067c2 <__retarget_lock_acquire_recursive>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	071b      	lsls	r3, r3, #28
 8008c96:	d501      	bpl.n	8008c9c <_vfiprintf_r+0x34>
 8008c98:	692b      	ldr	r3, [r5, #16]
 8008c9a:	b99b      	cbnz	r3, 8008cc4 <_vfiprintf_r+0x5c>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f000 f938 	bl	8008f14 <__swsetup_r>
 8008ca4:	b170      	cbz	r0, 8008cc4 <_vfiprintf_r+0x5c>
 8008ca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ca8:	07dc      	lsls	r4, r3, #31
 8008caa:	d504      	bpl.n	8008cb6 <_vfiprintf_r+0x4e>
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	b01d      	add	sp, #116	@ 0x74
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	0598      	lsls	r0, r3, #22
 8008cba:	d4f7      	bmi.n	8008cac <_vfiprintf_r+0x44>
 8008cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cbe:	f7fd fd81 	bl	80067c4 <__retarget_lock_release_recursive>
 8008cc2:	e7f3      	b.n	8008cac <_vfiprintf_r+0x44>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cce:	2330      	movs	r3, #48	@ 0x30
 8008cd0:	f04f 0901 	mov.w	r9, #1
 8008cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008e84 <_vfiprintf_r+0x21c>
 8008cdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ce0:	4623      	mov	r3, r4
 8008ce2:	469a      	mov	sl, r3
 8008ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce8:	b10a      	cbz	r2, 8008cee <_vfiprintf_r+0x86>
 8008cea:	2a25      	cmp	r2, #37	@ 0x25
 8008cec:	d1f9      	bne.n	8008ce2 <_vfiprintf_r+0x7a>
 8008cee:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf2:	d00b      	beq.n	8008d0c <_vfiprintf_r+0xa4>
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f7ff ffa2 	bl	8008c44 <__sfputs_r>
 8008d00:	3001      	adds	r0, #1
 8008d02:	f000 80a7 	beq.w	8008e54 <_vfiprintf_r+0x1ec>
 8008d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d08:	445a      	add	r2, fp
 8008d0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 809f 	beq.w	8008e54 <_vfiprintf_r+0x1ec>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d20:	f10a 0a01 	add.w	sl, sl, #1
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	9307      	str	r3, [sp, #28]
 8008d28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d2e:	4654      	mov	r4, sl
 8008d30:	2205      	movs	r2, #5
 8008d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d36:	4853      	ldr	r0, [pc, #332]	@ (8008e84 <_vfiprintf_r+0x21c>)
 8008d38:	f7fd fd45 	bl	80067c6 <memchr>
 8008d3c:	9a04      	ldr	r2, [sp, #16]
 8008d3e:	b9d8      	cbnz	r0, 8008d78 <_vfiprintf_r+0x110>
 8008d40:	06d1      	lsls	r1, r2, #27
 8008d42:	bf44      	itt	mi
 8008d44:	2320      	movmi	r3, #32
 8008d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d4a:	0713      	lsls	r3, r2, #28
 8008d4c:	bf44      	itt	mi
 8008d4e:	232b      	movmi	r3, #43	@ 0x2b
 8008d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d54:	f89a 3000 	ldrb.w	r3, [sl]
 8008d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d5a:	d015      	beq.n	8008d88 <_vfiprintf_r+0x120>
 8008d5c:	4654      	mov	r4, sl
 8008d5e:	2000      	movs	r0, #0
 8008d60:	f04f 0c0a 	mov.w	ip, #10
 8008d64:	9a07      	ldr	r2, [sp, #28]
 8008d66:	4621      	mov	r1, r4
 8008d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6c:	3b30      	subs	r3, #48	@ 0x30
 8008d6e:	2b09      	cmp	r3, #9
 8008d70:	d94b      	bls.n	8008e0a <_vfiprintf_r+0x1a2>
 8008d72:	b1b0      	cbz	r0, 8008da2 <_vfiprintf_r+0x13a>
 8008d74:	9207      	str	r2, [sp, #28]
 8008d76:	e014      	b.n	8008da2 <_vfiprintf_r+0x13a>
 8008d78:	eba0 0308 	sub.w	r3, r0, r8
 8008d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d80:	4313      	orrs	r3, r2
 8008d82:	46a2      	mov	sl, r4
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	e7d2      	b.n	8008d2e <_vfiprintf_r+0xc6>
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	1d19      	adds	r1, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	9103      	str	r1, [sp, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bfbb      	ittet	lt
 8008d94:	425b      	neglt	r3, r3
 8008d96:	f042 0202 	orrlt.w	r2, r2, #2
 8008d9a:	9307      	strge	r3, [sp, #28]
 8008d9c:	9307      	strlt	r3, [sp, #28]
 8008d9e:	bfb8      	it	lt
 8008da0:	9204      	strlt	r2, [sp, #16]
 8008da2:	7823      	ldrb	r3, [r4, #0]
 8008da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008da6:	d10a      	bne.n	8008dbe <_vfiprintf_r+0x156>
 8008da8:	7863      	ldrb	r3, [r4, #1]
 8008daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dac:	d132      	bne.n	8008e14 <_vfiprintf_r+0x1ac>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	3402      	adds	r4, #2
 8008db2:	1d1a      	adds	r2, r3, #4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	9203      	str	r2, [sp, #12]
 8008db8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008e88 <_vfiprintf_r+0x220>
 8008dc2:	2203      	movs	r2, #3
 8008dc4:	4650      	mov	r0, sl
 8008dc6:	7821      	ldrb	r1, [r4, #0]
 8008dc8:	f7fd fcfd 	bl	80067c6 <memchr>
 8008dcc:	b138      	cbz	r0, 8008dde <_vfiprintf_r+0x176>
 8008dce:	2240      	movs	r2, #64	@ 0x40
 8008dd0:	9b04      	ldr	r3, [sp, #16]
 8008dd2:	eba0 000a 	sub.w	r0, r0, sl
 8008dd6:	4082      	lsls	r2, r0
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	3401      	adds	r4, #1
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de2:	2206      	movs	r2, #6
 8008de4:	4829      	ldr	r0, [pc, #164]	@ (8008e8c <_vfiprintf_r+0x224>)
 8008de6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dea:	f7fd fcec 	bl	80067c6 <memchr>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d03f      	beq.n	8008e72 <_vfiprintf_r+0x20a>
 8008df2:	4b27      	ldr	r3, [pc, #156]	@ (8008e90 <_vfiprintf_r+0x228>)
 8008df4:	bb1b      	cbnz	r3, 8008e3e <_vfiprintf_r+0x1d6>
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	3307      	adds	r3, #7
 8008dfa:	f023 0307 	bic.w	r3, r3, #7
 8008dfe:	3308      	adds	r3, #8
 8008e00:	9303      	str	r3, [sp, #12]
 8008e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e04:	443b      	add	r3, r7
 8008e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e08:	e76a      	b.n	8008ce0 <_vfiprintf_r+0x78>
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e12:	e7a8      	b.n	8008d66 <_vfiprintf_r+0xfe>
 8008e14:	2300      	movs	r3, #0
 8008e16:	f04f 0c0a 	mov.w	ip, #10
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	3401      	adds	r4, #1
 8008e1e:	9305      	str	r3, [sp, #20]
 8008e20:	4620      	mov	r0, r4
 8008e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e26:	3a30      	subs	r2, #48	@ 0x30
 8008e28:	2a09      	cmp	r2, #9
 8008e2a:	d903      	bls.n	8008e34 <_vfiprintf_r+0x1cc>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0c6      	beq.n	8008dbe <_vfiprintf_r+0x156>
 8008e30:	9105      	str	r1, [sp, #20]
 8008e32:	e7c4      	b.n	8008dbe <_vfiprintf_r+0x156>
 8008e34:	4604      	mov	r4, r0
 8008e36:	2301      	movs	r3, #1
 8008e38:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e3c:	e7f0      	b.n	8008e20 <_vfiprintf_r+0x1b8>
 8008e3e:	ab03      	add	r3, sp, #12
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	462a      	mov	r2, r5
 8008e44:	4630      	mov	r0, r6
 8008e46:	4b13      	ldr	r3, [pc, #76]	@ (8008e94 <_vfiprintf_r+0x22c>)
 8008e48:	a904      	add	r1, sp, #16
 8008e4a:	f7fc ff2d 	bl	8005ca8 <_printf_float>
 8008e4e:	4607      	mov	r7, r0
 8008e50:	1c78      	adds	r0, r7, #1
 8008e52:	d1d6      	bne.n	8008e02 <_vfiprintf_r+0x19a>
 8008e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e56:	07d9      	lsls	r1, r3, #31
 8008e58:	d405      	bmi.n	8008e66 <_vfiprintf_r+0x1fe>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	059a      	lsls	r2, r3, #22
 8008e5e:	d402      	bmi.n	8008e66 <_vfiprintf_r+0x1fe>
 8008e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e62:	f7fd fcaf 	bl	80067c4 <__retarget_lock_release_recursive>
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	065b      	lsls	r3, r3, #25
 8008e6a:	f53f af1f 	bmi.w	8008cac <_vfiprintf_r+0x44>
 8008e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e70:	e71e      	b.n	8008cb0 <_vfiprintf_r+0x48>
 8008e72:	ab03      	add	r3, sp, #12
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	462a      	mov	r2, r5
 8008e78:	4630      	mov	r0, r6
 8008e7a:	4b06      	ldr	r3, [pc, #24]	@ (8008e94 <_vfiprintf_r+0x22c>)
 8008e7c:	a904      	add	r1, sp, #16
 8008e7e:	f7fd f9b1 	bl	80061e4 <_printf_i>
 8008e82:	e7e4      	b.n	8008e4e <_vfiprintf_r+0x1e6>
 8008e84:	080093e8 	.word	0x080093e8
 8008e88:	080093ee 	.word	0x080093ee
 8008e8c:	080093f2 	.word	0x080093f2
 8008e90:	08005ca9 	.word	0x08005ca9
 8008e94:	08008c45 	.word	0x08008c45

08008e98 <__swbuf_r>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	460e      	mov	r6, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	b118      	cbz	r0, 8008eaa <__swbuf_r+0x12>
 8008ea2:	6a03      	ldr	r3, [r0, #32]
 8008ea4:	b90b      	cbnz	r3, 8008eaa <__swbuf_r+0x12>
 8008ea6:	f7fd fb49 	bl	800653c <__sinit>
 8008eaa:	69a3      	ldr	r3, [r4, #24]
 8008eac:	60a3      	str	r3, [r4, #8]
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	071a      	lsls	r2, r3, #28
 8008eb2:	d501      	bpl.n	8008eb8 <__swbuf_r+0x20>
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	b943      	cbnz	r3, 8008eca <__swbuf_r+0x32>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f000 f82a 	bl	8008f14 <__swsetup_r>
 8008ec0:	b118      	cbz	r0, 8008eca <__swbuf_r+0x32>
 8008ec2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	6922      	ldr	r2, [r4, #16]
 8008ece:	b2f6      	uxtb	r6, r6
 8008ed0:	1a98      	subs	r0, r3, r2
 8008ed2:	6963      	ldr	r3, [r4, #20]
 8008ed4:	4637      	mov	r7, r6
 8008ed6:	4283      	cmp	r3, r0
 8008ed8:	dc05      	bgt.n	8008ee6 <__swbuf_r+0x4e>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4628      	mov	r0, r5
 8008ede:	f7ff fc4b 	bl	8008778 <_fflush_r>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d1ed      	bne.n	8008ec2 <__swbuf_r+0x2a>
 8008ee6:	68a3      	ldr	r3, [r4, #8]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	60a3      	str	r3, [r4, #8]
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	6022      	str	r2, [r4, #0]
 8008ef2:	701e      	strb	r6, [r3, #0]
 8008ef4:	6962      	ldr	r2, [r4, #20]
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d004      	beq.n	8008f06 <__swbuf_r+0x6e>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	07db      	lsls	r3, r3, #31
 8008f00:	d5e1      	bpl.n	8008ec6 <__swbuf_r+0x2e>
 8008f02:	2e0a      	cmp	r6, #10
 8008f04:	d1df      	bne.n	8008ec6 <__swbuf_r+0x2e>
 8008f06:	4621      	mov	r1, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f7ff fc35 	bl	8008778 <_fflush_r>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d0d9      	beq.n	8008ec6 <__swbuf_r+0x2e>
 8008f12:	e7d6      	b.n	8008ec2 <__swbuf_r+0x2a>

08008f14 <__swsetup_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4b29      	ldr	r3, [pc, #164]	@ (8008fbc <__swsetup_r+0xa8>)
 8008f18:	4605      	mov	r5, r0
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	b118      	cbz	r0, 8008f28 <__swsetup_r+0x14>
 8008f20:	6a03      	ldr	r3, [r0, #32]
 8008f22:	b90b      	cbnz	r3, 8008f28 <__swsetup_r+0x14>
 8008f24:	f7fd fb0a 	bl	800653c <__sinit>
 8008f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2c:	0719      	lsls	r1, r3, #28
 8008f2e:	d422      	bmi.n	8008f76 <__swsetup_r+0x62>
 8008f30:	06da      	lsls	r2, r3, #27
 8008f32:	d407      	bmi.n	8008f44 <__swsetup_r+0x30>
 8008f34:	2209      	movs	r2, #9
 8008f36:	602a      	str	r2, [r5, #0]
 8008f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	e033      	b.n	8008fac <__swsetup_r+0x98>
 8008f44:	0758      	lsls	r0, r3, #29
 8008f46:	d512      	bpl.n	8008f6e <__swsetup_r+0x5a>
 8008f48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f4a:	b141      	cbz	r1, 8008f5e <__swsetup_r+0x4a>
 8008f4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f50:	4299      	cmp	r1, r3
 8008f52:	d002      	beq.n	8008f5a <__swsetup_r+0x46>
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7fe faa3 	bl	80074a0 <_free_r>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	2300      	movs	r3, #0
 8008f68:	6063      	str	r3, [r4, #4]
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f043 0308 	orr.w	r3, r3, #8
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	6923      	ldr	r3, [r4, #16]
 8008f78:	b94b      	cbnz	r3, 8008f8e <__swsetup_r+0x7a>
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f84:	d003      	beq.n	8008f8e <__swsetup_r+0x7a>
 8008f86:	4621      	mov	r1, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 f882 	bl	8009092 <__smakebuf_r>
 8008f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f92:	f013 0201 	ands.w	r2, r3, #1
 8008f96:	d00a      	beq.n	8008fae <__swsetup_r+0x9a>
 8008f98:	2200      	movs	r2, #0
 8008f9a:	60a2      	str	r2, [r4, #8]
 8008f9c:	6962      	ldr	r2, [r4, #20]
 8008f9e:	4252      	negs	r2, r2
 8008fa0:	61a2      	str	r2, [r4, #24]
 8008fa2:	6922      	ldr	r2, [r4, #16]
 8008fa4:	b942      	cbnz	r2, 8008fb8 <__swsetup_r+0xa4>
 8008fa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008faa:	d1c5      	bne.n	8008f38 <__swsetup_r+0x24>
 8008fac:	bd38      	pop	{r3, r4, r5, pc}
 8008fae:	0799      	lsls	r1, r3, #30
 8008fb0:	bf58      	it	pl
 8008fb2:	6962      	ldrpl	r2, [r4, #20]
 8008fb4:	60a2      	str	r2, [r4, #8]
 8008fb6:	e7f4      	b.n	8008fa2 <__swsetup_r+0x8e>
 8008fb8:	2000      	movs	r0, #0
 8008fba:	e7f7      	b.n	8008fac <__swsetup_r+0x98>
 8008fbc:	20000020 	.word	0x20000020

08008fc0 <_raise_r>:
 8008fc0:	291f      	cmp	r1, #31
 8008fc2:	b538      	push	{r3, r4, r5, lr}
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	d904      	bls.n	8008fd4 <_raise_r+0x14>
 8008fca:	2316      	movs	r3, #22
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fd6:	b112      	cbz	r2, 8008fde <_raise_r+0x1e>
 8008fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fdc:	b94b      	cbnz	r3, 8008ff2 <_raise_r+0x32>
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 f830 	bl	8009044 <_getpid_r>
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	4601      	mov	r1, r0
 8008fe8:	4628      	mov	r0, r5
 8008fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fee:	f000 b817 	b.w	8009020 <_kill_r>
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d00a      	beq.n	800900c <_raise_r+0x4c>
 8008ff6:	1c59      	adds	r1, r3, #1
 8008ff8:	d103      	bne.n	8009002 <_raise_r+0x42>
 8008ffa:	2316      	movs	r3, #22
 8008ffc:	6003      	str	r3, [r0, #0]
 8008ffe:	2001      	movs	r0, #1
 8009000:	e7e7      	b.n	8008fd2 <_raise_r+0x12>
 8009002:	2100      	movs	r1, #0
 8009004:	4620      	mov	r0, r4
 8009006:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800900a:	4798      	blx	r3
 800900c:	2000      	movs	r0, #0
 800900e:	e7e0      	b.n	8008fd2 <_raise_r+0x12>

08009010 <raise>:
 8009010:	4b02      	ldr	r3, [pc, #8]	@ (800901c <raise+0xc>)
 8009012:	4601      	mov	r1, r0
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	f7ff bfd3 	b.w	8008fc0 <_raise_r>
 800901a:	bf00      	nop
 800901c:	20000020 	.word	0x20000020

08009020 <_kill_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	2300      	movs	r3, #0
 8009024:	4d06      	ldr	r5, [pc, #24]	@ (8009040 <_kill_r+0x20>)
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	4611      	mov	r1, r2
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	f7f9 fbf9 	bl	8002824 <_kill>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d102      	bne.n	800903c <_kill_r+0x1c>
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	b103      	cbz	r3, 800903c <_kill_r+0x1c>
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	bd38      	pop	{r3, r4, r5, pc}
 800903e:	bf00      	nop
 8009040:	20000970 	.word	0x20000970

08009044 <_getpid_r>:
 8009044:	f7f9 bbe7 	b.w	8002816 <_getpid>

08009048 <__swhatbuf_r>:
 8009048:	b570      	push	{r4, r5, r6, lr}
 800904a:	460c      	mov	r4, r1
 800904c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009050:	4615      	mov	r5, r2
 8009052:	2900      	cmp	r1, #0
 8009054:	461e      	mov	r6, r3
 8009056:	b096      	sub	sp, #88	@ 0x58
 8009058:	da0c      	bge.n	8009074 <__swhatbuf_r+0x2c>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	2100      	movs	r1, #0
 800905e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009062:	bf14      	ite	ne
 8009064:	2340      	movne	r3, #64	@ 0x40
 8009066:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800906a:	2000      	movs	r0, #0
 800906c:	6031      	str	r1, [r6, #0]
 800906e:	602b      	str	r3, [r5, #0]
 8009070:	b016      	add	sp, #88	@ 0x58
 8009072:	bd70      	pop	{r4, r5, r6, pc}
 8009074:	466a      	mov	r2, sp
 8009076:	f000 f849 	bl	800910c <_fstat_r>
 800907a:	2800      	cmp	r0, #0
 800907c:	dbed      	blt.n	800905a <__swhatbuf_r+0x12>
 800907e:	9901      	ldr	r1, [sp, #4]
 8009080:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009084:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009088:	4259      	negs	r1, r3
 800908a:	4159      	adcs	r1, r3
 800908c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009090:	e7eb      	b.n	800906a <__swhatbuf_r+0x22>

08009092 <__smakebuf_r>:
 8009092:	898b      	ldrh	r3, [r1, #12]
 8009094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009096:	079d      	lsls	r5, r3, #30
 8009098:	4606      	mov	r6, r0
 800909a:	460c      	mov	r4, r1
 800909c:	d507      	bpl.n	80090ae <__smakebuf_r+0x1c>
 800909e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	6123      	str	r3, [r4, #16]
 80090a6:	2301      	movs	r3, #1
 80090a8:	6163      	str	r3, [r4, #20]
 80090aa:	b003      	add	sp, #12
 80090ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ae:	466a      	mov	r2, sp
 80090b0:	ab01      	add	r3, sp, #4
 80090b2:	f7ff ffc9 	bl	8009048 <__swhatbuf_r>
 80090b6:	9f00      	ldr	r7, [sp, #0]
 80090b8:	4605      	mov	r5, r0
 80090ba:	4639      	mov	r1, r7
 80090bc:	4630      	mov	r0, r6
 80090be:	f7fe fa61 	bl	8007584 <_malloc_r>
 80090c2:	b948      	cbnz	r0, 80090d8 <__smakebuf_r+0x46>
 80090c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c8:	059a      	lsls	r2, r3, #22
 80090ca:	d4ee      	bmi.n	80090aa <__smakebuf_r+0x18>
 80090cc:	f023 0303 	bic.w	r3, r3, #3
 80090d0:	f043 0302 	orr.w	r3, r3, #2
 80090d4:	81a3      	strh	r3, [r4, #12]
 80090d6:	e7e2      	b.n	800909e <__smakebuf_r+0xc>
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	6020      	str	r0, [r4, #0]
 80090e8:	b15b      	cbz	r3, 8009102 <__smakebuf_r+0x70>
 80090ea:	4630      	mov	r0, r6
 80090ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090f0:	f000 f81e 	bl	8009130 <_isatty_r>
 80090f4:	b128      	cbz	r0, 8009102 <__smakebuf_r+0x70>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	f023 0303 	bic.w	r3, r3, #3
 80090fc:	f043 0301 	orr.w	r3, r3, #1
 8009100:	81a3      	strh	r3, [r4, #12]
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	431d      	orrs	r5, r3
 8009106:	81a5      	strh	r5, [r4, #12]
 8009108:	e7cf      	b.n	80090aa <__smakebuf_r+0x18>
	...

0800910c <_fstat_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	2300      	movs	r3, #0
 8009110:	4d06      	ldr	r5, [pc, #24]	@ (800912c <_fstat_r+0x20>)
 8009112:	4604      	mov	r4, r0
 8009114:	4608      	mov	r0, r1
 8009116:	4611      	mov	r1, r2
 8009118:	602b      	str	r3, [r5, #0]
 800911a:	f7f9 fbe2 	bl	80028e2 <_fstat>
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	d102      	bne.n	8009128 <_fstat_r+0x1c>
 8009122:	682b      	ldr	r3, [r5, #0]
 8009124:	b103      	cbz	r3, 8009128 <_fstat_r+0x1c>
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	bd38      	pop	{r3, r4, r5, pc}
 800912a:	bf00      	nop
 800912c:	20000970 	.word	0x20000970

08009130 <_isatty_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	2300      	movs	r3, #0
 8009134:	4d05      	ldr	r5, [pc, #20]	@ (800914c <_isatty_r+0x1c>)
 8009136:	4604      	mov	r4, r0
 8009138:	4608      	mov	r0, r1
 800913a:	602b      	str	r3, [r5, #0]
 800913c:	f7f9 fbe0 	bl	8002900 <_isatty>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d102      	bne.n	800914a <_isatty_r+0x1a>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b103      	cbz	r3, 800914a <_isatty_r+0x1a>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	20000970 	.word	0x20000970

08009150 <_init>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr

0800915c <_fini>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	bf00      	nop
 8009160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009162:	bc08      	pop	{r3}
 8009164:	469e      	mov	lr, r3
 8009166:	4770      	bx	lr
