
LoRa_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c18  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08003d28  08003d28  00004d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ecc  08003ecc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ecc  08003ecc  00004ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed4  08003ed4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed4  08003ed4  00004ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ed8  08003ed8  00004ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003edc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000068  08003f44  00005068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08003f44  00005578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006882  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad2  00000000  00000000  0000b913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0000d3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a0  00000000  00000000  0000dba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018313  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000980d  00000000  00000000  00026453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084195  00000000  00000000  0002fc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3df5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000269c  00000000  00000000  000b3e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000b64d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d10 	.word	0x08003d10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08003d10 	.word	0x08003d10

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b968 	b.w	8000438 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9d08      	ldr	r5, [sp, #32]
 8000186:	460c      	mov	r4, r1
 8000188:	2b00      	cmp	r3, #0
 800018a:	d14e      	bne.n	800022a <__udivmoddi4+0xaa>
 800018c:	4694      	mov	ip, r2
 800018e:	458c      	cmp	ip, r1
 8000190:	4686      	mov	lr, r0
 8000192:	fab2 f282 	clz	r2, r2
 8000196:	d962      	bls.n	800025e <__udivmoddi4+0xde>
 8000198:	b14a      	cbz	r2, 80001ae <__udivmoddi4+0x2e>
 800019a:	f1c2 0320 	rsb	r3, r2, #32
 800019e:	4091      	lsls	r1, r2
 80001a0:	fa20 f303 	lsr.w	r3, r0, r3
 80001a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001a8:	4319      	orrs	r1, r3
 80001aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001b6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ba:	fa1f f68c 	uxth.w	r6, ip
 80001be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001c6:	fb04 f106 	mul.w	r1, r4, r6
 80001ca:	4299      	cmp	r1, r3
 80001cc:	d90a      	bls.n	80001e4 <__udivmoddi4+0x64>
 80001ce:	eb1c 0303 	adds.w	r3, ip, r3
 80001d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80001d6:	f080 8110 	bcs.w	80003fa <__udivmoddi4+0x27a>
 80001da:	4299      	cmp	r1, r3
 80001dc:	f240 810d 	bls.w	80003fa <__udivmoddi4+0x27a>
 80001e0:	3c02      	subs	r4, #2
 80001e2:	4463      	add	r3, ip
 80001e4:	1a59      	subs	r1, r3, r1
 80001e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80001ea:	fb07 1110 	mls	r1, r7, r0, r1
 80001ee:	fb00 f606 	mul.w	r6, r0, r6
 80001f2:	fa1f f38e 	uxth.w	r3, lr
 80001f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fa:	429e      	cmp	r6, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f100 31ff 	add.w	r1, r0, #4294967295
 8000206:	f080 80fa 	bcs.w	80003fe <__udivmoddi4+0x27e>
 800020a:	429e      	cmp	r6, r3
 800020c:	f240 80f7 	bls.w	80003fe <__udivmoddi4+0x27e>
 8000210:	4463      	add	r3, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	1b9b      	subs	r3, r3, r6
 8000218:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800021c:	b11d      	cbz	r5, 8000226 <__udivmoddi4+0xa6>
 800021e:	40d3      	lsrs	r3, r2
 8000220:	2200      	movs	r2, #0
 8000222:	e9c5 3200 	strd	r3, r2, [r5]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d905      	bls.n	800023a <__udivmoddi4+0xba>
 800022e:	b10d      	cbz	r5, 8000234 <__udivmoddi4+0xb4>
 8000230:	e9c5 0100 	strd	r0, r1, [r5]
 8000234:	2100      	movs	r1, #0
 8000236:	4608      	mov	r0, r1
 8000238:	e7f5      	b.n	8000226 <__udivmoddi4+0xa6>
 800023a:	fab3 f183 	clz	r1, r3
 800023e:	2900      	cmp	r1, #0
 8000240:	d146      	bne.n	80002d0 <__udivmoddi4+0x150>
 8000242:	42a3      	cmp	r3, r4
 8000244:	d302      	bcc.n	800024c <__udivmoddi4+0xcc>
 8000246:	4290      	cmp	r0, r2
 8000248:	f0c0 80ee 	bcc.w	8000428 <__udivmoddi4+0x2a8>
 800024c:	1a86      	subs	r6, r0, r2
 800024e:	eb64 0303 	sbc.w	r3, r4, r3
 8000252:	2001      	movs	r0, #1
 8000254:	2d00      	cmp	r5, #0
 8000256:	d0e6      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000258:	e9c5 6300 	strd	r6, r3, [r5]
 800025c:	e7e3      	b.n	8000226 <__udivmoddi4+0xa6>
 800025e:	2a00      	cmp	r2, #0
 8000260:	f040 808f 	bne.w	8000382 <__udivmoddi4+0x202>
 8000264:	eba1 040c 	sub.w	r4, r1, ip
 8000268:	2101      	movs	r1, #1
 800026a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fbb4 f6f8 	udiv	r6, r4, r8
 8000276:	fb08 4416 	mls	r4, r8, r6, r4
 800027a:	fb07 f006 	mul.w	r0, r7, r6
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000286:	4298      	cmp	r0, r3
 8000288:	d908      	bls.n	800029c <__udivmoddi4+0x11c>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000292:	d202      	bcs.n	800029a <__udivmoddi4+0x11a>
 8000294:	4298      	cmp	r0, r3
 8000296:	f200 80cb 	bhi.w	8000430 <__udivmoddi4+0x2b0>
 800029a:	4626      	mov	r6, r4
 800029c:	1a1c      	subs	r4, r3, r0
 800029e:	fbb4 f0f8 	udiv	r0, r4, r8
 80002a2:	fb08 4410 	mls	r4, r8, r0, r4
 80002a6:	fb00 f707 	mul.w	r7, r0, r7
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	429f      	cmp	r7, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x148>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x146>
 80002c0:	429f      	cmp	r7, r3
 80002c2:	f200 80ae 	bhi.w	8000422 <__udivmoddi4+0x2a2>
 80002c6:	4620      	mov	r0, r4
 80002c8:	1bdb      	subs	r3, r3, r7
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	e7a5      	b.n	800021c <__udivmoddi4+0x9c>
 80002d0:	f1c1 0720 	rsb	r7, r1, #32
 80002d4:	408b      	lsls	r3, r1
 80002d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002da:	ea4c 0c03 	orr.w	ip, ip, r3
 80002de:	fa24 f607 	lsr.w	r6, r4, r7
 80002e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002e6:	fbb6 f8f9 	udiv	r8, r6, r9
 80002ea:	fa1f fe8c 	uxth.w	lr, ip
 80002ee:	fb09 6618 	mls	r6, r9, r8, r6
 80002f2:	fa20 f307 	lsr.w	r3, r0, r7
 80002f6:	408c      	lsls	r4, r1
 80002f8:	fa00 fa01 	lsl.w	sl, r0, r1
 80002fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000300:	431c      	orrs	r4, r3
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000308:	4298      	cmp	r0, r3
 800030a:	fa02 f201 	lsl.w	r2, r2, r1
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x1a6>
 8000310:	eb1c 0303 	adds.w	r3, ip, r3
 8000314:	f108 36ff 	add.w	r6, r8, #4294967295
 8000318:	f080 8081 	bcs.w	800041e <__udivmoddi4+0x29e>
 800031c:	4298      	cmp	r0, r3
 800031e:	d97e      	bls.n	800041e <__udivmoddi4+0x29e>
 8000320:	f1a8 0802 	sub.w	r8, r8, #2
 8000324:	4463      	add	r3, ip
 8000326:	1a1e      	subs	r6, r3, r0
 8000328:	fbb6 f3f9 	udiv	r3, r6, r9
 800032c:	fb09 6613 	mls	r6, r9, r3, r6
 8000330:	fb03 fe0e 	mul.w	lr, r3, lr
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800033a:	45a6      	cmp	lr, r4
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x1d0>
 800033e:	eb1c 0404 	adds.w	r4, ip, r4
 8000342:	f103 30ff 	add.w	r0, r3, #4294967295
 8000346:	d266      	bcs.n	8000416 <__udivmoddi4+0x296>
 8000348:	45a6      	cmp	lr, r4
 800034a:	d964      	bls.n	8000416 <__udivmoddi4+0x296>
 800034c:	3b02      	subs	r3, #2
 800034e:	4464      	add	r4, ip
 8000350:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000354:	fba0 8302 	umull	r8, r3, r0, r2
 8000358:	eba4 040e 	sub.w	r4, r4, lr
 800035c:	429c      	cmp	r4, r3
 800035e:	46c6      	mov	lr, r8
 8000360:	461e      	mov	r6, r3
 8000362:	d350      	bcc.n	8000406 <__udivmoddi4+0x286>
 8000364:	d04d      	beq.n	8000402 <__udivmoddi4+0x282>
 8000366:	b155      	cbz	r5, 800037e <__udivmoddi4+0x1fe>
 8000368:	ebba 030e 	subs.w	r3, sl, lr
 800036c:	eb64 0406 	sbc.w	r4, r4, r6
 8000370:	fa04 f707 	lsl.w	r7, r4, r7
 8000374:	40cb      	lsrs	r3, r1
 8000376:	431f      	orrs	r7, r3
 8000378:	40cc      	lsrs	r4, r1
 800037a:	e9c5 7400 	strd	r7, r4, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	e751      	b.n	8000226 <__udivmoddi4+0xa6>
 8000382:	fa0c fc02 	lsl.w	ip, ip, r2
 8000386:	f1c2 0320 	rsb	r3, r2, #32
 800038a:	40d9      	lsrs	r1, r3
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa00 fe02 	lsl.w	lr, r0, r2
 8000398:	fbb1 f0f8 	udiv	r0, r1, r8
 800039c:	fb08 1110 	mls	r1, r8, r0, r1
 80003a0:	4094      	lsls	r4, r2
 80003a2:	431c      	orrs	r4, r3
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	0c23      	lsrs	r3, r4, #16
 80003aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ae:	fb00 f107 	mul.w	r1, r0, r7
 80003b2:	4299      	cmp	r1, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x248>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 36ff 	add.w	r6, r0, #4294967295
 80003be:	d22c      	bcs.n	800041a <__udivmoddi4+0x29a>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d92a      	bls.n	800041a <__udivmoddi4+0x29a>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4463      	add	r3, ip
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	fbb3 f1f8 	udiv	r1, r3, r8
 80003ce:	fb08 3311 	mls	r3, r8, r1, r3
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d8:	fb01 f307 	mul.w	r3, r1, r7
 80003dc:	42a3      	cmp	r3, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x272>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f101 36ff 	add.w	r6, r1, #4294967295
 80003e8:	d213      	bcs.n	8000412 <__udivmoddi4+0x292>
 80003ea:	42a3      	cmp	r3, r4
 80003ec:	d911      	bls.n	8000412 <__udivmoddi4+0x292>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	1ae4      	subs	r4, r4, r3
 80003f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f8:	e73b      	b.n	8000272 <__udivmoddi4+0xf2>
 80003fa:	4604      	mov	r4, r0
 80003fc:	e6f2      	b.n	80001e4 <__udivmoddi4+0x64>
 80003fe:	4608      	mov	r0, r1
 8000400:	e708      	b.n	8000214 <__udivmoddi4+0x94>
 8000402:	45c2      	cmp	sl, r8
 8000404:	d2af      	bcs.n	8000366 <__udivmoddi4+0x1e6>
 8000406:	ebb8 0e02 	subs.w	lr, r8, r2
 800040a:	eb63 060c 	sbc.w	r6, r3, ip
 800040e:	3801      	subs	r0, #1
 8000410:	e7a9      	b.n	8000366 <__udivmoddi4+0x1e6>
 8000412:	4631      	mov	r1, r6
 8000414:	e7ed      	b.n	80003f2 <__udivmoddi4+0x272>
 8000416:	4603      	mov	r3, r0
 8000418:	e79a      	b.n	8000350 <__udivmoddi4+0x1d0>
 800041a:	4630      	mov	r0, r6
 800041c:	e7d4      	b.n	80003c8 <__udivmoddi4+0x248>
 800041e:	46b0      	mov	r8, r6
 8000420:	e781      	b.n	8000326 <__udivmoddi4+0x1a6>
 8000422:	4463      	add	r3, ip
 8000424:	3802      	subs	r0, #2
 8000426:	e74f      	b.n	80002c8 <__udivmoddi4+0x148>
 8000428:	4606      	mov	r6, r0
 800042a:	4623      	mov	r3, r4
 800042c:	4608      	mov	r0, r1
 800042e:	e711      	b.n	8000254 <__udivmoddi4+0xd4>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	e732      	b.n	800029c <__udivmoddi4+0x11c>
 8000436:	bf00      	nop

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	78fa      	ldrb	r2, [r7, #3]
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fbd0 	bl	8000bf6 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fbeb 	bl	8000c36 <SX1278_hw_SPIReadByte>
 8000460:	4603      	mov	r3, r0
 8000462:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fb88 	bl	8000b80 <SX1278_hw_SetNSS>
	return tmp;
 8000470:	7bfb      	ldrb	r3, [r7, #15]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	460b      	mov	r3, r1
 8000484:	70fb      	strb	r3, [r7, #3]
 8000486:	4613      	mov	r3, r2
 8000488:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fb75 	bl	8000b80 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	4610      	mov	r0, r2
 80004a6:	f000 fba6 	bl	8000bf6 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	78ba      	ldrb	r2, [r7, #2]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fb9f 	bl	8000bf6 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fb5e 	bl	8000b80 <SX1278_hw_SetNSS>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	607a      	str	r2, [r7, #4]
 80004d6:	461a      	mov	r2, r3
 80004d8:	460b      	mov	r3, r1
 80004da:	72fb      	strb	r3, [r7, #11]
 80004dc:	4613      	mov	r3, r2
 80004de:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004e0:	7abb      	ldrb	r3, [r7, #10]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d927      	bls.n	8000536 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fb47 	bl	8000b80 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	7afa      	ldrb	r2, [r7, #11]
 80004f8:	4611      	mov	r1, r2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fb7b 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000500:	2300      	movs	r3, #0
 8000502:	75fb      	strb	r3, [r7, #23]
 8000504:	e00c      	b.n	8000520 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6819      	ldr	r1, [r3, #0]
 800050a:	7dfb      	ldrb	r3, [r7, #23]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	18d4      	adds	r4, r2, r3
 8000510:	4608      	mov	r0, r1
 8000512:	f000 fb90 	bl	8000c36 <SX1278_hw_SPIReadByte>
 8000516:	4603      	mov	r3, r0
 8000518:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800051a:	7dfb      	ldrb	r3, [r7, #23]
 800051c:	3301      	adds	r3, #1
 800051e:	75fb      	strb	r3, [r7, #23]
 8000520:	7dfa      	ldrb	r2, [r7, #23]
 8000522:	7abb      	ldrb	r3, [r7, #10]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3ee      	bcc.n	8000506 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fb26 	bl	8000b80 <SX1278_hw_SetNSS>
 8000534:	e000      	b.n	8000538 <SX1278_SPIBurstRead+0x6c>
		return;
 8000536:	bf00      	nop
	}
}
 8000538:	371c      	adds	r7, #28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd90      	pop	{r4, r7, pc}

0800053e <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	607a      	str	r2, [r7, #4]
 8000548:	461a      	mov	r2, r3
 800054a:	460b      	mov	r3, r1
 800054c:	72fb      	strb	r3, [r7, #11]
 800054e:	4613      	mov	r3, r2
 8000550:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000552:	7abb      	ldrb	r3, [r7, #10]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d929      	bls.n	80005ac <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fb0e 	bl	8000b80 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	7afb      	ldrb	r3, [r7, #11]
 800056a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	4610      	mov	r0, r2
 8000574:	f000 fb3f 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	75fb      	strb	r3, [r7, #23]
 800057c:	e00b      	b.n	8000596 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	f000 fb33 	bl	8000bf6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000590:	7dfb      	ldrb	r3, [r7, #23]
 8000592:	3301      	adds	r3, #1
 8000594:	75fb      	strb	r3, [r7, #23]
 8000596:	7dfa      	ldrb	r2, [r7, #23]
 8000598:	7abb      	ldrb	r3, [r7, #10]
 800059a:	429a      	cmp	r2, r3
 800059c:	d3ef      	bcc.n	800057e <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2101      	movs	r1, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 faeb 	bl	8000b80 <SX1278_hw_SetNSS>
 80005aa:	e000      	b.n	80005ae <SX1278_SPIBurstWrite+0x70>
		return;
 80005ac:	bf00      	nop
	}
}
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f90d 	bl	80007dc <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 fb5d 	bl	8000c82 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f917 	bl	80007fc <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	f04f 0100 	mov.w	r1, #0
 80005dc:	04d9      	lsls	r1, r3, #19
 80005de:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005e2:	04d0      	lsls	r0, r2, #19
 80005e4:	4a6f      	ldr	r2, [pc, #444]	@ (80007a4 <SX1278_config+0x1f0>)
 80005e6:	f04f 0300 	mov.w	r3, #0
 80005ea:	f7ff fdb1 	bl	8000150 <__aeabi_uldivmod>
 80005ee:	4602      	mov	r2, r0
 80005f0:	460b      	mov	r3, r1
 80005f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80005f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005fa:	f04f 0200 	mov.w	r2, #0
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	0c02      	lsrs	r2, r0, #16
 8000604:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000608:	0c0b      	lsrs	r3, r1, #16
 800060a:	b2d3      	uxtb	r3, r2
 800060c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800060e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	0a02      	lsrs	r2, r0, #8
 800061c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000620:	0a0b      	lsrs	r3, r1, #8
 8000622:	b2d3      	uxtb	r3, r2
 8000624:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000626:	7c3b      	ldrb	r3, [r7, #16]
 8000628:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800062a:	f107 020c 	add.w	r2, r7, #12
 800062e:	2303      	movs	r3, #3
 8000630:	2106      	movs	r1, #6
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ff83 	bl	800053e <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000638:	2234      	movs	r2, #52	@ 0x34
 800063a:	2139      	movs	r1, #57	@ 0x39
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ff1c 	bl	800047a <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7c1b      	ldrb	r3, [r3, #16]
 8000646:	461a      	mov	r2, r3
 8000648:	4b57      	ldr	r3, [pc, #348]	@ (80007a8 <SX1278_config+0x1f4>)
 800064a:	5c9b      	ldrb	r3, [r3, r2]
 800064c:	461a      	mov	r2, r3
 800064e:	2109      	movs	r1, #9
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff12 	bl	800047a <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000656:	220b      	movs	r2, #11
 8000658:	210b      	movs	r1, #11
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff ff0d 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000660:	2223      	movs	r2, #35	@ 0x23
 8000662:	210c      	movs	r1, #12
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ff08 	bl	800047a <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7c5b      	ldrb	r3, [r3, #17]
 800066e:	461a      	mov	r2, r3
 8000670:	4b4e      	ldr	r3, [pc, #312]	@ (80007ac <SX1278_config+0x1f8>)
 8000672:	5c9b      	ldrb	r3, [r3, r2]
 8000674:	2b06      	cmp	r3, #6
 8000676:	d147      	bne.n	8000708 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7c9b      	ldrb	r3, [r3, #18]
 800067c:	461a      	mov	r2, r3
 800067e:	4b4c      	ldr	r3, [pc, #304]	@ (80007b0 <SX1278_config+0x1fc>)
 8000680:	5c9b      	ldrb	r3, [r3, r2]
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7cdb      	ldrb	r3, [r3, #19]
 800068a:	4619      	mov	r1, r3
 800068c:	4b49      	ldr	r3, [pc, #292]	@ (80007b4 <SX1278_config+0x200>)
 800068e:	5c5b      	ldrb	r3, [r3, r1]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000698:	3301      	adds	r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	211d      	movs	r1, #29
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff feea 	bl	800047a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7c5b      	ldrb	r3, [r3, #17]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b3f      	ldr	r3, [pc, #252]	@ (80007ac <SX1278_config+0x1f8>)
 80006ae:	5c9b      	ldrb	r3, [r3, r2]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7d1b      	ldrb	r3, [r3, #20]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4b3f      	ldr	r3, [pc, #252]	@ (80007b8 <SX1278_config+0x204>)
 80006bc:	5c5b      	ldrb	r3, [r3, r1]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4413      	add	r3, r2
 80006c4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006c6:	3303      	adds	r3, #3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	211e      	movs	r1, #30
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff fed3 	bl	800047a <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006d4:	2131      	movs	r1, #49	@ 0x31
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff feb0 	bl	800043c <SX1278_SPIRead>
 80006dc:	4603      	mov	r3, r0
 80006de:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	f023 0307 	bic.w	r3, r3, #7
 80006e6:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f043 0305 	orr.w	r3, r3, #5
 80006ee:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	461a      	mov	r2, r3
 80006f4:	2131      	movs	r1, #49	@ 0x31
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff febf 	bl	800047a <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80006fc:	220c      	movs	r2, #12
 80006fe:	2137      	movs	r1, #55	@ 0x37
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff feba 	bl	800047a <SX1278_SPIWrite>
 8000706:	e029      	b.n	800075c <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7c9b      	ldrb	r3, [r3, #18]
 800070c:	461a      	mov	r2, r3
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <SX1278_config+0x1fc>)
 8000710:	5c9b      	ldrb	r3, [r3, r2]
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	7cdb      	ldrb	r3, [r3, #19]
 800071a:	4619      	mov	r1, r3
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <SX1278_config+0x200>)
 800071e:	5c5b      	ldrb	r3, [r3, r1]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000724:	4413      	add	r3, r2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	211d      	movs	r1, #29
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fea4 	bl	800047a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7c5b      	ldrb	r3, [r3, #17]
 8000736:	461a      	mov	r2, r3
 8000738:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <SX1278_config+0x1f8>)
 800073a:	5c9b      	ldrb	r3, [r3, r2]
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7d1b      	ldrb	r3, [r3, #20]
 8000744:	4619      	mov	r1, r3
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <SX1278_config+0x204>)
 8000748:	5c5b      	ldrb	r3, [r3, r1]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	211e      	movs	r1, #30
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fe8f 	bl	800047a <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800075c:	2204      	movs	r2, #4
 800075e:	2126      	movs	r1, #38	@ 0x26
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fe8a 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000766:	2208      	movs	r2, #8
 8000768:	211f      	movs	r1, #31
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fe85 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe80 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800077a:	2208      	movs	r2, #8
 800077c:	2121      	movs	r1, #33	@ 0x21
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe7b 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000784:	2201      	movs	r2, #1
 8000786:	2141      	movs	r1, #65	@ 0x41
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fe76 	bl	800047a <SX1278_SPIWrite>
	module->readBytes = 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 f810 	bl	80007bc <SX1278_standby>
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	01e84800 	.word	0x01e84800
 80007a8:	08003e54 	.word	0x08003e54
 80007ac:	08003e58 	.word	0x08003e58
 80007b0:	08003e60 	.word	0x08003e60
 80007b4:	08003e6c 	.word	0x08003e6c
 80007b8:	08003e70 	.word	0x08003e70

080007bc <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007c4:	2209      	movs	r2, #9
 80007c6:	2101      	movs	r1, #1
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff fe56 	bl	800047a <SX1278_SPIWrite>
	module->status = STANDBY;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2201      	movs	r2, #1
 80007d2:	759a      	strb	r2, [r3, #22]
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80007e4:	2208      	movs	r2, #8
 80007e6:	2101      	movs	r1, #1
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fe46 	bl	800047a <SX1278_SPIWrite>
	module->status = SLEEP;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	759a      	strb	r2, [r3, #22]
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000804:	2288      	movs	r2, #136	@ 0x88
 8000806:	2101      	movs	r1, #1
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff fe36 	bl	800047a <SX1278_SPIWrite>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800081e:	22ff      	movs	r2, #255	@ 0xff
 8000820:	2112      	movs	r1, #18
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff fe29 	bl	800047a <SX1278_SPIWrite>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	460b      	mov	r3, r1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	7afa      	ldrb	r2, [r7, #11]
 8000842:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f7ff feb5 	bl	80005b4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800084a:	2284      	movs	r2, #132	@ 0x84
 800084c:	214d      	movs	r1, #77	@ 0x4d
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f7ff fe13 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000854:	22ff      	movs	r2, #255	@ 0xff
 8000856:	2124      	movs	r1, #36	@ 0x24
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff fe0e 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800085e:	2201      	movs	r2, #1
 8000860:	2140      	movs	r1, #64	@ 0x40
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f7ff fe09 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000868:	223f      	movs	r2, #63	@ 0x3f
 800086a:	2111      	movs	r1, #17
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff fe04 	bl	800047a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f7ff ffcf 	bl	8000816 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000878:	7afb      	ldrb	r3, [r7, #11]
 800087a:	461a      	mov	r2, r3
 800087c:	2122      	movs	r1, #34	@ 0x22
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fdfb 	bl	800047a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000884:	210f      	movs	r1, #15
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff fdd8 	bl	800043c <SX1278_SPIRead>
 800088c:	4603      	mov	r3, r0
 800088e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	461a      	mov	r2, r3
 8000894:	210d      	movs	r1, #13
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff fdef 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800089c:	228d      	movs	r2, #141	@ 0x8d
 800089e:	2101      	movs	r1, #1
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fdea 	bl	800047a <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008ae:	2118      	movs	r1, #24
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff fdc3 	bl	800043c <SX1278_SPIRead>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d104      	bne.n	80008ca <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2203      	movs	r2, #3
 80008c4:	759a      	strb	r2, [r3, #22]
			return 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e013      	b.n	80008f2 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d109      	bne.n	80008ea <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f967 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff fe67 	bl	80005b4 <SX1278_config>
			return 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e003      	b.n	80008f2 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 f9c9 	bl	8000c82 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008f0:	e7dd      	b.n	80008ae <SX1278_LoRaEntryRx+0x7e>
	}
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f9c6 	bl	8000c98 <SX1278_hw_GetDIO0>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d030      	beq.n	8000974 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3317      	adds	r3, #23
 8000916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fab3 	bl	8002e88 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000922:	2110      	movs	r1, #16
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fd89 	bl	800043c <SX1278_SPIRead>
 800092a:	4603      	mov	r3, r0
 800092c:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	461a      	mov	r2, r3
 8000932:	210d      	movs	r1, #13
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fda0 	bl	800047a <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7c5b      	ldrb	r3, [r3, #17]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7d5b      	ldrb	r3, [r3, #21]
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e005      	b.n	8000956 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800094a:	2113      	movs	r1, #19
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fd75 	bl	800043c <SX1278_SPIRead>
 8000952:	4603      	mov	r3, r0
 8000954:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f103 0217 	add.w	r2, r3, #23
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	2100      	movs	r1, #0
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fdb3 	bl	80004cc <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff51 	bl	8000816 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	460b      	mov	r3, r1
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	7afa      	ldrb	r2, [r7, #11]
 8000994:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f7ff fe0c 	bl	80005b4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800099c:	2287      	movs	r2, #135	@ 0x87
 800099e:	214d      	movs	r1, #77	@ 0x4d
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff fd6a 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009a6:	2200      	movs	r2, #0
 80009a8:	2124      	movs	r1, #36	@ 0x24
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fd65 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009b0:	2241      	movs	r2, #65	@ 0x41
 80009b2:	2140      	movs	r1, #64	@ 0x40
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fd60 	bl	800047a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f7ff ff2b 	bl	8000816 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009c0:	22f7      	movs	r2, #247	@ 0xf7
 80009c2:	2111      	movs	r1, #17
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f7ff fd58 	bl	800047a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009ca:	7afb      	ldrb	r3, [r7, #11]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2122      	movs	r1, #34	@ 0x22
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fd52 	bl	800047a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009d6:	210e      	movs	r1, #14
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fd2f 	bl	800043c <SX1278_SPIRead>
 80009de:	4603      	mov	r3, r0
 80009e0:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	461a      	mov	r2, r3
 80009e6:	210d      	movs	r1, #13
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f7ff fd46 	bl	800047a <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80009ee:	2122      	movs	r1, #34	@ 0x22
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff fd23 	bl	800043c <SX1278_SPIRead>
 80009f6:	4603      	mov	r3, r0
 80009f8:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80009fa:	7dba      	ldrb	r2, [r7, #22]
 80009fc:	7afb      	ldrb	r3, [r7, #11]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d104      	bne.n	8000a0c <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e00e      	b.n	8000a2a <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1ea      	bne.n	80009ee <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f8c6 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff fdc6 	bl	80005b4 <SX1278_config>
			return 0;
 8000a28:	2300      	movs	r3, #0
		}
	}
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	2100      	movs	r1, #0
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fd78 	bl	800053e <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a4e:	228b      	movs	r2, #139	@ 0x8b
 8000a50:	2101      	movs	r1, #1
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fd11 	bl	800047a <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f91b 	bl	8000c98 <SX1278_hw_GetDIO0>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00b      	beq.n	8000a80 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a68:	2112      	movs	r1, #18
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff fce6 	bl	800043c <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fed0 	bl	8000816 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fea0 	bl	80007bc <SX1278_standby>
			return 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e013      	b.n	8000aa8 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d109      	bne.n	8000aa0 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f88c 	bl	8000bae <SX1278_hw_Reset>
			SX1278_config(module);
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff fd8c 	bl	80005b4 <SX1278_config>
			return 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e003      	b.n	8000aa8 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 f8ee 	bl	8000c82 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000aa6:	e7d7      	b.n	8000a58 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f848 	bl	8000b56 <SX1278_hw_init>
	module->frequency = frequency;
 8000ac6:	68f9      	ldr	r1, [r7, #12]
 8000ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000acc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	7e3a      	ldrb	r2, [r7, #24]
 8000ad4:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	7f3a      	ldrb	r2, [r7, #28]
 8000ada:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ae2:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000aea:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000af2:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000afa:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff fd59 	bl	80005b4 <SX1278_config>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	4613      	mov	r3, r2
 8000b16:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d003      	beq.n	8000b2c <SX1278_read+0x22>
		length = module->readBytes;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b2a:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3317      	adds	r3, #23
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	4619      	mov	r1, r3
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f002 fa22 	bl	8002f7e <memcpy>
	rxBuf[length] = '\0';
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	4413      	add	r3, r2
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000b5e:	2101      	movs	r1, #1
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f80d 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6858      	ldr	r0, [r3, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	4619      	mov	r1, r3
 8000b74:	f000 ff2f 	bl	80019d6 <HAL_GPIO_WritePin>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6958      	ldr	r0, [r3, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	b299      	uxth	r1, r3
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	f000 ff18 	bl	80019d6 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffe1 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6858      	ldr	r0, [r3, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f000 ff03 	bl	80019d6 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 f856 	bl	8000c82 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6858      	ldr	r0, [r3, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	2201      	movs	r2, #1
 8000be2:	4619      	mov	r1, r3
 8000be4:	f000 fef7 	bl	80019d6 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000be8:	2064      	movs	r0, #100	@ 0x64
 8000bea:	f000 f84a 	bl	8000c82 <SX1278_hw_DelayMs>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ffbb 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6998      	ldr	r0, [r3, #24]
 8000c0e:	1cf9      	adds	r1, r7, #3
 8000c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c14:	2201      	movs	r2, #1
 8000c16:	f001 fb59 	bl	80022cc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c1a:	bf00      	nop
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fe40 	bl	80028a6 <HAL_SPI_GetState>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d1f7      	bne.n	8000c1c <SX1278_hw_SPICommand+0x26>
		;
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af02      	add	r7, sp, #8
 8000c3c:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff99 	bl	8000b80 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6998      	ldr	r0, [r3, #24]
 8000c52:	f107 020e 	add.w	r2, r7, #14
 8000c56:	f107 010f 	add.w	r1, r7, #15
 8000c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	f001 fc77 	bl	8002554 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c66:	bf00      	nop
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fe1a 	bl	80028a6 <HAL_SPI_GetState>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d1f7      	bne.n	8000c68 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 fc00 	bl	8001490 <HAL_Delay>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	4619      	mov	r1, r3
 8000cac:	4610      	mov	r0, r2
 8000cae:	f000 fe7b 	bl	80019a8 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	bf0c      	ite	eq
 8000cb8:	2301      	moveq	r3, #1
 8000cba:	2300      	movne	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <MX_GPIO_Init+0xc8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8000d90 <MX_GPIO_Init+0xc8>)
 8000ce2:	f043 0320 	orr.w	r3, r3, #32
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <MX_GPIO_Init+0xc8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0320 	and.w	r3, r3, #32
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <MX_GPIO_Init+0xc8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a25      	ldr	r2, [pc, #148]	@ (8000d90 <MX_GPIO_Init+0xc8>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b23      	ldr	r3, [pc, #140]	@ (8000d90 <MX_GPIO_Init+0xc8>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <MX_GPIO_Init+0xc8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a1f      	ldr	r2, [pc, #124]	@ (8000d90 <MX_GPIO_Init+0xc8>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_GPIO_Init+0xc8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	481a      	ldr	r0, [pc, #104]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000d2a:	f000 fe54 	bl	80019d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2101      	movs	r1, #1
 8000d32:	4819      	ldr	r0, [pc, #100]	@ (8000d98 <MX_GPIO_Init+0xd0>)
 8000d34:	f000 fe4f 	bl	80019d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4811      	ldr	r0, [pc, #68]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000d50:	f000 fca6 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000d54:	2301      	movs	r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <MX_GPIO_Init+0xd0>)
 8000d6c:	f000 fc98 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000d70:	2302      	movs	r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4619      	mov	r1, r3
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_GPIO_Init+0xd0>)
 8000d84:	f000 fc8c 	bl	80016a0 <HAL_GPIO_Init>

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010800 	.word	0x40010800
 8000d98:	40010c00 	.word	0x40010c00
 8000d9c:	00000000 	.word	0x00000000

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da6:	f000 fb11 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000daa:	f000 f923 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dae:	f7ff ff8b 	bl	8000cc8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000db2:	f000 f961 	bl	8001078 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  master = 1; // for master
 8000db6:	4b74      	ldr	r3, [pc, #464]	@ (8000f88 <main+0x1e8>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
//  master = 0; // for slave
  	if (master == 1) {
 8000dbc:	4b72      	ldr	r3, [pc, #456]	@ (8000f88 <main+0x1e8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d103      	bne.n	8000dcc <main+0x2c>
  		printf("Mode: Master\r\n");
 8000dc4:	4871      	ldr	r0, [pc, #452]	@ (8000f8c <main+0x1ec>)
 8000dc6:	f001 ff5f 	bl	8002c88 <puts>
 8000dca:	e002      	b.n	8000dd2 <main+0x32>

  	} else {
  		printf("Mode: Slave\r\n");
 8000dcc:	4870      	ldr	r0, [pc, #448]	@ (8000f90 <main+0x1f0>)
 8000dce:	f001 ff5b 	bl	8002c88 <puts>

  	}
  	status = 1;
 8000dd2:	4b70      	ldr	r3, [pc, #448]	@ (8000f94 <main+0x1f4>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

  	//initialize LoRa module
  	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8000f98 <main+0x1f8>)
 8000dda:	4a70      	ldr	r2, [pc, #448]	@ (8000f9c <main+0x1fc>)
 8000ddc:	60da      	str	r2, [r3, #12]
  	SX1278_hw.dio0.pin = DIO0_Pin;
 8000dde:	4b6e      	ldr	r3, [pc, #440]	@ (8000f98 <main+0x1f8>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	609a      	str	r2, [r3, #8]
  	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000de4:	4b6c      	ldr	r3, [pc, #432]	@ (8000f98 <main+0x1f8>)
 8000de6:	4a6e      	ldr	r2, [pc, #440]	@ (8000fa0 <main+0x200>)
 8000de8:	615a      	str	r2, [r3, #20]
  	SX1278_hw.nss.pin = NSS_Pin;
 8000dea:	4b6b      	ldr	r3, [pc, #428]	@ (8000f98 <main+0x1f8>)
 8000dec:	2210      	movs	r2, #16
 8000dee:	611a      	str	r2, [r3, #16]
  	SX1278_hw.reset.port = RST_GPIO_Port;
 8000df0:	4b69      	ldr	r3, [pc, #420]	@ (8000f98 <main+0x1f8>)
 8000df2:	4a6a      	ldr	r2, [pc, #424]	@ (8000f9c <main+0x1fc>)
 8000df4:	605a      	str	r2, [r3, #4]
  	SX1278_hw.reset.pin = RST_Pin;
 8000df6:	4b68      	ldr	r3, [pc, #416]	@ (8000f98 <main+0x1f8>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
  	SX1278_hw.spi = &hspi1;
 8000dfc:	4b66      	ldr	r3, [pc, #408]	@ (8000f98 <main+0x1f8>)
 8000dfe:	4a69      	ldr	r2, [pc, #420]	@ (8000fa4 <main+0x204>)
 8000e00:	619a      	str	r2, [r3, #24]

  	SX1278.hw = &SX1278_hw;
 8000e02:	4b69      	ldr	r3, [pc, #420]	@ (8000fa8 <main+0x208>)
 8000e04:	4a64      	ldr	r2, [pc, #400]	@ (8000f98 <main+0x1f8>)
 8000e06:	601a      	str	r2, [r3, #0]

  	printf("Configuring LoRa module\r\n");
 8000e08:	4868      	ldr	r0, [pc, #416]	@ (8000fac <main+0x20c>)
 8000e0a:	f001 ff3d 	bl	8002c88 <puts>
  	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000e0e:	230a      	movs	r3, #10
 8000e10:	9305      	str	r3, [sp, #20]
 8000e12:	2300      	movs	r3, #0
 8000e14:	9304      	str	r3, [sp, #16]
 8000e16:	2300      	movs	r3, #0
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	9302      	str	r3, [sp, #8]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	2301      	movs	r3, #1
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	a356      	add	r3, pc, #344	@ (adr r3, 8000f80 <main+0x1e0>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	485e      	ldr	r0, [pc, #376]	@ (8000fa8 <main+0x208>)
 8000e2e:	f7ff fe3f 	bl	8000ab0 <SX1278_init>
  	SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  	printf("Done configuring LoRaModule\r\n");
 8000e32:	485f      	ldr	r0, [pc, #380]	@ (8000fb0 <main+0x210>)
 8000e34:	f001 ff28 	bl	8002c88 <puts>

  	status++;
 8000e38:	4b56      	ldr	r3, [pc, #344]	@ (8000f94 <main+0x1f4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4a55      	ldr	r2, [pc, #340]	@ (8000f94 <main+0x1f4>)
 8000e40:	6013      	str	r3, [r2, #0]

  	if (master == 1) {
 8000e42:	4b51      	ldr	r3, [pc, #324]	@ (8000f88 <main+0x1e8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d109      	bne.n	8000e5e <main+0xbe>
  		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000e4a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e4e:	2110      	movs	r1, #16
 8000e50:	4855      	ldr	r0, [pc, #340]	@ (8000fa8 <main+0x208>)
 8000e52:	f7ff fd96 	bl	8000982 <SX1278_LoRaEntryTx>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a56      	ldr	r2, [pc, #344]	@ (8000fb4 <main+0x214>)
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	e008      	b.n	8000e70 <main+0xd0>

  	} else {
  		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000e5e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e62:	2110      	movs	r1, #16
 8000e64:	4850      	ldr	r0, [pc, #320]	@ (8000fa8 <main+0x208>)
 8000e66:	f7ff fce3 	bl	8000830 <SX1278_LoRaEntryRx>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4a51      	ldr	r2, [pc, #324]	@ (8000fb4 <main+0x214>)
 8000e6e:	6013      	str	r3, [r2, #0]

  	}
  	status++;
 8000e70:	4b48      	ldr	r3, [pc, #288]	@ (8000f94 <main+0x1f4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a47      	ldr	r2, [pc, #284]	@ (8000f94 <main+0x1f4>)
 8000e78:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	while (1) {
  			if (master == 1) {
 8000e7a:	4b43      	ldr	r3, [pc, #268]	@ (8000f88 <main+0x1e8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d14a      	bne.n	8000f18 <main+0x178>
  				printf("Master ...\r\n");
 8000e82:	484d      	ldr	r0, [pc, #308]	@ (8000fb8 <main+0x218>)
 8000e84:	f001 ff00 	bl	8002c88 <puts>
  				HAL_Delay(1000);
 8000e88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e8c:	f000 fb00 	bl	8001490 <HAL_Delay>
  				printf("Sending package...\r\n");
 8000e90:	484a      	ldr	r0, [pc, #296]	@ (8000fbc <main+0x21c>)
 8000e92:	f001 fef9 	bl	8002c88 <puts>

  				message_length = sprintf(buffer, "Hello %d", message);
 8000e96:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <main+0x220>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4949      	ldr	r1, [pc, #292]	@ (8000fc4 <main+0x224>)
 8000e9e:	484a      	ldr	r0, [pc, #296]	@ (8000fc8 <main+0x228>)
 8000ea0:	f001 fefa 	bl	8002c98 <siprintf>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4a49      	ldr	r2, [pc, #292]	@ (8000fcc <main+0x22c>)
 8000ea8:	6013      	str	r3, [r2, #0]
  				ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000eaa:	4b48      	ldr	r3, [pc, #288]	@ (8000fcc <main+0x22c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	483c      	ldr	r0, [pc, #240]	@ (8000fa8 <main+0x208>)
 8000eb8:	f7ff fd63 	bl	8000982 <SX1278_LoRaEntryTx>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8000fb4 <main+0x214>)
 8000ec0:	6013      	str	r3, [r2, #0]
  				printf("Entry: %d\r\n", ret);
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fb4 <main+0x214>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4841      	ldr	r0, [pc, #260]	@ (8000fd0 <main+0x230>)
 8000eca:	f001 fe75 	bl	8002bb8 <iprintf>
  				status = 4;
 8000ece:	4b31      	ldr	r3, [pc, #196]	@ (8000f94 <main+0x1f4>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	601a      	str	r2, [r3, #0]
  				printf("Sending %s\r\n", buffer);
 8000ed4:	493c      	ldr	r1, [pc, #240]	@ (8000fc8 <main+0x228>)
 8000ed6:	483f      	ldr	r0, [pc, #252]	@ (8000fd4 <main+0x234>)
 8000ed8:	f001 fe6e 	bl	8002bb8 <iprintf>
  				ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 8000edc:	4b3b      	ldr	r3, [pc, #236]	@ (8000fcc <main+0x22c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ee6:	4938      	ldr	r1, [pc, #224]	@ (8000fc8 <main+0x228>)
 8000ee8:	482f      	ldr	r0, [pc, #188]	@ (8000fa8 <main+0x208>)
 8000eea:	f7ff fda2 	bl	8000a32 <SX1278_LoRaTxPacket>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a30      	ldr	r2, [pc, #192]	@ (8000fb4 <main+0x214>)
 8000ef2:	6013      	str	r3, [r2, #0]
  						message_length, 2000);
  				message += 1;
 8000ef4:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <main+0x220>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	4a31      	ldr	r2, [pc, #196]	@ (8000fc0 <main+0x220>)
 8000efc:	6013      	str	r3, [r2, #0]
  				status = 5;
 8000efe:	4b25      	ldr	r3, [pc, #148]	@ (8000f94 <main+0x1f4>)
 8000f00:	2205      	movs	r2, #5
 8000f02:	601a      	str	r2, [r3, #0]
  				printf("Transmission: %d\r\n", ret);
 8000f04:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <main+0x214>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4833      	ldr	r0, [pc, #204]	@ (8000fd8 <main+0x238>)
 8000f0c:	f001 fe54 	bl	8002bb8 <iprintf>
  				printf("Package sent...\r\n");
 8000f10:	4832      	ldr	r0, [pc, #200]	@ (8000fdc <main+0x23c>)
 8000f12:	f001 feb9 	bl	8002c88 <puts>
 8000f16:	e7b0      	b.n	8000e7a <main+0xda>

  			} else {
  				printf("Slave ...\r\n");
 8000f18:	4831      	ldr	r0, [pc, #196]	@ (8000fe0 <main+0x240>)
 8000f1a:	f001 feb5 	bl	8002c88 <puts>
  				HAL_Delay(800);
 8000f1e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000f22:	f000 fab5 	bl	8001490 <HAL_Delay>
  				printf("Receiving package...\r\n");
 8000f26:	482f      	ldr	r0, [pc, #188]	@ (8000fe4 <main+0x244>)
 8000f28:	f001 feae 	bl	8002c88 <puts>

  				ret = SX1278_LoRaRxPacket(&SX1278);
 8000f2c:	481e      	ldr	r0, [pc, #120]	@ (8000fa8 <main+0x208>)
 8000f2e:	f7ff fce4 	bl	80008fa <SX1278_LoRaRxPacket>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <main+0x214>)
 8000f38:	601a      	str	r2, [r3, #0]
  				printf("Received: %d\r\n", ret);
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <main+0x214>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4829      	ldr	r0, [pc, #164]	@ (8000fe8 <main+0x248>)
 8000f42:	f001 fe39 	bl	8002bb8 <iprintf>
  				status = 4;
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <main+0x1f4>)
 8000f48:	2204      	movs	r2, #4
 8000f4a:	601a      	str	r2, [r3, #0]
  				if (ret > 0) {
 8000f4c:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <main+0x214>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd0e      	ble.n	8000f72 <main+0x1d2>
  					SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000f54:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <main+0x214>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	491a      	ldr	r1, [pc, #104]	@ (8000fc8 <main+0x228>)
 8000f5e:	4812      	ldr	r0, [pc, #72]	@ (8000fa8 <main+0x208>)
 8000f60:	f7ff fdd3 	bl	8000b0a <SX1278_read>
  					printf("Content (%d): %s\r\n", ret, buffer);
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <main+0x214>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <main+0x228>)
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481f      	ldr	r0, [pc, #124]	@ (8000fec <main+0x24c>)
 8000f6e:	f001 fe23 	bl	8002bb8 <iprintf>
  				}
  				printf("Package received ...\r\n");
 8000f72:	481f      	ldr	r0, [pc, #124]	@ (8000ff0 <main+0x250>)
 8000f74:	f001 fe88 	bl	8002c88 <puts>
  				status = 5;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <main+0x1f4>)
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	601a      	str	r2, [r3, #0]
  			if (master == 1) {
 8000f7e:	e77c      	b.n	8000e7a <main+0xda>
 8000f80:	19de5080 	.word	0x19de5080
 8000f84:	00000000 	.word	0x00000000
 8000f88:	200001bc 	.word	0x200001bc
 8000f8c:	08003d28 	.word	0x08003d28
 8000f90:	08003d38 	.word	0x08003d38
 8000f94:	200001b8 	.word	0x200001b8
 8000f98:	20000084 	.word	0x20000084
 8000f9c:	40010c00 	.word	0x40010c00
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	200003cc 	.word	0x200003cc
 8000fa8:	200000a0 	.word	0x200000a0
 8000fac:	08003d48 	.word	0x08003d48
 8000fb0:	08003d64 	.word	0x08003d64
 8000fb4:	200001c0 	.word	0x200001c0
 8000fb8:	08003d84 	.word	0x08003d84
 8000fbc:	08003d90 	.word	0x08003d90
 8000fc0:	200003c4 	.word	0x200003c4
 8000fc4:	08003da4 	.word	0x08003da4
 8000fc8:	200001c4 	.word	0x200001c4
 8000fcc:	200003c8 	.word	0x200003c8
 8000fd0:	08003db0 	.word	0x08003db0
 8000fd4:	08003dbc 	.word	0x08003dbc
 8000fd8:	08003dcc 	.word	0x08003dcc
 8000fdc:	08003de0 	.word	0x08003de0
 8000fe0:	08003df4 	.word	0x08003df4
 8000fe4:	08003e00 	.word	0x08003e00
 8000fe8:	08003e18 	.word	0x08003e18
 8000fec:	08003e28 	.word	0x08003e28
 8000ff0:	08003e3c 	.word	0x08003e3c

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b090      	sub	sp, #64	@ 0x40
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	2228      	movs	r2, #40	@ 0x28
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f001 ff40 	bl	8002e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101a:	2301      	movs	r3, #1
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101e:	2310      	movs	r3, #16
 8001020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fcec 	bl	8001a08 <HAL_RCC_OscConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001036:	f000 f818 	bl	800106a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103a:	230f      	movs	r3, #15
 800103c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f000 ff5a 	bl	8001f0c <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800105e:	f000 f804 	bl	800106a <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3740      	adds	r7, #64	@ 0x40
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106e:	b672      	cpsid	i
}
 8001070:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001072:	bf00      	nop
 8001074:	e7fd      	b.n	8001072 <Error_Handler+0x8>
	...

08001078 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_SPI1_Init+0x64>)
 800107e:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <MX_SPI1_Init+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_SPI1_Init+0x64>)
 8001084:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001088:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_SPI1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_SPI1_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010c4:	220a      	movs	r2, #10
 80010c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010ca:	f001 f87b 	bl	80021c4 <HAL_SPI_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d4:	f7ff ffc9 	bl	800106a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200003cc 	.word	0x200003cc
 80010e0:	40013000 	.word	0x40013000

080010e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <HAL_SPI_MspInit+0x88>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d12f      	bne.n	8001164 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <HAL_SPI_MspInit+0x8c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a19      	ldr	r2, [pc, #100]	@ (8001170 <HAL_SPI_MspInit+0x8c>)
 800110a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <HAL_SPI_MspInit+0x8c>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_SPI_MspInit+0x8c>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a13      	ldr	r2, [pc, #76]	@ (8001170 <HAL_SPI_MspInit+0x8c>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <HAL_SPI_MspInit+0x8c>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001134:	23a0      	movs	r3, #160	@ 0xa0
 8001136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	480b      	ldr	r0, [pc, #44]	@ (8001174 <HAL_SPI_MspInit+0x90>)
 8001148:	f000 faaa 	bl	80016a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800114c:	2340      	movs	r3, #64	@ 0x40
 800114e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <HAL_SPI_MspInit+0x90>)
 8001160:	f000 fa9e 	bl	80016a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40013000 	.word	0x40013000
 8001170:	40021000 	.word	0x40021000
 8001174:	40010800 	.word	0x40010800

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_MspInit+0x5c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a14      	ldr	r2, [pc, #80]	@ (80011d4 <HAL_MspInit+0x5c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <HAL_MspInit+0x5c>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <HAL_MspInit+0x5c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a0e      	ldr	r2, [pc, #56]	@ (80011d4 <HAL_MspInit+0x5c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <HAL_MspInit+0x5c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HAL_MspInit+0x60>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <HAL_MspInit+0x60>)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <NMI_Handler+0x4>

080011e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <MemManage_Handler+0x4>

080011f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <UsageFault_Handler+0x4>

08001204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f914 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e00a      	b.n	800125c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001246:	f3af 8000 	nop.w
 800124a:	4601      	mov	r1, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	b2ca      	uxtb	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbf0      	blt.n	8001246 <_read+0x12>
  }

  return len;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e009      	b.n	8001294 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	60ba      	str	r2, [r7, #8]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf1      	blt.n	8001280 <_write+0x12>
  }
  return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_close>:

int _close(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012cc:	605a      	str	r2, [r3, #4]
  return 0;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <_isatty>:

int _isatty(int file)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f001 fdf4 	bl	8002f24 <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	@ (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20005000 	.word	0x20005000
 8001368:	00000400 	.word	0x00000400
 800136c:	20000424 	.word	0x20000424
 8001370:	20000578 	.word	0x20000578

08001374 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001380:	f7ff fff8 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001384:	480b      	ldr	r0, [pc, #44]	@ (80013b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001386:	490c      	ldr	r1, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001388:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a09      	ldr	r2, [pc, #36]	@ (80013c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800139c:	4c09      	ldr	r4, [pc, #36]	@ (80013c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013aa:	f001 fdc1 	bl	8002f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ae:	f7ff fcf7 	bl	8000da0 <main>
  bx lr
 80013b2:	4770      	bx	lr
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013bc:	08003edc 	.word	0x08003edc
  ldr r2, =_sbss
 80013c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013c4:	20000578 	.word	0x20000578

080013c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_2_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_Init+0x28>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_Init+0x28>)
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f92b 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fec6 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40022000 	.word	0x40022000

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f935 	bl	8001686 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f90b 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	20000008 	.word	0x20000008
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_IncTick+0x1c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_IncTick+0x20>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a03      	ldr	r2, [pc, #12]	@ (8001478 <HAL_IncTick+0x20>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	20000008 	.word	0x20000008
 8001478:	20000428 	.word	0x20000428

0800147c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b02      	ldr	r3, [pc, #8]	@ (800148c <HAL_GetTick+0x10>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000428 	.word	0x20000428

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff fff0 	bl	800147c <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffe0 	bl	800147c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	@ (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	@ (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	@ 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff90 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff49 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff5e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff90 	bl	8001590 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5f 	bl	800153c <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffb0 	bl	80015f4 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b08b      	sub	sp, #44	@ 0x2c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	e169      	b.n	8001988 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b4:	2201      	movs	r2, #1
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 8158 	bne.w	8001982 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a9a      	ldr	r2, [pc, #616]	@ (8001940 <HAL_GPIO_Init+0x2a0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d05e      	beq.n	800179a <HAL_GPIO_Init+0xfa>
 80016dc:	4a98      	ldr	r2, [pc, #608]	@ (8001940 <HAL_GPIO_Init+0x2a0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d875      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 80016e2:	4a98      	ldr	r2, [pc, #608]	@ (8001944 <HAL_GPIO_Init+0x2a4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d058      	beq.n	800179a <HAL_GPIO_Init+0xfa>
 80016e8:	4a96      	ldr	r2, [pc, #600]	@ (8001944 <HAL_GPIO_Init+0x2a4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d86f      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 80016ee:	4a96      	ldr	r2, [pc, #600]	@ (8001948 <HAL_GPIO_Init+0x2a8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d052      	beq.n	800179a <HAL_GPIO_Init+0xfa>
 80016f4:	4a94      	ldr	r2, [pc, #592]	@ (8001948 <HAL_GPIO_Init+0x2a8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d869      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 80016fa:	4a94      	ldr	r2, [pc, #592]	@ (800194c <HAL_GPIO_Init+0x2ac>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d04c      	beq.n	800179a <HAL_GPIO_Init+0xfa>
 8001700:	4a92      	ldr	r2, [pc, #584]	@ (800194c <HAL_GPIO_Init+0x2ac>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d863      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 8001706:	4a92      	ldr	r2, [pc, #584]	@ (8001950 <HAL_GPIO_Init+0x2b0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d046      	beq.n	800179a <HAL_GPIO_Init+0xfa>
 800170c:	4a90      	ldr	r2, [pc, #576]	@ (8001950 <HAL_GPIO_Init+0x2b0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d85d      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 8001712:	2b12      	cmp	r3, #18
 8001714:	d82a      	bhi.n	800176c <HAL_GPIO_Init+0xcc>
 8001716:	2b12      	cmp	r3, #18
 8001718:	d859      	bhi.n	80017ce <HAL_GPIO_Init+0x12e>
 800171a:	a201      	add	r2, pc, #4	@ (adr r2, 8001720 <HAL_GPIO_Init+0x80>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	0800179b 	.word	0x0800179b
 8001724:	08001775 	.word	0x08001775
 8001728:	08001787 	.word	0x08001787
 800172c:	080017c9 	.word	0x080017c9
 8001730:	080017cf 	.word	0x080017cf
 8001734:	080017cf 	.word	0x080017cf
 8001738:	080017cf 	.word	0x080017cf
 800173c:	080017cf 	.word	0x080017cf
 8001740:	080017cf 	.word	0x080017cf
 8001744:	080017cf 	.word	0x080017cf
 8001748:	080017cf 	.word	0x080017cf
 800174c:	080017cf 	.word	0x080017cf
 8001750:	080017cf 	.word	0x080017cf
 8001754:	080017cf 	.word	0x080017cf
 8001758:	080017cf 	.word	0x080017cf
 800175c:	080017cf 	.word	0x080017cf
 8001760:	080017cf 	.word	0x080017cf
 8001764:	0800177d 	.word	0x0800177d
 8001768:	08001791 	.word	0x08001791
 800176c:	4a79      	ldr	r2, [pc, #484]	@ (8001954 <HAL_GPIO_Init+0x2b4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001772:	e02c      	b.n	80017ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e029      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	3304      	adds	r3, #4
 8001782:	623b      	str	r3, [r7, #32]
          break;
 8001784:	e024      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	3308      	adds	r3, #8
 800178c:	623b      	str	r3, [r7, #32]
          break;
 800178e:	e01f      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	330c      	adds	r3, #12
 8001796:	623b      	str	r3, [r7, #32]
          break;
 8001798:	e01a      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017a2:	2304      	movs	r3, #4
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e013      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d105      	bne.n	80017bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b0:	2308      	movs	r3, #8
 80017b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	611a      	str	r2, [r3, #16]
          break;
 80017ba:	e009      	b.n	80017d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017bc:	2308      	movs	r3, #8
 80017be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	615a      	str	r2, [r3, #20]
          break;
 80017c6:	e003      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x130>
          break;
 80017ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2bff      	cmp	r3, #255	@ 0xff
 80017d4:	d801      	bhi.n	80017da <HAL_GPIO_Init+0x13a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	e001      	b.n	80017de <HAL_GPIO_Init+0x13e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3304      	adds	r3, #4
 80017de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2bff      	cmp	r3, #255	@ 0xff
 80017e4:	d802      	bhi.n	80017ec <HAL_GPIO_Init+0x14c>
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	e002      	b.n	80017f2 <HAL_GPIO_Init+0x152>
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	3b08      	subs	r3, #8
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	210f      	movs	r1, #15
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	6a39      	ldr	r1, [r7, #32]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	431a      	orrs	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 80b1 	beq.w	8001982 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001820:	4b4d      	ldr	r3, [pc, #308]	@ (8001958 <HAL_GPIO_Init+0x2b8>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a4c      	ldr	r2, [pc, #304]	@ (8001958 <HAL_GPIO_Init+0x2b8>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b4a      	ldr	r3, [pc, #296]	@ (8001958 <HAL_GPIO_Init+0x2b8>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001838:	4a48      	ldr	r2, [pc, #288]	@ (800195c <HAL_GPIO_Init+0x2bc>)
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	220f      	movs	r2, #15
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a40      	ldr	r2, [pc, #256]	@ (8001960 <HAL_GPIO_Init+0x2c0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d013      	beq.n	800188c <HAL_GPIO_Init+0x1ec>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a3f      	ldr	r2, [pc, #252]	@ (8001964 <HAL_GPIO_Init+0x2c4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00d      	beq.n	8001888 <HAL_GPIO_Init+0x1e8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a3e      	ldr	r2, [pc, #248]	@ (8001968 <HAL_GPIO_Init+0x2c8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d007      	beq.n	8001884 <HAL_GPIO_Init+0x1e4>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3d      	ldr	r2, [pc, #244]	@ (800196c <HAL_GPIO_Init+0x2cc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_GPIO_Init+0x1e0>
 800187c:	2303      	movs	r3, #3
 800187e:	e006      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001880:	2304      	movs	r3, #4
 8001882:	e004      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001884:	2302      	movs	r3, #2
 8001886:	e002      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_GPIO_Init+0x1ee>
 800188c:	2300      	movs	r3, #0
 800188e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001890:	f002 0203 	and.w	r2, r2, #3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4093      	lsls	r3, r2
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800189e:	492f      	ldr	r1, [pc, #188]	@ (800195c <HAL_GPIO_Init+0x2bc>)
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	492c      	ldr	r1, [pc, #176]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e0:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	4922      	ldr	r1, [pc, #136]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	491e      	ldr	r1, [pc, #120]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4918      	ldr	r1, [pc, #96]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	43db      	mvns	r3, r3
 800191e:	4914      	ldr	r1, [pc, #80]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 8001920:	4013      	ands	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d021      	beq.n	8001974 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001930:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	490e      	ldr	r1, [pc, #56]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e021      	b.n	8001982 <HAL_GPIO_Init+0x2e2>
 800193e:	bf00      	nop
 8001940:	10320000 	.word	0x10320000
 8001944:	10310000 	.word	0x10310000
 8001948:	10220000 	.word	0x10220000
 800194c:	10210000 	.word	0x10210000
 8001950:	10120000 	.word	0x10120000
 8001954:	10110000 	.word	0x10110000
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	40010800 	.word	0x40010800
 8001964:	40010c00 	.word	0x40010c00
 8001968:	40011000 	.word	0x40011000
 800196c:	40011400 	.word	0x40011400
 8001970:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_GPIO_Init+0x304>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	43db      	mvns	r3, r3
 800197c:	4909      	ldr	r1, [pc, #36]	@ (80019a4 <HAL_GPIO_Init+0x304>)
 800197e:	4013      	ands	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	3301      	adds	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	f47f ae8e 	bne.w	80016b4 <HAL_GPIO_Init+0x14>
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	372c      	adds	r7, #44	@ 0x2c
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	e001      	b.n	80019ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	807b      	strh	r3, [r7, #2]
 80019e2:	4613      	mov	r3, r2
 80019e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e6:	787b      	ldrb	r3, [r7, #1]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ec:	887a      	ldrh	r2, [r7, #2]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019f2:	e003      	b.n	80019fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	041a      	lsls	r2, r3, #16
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	611a      	str	r2, [r3, #16]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e272      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8087 	beq.w	8001b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a28:	4b92      	ldr	r3, [pc, #584]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d00c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a34:	4b8f      	ldr	r3, [pc, #572]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d112      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5e>
 8001a40:	4b8c      	ldr	r3, [pc, #560]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a4c:	d10b      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4e:	4b89      	ldr	r3, [pc, #548]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d06c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x12c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d168      	bne.n	8001b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e24c      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x76>
 8001a70:	4b80      	ldr	r3, [pc, #512]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a7f      	ldr	r2, [pc, #508]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e02e      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x98>
 8001a86:	4b7b      	ldr	r3, [pc, #492]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7a      	ldr	r2, [pc, #488]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b78      	ldr	r3, [pc, #480]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a77      	ldr	r2, [pc, #476]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e01d      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xbc>
 8001aaa:	4b72      	ldr	r3, [pc, #456]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a71      	ldr	r2, [pc, #452]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6e      	ldr	r2, [pc, #440]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b68      	ldr	r3, [pc, #416]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a67      	ldr	r2, [pc, #412]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d013      	beq.n	8001b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fcca 	bl	800147c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fcc6 	bl	800147c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	@ 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e200      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b5d      	ldr	r3, [pc, #372]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0xe4>
 8001b0a:	e014      	b.n	8001b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fcb6 	bl	800147c <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fcb2 	bl	800147c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	@ 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1ec      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	4b53      	ldr	r3, [pc, #332]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x10c>
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b42:	4b4c      	ldr	r3, [pc, #304]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b4e:	4b49      	ldr	r3, [pc, #292]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d11c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x18c>
 8001b5a:	4b46      	ldr	r3, [pc, #280]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d116      	bne.n	8001b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	4b43      	ldr	r3, [pc, #268]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_RCC_OscConfig+0x176>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e1c0      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4939      	ldr	r1, [pc, #228]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	e03a      	b.n	8001c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	4b36      	ldr	r3, [pc, #216]	@ (8001c78 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fc6b 	bl	800147c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff fc67 	bl	800147c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e1a1      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4927      	ldr	r1, [pc, #156]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
 8001bdc:	e015      	b.n	8001c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bde:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <HAL_RCC_OscConfig+0x270>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fc4a 	bl	800147c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff fc46 	bl	800147c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e180      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03a      	beq.n	8001c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d019      	beq.n	8001c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1e:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7ff fc2a 	bl	800147c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fc26 	bl	800147c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e160      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f000 fa9c 	bl	8002188 <RCC_Delay>
 8001c50:	e01c      	b.n	8001c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7ff fc10 	bl	800147c <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c60:	f7ff fc0c 	bl	800147c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d908      	bls.n	8001c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e146      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	42420000 	.word	0x42420000
 8001c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	4b92      	ldr	r3, [pc, #584]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e9      	bne.n	8001c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a6 	beq.w	8001de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9e:	4b8b      	ldr	r3, [pc, #556]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10d      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b88      	ldr	r3, [pc, #544]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a87      	ldr	r2, [pc, #540]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b85      	ldr	r3, [pc, #532]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b82      	ldr	r3, [pc, #520]	@ (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d118      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cde:	f7ff fbcd 	bl	800147c <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce6:	f7ff fbc9 	bl	800147c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b64      	cmp	r3, #100	@ 0x64
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e103      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	4b75      	ldr	r3, [pc, #468]	@ (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x312>
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4a6e      	ldr	r2, [pc, #440]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6213      	str	r3, [r2, #32]
 8001d18:	e02d      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x334>
 8001d22:	4b6a      	ldr	r3, [pc, #424]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a69      	ldr	r2, [pc, #420]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	4b67      	ldr	r3, [pc, #412]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a66      	ldr	r2, [pc, #408]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	6213      	str	r3, [r2, #32]
 8001d3a:	e01c      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d10c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x356>
 8001d44:	4b61      	ldr	r3, [pc, #388]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a60      	ldr	r2, [pc, #384]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	4b5e      	ldr	r3, [pc, #376]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a5d      	ldr	r2, [pc, #372]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6213      	str	r3, [r2, #32]
 8001d5c:	e00b      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a5a      	ldr	r2, [pc, #360]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b58      	ldr	r3, [pc, #352]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a57      	ldr	r2, [pc, #348]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d015      	beq.n	8001daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fb7d 	bl	800147c <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	e00a      	b.n	8001d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d86:	f7ff fb79 	bl	800147c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e0b1      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ee      	beq.n	8001d86 <HAL_RCC_OscConfig+0x37e>
 8001da8:	e014      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff fb67 	bl	800147c <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff fb63 	bl	800147c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e09b      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc8:	4b40      	ldr	r3, [pc, #256]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ee      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dda:	4b3c      	ldr	r3, [pc, #240]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a3b      	ldr	r2, [pc, #236]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8087 	beq.w	8001efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df0:	4b36      	ldr	r3, [pc, #216]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d061      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d146      	bne.n	8001e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e04:	4b33      	ldr	r3, [pc, #204]	@ (8001ed4 <HAL_RCC_OscConfig+0x4cc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fb37 	bl	800147c <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff fb33 	bl	800147c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e06d      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e24:	4b29      	ldr	r3, [pc, #164]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e38:	d108      	bne.n	8001e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4921      	ldr	r1, [pc, #132]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a19      	ldr	r1, [r3, #32]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	491b      	ldr	r1, [pc, #108]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb07 	bl	800147c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff fb03 	bl	800147c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e03d      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x46a>
 8001e90:	e035      	b.n	8001efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <HAL_RCC_OscConfig+0x4cc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff faf0 	bl	800147c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff faec 	bl	800147c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e026      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x498>
 8001ebe:	e01e      	b.n	8001efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e019      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_OscConfig+0x500>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b6a      	ldr	r3, [pc, #424]	@ (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b67      	ldr	r3, [pc, #412]	@ (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4965      	ldr	r1, [pc, #404]	@ (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	@ (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a52      	ldr	r2, [pc, #328]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e073      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3d      	ldr	r3, [pc, #244]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b39      	ldr	r3, [pc, #228]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4936      	ldr	r1, [pc, #216]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7ff fa3e 	bl	800147c <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7ff fa3a 	bl	800147c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e053      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b27      	ldr	r3, [pc, #156]	@ (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d210      	bcs.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4922      	ldr	r1, [pc, #136]	@ (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	@ (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002086:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	490a      	ldr	r1, [pc, #40]	@ (80020d4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	5ccb      	ldrb	r3, [r1, r3]
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	@ (80020d8 <HAL_RCC_ClockConfig+0x1cc>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_ClockConfig+0x1d0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f99c 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08003e74 	.word	0x08003e74
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x94>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d002      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x30>
 800210a:	2b08      	cmp	r3, #8
 800210c:	d003      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x36>
 800210e:	e027      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002112:	613b      	str	r3, [r7, #16]
      break;
 8002114:	e027      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0c9b      	lsrs	r3, r3, #18
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	4a17      	ldr	r2, [pc, #92]	@ (800217c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d010      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800212e:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x94>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0c5b      	lsrs	r3, r3, #17
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xa0>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002142:	fb03 f202 	mul.w	r2, r3, r2
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e004      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a0c      	ldr	r2, [pc, #48]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	613b      	str	r3, [r7, #16]
      break;
 800215e:	e002      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002162:	613b      	str	r3, [r7, #16]
      break;
 8002164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002166:	693b      	ldr	r3, [r7, #16]
}
 8002168:	4618      	mov	r0, r3
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	007a1200 	.word	0x007a1200
 800217c:	08003e84 	.word	0x08003e84
 8002180:	08003e94 	.word	0x08003e94
 8002184:	003d0900 	.word	0x003d0900

08002188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002190:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <RCC_Delay+0x34>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <RCC_Delay+0x38>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	0a5b      	lsrs	r3, r3, #9
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021a4:	bf00      	nop
  }
  while (Delay --);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	60fa      	str	r2, [r7, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f9      	bne.n	80021a4 <RCC_Delay+0x1c>
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	20000000 	.word	0x20000000
 80021c0:	10624dd3 	.word	0x10624dd3

080021c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e076      	b.n	80022c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d108      	bne.n	80021f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021e6:	d009      	beq.n	80021fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
 80021ee:	e005      	b.n	80021fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe ff64 	bl	80010e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002232:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002280:	ea42 0103 	orr.w	r1, r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	0c1a      	lsrs	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f002 0204 	and.w	r2, r2, #4
 80022a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69da      	ldr	r2, [r3, #28]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	4613      	mov	r3, r2
 80022da:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022dc:	f7ff f8ce 	bl	800147c <HAL_GetTick>
 80022e0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d001      	beq.n	80022f6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
 80022f4:	e12a      	b.n	800254c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_SPI_Transmit+0x36>
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e122      	b.n	800254c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_SPI_Transmit+0x48>
 8002310:	2302      	movs	r3, #2
 8002312:	e11b      	b.n	800254c <HAL_SPI_Transmit+0x280>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2203      	movs	r2, #3
 8002320:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002362:	d10f      	bne.n	8002384 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002372:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002382:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800238e:	2b40      	cmp	r3, #64	@ 0x40
 8002390:	d007      	beq.n	80023a2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023aa:	d152      	bne.n	8002452 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_SPI_Transmit+0xee>
 80023b4:	8b7b      	ldrh	r3, [r7, #26]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d145      	bne.n	8002446 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	881a      	ldrh	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	1c9a      	adds	r2, r3, #2
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023de:	e032      	b.n	8002446 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d112      	bne.n	8002414 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	881a      	ldrh	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	1c9a      	adds	r2, r3, #2
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002412:	e018      	b.n	8002446 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002414:	f7ff f832 	bl	800147c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d803      	bhi.n	800242c <HAL_SPI_Transmit+0x160>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242a:	d102      	bne.n	8002432 <HAL_SPI_Transmit+0x166>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e082      	b.n	800254c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1c7      	bne.n	80023e0 <HAL_SPI_Transmit+0x114>
 8002450:	e053      	b.n	80024fa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_SPI_Transmit+0x194>
 800245a:	8b7b      	ldrh	r3, [r7, #26]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d147      	bne.n	80024f0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	330c      	adds	r3, #12
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002486:	e033      	b.n	80024f0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d113      	bne.n	80024be <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	7812      	ldrb	r2, [r2, #0]
 80024a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024bc:	e018      	b.n	80024f0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024be:	f7fe ffdd 	bl	800147c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d803      	bhi.n	80024d6 <HAL_SPI_Transmit+0x20a>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d102      	bne.n	80024dc <HAL_SPI_Transmit+0x210>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e02d      	b.n	800254c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1c6      	bne.n	8002488 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	6839      	ldr	r1, [r7, #0]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fa66 	bl	80029d0 <SPI_EndRxTxTransaction>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800254a:	2300      	movs	r3, #0
  }
}
 800254c:	4618      	mov	r0, r3
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002562:	2301      	movs	r3, #1
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002566:	f7fe ff89 	bl	800147c <HAL_GetTick>
 800256a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002572:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d00c      	beq.n	800259e <HAL_SPI_TransmitReceive+0x4a>
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800258a:	d106      	bne.n	800259a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <HAL_SPI_TransmitReceive+0x46>
 8002594:	7ffb      	ldrb	r3, [r7, #31]
 8002596:	2b04      	cmp	r3, #4
 8002598:	d001      	beq.n	800259e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	e17f      	b.n	800289e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_SPI_TransmitReceive+0x5c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_SPI_TransmitReceive+0x5c>
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e174      	b.n	800289e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x6e>
 80025be:	2302      	movs	r3, #2
 80025c0:	e16d      	b.n	800289e <HAL_SPI_TransmitReceive+0x34a>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d003      	beq.n	80025de <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2205      	movs	r2, #5
 80025da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	887a      	ldrh	r2, [r7, #2]
 80025ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	887a      	ldrh	r2, [r7, #2]
 8002606:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261e:	2b40      	cmp	r3, #64	@ 0x40
 8002620:	d007      	beq.n	8002632 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800263a:	d17e      	bne.n	800273a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <HAL_SPI_TransmitReceive+0xf6>
 8002644:	8afb      	ldrh	r3, [r7, #22]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d16c      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	881a      	ldrh	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	1c9a      	adds	r2, r3, #2
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800266e:	e059      	b.n	8002724 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b02      	cmp	r3, #2
 800267c:	d11b      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x162>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d016      	beq.n	80026b6 <HAL_SPI_TransmitReceive+0x162>
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	2b01      	cmp	r3, #1
 800268c:	d113      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	881a      	ldrh	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d119      	bne.n	80026f8 <HAL_SPI_TransmitReceive+0x1a4>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d014      	beq.n	80026f8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d8:	b292      	uxth	r2, r2
 80026da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e0:	1c9a      	adds	r2, r3, #2
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026f4:	2301      	movs	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026f8:	f7fe fec0 	bl	800147c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002704:	429a      	cmp	r2, r3
 8002706:	d80d      	bhi.n	8002724 <HAL_SPI_TransmitReceive+0x1d0>
 8002708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d009      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0bc      	b.n	800289e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1a0      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x11c>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d19b      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x11c>
 8002738:	e082      	b.n	8002840 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x1f4>
 8002742:	8afb      	ldrh	r3, [r7, #22]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d171      	bne.n	800282c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	7812      	ldrb	r2, [r2, #0]
 8002754:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800276e:	e05d      	b.n	800282c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d11c      	bne.n	80027b8 <HAL_SPI_TransmitReceive+0x264>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d017      	beq.n	80027b8 <HAL_SPI_TransmitReceive+0x264>
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	2b01      	cmp	r3, #1
 800278c:	d114      	bne.n	80027b8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	7812      	ldrb	r2, [r2, #0]
 800279a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d119      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x2a6>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d014      	beq.n	80027fa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027f6:	2301      	movs	r3, #1
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027fa:	f7fe fe3f 	bl	800147c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002806:	429a      	cmp	r2, r3
 8002808:	d803      	bhi.n	8002812 <HAL_SPI_TransmitReceive+0x2be>
 800280a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d102      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x2c4>
 8002812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e038      	b.n	800289e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d19c      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x21c>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d197      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f8c3 	bl	80029d0 <SPI_EndRxTxTransaction>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e01d      	b.n	800289e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800289c:	2300      	movs	r3, #0
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3728      	adds	r7, #40	@ 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028b4:	b2db      	uxtb	r3, r3
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028d0:	f7fe fdd4 	bl	800147c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028e0:	f7fe fdcc 	bl	800147c <HAL_GetTick>
 80028e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028e6:	4b39      	ldr	r3, [pc, #228]	@ (80029cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	015b      	lsls	r3, r3, #5
 80028ec:	0d1b      	lsrs	r3, r3, #20
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f6:	e054      	b.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fe:	d050      	beq.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002900:	f7fe fdbc 	bl	800147c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	429a      	cmp	r2, r3
 800290e:	d902      	bls.n	8002916 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d13d      	bne.n	8002992 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800292e:	d111      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002938:	d004      	beq.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002942:	d107      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295c:	d10f      	bne.n	800297e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800297c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e017      	b.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3b01      	subs	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d19b      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000000 	.word	0x20000000

080029d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2201      	movs	r2, #1
 80029e4:	2102      	movs	r1, #2
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff ff6a 	bl	80028c0 <SPI_WaitFlagStateUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e013      	b.n	8002a2a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2180      	movs	r1, #128	@ 0x80
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff ff57 	bl	80028c0 <SPI_WaitFlagStateUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e000      	b.n	8002a2a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <std>:
 8002a34:	2300      	movs	r3, #0
 8002a36:	b510      	push	{r4, lr}
 8002a38:	4604      	mov	r4, r0
 8002a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8002a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a42:	6083      	str	r3, [r0, #8]
 8002a44:	8181      	strh	r1, [r0, #12]
 8002a46:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a48:	81c2      	strh	r2, [r0, #14]
 8002a4a:	6183      	str	r3, [r0, #24]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	2208      	movs	r2, #8
 8002a50:	305c      	adds	r0, #92	@ 0x5c
 8002a52:	f000 fa19 	bl	8002e88 <memset>
 8002a56:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <std+0x58>)
 8002a58:	6224      	str	r4, [r4, #32]
 8002a5a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <std+0x5c>)
 8002a5e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <std+0x60>)
 8002a62:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <std+0x64>)
 8002a66:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a68:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <std+0x68>)
 8002a6a:	429c      	cmp	r4, r3
 8002a6c:	d006      	beq.n	8002a7c <std+0x48>
 8002a6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a72:	4294      	cmp	r4, r2
 8002a74:	d002      	beq.n	8002a7c <std+0x48>
 8002a76:	33d0      	adds	r3, #208	@ 0xd0
 8002a78:	429c      	cmp	r4, r3
 8002a7a:	d105      	bne.n	8002a88 <std+0x54>
 8002a7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a84:	f000 ba78 	b.w	8002f78 <__retarget_lock_init_recursive>
 8002a88:	bd10      	pop	{r4, pc}
 8002a8a:	bf00      	nop
 8002a8c:	08002cd9 	.word	0x08002cd9
 8002a90:	08002cfb 	.word	0x08002cfb
 8002a94:	08002d33 	.word	0x08002d33
 8002a98:	08002d57 	.word	0x08002d57
 8002a9c:	2000042c 	.word	0x2000042c

08002aa0 <stdio_exit_handler>:
 8002aa0:	4a02      	ldr	r2, [pc, #8]	@ (8002aac <stdio_exit_handler+0xc>)
 8002aa2:	4903      	ldr	r1, [pc, #12]	@ (8002ab0 <stdio_exit_handler+0x10>)
 8002aa4:	4803      	ldr	r0, [pc, #12]	@ (8002ab4 <stdio_exit_handler+0x14>)
 8002aa6:	f000 b869 	b.w	8002b7c <_fwalk_sglue>
 8002aaa:	bf00      	nop
 8002aac:	2000000c 	.word	0x2000000c
 8002ab0:	08003add 	.word	0x08003add
 8002ab4:	2000001c 	.word	0x2000001c

08002ab8 <cleanup_stdio>:
 8002ab8:	6841      	ldr	r1, [r0, #4]
 8002aba:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <cleanup_stdio+0x34>)
 8002abc:	b510      	push	{r4, lr}
 8002abe:	4299      	cmp	r1, r3
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	d001      	beq.n	8002ac8 <cleanup_stdio+0x10>
 8002ac4:	f001 f80a 	bl	8003adc <_fflush_r>
 8002ac8:	68a1      	ldr	r1, [r4, #8]
 8002aca:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <cleanup_stdio+0x38>)
 8002acc:	4299      	cmp	r1, r3
 8002ace:	d002      	beq.n	8002ad6 <cleanup_stdio+0x1e>
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f001 f803 	bl	8003adc <_fflush_r>
 8002ad6:	68e1      	ldr	r1, [r4, #12]
 8002ad8:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <cleanup_stdio+0x3c>)
 8002ada:	4299      	cmp	r1, r3
 8002adc:	d004      	beq.n	8002ae8 <cleanup_stdio+0x30>
 8002ade:	4620      	mov	r0, r4
 8002ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ae4:	f000 bffa 	b.w	8003adc <_fflush_r>
 8002ae8:	bd10      	pop	{r4, pc}
 8002aea:	bf00      	nop
 8002aec:	2000042c 	.word	0x2000042c
 8002af0:	20000494 	.word	0x20000494
 8002af4:	200004fc 	.word	0x200004fc

08002af8 <global_stdio_init.part.0>:
 8002af8:	b510      	push	{r4, lr}
 8002afa:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <global_stdio_init.part.0+0x30>)
 8002afc:	4c0b      	ldr	r4, [pc, #44]	@ (8002b2c <global_stdio_init.part.0+0x34>)
 8002afe:	4a0c      	ldr	r2, [pc, #48]	@ (8002b30 <global_stdio_init.part.0+0x38>)
 8002b00:	4620      	mov	r0, r4
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	2104      	movs	r1, #4
 8002b06:	2200      	movs	r2, #0
 8002b08:	f7ff ff94 	bl	8002a34 <std>
 8002b0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002b10:	2201      	movs	r2, #1
 8002b12:	2109      	movs	r1, #9
 8002b14:	f7ff ff8e 	bl	8002a34 <std>
 8002b18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b22:	2112      	movs	r1, #18
 8002b24:	f7ff bf86 	b.w	8002a34 <std>
 8002b28:	20000564 	.word	0x20000564
 8002b2c:	2000042c 	.word	0x2000042c
 8002b30:	08002aa1 	.word	0x08002aa1

08002b34 <__sfp_lock_acquire>:
 8002b34:	4801      	ldr	r0, [pc, #4]	@ (8002b3c <__sfp_lock_acquire+0x8>)
 8002b36:	f000 ba20 	b.w	8002f7a <__retarget_lock_acquire_recursive>
 8002b3a:	bf00      	nop
 8002b3c:	2000056d 	.word	0x2000056d

08002b40 <__sfp_lock_release>:
 8002b40:	4801      	ldr	r0, [pc, #4]	@ (8002b48 <__sfp_lock_release+0x8>)
 8002b42:	f000 ba1b 	b.w	8002f7c <__retarget_lock_release_recursive>
 8002b46:	bf00      	nop
 8002b48:	2000056d 	.word	0x2000056d

08002b4c <__sinit>:
 8002b4c:	b510      	push	{r4, lr}
 8002b4e:	4604      	mov	r4, r0
 8002b50:	f7ff fff0 	bl	8002b34 <__sfp_lock_acquire>
 8002b54:	6a23      	ldr	r3, [r4, #32]
 8002b56:	b11b      	cbz	r3, 8002b60 <__sinit+0x14>
 8002b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b5c:	f7ff bff0 	b.w	8002b40 <__sfp_lock_release>
 8002b60:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <__sinit+0x28>)
 8002b62:	6223      	str	r3, [r4, #32]
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <__sinit+0x2c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f5      	bne.n	8002b58 <__sinit+0xc>
 8002b6c:	f7ff ffc4 	bl	8002af8 <global_stdio_init.part.0>
 8002b70:	e7f2      	b.n	8002b58 <__sinit+0xc>
 8002b72:	bf00      	nop
 8002b74:	08002ab9 	.word	0x08002ab9
 8002b78:	20000564 	.word	0x20000564

08002b7c <_fwalk_sglue>:
 8002b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b80:	4607      	mov	r7, r0
 8002b82:	4688      	mov	r8, r1
 8002b84:	4614      	mov	r4, r2
 8002b86:	2600      	movs	r6, #0
 8002b88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b8c:	f1b9 0901 	subs.w	r9, r9, #1
 8002b90:	d505      	bpl.n	8002b9e <_fwalk_sglue+0x22>
 8002b92:	6824      	ldr	r4, [r4, #0]
 8002b94:	2c00      	cmp	r4, #0
 8002b96:	d1f7      	bne.n	8002b88 <_fwalk_sglue+0xc>
 8002b98:	4630      	mov	r0, r6
 8002b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b9e:	89ab      	ldrh	r3, [r5, #12]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d907      	bls.n	8002bb4 <_fwalk_sglue+0x38>
 8002ba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	d003      	beq.n	8002bb4 <_fwalk_sglue+0x38>
 8002bac:	4629      	mov	r1, r5
 8002bae:	4638      	mov	r0, r7
 8002bb0:	47c0      	blx	r8
 8002bb2:	4306      	orrs	r6, r0
 8002bb4:	3568      	adds	r5, #104	@ 0x68
 8002bb6:	e7e9      	b.n	8002b8c <_fwalk_sglue+0x10>

08002bb8 <iprintf>:
 8002bb8:	b40f      	push	{r0, r1, r2, r3}
 8002bba:	b507      	push	{r0, r1, r2, lr}
 8002bbc:	4906      	ldr	r1, [pc, #24]	@ (8002bd8 <iprintf+0x20>)
 8002bbe:	ab04      	add	r3, sp, #16
 8002bc0:	6808      	ldr	r0, [r1, #0]
 8002bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bc6:	6881      	ldr	r1, [r0, #8]
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	f000 fc5d 	bl	8003488 <_vfiprintf_r>
 8002bce:	b003      	add	sp, #12
 8002bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bd4:	b004      	add	sp, #16
 8002bd6:	4770      	bx	lr
 8002bd8:	20000018 	.word	0x20000018

08002bdc <_puts_r>:
 8002bdc:	6a03      	ldr	r3, [r0, #32]
 8002bde:	b570      	push	{r4, r5, r6, lr}
 8002be0:	4605      	mov	r5, r0
 8002be2:	460e      	mov	r6, r1
 8002be4:	6884      	ldr	r4, [r0, #8]
 8002be6:	b90b      	cbnz	r3, 8002bec <_puts_r+0x10>
 8002be8:	f7ff ffb0 	bl	8002b4c <__sinit>
 8002bec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bee:	07db      	lsls	r3, r3, #31
 8002bf0:	d405      	bmi.n	8002bfe <_puts_r+0x22>
 8002bf2:	89a3      	ldrh	r3, [r4, #12]
 8002bf4:	0598      	lsls	r0, r3, #22
 8002bf6:	d402      	bmi.n	8002bfe <_puts_r+0x22>
 8002bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bfa:	f000 f9be 	bl	8002f7a <__retarget_lock_acquire_recursive>
 8002bfe:	89a3      	ldrh	r3, [r4, #12]
 8002c00:	0719      	lsls	r1, r3, #28
 8002c02:	d502      	bpl.n	8002c0a <_puts_r+0x2e>
 8002c04:	6923      	ldr	r3, [r4, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d135      	bne.n	8002c76 <_puts_r+0x9a>
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f000 f8e5 	bl	8002ddc <__swsetup_r>
 8002c12:	b380      	cbz	r0, 8002c76 <_puts_r+0x9a>
 8002c14:	f04f 35ff 	mov.w	r5, #4294967295
 8002c18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c1a:	07da      	lsls	r2, r3, #31
 8002c1c:	d405      	bmi.n	8002c2a <_puts_r+0x4e>
 8002c1e:	89a3      	ldrh	r3, [r4, #12]
 8002c20:	059b      	lsls	r3, r3, #22
 8002c22:	d402      	bmi.n	8002c2a <_puts_r+0x4e>
 8002c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c26:	f000 f9a9 	bl	8002f7c <__retarget_lock_release_recursive>
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	bd70      	pop	{r4, r5, r6, pc}
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	da04      	bge.n	8002c3c <_puts_r+0x60>
 8002c32:	69a2      	ldr	r2, [r4, #24]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dc17      	bgt.n	8002c68 <_puts_r+0x8c>
 8002c38:	290a      	cmp	r1, #10
 8002c3a:	d015      	beq.n	8002c68 <_puts_r+0x8c>
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	6022      	str	r2, [r4, #0]
 8002c42:	7019      	strb	r1, [r3, #0]
 8002c44:	68a3      	ldr	r3, [r4, #8]
 8002c46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	60a3      	str	r3, [r4, #8]
 8002c4e:	2900      	cmp	r1, #0
 8002c50:	d1ed      	bne.n	8002c2e <_puts_r+0x52>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	da11      	bge.n	8002c7a <_puts_r+0x9e>
 8002c56:	4622      	mov	r2, r4
 8002c58:	210a      	movs	r1, #10
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f000 f87f 	bl	8002d5e <__swbuf_r>
 8002c60:	3001      	adds	r0, #1
 8002c62:	d0d7      	beq.n	8002c14 <_puts_r+0x38>
 8002c64:	250a      	movs	r5, #10
 8002c66:	e7d7      	b.n	8002c18 <_puts_r+0x3c>
 8002c68:	4622      	mov	r2, r4
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f000 f877 	bl	8002d5e <__swbuf_r>
 8002c70:	3001      	adds	r0, #1
 8002c72:	d1e7      	bne.n	8002c44 <_puts_r+0x68>
 8002c74:	e7ce      	b.n	8002c14 <_puts_r+0x38>
 8002c76:	3e01      	subs	r6, #1
 8002c78:	e7e4      	b.n	8002c44 <_puts_r+0x68>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	6022      	str	r2, [r4, #0]
 8002c80:	220a      	movs	r2, #10
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e7ee      	b.n	8002c64 <_puts_r+0x88>
	...

08002c88 <puts>:
 8002c88:	4b02      	ldr	r3, [pc, #8]	@ (8002c94 <puts+0xc>)
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	f7ff bfa5 	b.w	8002bdc <_puts_r>
 8002c92:	bf00      	nop
 8002c94:	20000018 	.word	0x20000018

08002c98 <siprintf>:
 8002c98:	b40e      	push	{r1, r2, r3}
 8002c9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002c9e:	b500      	push	{lr}
 8002ca0:	b09c      	sub	sp, #112	@ 0x70
 8002ca2:	ab1d      	add	r3, sp, #116	@ 0x74
 8002ca4:	9002      	str	r0, [sp, #8]
 8002ca6:	9006      	str	r0, [sp, #24]
 8002ca8:	9107      	str	r1, [sp, #28]
 8002caa:	9104      	str	r1, [sp, #16]
 8002cac:	4808      	ldr	r0, [pc, #32]	@ (8002cd0 <siprintf+0x38>)
 8002cae:	4909      	ldr	r1, [pc, #36]	@ (8002cd4 <siprintf+0x3c>)
 8002cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cb4:	9105      	str	r1, [sp, #20]
 8002cb6:	6800      	ldr	r0, [r0, #0]
 8002cb8:	a902      	add	r1, sp, #8
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	f000 fac0 	bl	8003240 <_svfiprintf_r>
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	9b02      	ldr	r3, [sp, #8]
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	b01c      	add	sp, #112	@ 0x70
 8002cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ccc:	b003      	add	sp, #12
 8002cce:	4770      	bx	lr
 8002cd0:	20000018 	.word	0x20000018
 8002cd4:	ffff0208 	.word	0xffff0208

08002cd8 <__sread>:
 8002cd8:	b510      	push	{r4, lr}
 8002cda:	460c      	mov	r4, r1
 8002cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ce0:	f000 f8fc 	bl	8002edc <_read_r>
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	bfab      	itete	ge
 8002ce8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002cea:	89a3      	ldrhlt	r3, [r4, #12]
 8002cec:	181b      	addge	r3, r3, r0
 8002cee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002cf2:	bfac      	ite	ge
 8002cf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002cf6:	81a3      	strhlt	r3, [r4, #12]
 8002cf8:	bd10      	pop	{r4, pc}

08002cfa <__swrite>:
 8002cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cfe:	461f      	mov	r7, r3
 8002d00:	898b      	ldrh	r3, [r1, #12]
 8002d02:	4605      	mov	r5, r0
 8002d04:	05db      	lsls	r3, r3, #23
 8002d06:	460c      	mov	r4, r1
 8002d08:	4616      	mov	r6, r2
 8002d0a:	d505      	bpl.n	8002d18 <__swrite+0x1e>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d14:	f000 f8d0 	bl	8002eb8 <_lseek_r>
 8002d18:	89a3      	ldrh	r3, [r4, #12]
 8002d1a:	4632      	mov	r2, r6
 8002d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d20:	81a3      	strh	r3, [r4, #12]
 8002d22:	4628      	mov	r0, r5
 8002d24:	463b      	mov	r3, r7
 8002d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d2e:	f000 b8e7 	b.w	8002f00 <_write_r>

08002d32 <__sseek>:
 8002d32:	b510      	push	{r4, lr}
 8002d34:	460c      	mov	r4, r1
 8002d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d3a:	f000 f8bd 	bl	8002eb8 <_lseek_r>
 8002d3e:	1c43      	adds	r3, r0, #1
 8002d40:	89a3      	ldrh	r3, [r4, #12]
 8002d42:	bf15      	itete	ne
 8002d44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002d4e:	81a3      	strheq	r3, [r4, #12]
 8002d50:	bf18      	it	ne
 8002d52:	81a3      	strhne	r3, [r4, #12]
 8002d54:	bd10      	pop	{r4, pc}

08002d56 <__sclose>:
 8002d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d5a:	f000 b89d 	b.w	8002e98 <_close_r>

08002d5e <__swbuf_r>:
 8002d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d60:	460e      	mov	r6, r1
 8002d62:	4614      	mov	r4, r2
 8002d64:	4605      	mov	r5, r0
 8002d66:	b118      	cbz	r0, 8002d70 <__swbuf_r+0x12>
 8002d68:	6a03      	ldr	r3, [r0, #32]
 8002d6a:	b90b      	cbnz	r3, 8002d70 <__swbuf_r+0x12>
 8002d6c:	f7ff feee 	bl	8002b4c <__sinit>
 8002d70:	69a3      	ldr	r3, [r4, #24]
 8002d72:	60a3      	str	r3, [r4, #8]
 8002d74:	89a3      	ldrh	r3, [r4, #12]
 8002d76:	071a      	lsls	r2, r3, #28
 8002d78:	d501      	bpl.n	8002d7e <__swbuf_r+0x20>
 8002d7a:	6923      	ldr	r3, [r4, #16]
 8002d7c:	b943      	cbnz	r3, 8002d90 <__swbuf_r+0x32>
 8002d7e:	4621      	mov	r1, r4
 8002d80:	4628      	mov	r0, r5
 8002d82:	f000 f82b 	bl	8002ddc <__swsetup_r>
 8002d86:	b118      	cbz	r0, 8002d90 <__swbuf_r+0x32>
 8002d88:	f04f 37ff 	mov.w	r7, #4294967295
 8002d8c:	4638      	mov	r0, r7
 8002d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	6922      	ldr	r2, [r4, #16]
 8002d94:	b2f6      	uxtb	r6, r6
 8002d96:	1a98      	subs	r0, r3, r2
 8002d98:	6963      	ldr	r3, [r4, #20]
 8002d9a:	4637      	mov	r7, r6
 8002d9c:	4283      	cmp	r3, r0
 8002d9e:	dc05      	bgt.n	8002dac <__swbuf_r+0x4e>
 8002da0:	4621      	mov	r1, r4
 8002da2:	4628      	mov	r0, r5
 8002da4:	f000 fe9a 	bl	8003adc <_fflush_r>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d1ed      	bne.n	8002d88 <__swbuf_r+0x2a>
 8002dac:	68a3      	ldr	r3, [r4, #8]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	60a3      	str	r3, [r4, #8]
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	6022      	str	r2, [r4, #0]
 8002db8:	701e      	strb	r6, [r3, #0]
 8002dba:	6962      	ldr	r2, [r4, #20]
 8002dbc:	1c43      	adds	r3, r0, #1
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d004      	beq.n	8002dcc <__swbuf_r+0x6e>
 8002dc2:	89a3      	ldrh	r3, [r4, #12]
 8002dc4:	07db      	lsls	r3, r3, #31
 8002dc6:	d5e1      	bpl.n	8002d8c <__swbuf_r+0x2e>
 8002dc8:	2e0a      	cmp	r6, #10
 8002dca:	d1df      	bne.n	8002d8c <__swbuf_r+0x2e>
 8002dcc:	4621      	mov	r1, r4
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f000 fe84 	bl	8003adc <_fflush_r>
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d0d9      	beq.n	8002d8c <__swbuf_r+0x2e>
 8002dd8:	e7d6      	b.n	8002d88 <__swbuf_r+0x2a>
	...

08002ddc <__swsetup_r>:
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <__swsetup_r+0xa8>)
 8002de0:	4605      	mov	r5, r0
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	460c      	mov	r4, r1
 8002de6:	b118      	cbz	r0, 8002df0 <__swsetup_r+0x14>
 8002de8:	6a03      	ldr	r3, [r0, #32]
 8002dea:	b90b      	cbnz	r3, 8002df0 <__swsetup_r+0x14>
 8002dec:	f7ff feae 	bl	8002b4c <__sinit>
 8002df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002df4:	0719      	lsls	r1, r3, #28
 8002df6:	d422      	bmi.n	8002e3e <__swsetup_r+0x62>
 8002df8:	06da      	lsls	r2, r3, #27
 8002dfa:	d407      	bmi.n	8002e0c <__swsetup_r+0x30>
 8002dfc:	2209      	movs	r2, #9
 8002dfe:	602a      	str	r2, [r5, #0]
 8002e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295
 8002e08:	81a3      	strh	r3, [r4, #12]
 8002e0a:	e033      	b.n	8002e74 <__swsetup_r+0x98>
 8002e0c:	0758      	lsls	r0, r3, #29
 8002e0e:	d512      	bpl.n	8002e36 <__swsetup_r+0x5a>
 8002e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e12:	b141      	cbz	r1, 8002e26 <__swsetup_r+0x4a>
 8002e14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e18:	4299      	cmp	r1, r3
 8002e1a:	d002      	beq.n	8002e22 <__swsetup_r+0x46>
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 f8bd 	bl	8002f9c <_free_r>
 8002e22:	2300      	movs	r3, #0
 8002e24:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e26:	89a3      	ldrh	r3, [r4, #12]
 8002e28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002e2c:	81a3      	strh	r3, [r4, #12]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6063      	str	r3, [r4, #4]
 8002e32:	6923      	ldr	r3, [r4, #16]
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	81a3      	strh	r3, [r4, #12]
 8002e3e:	6923      	ldr	r3, [r4, #16]
 8002e40:	b94b      	cbnz	r3, 8002e56 <__swsetup_r+0x7a>
 8002e42:	89a3      	ldrh	r3, [r4, #12]
 8002e44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e4c:	d003      	beq.n	8002e56 <__swsetup_r+0x7a>
 8002e4e:	4621      	mov	r1, r4
 8002e50:	4628      	mov	r0, r5
 8002e52:	f000 fe90 	bl	8003b76 <__smakebuf_r>
 8002e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e5a:	f013 0201 	ands.w	r2, r3, #1
 8002e5e:	d00a      	beq.n	8002e76 <__swsetup_r+0x9a>
 8002e60:	2200      	movs	r2, #0
 8002e62:	60a2      	str	r2, [r4, #8]
 8002e64:	6962      	ldr	r2, [r4, #20]
 8002e66:	4252      	negs	r2, r2
 8002e68:	61a2      	str	r2, [r4, #24]
 8002e6a:	6922      	ldr	r2, [r4, #16]
 8002e6c:	b942      	cbnz	r2, 8002e80 <__swsetup_r+0xa4>
 8002e6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002e72:	d1c5      	bne.n	8002e00 <__swsetup_r+0x24>
 8002e74:	bd38      	pop	{r3, r4, r5, pc}
 8002e76:	0799      	lsls	r1, r3, #30
 8002e78:	bf58      	it	pl
 8002e7a:	6962      	ldrpl	r2, [r4, #20]
 8002e7c:	60a2      	str	r2, [r4, #8]
 8002e7e:	e7f4      	b.n	8002e6a <__swsetup_r+0x8e>
 8002e80:	2000      	movs	r0, #0
 8002e82:	e7f7      	b.n	8002e74 <__swsetup_r+0x98>
 8002e84:	20000018 	.word	0x20000018

08002e88 <memset>:
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4402      	add	r2, r0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	f803 1b01 	strb.w	r1, [r3], #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <_close_r>:
 8002e98:	b538      	push	{r3, r4, r5, lr}
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	4d05      	ldr	r5, [pc, #20]	@ (8002eb4 <_close_r+0x1c>)
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	602b      	str	r3, [r5, #0]
 8002ea4:	f7fe f9ff 	bl	80012a6 <_close>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d102      	bne.n	8002eb2 <_close_r+0x1a>
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	b103      	cbz	r3, 8002eb2 <_close_r+0x1a>
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	20000568 	.word	0x20000568

08002eb8 <_lseek_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4604      	mov	r4, r0
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4d05      	ldr	r5, [pc, #20]	@ (8002ed8 <_lseek_r+0x20>)
 8002ec4:	602a      	str	r2, [r5, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f7fe fa11 	bl	80012ee <_lseek>
 8002ecc:	1c43      	adds	r3, r0, #1
 8002ece:	d102      	bne.n	8002ed6 <_lseek_r+0x1e>
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	b103      	cbz	r3, 8002ed6 <_lseek_r+0x1e>
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
 8002ed8:	20000568 	.word	0x20000568

08002edc <_read_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4d05      	ldr	r5, [pc, #20]	@ (8002efc <_read_r+0x20>)
 8002ee8:	602a      	str	r2, [r5, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f7fe f9a2 	bl	8001234 <_read>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d102      	bne.n	8002efa <_read_r+0x1e>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	b103      	cbz	r3, 8002efa <_read_r+0x1e>
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	20000568 	.word	0x20000568

08002f00 <_write_r>:
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	4604      	mov	r4, r0
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	2200      	movs	r2, #0
 8002f0a:	4d05      	ldr	r5, [pc, #20]	@ (8002f20 <_write_r+0x20>)
 8002f0c:	602a      	str	r2, [r5, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f7fe f9ad 	bl	800126e <_write>
 8002f14:	1c43      	adds	r3, r0, #1
 8002f16:	d102      	bne.n	8002f1e <_write_r+0x1e>
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	b103      	cbz	r3, 8002f1e <_write_r+0x1e>
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}
 8002f20:	20000568 	.word	0x20000568

08002f24 <__errno>:
 8002f24:	4b01      	ldr	r3, [pc, #4]	@ (8002f2c <__errno+0x8>)
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000018 	.word	0x20000018

08002f30 <__libc_init_array>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	2600      	movs	r6, #0
 8002f34:	4d0c      	ldr	r5, [pc, #48]	@ (8002f68 <__libc_init_array+0x38>)
 8002f36:	4c0d      	ldr	r4, [pc, #52]	@ (8002f6c <__libc_init_array+0x3c>)
 8002f38:	1b64      	subs	r4, r4, r5
 8002f3a:	10a4      	asrs	r4, r4, #2
 8002f3c:	42a6      	cmp	r6, r4
 8002f3e:	d109      	bne.n	8002f54 <__libc_init_array+0x24>
 8002f40:	f000 fee6 	bl	8003d10 <_init>
 8002f44:	2600      	movs	r6, #0
 8002f46:	4d0a      	ldr	r5, [pc, #40]	@ (8002f70 <__libc_init_array+0x40>)
 8002f48:	4c0a      	ldr	r4, [pc, #40]	@ (8002f74 <__libc_init_array+0x44>)
 8002f4a:	1b64      	subs	r4, r4, r5
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	42a6      	cmp	r6, r4
 8002f50:	d105      	bne.n	8002f5e <__libc_init_array+0x2e>
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f58:	4798      	blx	r3
 8002f5a:	3601      	adds	r6, #1
 8002f5c:	e7ee      	b.n	8002f3c <__libc_init_array+0xc>
 8002f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f62:	4798      	blx	r3
 8002f64:	3601      	adds	r6, #1
 8002f66:	e7f2      	b.n	8002f4e <__libc_init_array+0x1e>
 8002f68:	08003ed4 	.word	0x08003ed4
 8002f6c:	08003ed4 	.word	0x08003ed4
 8002f70:	08003ed4 	.word	0x08003ed4
 8002f74:	08003ed8 	.word	0x08003ed8

08002f78 <__retarget_lock_init_recursive>:
 8002f78:	4770      	bx	lr

08002f7a <__retarget_lock_acquire_recursive>:
 8002f7a:	4770      	bx	lr

08002f7c <__retarget_lock_release_recursive>:
 8002f7c:	4770      	bx	lr

08002f7e <memcpy>:
 8002f7e:	440a      	add	r2, r1
 8002f80:	4291      	cmp	r1, r2
 8002f82:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f86:	d100      	bne.n	8002f8a <memcpy+0xc>
 8002f88:	4770      	bx	lr
 8002f8a:	b510      	push	{r4, lr}
 8002f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f90:	4291      	cmp	r1, r2
 8002f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f96:	d1f9      	bne.n	8002f8c <memcpy+0xe>
 8002f98:	bd10      	pop	{r4, pc}
	...

08002f9c <_free_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	2900      	cmp	r1, #0
 8002fa2:	d040      	beq.n	8003026 <_free_r+0x8a>
 8002fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa8:	1f0c      	subs	r4, r1, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bfb8      	it	lt
 8002fae:	18e4      	addlt	r4, r4, r3
 8002fb0:	f000 f8de 	bl	8003170 <__malloc_lock>
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003028 <_free_r+0x8c>)
 8002fb6:	6813      	ldr	r3, [r2, #0]
 8002fb8:	b933      	cbnz	r3, 8002fc8 <_free_r+0x2c>
 8002fba:	6063      	str	r3, [r4, #4]
 8002fbc:	6014      	str	r4, [r2, #0]
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fc4:	f000 b8da 	b.w	800317c <__malloc_unlock>
 8002fc8:	42a3      	cmp	r3, r4
 8002fca:	d908      	bls.n	8002fde <_free_r+0x42>
 8002fcc:	6820      	ldr	r0, [r4, #0]
 8002fce:	1821      	adds	r1, r4, r0
 8002fd0:	428b      	cmp	r3, r1
 8002fd2:	bf01      	itttt	eq
 8002fd4:	6819      	ldreq	r1, [r3, #0]
 8002fd6:	685b      	ldreq	r3, [r3, #4]
 8002fd8:	1809      	addeq	r1, r1, r0
 8002fda:	6021      	streq	r1, [r4, #0]
 8002fdc:	e7ed      	b.n	8002fba <_free_r+0x1e>
 8002fde:	461a      	mov	r2, r3
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	b10b      	cbz	r3, 8002fe8 <_free_r+0x4c>
 8002fe4:	42a3      	cmp	r3, r4
 8002fe6:	d9fa      	bls.n	8002fde <_free_r+0x42>
 8002fe8:	6811      	ldr	r1, [r2, #0]
 8002fea:	1850      	adds	r0, r2, r1
 8002fec:	42a0      	cmp	r0, r4
 8002fee:	d10b      	bne.n	8003008 <_free_r+0x6c>
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	4401      	add	r1, r0
 8002ff4:	1850      	adds	r0, r2, r1
 8002ff6:	4283      	cmp	r3, r0
 8002ff8:	6011      	str	r1, [r2, #0]
 8002ffa:	d1e0      	bne.n	8002fbe <_free_r+0x22>
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4408      	add	r0, r1
 8003002:	6010      	str	r0, [r2, #0]
 8003004:	6053      	str	r3, [r2, #4]
 8003006:	e7da      	b.n	8002fbe <_free_r+0x22>
 8003008:	d902      	bls.n	8003010 <_free_r+0x74>
 800300a:	230c      	movs	r3, #12
 800300c:	602b      	str	r3, [r5, #0]
 800300e:	e7d6      	b.n	8002fbe <_free_r+0x22>
 8003010:	6820      	ldr	r0, [r4, #0]
 8003012:	1821      	adds	r1, r4, r0
 8003014:	428b      	cmp	r3, r1
 8003016:	bf01      	itttt	eq
 8003018:	6819      	ldreq	r1, [r3, #0]
 800301a:	685b      	ldreq	r3, [r3, #4]
 800301c:	1809      	addeq	r1, r1, r0
 800301e:	6021      	streq	r1, [r4, #0]
 8003020:	6063      	str	r3, [r4, #4]
 8003022:	6054      	str	r4, [r2, #4]
 8003024:	e7cb      	b.n	8002fbe <_free_r+0x22>
 8003026:	bd38      	pop	{r3, r4, r5, pc}
 8003028:	20000574 	.word	0x20000574

0800302c <sbrk_aligned>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	4e0f      	ldr	r6, [pc, #60]	@ (800306c <sbrk_aligned+0x40>)
 8003030:	460c      	mov	r4, r1
 8003032:	6831      	ldr	r1, [r6, #0]
 8003034:	4605      	mov	r5, r0
 8003036:	b911      	cbnz	r1, 800303e <sbrk_aligned+0x12>
 8003038:	f000 fe16 	bl	8003c68 <_sbrk_r>
 800303c:	6030      	str	r0, [r6, #0]
 800303e:	4621      	mov	r1, r4
 8003040:	4628      	mov	r0, r5
 8003042:	f000 fe11 	bl	8003c68 <_sbrk_r>
 8003046:	1c43      	adds	r3, r0, #1
 8003048:	d103      	bne.n	8003052 <sbrk_aligned+0x26>
 800304a:	f04f 34ff 	mov.w	r4, #4294967295
 800304e:	4620      	mov	r0, r4
 8003050:	bd70      	pop	{r4, r5, r6, pc}
 8003052:	1cc4      	adds	r4, r0, #3
 8003054:	f024 0403 	bic.w	r4, r4, #3
 8003058:	42a0      	cmp	r0, r4
 800305a:	d0f8      	beq.n	800304e <sbrk_aligned+0x22>
 800305c:	1a21      	subs	r1, r4, r0
 800305e:	4628      	mov	r0, r5
 8003060:	f000 fe02 	bl	8003c68 <_sbrk_r>
 8003064:	3001      	adds	r0, #1
 8003066:	d1f2      	bne.n	800304e <sbrk_aligned+0x22>
 8003068:	e7ef      	b.n	800304a <sbrk_aligned+0x1e>
 800306a:	bf00      	nop
 800306c:	20000570 	.word	0x20000570

08003070 <_malloc_r>:
 8003070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003074:	1ccd      	adds	r5, r1, #3
 8003076:	f025 0503 	bic.w	r5, r5, #3
 800307a:	3508      	adds	r5, #8
 800307c:	2d0c      	cmp	r5, #12
 800307e:	bf38      	it	cc
 8003080:	250c      	movcc	r5, #12
 8003082:	2d00      	cmp	r5, #0
 8003084:	4606      	mov	r6, r0
 8003086:	db01      	blt.n	800308c <_malloc_r+0x1c>
 8003088:	42a9      	cmp	r1, r5
 800308a:	d904      	bls.n	8003096 <_malloc_r+0x26>
 800308c:	230c      	movs	r3, #12
 800308e:	6033      	str	r3, [r6, #0]
 8003090:	2000      	movs	r0, #0
 8003092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800316c <_malloc_r+0xfc>
 800309a:	f000 f869 	bl	8003170 <__malloc_lock>
 800309e:	f8d8 3000 	ldr.w	r3, [r8]
 80030a2:	461c      	mov	r4, r3
 80030a4:	bb44      	cbnz	r4, 80030f8 <_malloc_r+0x88>
 80030a6:	4629      	mov	r1, r5
 80030a8:	4630      	mov	r0, r6
 80030aa:	f7ff ffbf 	bl	800302c <sbrk_aligned>
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	4604      	mov	r4, r0
 80030b2:	d158      	bne.n	8003166 <_malloc_r+0xf6>
 80030b4:	f8d8 4000 	ldr.w	r4, [r8]
 80030b8:	4627      	mov	r7, r4
 80030ba:	2f00      	cmp	r7, #0
 80030bc:	d143      	bne.n	8003146 <_malloc_r+0xd6>
 80030be:	2c00      	cmp	r4, #0
 80030c0:	d04b      	beq.n	800315a <_malloc_r+0xea>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	4639      	mov	r1, r7
 80030c6:	4630      	mov	r0, r6
 80030c8:	eb04 0903 	add.w	r9, r4, r3
 80030cc:	f000 fdcc 	bl	8003c68 <_sbrk_r>
 80030d0:	4581      	cmp	r9, r0
 80030d2:	d142      	bne.n	800315a <_malloc_r+0xea>
 80030d4:	6821      	ldr	r1, [r4, #0]
 80030d6:	4630      	mov	r0, r6
 80030d8:	1a6d      	subs	r5, r5, r1
 80030da:	4629      	mov	r1, r5
 80030dc:	f7ff ffa6 	bl	800302c <sbrk_aligned>
 80030e0:	3001      	adds	r0, #1
 80030e2:	d03a      	beq.n	800315a <_malloc_r+0xea>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	442b      	add	r3, r5
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	f8d8 3000 	ldr.w	r3, [r8]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	bb62      	cbnz	r2, 800314c <_malloc_r+0xdc>
 80030f2:	f8c8 7000 	str.w	r7, [r8]
 80030f6:	e00f      	b.n	8003118 <_malloc_r+0xa8>
 80030f8:	6822      	ldr	r2, [r4, #0]
 80030fa:	1b52      	subs	r2, r2, r5
 80030fc:	d420      	bmi.n	8003140 <_malloc_r+0xd0>
 80030fe:	2a0b      	cmp	r2, #11
 8003100:	d917      	bls.n	8003132 <_malloc_r+0xc2>
 8003102:	1961      	adds	r1, r4, r5
 8003104:	42a3      	cmp	r3, r4
 8003106:	6025      	str	r5, [r4, #0]
 8003108:	bf18      	it	ne
 800310a:	6059      	strne	r1, [r3, #4]
 800310c:	6863      	ldr	r3, [r4, #4]
 800310e:	bf08      	it	eq
 8003110:	f8c8 1000 	streq.w	r1, [r8]
 8003114:	5162      	str	r2, [r4, r5]
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	4630      	mov	r0, r6
 800311a:	f000 f82f 	bl	800317c <__malloc_unlock>
 800311e:	f104 000b 	add.w	r0, r4, #11
 8003122:	1d23      	adds	r3, r4, #4
 8003124:	f020 0007 	bic.w	r0, r0, #7
 8003128:	1ac2      	subs	r2, r0, r3
 800312a:	bf1c      	itt	ne
 800312c:	1a1b      	subne	r3, r3, r0
 800312e:	50a3      	strne	r3, [r4, r2]
 8003130:	e7af      	b.n	8003092 <_malloc_r+0x22>
 8003132:	6862      	ldr	r2, [r4, #4]
 8003134:	42a3      	cmp	r3, r4
 8003136:	bf0c      	ite	eq
 8003138:	f8c8 2000 	streq.w	r2, [r8]
 800313c:	605a      	strne	r2, [r3, #4]
 800313e:	e7eb      	b.n	8003118 <_malloc_r+0xa8>
 8003140:	4623      	mov	r3, r4
 8003142:	6864      	ldr	r4, [r4, #4]
 8003144:	e7ae      	b.n	80030a4 <_malloc_r+0x34>
 8003146:	463c      	mov	r4, r7
 8003148:	687f      	ldr	r7, [r7, #4]
 800314a:	e7b6      	b.n	80030ba <_malloc_r+0x4a>
 800314c:	461a      	mov	r2, r3
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	42a3      	cmp	r3, r4
 8003152:	d1fb      	bne.n	800314c <_malloc_r+0xdc>
 8003154:	2300      	movs	r3, #0
 8003156:	6053      	str	r3, [r2, #4]
 8003158:	e7de      	b.n	8003118 <_malloc_r+0xa8>
 800315a:	230c      	movs	r3, #12
 800315c:	4630      	mov	r0, r6
 800315e:	6033      	str	r3, [r6, #0]
 8003160:	f000 f80c 	bl	800317c <__malloc_unlock>
 8003164:	e794      	b.n	8003090 <_malloc_r+0x20>
 8003166:	6005      	str	r5, [r0, #0]
 8003168:	e7d6      	b.n	8003118 <_malloc_r+0xa8>
 800316a:	bf00      	nop
 800316c:	20000574 	.word	0x20000574

08003170 <__malloc_lock>:
 8003170:	4801      	ldr	r0, [pc, #4]	@ (8003178 <__malloc_lock+0x8>)
 8003172:	f7ff bf02 	b.w	8002f7a <__retarget_lock_acquire_recursive>
 8003176:	bf00      	nop
 8003178:	2000056c 	.word	0x2000056c

0800317c <__malloc_unlock>:
 800317c:	4801      	ldr	r0, [pc, #4]	@ (8003184 <__malloc_unlock+0x8>)
 800317e:	f7ff befd 	b.w	8002f7c <__retarget_lock_release_recursive>
 8003182:	bf00      	nop
 8003184:	2000056c 	.word	0x2000056c

08003188 <__ssputs_r>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	461f      	mov	r7, r3
 800318e:	688e      	ldr	r6, [r1, #8]
 8003190:	4682      	mov	sl, r0
 8003192:	42be      	cmp	r6, r7
 8003194:	460c      	mov	r4, r1
 8003196:	4690      	mov	r8, r2
 8003198:	680b      	ldr	r3, [r1, #0]
 800319a:	d82d      	bhi.n	80031f8 <__ssputs_r+0x70>
 800319c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031a4:	d026      	beq.n	80031f4 <__ssputs_r+0x6c>
 80031a6:	6965      	ldr	r5, [r4, #20]
 80031a8:	6909      	ldr	r1, [r1, #16]
 80031aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ae:	eba3 0901 	sub.w	r9, r3, r1
 80031b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031b6:	1c7b      	adds	r3, r7, #1
 80031b8:	444b      	add	r3, r9
 80031ba:	106d      	asrs	r5, r5, #1
 80031bc:	429d      	cmp	r5, r3
 80031be:	bf38      	it	cc
 80031c0:	461d      	movcc	r5, r3
 80031c2:	0553      	lsls	r3, r2, #21
 80031c4:	d527      	bpl.n	8003216 <__ssputs_r+0x8e>
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7ff ff52 	bl	8003070 <_malloc_r>
 80031cc:	4606      	mov	r6, r0
 80031ce:	b360      	cbz	r0, 800322a <__ssputs_r+0xa2>
 80031d0:	464a      	mov	r2, r9
 80031d2:	6921      	ldr	r1, [r4, #16]
 80031d4:	f7ff fed3 	bl	8002f7e <memcpy>
 80031d8:	89a3      	ldrh	r3, [r4, #12]
 80031da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80031de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e2:	81a3      	strh	r3, [r4, #12]
 80031e4:	6126      	str	r6, [r4, #16]
 80031e6:	444e      	add	r6, r9
 80031e8:	6026      	str	r6, [r4, #0]
 80031ea:	463e      	mov	r6, r7
 80031ec:	6165      	str	r5, [r4, #20]
 80031ee:	eba5 0509 	sub.w	r5, r5, r9
 80031f2:	60a5      	str	r5, [r4, #8]
 80031f4:	42be      	cmp	r6, r7
 80031f6:	d900      	bls.n	80031fa <__ssputs_r+0x72>
 80031f8:	463e      	mov	r6, r7
 80031fa:	4632      	mov	r2, r6
 80031fc:	4641      	mov	r1, r8
 80031fe:	6820      	ldr	r0, [r4, #0]
 8003200:	f000 fcf5 	bl	8003bee <memmove>
 8003204:	2000      	movs	r0, #0
 8003206:	68a3      	ldr	r3, [r4, #8]
 8003208:	1b9b      	subs	r3, r3, r6
 800320a:	60a3      	str	r3, [r4, #8]
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	4433      	add	r3, r6
 8003210:	6023      	str	r3, [r4, #0]
 8003212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003216:	462a      	mov	r2, r5
 8003218:	f000 fd44 	bl	8003ca4 <_realloc_r>
 800321c:	4606      	mov	r6, r0
 800321e:	2800      	cmp	r0, #0
 8003220:	d1e0      	bne.n	80031e4 <__ssputs_r+0x5c>
 8003222:	4650      	mov	r0, sl
 8003224:	6921      	ldr	r1, [r4, #16]
 8003226:	f7ff feb9 	bl	8002f9c <_free_r>
 800322a:	230c      	movs	r3, #12
 800322c:	f8ca 3000 	str.w	r3, [sl]
 8003230:	89a3      	ldrh	r3, [r4, #12]
 8003232:	f04f 30ff 	mov.w	r0, #4294967295
 8003236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800323a:	81a3      	strh	r3, [r4, #12]
 800323c:	e7e9      	b.n	8003212 <__ssputs_r+0x8a>
	...

08003240 <_svfiprintf_r>:
 8003240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003244:	4698      	mov	r8, r3
 8003246:	898b      	ldrh	r3, [r1, #12]
 8003248:	4607      	mov	r7, r0
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	460d      	mov	r5, r1
 800324e:	4614      	mov	r4, r2
 8003250:	b09d      	sub	sp, #116	@ 0x74
 8003252:	d510      	bpl.n	8003276 <_svfiprintf_r+0x36>
 8003254:	690b      	ldr	r3, [r1, #16]
 8003256:	b973      	cbnz	r3, 8003276 <_svfiprintf_r+0x36>
 8003258:	2140      	movs	r1, #64	@ 0x40
 800325a:	f7ff ff09 	bl	8003070 <_malloc_r>
 800325e:	6028      	str	r0, [r5, #0]
 8003260:	6128      	str	r0, [r5, #16]
 8003262:	b930      	cbnz	r0, 8003272 <_svfiprintf_r+0x32>
 8003264:	230c      	movs	r3, #12
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	b01d      	add	sp, #116	@ 0x74
 800326e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003272:	2340      	movs	r3, #64	@ 0x40
 8003274:	616b      	str	r3, [r5, #20]
 8003276:	2300      	movs	r3, #0
 8003278:	9309      	str	r3, [sp, #36]	@ 0x24
 800327a:	2320      	movs	r3, #32
 800327c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003280:	2330      	movs	r3, #48	@ 0x30
 8003282:	f04f 0901 	mov.w	r9, #1
 8003286:	f8cd 800c 	str.w	r8, [sp, #12]
 800328a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003424 <_svfiprintf_r+0x1e4>
 800328e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003292:	4623      	mov	r3, r4
 8003294:	469a      	mov	sl, r3
 8003296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800329a:	b10a      	cbz	r2, 80032a0 <_svfiprintf_r+0x60>
 800329c:	2a25      	cmp	r2, #37	@ 0x25
 800329e:	d1f9      	bne.n	8003294 <_svfiprintf_r+0x54>
 80032a0:	ebba 0b04 	subs.w	fp, sl, r4
 80032a4:	d00b      	beq.n	80032be <_svfiprintf_r+0x7e>
 80032a6:	465b      	mov	r3, fp
 80032a8:	4622      	mov	r2, r4
 80032aa:	4629      	mov	r1, r5
 80032ac:	4638      	mov	r0, r7
 80032ae:	f7ff ff6b 	bl	8003188 <__ssputs_r>
 80032b2:	3001      	adds	r0, #1
 80032b4:	f000 80a7 	beq.w	8003406 <_svfiprintf_r+0x1c6>
 80032b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032ba:	445a      	add	r2, fp
 80032bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80032be:	f89a 3000 	ldrb.w	r3, [sl]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 809f 	beq.w	8003406 <_svfiprintf_r+0x1c6>
 80032c8:	2300      	movs	r3, #0
 80032ca:	f04f 32ff 	mov.w	r2, #4294967295
 80032ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032d2:	f10a 0a01 	add.w	sl, sl, #1
 80032d6:	9304      	str	r3, [sp, #16]
 80032d8:	9307      	str	r3, [sp, #28]
 80032da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032de:	931a      	str	r3, [sp, #104]	@ 0x68
 80032e0:	4654      	mov	r4, sl
 80032e2:	2205      	movs	r2, #5
 80032e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e8:	484e      	ldr	r0, [pc, #312]	@ (8003424 <_svfiprintf_r+0x1e4>)
 80032ea:	f000 fccd 	bl	8003c88 <memchr>
 80032ee:	9a04      	ldr	r2, [sp, #16]
 80032f0:	b9d8      	cbnz	r0, 800332a <_svfiprintf_r+0xea>
 80032f2:	06d0      	lsls	r0, r2, #27
 80032f4:	bf44      	itt	mi
 80032f6:	2320      	movmi	r3, #32
 80032f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032fc:	0711      	lsls	r1, r2, #28
 80032fe:	bf44      	itt	mi
 8003300:	232b      	movmi	r3, #43	@ 0x2b
 8003302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003306:	f89a 3000 	ldrb.w	r3, [sl]
 800330a:	2b2a      	cmp	r3, #42	@ 0x2a
 800330c:	d015      	beq.n	800333a <_svfiprintf_r+0xfa>
 800330e:	4654      	mov	r4, sl
 8003310:	2000      	movs	r0, #0
 8003312:	f04f 0c0a 	mov.w	ip, #10
 8003316:	9a07      	ldr	r2, [sp, #28]
 8003318:	4621      	mov	r1, r4
 800331a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800331e:	3b30      	subs	r3, #48	@ 0x30
 8003320:	2b09      	cmp	r3, #9
 8003322:	d94b      	bls.n	80033bc <_svfiprintf_r+0x17c>
 8003324:	b1b0      	cbz	r0, 8003354 <_svfiprintf_r+0x114>
 8003326:	9207      	str	r2, [sp, #28]
 8003328:	e014      	b.n	8003354 <_svfiprintf_r+0x114>
 800332a:	eba0 0308 	sub.w	r3, r0, r8
 800332e:	fa09 f303 	lsl.w	r3, r9, r3
 8003332:	4313      	orrs	r3, r2
 8003334:	46a2      	mov	sl, r4
 8003336:	9304      	str	r3, [sp, #16]
 8003338:	e7d2      	b.n	80032e0 <_svfiprintf_r+0xa0>
 800333a:	9b03      	ldr	r3, [sp, #12]
 800333c:	1d19      	adds	r1, r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	9103      	str	r1, [sp, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfbb      	ittet	lt
 8003346:	425b      	neglt	r3, r3
 8003348:	f042 0202 	orrlt.w	r2, r2, #2
 800334c:	9307      	strge	r3, [sp, #28]
 800334e:	9307      	strlt	r3, [sp, #28]
 8003350:	bfb8      	it	lt
 8003352:	9204      	strlt	r2, [sp, #16]
 8003354:	7823      	ldrb	r3, [r4, #0]
 8003356:	2b2e      	cmp	r3, #46	@ 0x2e
 8003358:	d10a      	bne.n	8003370 <_svfiprintf_r+0x130>
 800335a:	7863      	ldrb	r3, [r4, #1]
 800335c:	2b2a      	cmp	r3, #42	@ 0x2a
 800335e:	d132      	bne.n	80033c6 <_svfiprintf_r+0x186>
 8003360:	9b03      	ldr	r3, [sp, #12]
 8003362:	3402      	adds	r4, #2
 8003364:	1d1a      	adds	r2, r3, #4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	9203      	str	r2, [sp, #12]
 800336a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800336e:	9305      	str	r3, [sp, #20]
 8003370:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003428 <_svfiprintf_r+0x1e8>
 8003374:	2203      	movs	r2, #3
 8003376:	4650      	mov	r0, sl
 8003378:	7821      	ldrb	r1, [r4, #0]
 800337a:	f000 fc85 	bl	8003c88 <memchr>
 800337e:	b138      	cbz	r0, 8003390 <_svfiprintf_r+0x150>
 8003380:	2240      	movs	r2, #64	@ 0x40
 8003382:	9b04      	ldr	r3, [sp, #16]
 8003384:	eba0 000a 	sub.w	r0, r0, sl
 8003388:	4082      	lsls	r2, r0
 800338a:	4313      	orrs	r3, r2
 800338c:	3401      	adds	r4, #1
 800338e:	9304      	str	r3, [sp, #16]
 8003390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003394:	2206      	movs	r2, #6
 8003396:	4825      	ldr	r0, [pc, #148]	@ (800342c <_svfiprintf_r+0x1ec>)
 8003398:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800339c:	f000 fc74 	bl	8003c88 <memchr>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d036      	beq.n	8003412 <_svfiprintf_r+0x1d2>
 80033a4:	4b22      	ldr	r3, [pc, #136]	@ (8003430 <_svfiprintf_r+0x1f0>)
 80033a6:	bb1b      	cbnz	r3, 80033f0 <_svfiprintf_r+0x1b0>
 80033a8:	9b03      	ldr	r3, [sp, #12]
 80033aa:	3307      	adds	r3, #7
 80033ac:	f023 0307 	bic.w	r3, r3, #7
 80033b0:	3308      	adds	r3, #8
 80033b2:	9303      	str	r3, [sp, #12]
 80033b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033b6:	4433      	add	r3, r6
 80033b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80033ba:	e76a      	b.n	8003292 <_svfiprintf_r+0x52>
 80033bc:	460c      	mov	r4, r1
 80033be:	2001      	movs	r0, #1
 80033c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80033c4:	e7a8      	b.n	8003318 <_svfiprintf_r+0xd8>
 80033c6:	2300      	movs	r3, #0
 80033c8:	f04f 0c0a 	mov.w	ip, #10
 80033cc:	4619      	mov	r1, r3
 80033ce:	3401      	adds	r4, #1
 80033d0:	9305      	str	r3, [sp, #20]
 80033d2:	4620      	mov	r0, r4
 80033d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033d8:	3a30      	subs	r2, #48	@ 0x30
 80033da:	2a09      	cmp	r2, #9
 80033dc:	d903      	bls.n	80033e6 <_svfiprintf_r+0x1a6>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0c6      	beq.n	8003370 <_svfiprintf_r+0x130>
 80033e2:	9105      	str	r1, [sp, #20]
 80033e4:	e7c4      	b.n	8003370 <_svfiprintf_r+0x130>
 80033e6:	4604      	mov	r4, r0
 80033e8:	2301      	movs	r3, #1
 80033ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80033ee:	e7f0      	b.n	80033d2 <_svfiprintf_r+0x192>
 80033f0:	ab03      	add	r3, sp, #12
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	462a      	mov	r2, r5
 80033f6:	4638      	mov	r0, r7
 80033f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003434 <_svfiprintf_r+0x1f4>)
 80033fa:	a904      	add	r1, sp, #16
 80033fc:	f3af 8000 	nop.w
 8003400:	1c42      	adds	r2, r0, #1
 8003402:	4606      	mov	r6, r0
 8003404:	d1d6      	bne.n	80033b4 <_svfiprintf_r+0x174>
 8003406:	89ab      	ldrh	r3, [r5, #12]
 8003408:	065b      	lsls	r3, r3, #25
 800340a:	f53f af2d 	bmi.w	8003268 <_svfiprintf_r+0x28>
 800340e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003410:	e72c      	b.n	800326c <_svfiprintf_r+0x2c>
 8003412:	ab03      	add	r3, sp, #12
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	462a      	mov	r2, r5
 8003418:	4638      	mov	r0, r7
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <_svfiprintf_r+0x1f4>)
 800341c:	a904      	add	r1, sp, #16
 800341e:	f000 f9bd 	bl	800379c <_printf_i>
 8003422:	e7ed      	b.n	8003400 <_svfiprintf_r+0x1c0>
 8003424:	08003e96 	.word	0x08003e96
 8003428:	08003e9c 	.word	0x08003e9c
 800342c:	08003ea0 	.word	0x08003ea0
 8003430:	00000000 	.word	0x00000000
 8003434:	08003189 	.word	0x08003189

08003438 <__sfputc_r>:
 8003438:	6893      	ldr	r3, [r2, #8]
 800343a:	b410      	push	{r4}
 800343c:	3b01      	subs	r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	6093      	str	r3, [r2, #8]
 8003442:	da07      	bge.n	8003454 <__sfputc_r+0x1c>
 8003444:	6994      	ldr	r4, [r2, #24]
 8003446:	42a3      	cmp	r3, r4
 8003448:	db01      	blt.n	800344e <__sfputc_r+0x16>
 800344a:	290a      	cmp	r1, #10
 800344c:	d102      	bne.n	8003454 <__sfputc_r+0x1c>
 800344e:	bc10      	pop	{r4}
 8003450:	f7ff bc85 	b.w	8002d5e <__swbuf_r>
 8003454:	6813      	ldr	r3, [r2, #0]
 8003456:	1c58      	adds	r0, r3, #1
 8003458:	6010      	str	r0, [r2, #0]
 800345a:	7019      	strb	r1, [r3, #0]
 800345c:	4608      	mov	r0, r1
 800345e:	bc10      	pop	{r4}
 8003460:	4770      	bx	lr

08003462 <__sfputs_r>:
 8003462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003464:	4606      	mov	r6, r0
 8003466:	460f      	mov	r7, r1
 8003468:	4614      	mov	r4, r2
 800346a:	18d5      	adds	r5, r2, r3
 800346c:	42ac      	cmp	r4, r5
 800346e:	d101      	bne.n	8003474 <__sfputs_r+0x12>
 8003470:	2000      	movs	r0, #0
 8003472:	e007      	b.n	8003484 <__sfputs_r+0x22>
 8003474:	463a      	mov	r2, r7
 8003476:	4630      	mov	r0, r6
 8003478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800347c:	f7ff ffdc 	bl	8003438 <__sfputc_r>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d1f3      	bne.n	800346c <__sfputs_r+0xa>
 8003484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003488 <_vfiprintf_r>:
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	460d      	mov	r5, r1
 800348e:	4614      	mov	r4, r2
 8003490:	4698      	mov	r8, r3
 8003492:	4606      	mov	r6, r0
 8003494:	b09d      	sub	sp, #116	@ 0x74
 8003496:	b118      	cbz	r0, 80034a0 <_vfiprintf_r+0x18>
 8003498:	6a03      	ldr	r3, [r0, #32]
 800349a:	b90b      	cbnz	r3, 80034a0 <_vfiprintf_r+0x18>
 800349c:	f7ff fb56 	bl	8002b4c <__sinit>
 80034a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034a2:	07d9      	lsls	r1, r3, #31
 80034a4:	d405      	bmi.n	80034b2 <_vfiprintf_r+0x2a>
 80034a6:	89ab      	ldrh	r3, [r5, #12]
 80034a8:	059a      	lsls	r2, r3, #22
 80034aa:	d402      	bmi.n	80034b2 <_vfiprintf_r+0x2a>
 80034ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034ae:	f7ff fd64 	bl	8002f7a <__retarget_lock_acquire_recursive>
 80034b2:	89ab      	ldrh	r3, [r5, #12]
 80034b4:	071b      	lsls	r3, r3, #28
 80034b6:	d501      	bpl.n	80034bc <_vfiprintf_r+0x34>
 80034b8:	692b      	ldr	r3, [r5, #16]
 80034ba:	b99b      	cbnz	r3, 80034e4 <_vfiprintf_r+0x5c>
 80034bc:	4629      	mov	r1, r5
 80034be:	4630      	mov	r0, r6
 80034c0:	f7ff fc8c 	bl	8002ddc <__swsetup_r>
 80034c4:	b170      	cbz	r0, 80034e4 <_vfiprintf_r+0x5c>
 80034c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034c8:	07dc      	lsls	r4, r3, #31
 80034ca:	d504      	bpl.n	80034d6 <_vfiprintf_r+0x4e>
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	b01d      	add	sp, #116	@ 0x74
 80034d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d6:	89ab      	ldrh	r3, [r5, #12]
 80034d8:	0598      	lsls	r0, r3, #22
 80034da:	d4f7      	bmi.n	80034cc <_vfiprintf_r+0x44>
 80034dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034de:	f7ff fd4d 	bl	8002f7c <__retarget_lock_release_recursive>
 80034e2:	e7f3      	b.n	80034cc <_vfiprintf_r+0x44>
 80034e4:	2300      	movs	r3, #0
 80034e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80034e8:	2320      	movs	r3, #32
 80034ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034ee:	2330      	movs	r3, #48	@ 0x30
 80034f0:	f04f 0901 	mov.w	r9, #1
 80034f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80034f8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80036a4 <_vfiprintf_r+0x21c>
 80034fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003500:	4623      	mov	r3, r4
 8003502:	469a      	mov	sl, r3
 8003504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003508:	b10a      	cbz	r2, 800350e <_vfiprintf_r+0x86>
 800350a:	2a25      	cmp	r2, #37	@ 0x25
 800350c:	d1f9      	bne.n	8003502 <_vfiprintf_r+0x7a>
 800350e:	ebba 0b04 	subs.w	fp, sl, r4
 8003512:	d00b      	beq.n	800352c <_vfiprintf_r+0xa4>
 8003514:	465b      	mov	r3, fp
 8003516:	4622      	mov	r2, r4
 8003518:	4629      	mov	r1, r5
 800351a:	4630      	mov	r0, r6
 800351c:	f7ff ffa1 	bl	8003462 <__sfputs_r>
 8003520:	3001      	adds	r0, #1
 8003522:	f000 80a7 	beq.w	8003674 <_vfiprintf_r+0x1ec>
 8003526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003528:	445a      	add	r2, fp
 800352a:	9209      	str	r2, [sp, #36]	@ 0x24
 800352c:	f89a 3000 	ldrb.w	r3, [sl]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 809f 	beq.w	8003674 <_vfiprintf_r+0x1ec>
 8003536:	2300      	movs	r3, #0
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003540:	f10a 0a01 	add.w	sl, sl, #1
 8003544:	9304      	str	r3, [sp, #16]
 8003546:	9307      	str	r3, [sp, #28]
 8003548:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800354c:	931a      	str	r3, [sp, #104]	@ 0x68
 800354e:	4654      	mov	r4, sl
 8003550:	2205      	movs	r2, #5
 8003552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003556:	4853      	ldr	r0, [pc, #332]	@ (80036a4 <_vfiprintf_r+0x21c>)
 8003558:	f000 fb96 	bl	8003c88 <memchr>
 800355c:	9a04      	ldr	r2, [sp, #16]
 800355e:	b9d8      	cbnz	r0, 8003598 <_vfiprintf_r+0x110>
 8003560:	06d1      	lsls	r1, r2, #27
 8003562:	bf44      	itt	mi
 8003564:	2320      	movmi	r3, #32
 8003566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800356a:	0713      	lsls	r3, r2, #28
 800356c:	bf44      	itt	mi
 800356e:	232b      	movmi	r3, #43	@ 0x2b
 8003570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003574:	f89a 3000 	ldrb.w	r3, [sl]
 8003578:	2b2a      	cmp	r3, #42	@ 0x2a
 800357a:	d015      	beq.n	80035a8 <_vfiprintf_r+0x120>
 800357c:	4654      	mov	r4, sl
 800357e:	2000      	movs	r0, #0
 8003580:	f04f 0c0a 	mov.w	ip, #10
 8003584:	9a07      	ldr	r2, [sp, #28]
 8003586:	4621      	mov	r1, r4
 8003588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800358c:	3b30      	subs	r3, #48	@ 0x30
 800358e:	2b09      	cmp	r3, #9
 8003590:	d94b      	bls.n	800362a <_vfiprintf_r+0x1a2>
 8003592:	b1b0      	cbz	r0, 80035c2 <_vfiprintf_r+0x13a>
 8003594:	9207      	str	r2, [sp, #28]
 8003596:	e014      	b.n	80035c2 <_vfiprintf_r+0x13a>
 8003598:	eba0 0308 	sub.w	r3, r0, r8
 800359c:	fa09 f303 	lsl.w	r3, r9, r3
 80035a0:	4313      	orrs	r3, r2
 80035a2:	46a2      	mov	sl, r4
 80035a4:	9304      	str	r3, [sp, #16]
 80035a6:	e7d2      	b.n	800354e <_vfiprintf_r+0xc6>
 80035a8:	9b03      	ldr	r3, [sp, #12]
 80035aa:	1d19      	adds	r1, r3, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	9103      	str	r1, [sp, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bfbb      	ittet	lt
 80035b4:	425b      	neglt	r3, r3
 80035b6:	f042 0202 	orrlt.w	r2, r2, #2
 80035ba:	9307      	strge	r3, [sp, #28]
 80035bc:	9307      	strlt	r3, [sp, #28]
 80035be:	bfb8      	it	lt
 80035c0:	9204      	strlt	r2, [sp, #16]
 80035c2:	7823      	ldrb	r3, [r4, #0]
 80035c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80035c6:	d10a      	bne.n	80035de <_vfiprintf_r+0x156>
 80035c8:	7863      	ldrb	r3, [r4, #1]
 80035ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80035cc:	d132      	bne.n	8003634 <_vfiprintf_r+0x1ac>
 80035ce:	9b03      	ldr	r3, [sp, #12]
 80035d0:	3402      	adds	r4, #2
 80035d2:	1d1a      	adds	r2, r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	9203      	str	r2, [sp, #12]
 80035d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035dc:	9305      	str	r3, [sp, #20]
 80035de:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80036a8 <_vfiprintf_r+0x220>
 80035e2:	2203      	movs	r2, #3
 80035e4:	4650      	mov	r0, sl
 80035e6:	7821      	ldrb	r1, [r4, #0]
 80035e8:	f000 fb4e 	bl	8003c88 <memchr>
 80035ec:	b138      	cbz	r0, 80035fe <_vfiprintf_r+0x176>
 80035ee:	2240      	movs	r2, #64	@ 0x40
 80035f0:	9b04      	ldr	r3, [sp, #16]
 80035f2:	eba0 000a 	sub.w	r0, r0, sl
 80035f6:	4082      	lsls	r2, r0
 80035f8:	4313      	orrs	r3, r2
 80035fa:	3401      	adds	r4, #1
 80035fc:	9304      	str	r3, [sp, #16]
 80035fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003602:	2206      	movs	r2, #6
 8003604:	4829      	ldr	r0, [pc, #164]	@ (80036ac <_vfiprintf_r+0x224>)
 8003606:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800360a:	f000 fb3d 	bl	8003c88 <memchr>
 800360e:	2800      	cmp	r0, #0
 8003610:	d03f      	beq.n	8003692 <_vfiprintf_r+0x20a>
 8003612:	4b27      	ldr	r3, [pc, #156]	@ (80036b0 <_vfiprintf_r+0x228>)
 8003614:	bb1b      	cbnz	r3, 800365e <_vfiprintf_r+0x1d6>
 8003616:	9b03      	ldr	r3, [sp, #12]
 8003618:	3307      	adds	r3, #7
 800361a:	f023 0307 	bic.w	r3, r3, #7
 800361e:	3308      	adds	r3, #8
 8003620:	9303      	str	r3, [sp, #12]
 8003622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003624:	443b      	add	r3, r7
 8003626:	9309      	str	r3, [sp, #36]	@ 0x24
 8003628:	e76a      	b.n	8003500 <_vfiprintf_r+0x78>
 800362a:	460c      	mov	r4, r1
 800362c:	2001      	movs	r0, #1
 800362e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003632:	e7a8      	b.n	8003586 <_vfiprintf_r+0xfe>
 8003634:	2300      	movs	r3, #0
 8003636:	f04f 0c0a 	mov.w	ip, #10
 800363a:	4619      	mov	r1, r3
 800363c:	3401      	adds	r4, #1
 800363e:	9305      	str	r3, [sp, #20]
 8003640:	4620      	mov	r0, r4
 8003642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003646:	3a30      	subs	r2, #48	@ 0x30
 8003648:	2a09      	cmp	r2, #9
 800364a:	d903      	bls.n	8003654 <_vfiprintf_r+0x1cc>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0c6      	beq.n	80035de <_vfiprintf_r+0x156>
 8003650:	9105      	str	r1, [sp, #20]
 8003652:	e7c4      	b.n	80035de <_vfiprintf_r+0x156>
 8003654:	4604      	mov	r4, r0
 8003656:	2301      	movs	r3, #1
 8003658:	fb0c 2101 	mla	r1, ip, r1, r2
 800365c:	e7f0      	b.n	8003640 <_vfiprintf_r+0x1b8>
 800365e:	ab03      	add	r3, sp, #12
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	462a      	mov	r2, r5
 8003664:	4630      	mov	r0, r6
 8003666:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <_vfiprintf_r+0x22c>)
 8003668:	a904      	add	r1, sp, #16
 800366a:	f3af 8000 	nop.w
 800366e:	4607      	mov	r7, r0
 8003670:	1c78      	adds	r0, r7, #1
 8003672:	d1d6      	bne.n	8003622 <_vfiprintf_r+0x19a>
 8003674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003676:	07d9      	lsls	r1, r3, #31
 8003678:	d405      	bmi.n	8003686 <_vfiprintf_r+0x1fe>
 800367a:	89ab      	ldrh	r3, [r5, #12]
 800367c:	059a      	lsls	r2, r3, #22
 800367e:	d402      	bmi.n	8003686 <_vfiprintf_r+0x1fe>
 8003680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003682:	f7ff fc7b 	bl	8002f7c <__retarget_lock_release_recursive>
 8003686:	89ab      	ldrh	r3, [r5, #12]
 8003688:	065b      	lsls	r3, r3, #25
 800368a:	f53f af1f 	bmi.w	80034cc <_vfiprintf_r+0x44>
 800368e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003690:	e71e      	b.n	80034d0 <_vfiprintf_r+0x48>
 8003692:	ab03      	add	r3, sp, #12
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	462a      	mov	r2, r5
 8003698:	4630      	mov	r0, r6
 800369a:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <_vfiprintf_r+0x22c>)
 800369c:	a904      	add	r1, sp, #16
 800369e:	f000 f87d 	bl	800379c <_printf_i>
 80036a2:	e7e4      	b.n	800366e <_vfiprintf_r+0x1e6>
 80036a4:	08003e96 	.word	0x08003e96
 80036a8:	08003e9c 	.word	0x08003e9c
 80036ac:	08003ea0 	.word	0x08003ea0
 80036b0:	00000000 	.word	0x00000000
 80036b4:	08003463 	.word	0x08003463

080036b8 <_printf_common>:
 80036b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036bc:	4616      	mov	r6, r2
 80036be:	4698      	mov	r8, r3
 80036c0:	688a      	ldr	r2, [r1, #8]
 80036c2:	690b      	ldr	r3, [r1, #16]
 80036c4:	4607      	mov	r7, r0
 80036c6:	4293      	cmp	r3, r2
 80036c8:	bfb8      	it	lt
 80036ca:	4613      	movlt	r3, r2
 80036cc:	6033      	str	r3, [r6, #0]
 80036ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036d2:	460c      	mov	r4, r1
 80036d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036d8:	b10a      	cbz	r2, 80036de <_printf_common+0x26>
 80036da:	3301      	adds	r3, #1
 80036dc:	6033      	str	r3, [r6, #0]
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	0699      	lsls	r1, r3, #26
 80036e2:	bf42      	ittt	mi
 80036e4:	6833      	ldrmi	r3, [r6, #0]
 80036e6:	3302      	addmi	r3, #2
 80036e8:	6033      	strmi	r3, [r6, #0]
 80036ea:	6825      	ldr	r5, [r4, #0]
 80036ec:	f015 0506 	ands.w	r5, r5, #6
 80036f0:	d106      	bne.n	8003700 <_printf_common+0x48>
 80036f2:	f104 0a19 	add.w	sl, r4, #25
 80036f6:	68e3      	ldr	r3, [r4, #12]
 80036f8:	6832      	ldr	r2, [r6, #0]
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	42ab      	cmp	r3, r5
 80036fe:	dc2b      	bgt.n	8003758 <_printf_common+0xa0>
 8003700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	3b00      	subs	r3, #0
 8003708:	bf18      	it	ne
 800370a:	2301      	movne	r3, #1
 800370c:	0692      	lsls	r2, r2, #26
 800370e:	d430      	bmi.n	8003772 <_printf_common+0xba>
 8003710:	4641      	mov	r1, r8
 8003712:	4638      	mov	r0, r7
 8003714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003718:	47c8      	blx	r9
 800371a:	3001      	adds	r0, #1
 800371c:	d023      	beq.n	8003766 <_printf_common+0xae>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	6922      	ldr	r2, [r4, #16]
 8003722:	f003 0306 	and.w	r3, r3, #6
 8003726:	2b04      	cmp	r3, #4
 8003728:	bf14      	ite	ne
 800372a:	2500      	movne	r5, #0
 800372c:	6833      	ldreq	r3, [r6, #0]
 800372e:	f04f 0600 	mov.w	r6, #0
 8003732:	bf08      	it	eq
 8003734:	68e5      	ldreq	r5, [r4, #12]
 8003736:	f104 041a 	add.w	r4, r4, #26
 800373a:	bf08      	it	eq
 800373c:	1aed      	subeq	r5, r5, r3
 800373e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003742:	bf08      	it	eq
 8003744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003748:	4293      	cmp	r3, r2
 800374a:	bfc4      	itt	gt
 800374c:	1a9b      	subgt	r3, r3, r2
 800374e:	18ed      	addgt	r5, r5, r3
 8003750:	42b5      	cmp	r5, r6
 8003752:	d11a      	bne.n	800378a <_printf_common+0xd2>
 8003754:	2000      	movs	r0, #0
 8003756:	e008      	b.n	800376a <_printf_common+0xb2>
 8003758:	2301      	movs	r3, #1
 800375a:	4652      	mov	r2, sl
 800375c:	4641      	mov	r1, r8
 800375e:	4638      	mov	r0, r7
 8003760:	47c8      	blx	r9
 8003762:	3001      	adds	r0, #1
 8003764:	d103      	bne.n	800376e <_printf_common+0xb6>
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376e:	3501      	adds	r5, #1
 8003770:	e7c1      	b.n	80036f6 <_printf_common+0x3e>
 8003772:	2030      	movs	r0, #48	@ 0x30
 8003774:	18e1      	adds	r1, r4, r3
 8003776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003780:	4422      	add	r2, r4
 8003782:	3302      	adds	r3, #2
 8003784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003788:	e7c2      	b.n	8003710 <_printf_common+0x58>
 800378a:	2301      	movs	r3, #1
 800378c:	4622      	mov	r2, r4
 800378e:	4641      	mov	r1, r8
 8003790:	4638      	mov	r0, r7
 8003792:	47c8      	blx	r9
 8003794:	3001      	adds	r0, #1
 8003796:	d0e6      	beq.n	8003766 <_printf_common+0xae>
 8003798:	3601      	adds	r6, #1
 800379a:	e7d9      	b.n	8003750 <_printf_common+0x98>

0800379c <_printf_i>:
 800379c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037a0:	7e0f      	ldrb	r7, [r1, #24]
 80037a2:	4691      	mov	r9, r2
 80037a4:	2f78      	cmp	r7, #120	@ 0x78
 80037a6:	4680      	mov	r8, r0
 80037a8:	460c      	mov	r4, r1
 80037aa:	469a      	mov	sl, r3
 80037ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037b2:	d807      	bhi.n	80037c4 <_printf_i+0x28>
 80037b4:	2f62      	cmp	r7, #98	@ 0x62
 80037b6:	d80a      	bhi.n	80037ce <_printf_i+0x32>
 80037b8:	2f00      	cmp	r7, #0
 80037ba:	f000 80d3 	beq.w	8003964 <_printf_i+0x1c8>
 80037be:	2f58      	cmp	r7, #88	@ 0x58
 80037c0:	f000 80ba 	beq.w	8003938 <_printf_i+0x19c>
 80037c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037cc:	e03a      	b.n	8003844 <_printf_i+0xa8>
 80037ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037d2:	2b15      	cmp	r3, #21
 80037d4:	d8f6      	bhi.n	80037c4 <_printf_i+0x28>
 80037d6:	a101      	add	r1, pc, #4	@ (adr r1, 80037dc <_printf_i+0x40>)
 80037d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037dc:	08003835 	.word	0x08003835
 80037e0:	08003849 	.word	0x08003849
 80037e4:	080037c5 	.word	0x080037c5
 80037e8:	080037c5 	.word	0x080037c5
 80037ec:	080037c5 	.word	0x080037c5
 80037f0:	080037c5 	.word	0x080037c5
 80037f4:	08003849 	.word	0x08003849
 80037f8:	080037c5 	.word	0x080037c5
 80037fc:	080037c5 	.word	0x080037c5
 8003800:	080037c5 	.word	0x080037c5
 8003804:	080037c5 	.word	0x080037c5
 8003808:	0800394b 	.word	0x0800394b
 800380c:	08003873 	.word	0x08003873
 8003810:	08003905 	.word	0x08003905
 8003814:	080037c5 	.word	0x080037c5
 8003818:	080037c5 	.word	0x080037c5
 800381c:	0800396d 	.word	0x0800396d
 8003820:	080037c5 	.word	0x080037c5
 8003824:	08003873 	.word	0x08003873
 8003828:	080037c5 	.word	0x080037c5
 800382c:	080037c5 	.word	0x080037c5
 8003830:	0800390d 	.word	0x0800390d
 8003834:	6833      	ldr	r3, [r6, #0]
 8003836:	1d1a      	adds	r2, r3, #4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6032      	str	r2, [r6, #0]
 800383c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003844:	2301      	movs	r3, #1
 8003846:	e09e      	b.n	8003986 <_printf_i+0x1ea>
 8003848:	6833      	ldr	r3, [r6, #0]
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	1d19      	adds	r1, r3, #4
 800384e:	6031      	str	r1, [r6, #0]
 8003850:	0606      	lsls	r6, r0, #24
 8003852:	d501      	bpl.n	8003858 <_printf_i+0xbc>
 8003854:	681d      	ldr	r5, [r3, #0]
 8003856:	e003      	b.n	8003860 <_printf_i+0xc4>
 8003858:	0645      	lsls	r5, r0, #25
 800385a:	d5fb      	bpl.n	8003854 <_printf_i+0xb8>
 800385c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003860:	2d00      	cmp	r5, #0
 8003862:	da03      	bge.n	800386c <_printf_i+0xd0>
 8003864:	232d      	movs	r3, #45	@ 0x2d
 8003866:	426d      	negs	r5, r5
 8003868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800386c:	230a      	movs	r3, #10
 800386e:	4859      	ldr	r0, [pc, #356]	@ (80039d4 <_printf_i+0x238>)
 8003870:	e011      	b.n	8003896 <_printf_i+0xfa>
 8003872:	6821      	ldr	r1, [r4, #0]
 8003874:	6833      	ldr	r3, [r6, #0]
 8003876:	0608      	lsls	r0, r1, #24
 8003878:	f853 5b04 	ldr.w	r5, [r3], #4
 800387c:	d402      	bmi.n	8003884 <_printf_i+0xe8>
 800387e:	0649      	lsls	r1, r1, #25
 8003880:	bf48      	it	mi
 8003882:	b2ad      	uxthmi	r5, r5
 8003884:	2f6f      	cmp	r7, #111	@ 0x6f
 8003886:	6033      	str	r3, [r6, #0]
 8003888:	bf14      	ite	ne
 800388a:	230a      	movne	r3, #10
 800388c:	2308      	moveq	r3, #8
 800388e:	4851      	ldr	r0, [pc, #324]	@ (80039d4 <_printf_i+0x238>)
 8003890:	2100      	movs	r1, #0
 8003892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003896:	6866      	ldr	r6, [r4, #4]
 8003898:	2e00      	cmp	r6, #0
 800389a:	bfa8      	it	ge
 800389c:	6821      	ldrge	r1, [r4, #0]
 800389e:	60a6      	str	r6, [r4, #8]
 80038a0:	bfa4      	itt	ge
 80038a2:	f021 0104 	bicge.w	r1, r1, #4
 80038a6:	6021      	strge	r1, [r4, #0]
 80038a8:	b90d      	cbnz	r5, 80038ae <_printf_i+0x112>
 80038aa:	2e00      	cmp	r6, #0
 80038ac:	d04b      	beq.n	8003946 <_printf_i+0x1aa>
 80038ae:	4616      	mov	r6, r2
 80038b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80038b4:	fb03 5711 	mls	r7, r3, r1, r5
 80038b8:	5dc7      	ldrb	r7, [r0, r7]
 80038ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038be:	462f      	mov	r7, r5
 80038c0:	42bb      	cmp	r3, r7
 80038c2:	460d      	mov	r5, r1
 80038c4:	d9f4      	bls.n	80038b0 <_printf_i+0x114>
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d10b      	bne.n	80038e2 <_printf_i+0x146>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	07df      	lsls	r7, r3, #31
 80038ce:	d508      	bpl.n	80038e2 <_printf_i+0x146>
 80038d0:	6923      	ldr	r3, [r4, #16]
 80038d2:	6861      	ldr	r1, [r4, #4]
 80038d4:	4299      	cmp	r1, r3
 80038d6:	bfde      	ittt	le
 80038d8:	2330      	movle	r3, #48	@ 0x30
 80038da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038e2:	1b92      	subs	r2, r2, r6
 80038e4:	6122      	str	r2, [r4, #16]
 80038e6:	464b      	mov	r3, r9
 80038e8:	4621      	mov	r1, r4
 80038ea:	4640      	mov	r0, r8
 80038ec:	f8cd a000 	str.w	sl, [sp]
 80038f0:	aa03      	add	r2, sp, #12
 80038f2:	f7ff fee1 	bl	80036b8 <_printf_common>
 80038f6:	3001      	adds	r0, #1
 80038f8:	d14a      	bne.n	8003990 <_printf_i+0x1f4>
 80038fa:	f04f 30ff 	mov.w	r0, #4294967295
 80038fe:	b004      	add	sp, #16
 8003900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	f043 0320 	orr.w	r3, r3, #32
 800390a:	6023      	str	r3, [r4, #0]
 800390c:	2778      	movs	r7, #120	@ 0x78
 800390e:	4832      	ldr	r0, [pc, #200]	@ (80039d8 <_printf_i+0x23c>)
 8003910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	6831      	ldr	r1, [r6, #0]
 8003918:	061f      	lsls	r7, r3, #24
 800391a:	f851 5b04 	ldr.w	r5, [r1], #4
 800391e:	d402      	bmi.n	8003926 <_printf_i+0x18a>
 8003920:	065f      	lsls	r7, r3, #25
 8003922:	bf48      	it	mi
 8003924:	b2ad      	uxthmi	r5, r5
 8003926:	6031      	str	r1, [r6, #0]
 8003928:	07d9      	lsls	r1, r3, #31
 800392a:	bf44      	itt	mi
 800392c:	f043 0320 	orrmi.w	r3, r3, #32
 8003930:	6023      	strmi	r3, [r4, #0]
 8003932:	b11d      	cbz	r5, 800393c <_printf_i+0x1a0>
 8003934:	2310      	movs	r3, #16
 8003936:	e7ab      	b.n	8003890 <_printf_i+0xf4>
 8003938:	4826      	ldr	r0, [pc, #152]	@ (80039d4 <_printf_i+0x238>)
 800393a:	e7e9      	b.n	8003910 <_printf_i+0x174>
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	f023 0320 	bic.w	r3, r3, #32
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	e7f6      	b.n	8003934 <_printf_i+0x198>
 8003946:	4616      	mov	r6, r2
 8003948:	e7bd      	b.n	80038c6 <_printf_i+0x12a>
 800394a:	6833      	ldr	r3, [r6, #0]
 800394c:	6825      	ldr	r5, [r4, #0]
 800394e:	1d18      	adds	r0, r3, #4
 8003950:	6961      	ldr	r1, [r4, #20]
 8003952:	6030      	str	r0, [r6, #0]
 8003954:	062e      	lsls	r6, r5, #24
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	d501      	bpl.n	800395e <_printf_i+0x1c2>
 800395a:	6019      	str	r1, [r3, #0]
 800395c:	e002      	b.n	8003964 <_printf_i+0x1c8>
 800395e:	0668      	lsls	r0, r5, #25
 8003960:	d5fb      	bpl.n	800395a <_printf_i+0x1be>
 8003962:	8019      	strh	r1, [r3, #0]
 8003964:	2300      	movs	r3, #0
 8003966:	4616      	mov	r6, r2
 8003968:	6123      	str	r3, [r4, #16]
 800396a:	e7bc      	b.n	80038e6 <_printf_i+0x14a>
 800396c:	6833      	ldr	r3, [r6, #0]
 800396e:	2100      	movs	r1, #0
 8003970:	1d1a      	adds	r2, r3, #4
 8003972:	6032      	str	r2, [r6, #0]
 8003974:	681e      	ldr	r6, [r3, #0]
 8003976:	6862      	ldr	r2, [r4, #4]
 8003978:	4630      	mov	r0, r6
 800397a:	f000 f985 	bl	8003c88 <memchr>
 800397e:	b108      	cbz	r0, 8003984 <_printf_i+0x1e8>
 8003980:	1b80      	subs	r0, r0, r6
 8003982:	6060      	str	r0, [r4, #4]
 8003984:	6863      	ldr	r3, [r4, #4]
 8003986:	6123      	str	r3, [r4, #16]
 8003988:	2300      	movs	r3, #0
 800398a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800398e:	e7aa      	b.n	80038e6 <_printf_i+0x14a>
 8003990:	4632      	mov	r2, r6
 8003992:	4649      	mov	r1, r9
 8003994:	4640      	mov	r0, r8
 8003996:	6923      	ldr	r3, [r4, #16]
 8003998:	47d0      	blx	sl
 800399a:	3001      	adds	r0, #1
 800399c:	d0ad      	beq.n	80038fa <_printf_i+0x15e>
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	079b      	lsls	r3, r3, #30
 80039a2:	d413      	bmi.n	80039cc <_printf_i+0x230>
 80039a4:	68e0      	ldr	r0, [r4, #12]
 80039a6:	9b03      	ldr	r3, [sp, #12]
 80039a8:	4298      	cmp	r0, r3
 80039aa:	bfb8      	it	lt
 80039ac:	4618      	movlt	r0, r3
 80039ae:	e7a6      	b.n	80038fe <_printf_i+0x162>
 80039b0:	2301      	movs	r3, #1
 80039b2:	4632      	mov	r2, r6
 80039b4:	4649      	mov	r1, r9
 80039b6:	4640      	mov	r0, r8
 80039b8:	47d0      	blx	sl
 80039ba:	3001      	adds	r0, #1
 80039bc:	d09d      	beq.n	80038fa <_printf_i+0x15e>
 80039be:	3501      	adds	r5, #1
 80039c0:	68e3      	ldr	r3, [r4, #12]
 80039c2:	9903      	ldr	r1, [sp, #12]
 80039c4:	1a5b      	subs	r3, r3, r1
 80039c6:	42ab      	cmp	r3, r5
 80039c8:	dcf2      	bgt.n	80039b0 <_printf_i+0x214>
 80039ca:	e7eb      	b.n	80039a4 <_printf_i+0x208>
 80039cc:	2500      	movs	r5, #0
 80039ce:	f104 0619 	add.w	r6, r4, #25
 80039d2:	e7f5      	b.n	80039c0 <_printf_i+0x224>
 80039d4:	08003ea7 	.word	0x08003ea7
 80039d8:	08003eb8 	.word	0x08003eb8

080039dc <__sflush_r>:
 80039dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	0716      	lsls	r6, r2, #28
 80039e4:	4605      	mov	r5, r0
 80039e6:	460c      	mov	r4, r1
 80039e8:	d454      	bmi.n	8003a94 <__sflush_r+0xb8>
 80039ea:	684b      	ldr	r3, [r1, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	dc02      	bgt.n	80039f6 <__sflush_r+0x1a>
 80039f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	dd48      	ble.n	8003a88 <__sflush_r+0xac>
 80039f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039f8:	2e00      	cmp	r6, #0
 80039fa:	d045      	beq.n	8003a88 <__sflush_r+0xac>
 80039fc:	2300      	movs	r3, #0
 80039fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a02:	682f      	ldr	r7, [r5, #0]
 8003a04:	6a21      	ldr	r1, [r4, #32]
 8003a06:	602b      	str	r3, [r5, #0]
 8003a08:	d030      	beq.n	8003a6c <__sflush_r+0x90>
 8003a0a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	0759      	lsls	r1, r3, #29
 8003a10:	d505      	bpl.n	8003a1e <__sflush_r+0x42>
 8003a12:	6863      	ldr	r3, [r4, #4]
 8003a14:	1ad2      	subs	r2, r2, r3
 8003a16:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a18:	b10b      	cbz	r3, 8003a1e <__sflush_r+0x42>
 8003a1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a1c:	1ad2      	subs	r2, r2, r3
 8003a1e:	2300      	movs	r3, #0
 8003a20:	4628      	mov	r0, r5
 8003a22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a24:	6a21      	ldr	r1, [r4, #32]
 8003a26:	47b0      	blx	r6
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	89a3      	ldrh	r3, [r4, #12]
 8003a2c:	d106      	bne.n	8003a3c <__sflush_r+0x60>
 8003a2e:	6829      	ldr	r1, [r5, #0]
 8003a30:	291d      	cmp	r1, #29
 8003a32:	d82b      	bhi.n	8003a8c <__sflush_r+0xb0>
 8003a34:	4a28      	ldr	r2, [pc, #160]	@ (8003ad8 <__sflush_r+0xfc>)
 8003a36:	410a      	asrs	r2, r1
 8003a38:	07d6      	lsls	r6, r2, #31
 8003a3a:	d427      	bmi.n	8003a8c <__sflush_r+0xb0>
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	6062      	str	r2, [r4, #4]
 8003a40:	6922      	ldr	r2, [r4, #16]
 8003a42:	04d9      	lsls	r1, r3, #19
 8003a44:	6022      	str	r2, [r4, #0]
 8003a46:	d504      	bpl.n	8003a52 <__sflush_r+0x76>
 8003a48:	1c42      	adds	r2, r0, #1
 8003a4a:	d101      	bne.n	8003a50 <__sflush_r+0x74>
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	b903      	cbnz	r3, 8003a52 <__sflush_r+0x76>
 8003a50:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a54:	602f      	str	r7, [r5, #0]
 8003a56:	b1b9      	cbz	r1, 8003a88 <__sflush_r+0xac>
 8003a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a5c:	4299      	cmp	r1, r3
 8003a5e:	d002      	beq.n	8003a66 <__sflush_r+0x8a>
 8003a60:	4628      	mov	r0, r5
 8003a62:	f7ff fa9b 	bl	8002f9c <_free_r>
 8003a66:	2300      	movs	r3, #0
 8003a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a6a:	e00d      	b.n	8003a88 <__sflush_r+0xac>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	4628      	mov	r0, r5
 8003a70:	47b0      	blx	r6
 8003a72:	4602      	mov	r2, r0
 8003a74:	1c50      	adds	r0, r2, #1
 8003a76:	d1c9      	bne.n	8003a0c <__sflush_r+0x30>
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0c6      	beq.n	8003a0c <__sflush_r+0x30>
 8003a7e:	2b1d      	cmp	r3, #29
 8003a80:	d001      	beq.n	8003a86 <__sflush_r+0xaa>
 8003a82:	2b16      	cmp	r3, #22
 8003a84:	d11d      	bne.n	8003ac2 <__sflush_r+0xe6>
 8003a86:	602f      	str	r7, [r5, #0]
 8003a88:	2000      	movs	r0, #0
 8003a8a:	e021      	b.n	8003ad0 <__sflush_r+0xf4>
 8003a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a90:	b21b      	sxth	r3, r3
 8003a92:	e01a      	b.n	8003aca <__sflush_r+0xee>
 8003a94:	690f      	ldr	r7, [r1, #16]
 8003a96:	2f00      	cmp	r7, #0
 8003a98:	d0f6      	beq.n	8003a88 <__sflush_r+0xac>
 8003a9a:	0793      	lsls	r3, r2, #30
 8003a9c:	bf18      	it	ne
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	680e      	ldr	r6, [r1, #0]
 8003aa2:	bf08      	it	eq
 8003aa4:	694b      	ldreq	r3, [r1, #20]
 8003aa6:	1bf6      	subs	r6, r6, r7
 8003aa8:	600f      	str	r7, [r1, #0]
 8003aaa:	608b      	str	r3, [r1, #8]
 8003aac:	2e00      	cmp	r6, #0
 8003aae:	ddeb      	ble.n	8003a88 <__sflush_r+0xac>
 8003ab0:	4633      	mov	r3, r6
 8003ab2:	463a      	mov	r2, r7
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	6a21      	ldr	r1, [r4, #32]
 8003ab8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003abc:	47e0      	blx	ip
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	dc07      	bgt.n	8003ad2 <__sflush_r+0xf6>
 8003ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ad2:	4407      	add	r7, r0
 8003ad4:	1a36      	subs	r6, r6, r0
 8003ad6:	e7e9      	b.n	8003aac <__sflush_r+0xd0>
 8003ad8:	dfbffffe 	.word	0xdfbffffe

08003adc <_fflush_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	690b      	ldr	r3, [r1, #16]
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	b913      	cbnz	r3, 8003aec <_fflush_r+0x10>
 8003ae6:	2500      	movs	r5, #0
 8003ae8:	4628      	mov	r0, r5
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	b118      	cbz	r0, 8003af6 <_fflush_r+0x1a>
 8003aee:	6a03      	ldr	r3, [r0, #32]
 8003af0:	b90b      	cbnz	r3, 8003af6 <_fflush_r+0x1a>
 8003af2:	f7ff f82b 	bl	8002b4c <__sinit>
 8003af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f3      	beq.n	8003ae6 <_fflush_r+0xa>
 8003afe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b00:	07d0      	lsls	r0, r2, #31
 8003b02:	d404      	bmi.n	8003b0e <_fflush_r+0x32>
 8003b04:	0599      	lsls	r1, r3, #22
 8003b06:	d402      	bmi.n	8003b0e <_fflush_r+0x32>
 8003b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b0a:	f7ff fa36 	bl	8002f7a <__retarget_lock_acquire_recursive>
 8003b0e:	4628      	mov	r0, r5
 8003b10:	4621      	mov	r1, r4
 8003b12:	f7ff ff63 	bl	80039dc <__sflush_r>
 8003b16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b18:	4605      	mov	r5, r0
 8003b1a:	07da      	lsls	r2, r3, #31
 8003b1c:	d4e4      	bmi.n	8003ae8 <_fflush_r+0xc>
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	059b      	lsls	r3, r3, #22
 8003b22:	d4e1      	bmi.n	8003ae8 <_fflush_r+0xc>
 8003b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b26:	f7ff fa29 	bl	8002f7c <__retarget_lock_release_recursive>
 8003b2a:	e7dd      	b.n	8003ae8 <_fflush_r+0xc>

08003b2c <__swhatbuf_r>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	460c      	mov	r4, r1
 8003b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b34:	4615      	mov	r5, r2
 8003b36:	2900      	cmp	r1, #0
 8003b38:	461e      	mov	r6, r3
 8003b3a:	b096      	sub	sp, #88	@ 0x58
 8003b3c:	da0c      	bge.n	8003b58 <__swhatbuf_r+0x2c>
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	2100      	movs	r1, #0
 8003b42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b46:	bf14      	ite	ne
 8003b48:	2340      	movne	r3, #64	@ 0x40
 8003b4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b4e:	2000      	movs	r0, #0
 8003b50:	6031      	str	r1, [r6, #0]
 8003b52:	602b      	str	r3, [r5, #0]
 8003b54:	b016      	add	sp, #88	@ 0x58
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	466a      	mov	r2, sp
 8003b5a:	f000 f863 	bl	8003c24 <_fstat_r>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	dbed      	blt.n	8003b3e <__swhatbuf_r+0x12>
 8003b62:	9901      	ldr	r1, [sp, #4]
 8003b64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b6c:	4259      	negs	r1, r3
 8003b6e:	4159      	adcs	r1, r3
 8003b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b74:	e7eb      	b.n	8003b4e <__swhatbuf_r+0x22>

08003b76 <__smakebuf_r>:
 8003b76:	898b      	ldrh	r3, [r1, #12]
 8003b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b7a:	079d      	lsls	r5, r3, #30
 8003b7c:	4606      	mov	r6, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	d507      	bpl.n	8003b92 <__smakebuf_r+0x1c>
 8003b82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b86:	6023      	str	r3, [r4, #0]
 8003b88:	6123      	str	r3, [r4, #16]
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	6163      	str	r3, [r4, #20]
 8003b8e:	b003      	add	sp, #12
 8003b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b92:	466a      	mov	r2, sp
 8003b94:	ab01      	add	r3, sp, #4
 8003b96:	f7ff ffc9 	bl	8003b2c <__swhatbuf_r>
 8003b9a:	9f00      	ldr	r7, [sp, #0]
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	4639      	mov	r1, r7
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f7ff fa65 	bl	8003070 <_malloc_r>
 8003ba6:	b948      	cbnz	r0, 8003bbc <__smakebuf_r+0x46>
 8003ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bac:	059a      	lsls	r2, r3, #22
 8003bae:	d4ee      	bmi.n	8003b8e <__smakebuf_r+0x18>
 8003bb0:	f023 0303 	bic.w	r3, r3, #3
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	e7e2      	b.n	8003b82 <__smakebuf_r+0xc>
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bc6:	81a3      	strh	r3, [r4, #12]
 8003bc8:	9b01      	ldr	r3, [sp, #4]
 8003bca:	6020      	str	r0, [r4, #0]
 8003bcc:	b15b      	cbz	r3, 8003be6 <__smakebuf_r+0x70>
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bd4:	f000 f838 	bl	8003c48 <_isatty_r>
 8003bd8:	b128      	cbz	r0, 8003be6 <__smakebuf_r+0x70>
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	f023 0303 	bic.w	r3, r3, #3
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	81a3      	strh	r3, [r4, #12]
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	431d      	orrs	r5, r3
 8003bea:	81a5      	strh	r5, [r4, #12]
 8003bec:	e7cf      	b.n	8003b8e <__smakebuf_r+0x18>

08003bee <memmove>:
 8003bee:	4288      	cmp	r0, r1
 8003bf0:	b510      	push	{r4, lr}
 8003bf2:	eb01 0402 	add.w	r4, r1, r2
 8003bf6:	d902      	bls.n	8003bfe <memmove+0x10>
 8003bf8:	4284      	cmp	r4, r0
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	d807      	bhi.n	8003c0e <memmove+0x20>
 8003bfe:	1e43      	subs	r3, r0, #1
 8003c00:	42a1      	cmp	r1, r4
 8003c02:	d008      	beq.n	8003c16 <memmove+0x28>
 8003c04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c0c:	e7f8      	b.n	8003c00 <memmove+0x12>
 8003c0e:	4601      	mov	r1, r0
 8003c10:	4402      	add	r2, r0
 8003c12:	428a      	cmp	r2, r1
 8003c14:	d100      	bne.n	8003c18 <memmove+0x2a>
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c20:	e7f7      	b.n	8003c12 <memmove+0x24>
	...

08003c24 <_fstat_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	2300      	movs	r3, #0
 8003c28:	4d06      	ldr	r5, [pc, #24]	@ (8003c44 <_fstat_r+0x20>)
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	4611      	mov	r1, r2
 8003c30:	602b      	str	r3, [r5, #0]
 8003c32:	f7fd fb43 	bl	80012bc <_fstat>
 8003c36:	1c43      	adds	r3, r0, #1
 8003c38:	d102      	bne.n	8003c40 <_fstat_r+0x1c>
 8003c3a:	682b      	ldr	r3, [r5, #0]
 8003c3c:	b103      	cbz	r3, 8003c40 <_fstat_r+0x1c>
 8003c3e:	6023      	str	r3, [r4, #0]
 8003c40:	bd38      	pop	{r3, r4, r5, pc}
 8003c42:	bf00      	nop
 8003c44:	20000568 	.word	0x20000568

08003c48 <_isatty_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	4d05      	ldr	r5, [pc, #20]	@ (8003c64 <_isatty_r+0x1c>)
 8003c4e:	4604      	mov	r4, r0
 8003c50:	4608      	mov	r0, r1
 8003c52:	602b      	str	r3, [r5, #0]
 8003c54:	f7fd fb41 	bl	80012da <_isatty>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_isatty_r+0x1a>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_isatty_r+0x1a>
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	20000568 	.word	0x20000568

08003c68 <_sbrk_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	4d05      	ldr	r5, [pc, #20]	@ (8003c84 <_sbrk_r+0x1c>)
 8003c6e:	4604      	mov	r4, r0
 8003c70:	4608      	mov	r0, r1
 8003c72:	602b      	str	r3, [r5, #0]
 8003c74:	f7fd fb48 	bl	8001308 <_sbrk>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	d102      	bne.n	8003c82 <_sbrk_r+0x1a>
 8003c7c:	682b      	ldr	r3, [r5, #0]
 8003c7e:	b103      	cbz	r3, 8003c82 <_sbrk_r+0x1a>
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
 8003c84:	20000568 	.word	0x20000568

08003c88 <memchr>:
 8003c88:	4603      	mov	r3, r0
 8003c8a:	b510      	push	{r4, lr}
 8003c8c:	b2c9      	uxtb	r1, r1
 8003c8e:	4402      	add	r2, r0
 8003c90:	4293      	cmp	r3, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	d101      	bne.n	8003c9a <memchr+0x12>
 8003c96:	2000      	movs	r0, #0
 8003c98:	e003      	b.n	8003ca2 <memchr+0x1a>
 8003c9a:	7804      	ldrb	r4, [r0, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	428c      	cmp	r4, r1
 8003ca0:	d1f6      	bne.n	8003c90 <memchr+0x8>
 8003ca2:	bd10      	pop	{r4, pc}

08003ca4 <_realloc_r>:
 8003ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca8:	4680      	mov	r8, r0
 8003caa:	4615      	mov	r5, r2
 8003cac:	460c      	mov	r4, r1
 8003cae:	b921      	cbnz	r1, 8003cba <_realloc_r+0x16>
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb6:	f7ff b9db 	b.w	8003070 <_malloc_r>
 8003cba:	b92a      	cbnz	r2, 8003cc8 <_realloc_r+0x24>
 8003cbc:	f7ff f96e 	bl	8002f9c <_free_r>
 8003cc0:	2400      	movs	r4, #0
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cc8:	f000 f81a 	bl	8003d00 <_malloc_usable_size_r>
 8003ccc:	4285      	cmp	r5, r0
 8003cce:	4606      	mov	r6, r0
 8003cd0:	d802      	bhi.n	8003cd8 <_realloc_r+0x34>
 8003cd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003cd6:	d8f4      	bhi.n	8003cc2 <_realloc_r+0x1e>
 8003cd8:	4629      	mov	r1, r5
 8003cda:	4640      	mov	r0, r8
 8003cdc:	f7ff f9c8 	bl	8003070 <_malloc_r>
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d0ec      	beq.n	8003cc0 <_realloc_r+0x1c>
 8003ce6:	42b5      	cmp	r5, r6
 8003ce8:	462a      	mov	r2, r5
 8003cea:	4621      	mov	r1, r4
 8003cec:	bf28      	it	cs
 8003cee:	4632      	movcs	r2, r6
 8003cf0:	f7ff f945 	bl	8002f7e <memcpy>
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	4640      	mov	r0, r8
 8003cf8:	f7ff f950 	bl	8002f9c <_free_r>
 8003cfc:	463c      	mov	r4, r7
 8003cfe:	e7e0      	b.n	8003cc2 <_realloc_r+0x1e>

08003d00 <_malloc_usable_size_r>:
 8003d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d04:	1f18      	subs	r0, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bfbc      	itt	lt
 8003d0a:	580b      	ldrlt	r3, [r1, r0]
 8003d0c:	18c0      	addlt	r0, r0, r3
 8003d0e:	4770      	bx	lr

08003d10 <_init>:
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	bf00      	nop
 8003d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d16:	bc08      	pop	{r3}
 8003d18:	469e      	mov	lr, r3
 8003d1a:	4770      	bx	lr

08003d1c <_fini>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr
