/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Sensor 1
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "spi.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "SX1278.h"
#include "bmp280.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
// ===== Sensors =====
float temp;
float humi;

BMP280_HandleTypedef bmp280;

float pressure, temperature, humidity;

uint16_t size;
uint8_t Data[256];
// ===== LoRa =====
SX1278_hw_t SX1278_hw;
SX1278_t SX1278;
int master;
int ret;

char LoRaTxBuffer[512];
char LoRaRxBuffer[512];

char buffer[512];

int tx_message;
int message_length;
int tx_len;

int control_val=0;

/* ====== Timeouts =======
 	 	 1000 == 1 sec

	Sensor_1 - Main station
	Sensor_2 - First Sensor
	Sensor_3 - Second Sensor

*/
uint32_t current_time;
uint32_t timestamp;
uint32_t inside_counter;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*  ----------------------------------
 * 		Sensors Functions
 *  ----------------------------------
 */

#define AHT_ADDR	0x38<<1
#define HI2C      hi2c1

void AHT20_Read(float* Temp, float* Humid)
{
	uint8_t dum[6];
	HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);

	if(!(dum[0]&(1<<3)))
	{
		dum[0] = 0xBE, dum[1] = 0x08, dum[2] = 0x00;
		HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
		HAL_Delay(10);
	}

	dum[0] = 0xAC, dum[1] = 0x33, dum[2] = 0x00;
	HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
	HAL_Delay(80);

	do {
		HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
		HAL_Delay(1);
	} while(dum[0]&(1<<7));

	HAL_I2C_Master_Receive(&HI2C, AHT_ADDR, dum, 6, 100);
	uint32_t h20 = (dum[1])<<12 | (dum[2])<<4 | (dum[3]>>4);
	uint32_t t20 = (dum[3]&0x0F)<<16 | (dum[4])<<8 | dum[5];
	*Temp = (t20 / 1048576.0)*200.0 - 50.0;
	*Humid = h20 / 10485.76;
}

/*  ----------------------------------
 * 		LoRa Functions
 *  ----------------------------------
 */
void clearTx(){
	memset(LoRaTxBuffer,0,sizeof(LoRaTxBuffer));
}

void clearRx(){
	memset(LoRaRxBuffer,0,sizeof(LoRaTxBuffer));
}
// Puts LoRa module in receive mode
// -- LED should be off --
void LoRaSetRxMode(){
	clearRx();
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	master = 1;

}

// Puts LoRa module in transmit mode
// -- LED should be on --
void LoRaSetTxMode(){
	clearTx();
	ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	master = 0;

}


//while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin));
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  // ===== BMP sensor setup =====
//  bmp280_init_default_params(&bmp280.params);
//  bmp280.addr = BMP280_I2C_ADDRESS_0;
//  bmp280.i2c = &hi2c1;
//
//  while (!bmp280_init(&bmp280, &bmp280.params)) {
//	  size = sprintf((char *)Data, "BMP280 initialization failed\n");
//	  HAL_Delay(2000);
//  }
//  bool bme280p = bmp280.id == BME280_CHIP_ID;
//  size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");

// ===== LoRa setup =====
  master = 0;

  control_val++;
  	//initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
  SX1278_hw.dio0.pin = DIO0_Pin;
  SX1278_hw.nss.port = NSS_GPIO_Port;
  SX1278_hw.nss.pin = NSS_Pin;
  SX1278_hw.reset.port = RST_GPIO_Port;
  SX1278_hw.reset.pin = RST_Pin;
  SX1278_hw.spi = &hspi1;

  SX1278.hw = &SX1278_hw;

  control_val++;
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
		  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  control_val++;


  LoRaSetRxMode();
  control_val++;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /*
	   * Test 2
	   *
	   */
	  // === Sensors Test ===


	  AHT20_Read(&temp, &humi);
	  control_val = 0;
	  ret = SX1278_LoRaRxPacket(&SX1278);
	  if (ret > 0) {
		  // Setup Timers


		  // Read buffer
		  SX1278_read(&SX1278, (uint8_t*) LoRaRxBuffer, ret);
		  if(strstr((char *)LoRaRxBuffer,"S2")){
			  return 0;  								// If bad sensor_id pass
		  }else if(strstr((char *)LoRaRxBuffer,"S1")){	// 	If good sensor_id
			  LoRaSetTxMode();							// 	Go into TX mode
			  HAL_Delay(2000);
		  }


		  // Read sensors


		  current_time = HAL_GetTick();
		  inside_counter = current_time + 5000;

		  while(HAL_GetTick()<=inside_counter){
			  tx_len = sprintf(LoRaTxBuffer, "S1,24,50,1001");
			  ret = SX1278_LoRaEntryTx(&SX1278, tx_len, 1000);
			  ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) LoRaTxBuffer,tx_len, 1000);
			  HAL_Delay(500);
		  }

		  // Switch to RX mode
		  LoRaSetRxMode();


	  }
	  control_val = -1;
	  /*
	   * End of Test 2
	   */
	  /*
	   * Test 1

	  control_val = 0;
	  ret = SX1278_LoRaRxPacket(&SX1278);

	  if (ret > 0) {

		  // Setup Timers

		  current_time = HAL_GetTick();
		  inside_counter1 = current_time + (1000*counter_left);	// when start sending
		  inside_counter2 = current_time + 						// when switch should end
				  (1000*counter_left) + (1000*switchTime);

		  // Read buffer
		  SX1278_read(&SX1278, (uint8_t*) LoRaRxBuffer, ret);
		  if(strstr((char *)LoRaRxBuffer,"S2")){
			  // If bad sensor_id pass
			  return 0;
		  }else if(strstr((char *)LoRaRxBuffer,"S1")){	// 	If good sensor_id
			  LoRaSetTxMode();							// 	Go into TX mode
		  }


		  // Read sensors

		  // Decode RxBuffer

		  char *val;
		  val = strtok(LoRaRxBuffer, ",");
		  strcpy(sensor_id, val);
		  val = strtok(NULL, ",");
		  counter_left = atoi(val);
		  val = strtok(NULL, ",");
		  switchTime = atoi(val);
		  val = strtok(NULL, ",");
		  timeout = atoi(val);


		  // Switch to TX mode

//		  LoRaSetTxMode();
//		  HAL_Delay(400);


		  // Wait for given time to send data

		  while(HAL_GetTick()<=inside_counter1){
			  current_time = HAL_GetTick();
		  }


		  // Send Data until given time
		  counter = switchTime;
		  while(HAL_GetTick()<=inside_counter2){
			  tx_len = sprintf(LoRaTxBuffer, "S1,24,50,1001");
			  ret = SX1278_LoRaEntryTx(&SX1278, tx_len, 1000);
			  ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) LoRaTxBuffer,tx_len, 1000);
//			  counter--;
			  HAL_Delay(500);
		  }

		  // Switch to RX mode
		  LoRaSetRxMode();
		  HAL_Delay(400);

	  }
	  control_val = -1;
	  * END OD TEST 1
	   */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
	  	  			size = sprintf((char *)Data,
	  	  					"Temperature/pressure reading failed\n");

	  	  		}

	  	  		size = sprintf((char *)Data,"Pressure: %.2f Pa, Temperature: %.2f C",
	  	  				pressure, temperature);
	  	  		if (bme280p) {
	  	  			size = sprintf((char *)Data,", Humidity: %.2f\n", humidity);
	  	  		}

	  	  		else {
	  	  			size = sprintf((char *)Data, "\n");
	  	  		}
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
